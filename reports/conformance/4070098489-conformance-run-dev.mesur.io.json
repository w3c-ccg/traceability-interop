{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6c6bf3b3-5afc-4ae1-aa27-cb18b030b9f5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c0a45616-9cce-43cb-bd2b-6eb2c45c133a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4adbbdd3-c882-4f66-a574-f3f773310788",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2098e39a-1b1b-4120-ad69-bcfe069e3539"
                }
              }
            ]
          },
          {
            "id": "2a87c59b-308e-4f94-b669-9c7f3abb2b5e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b511616-7fae-4c51-b678-186a4860a667",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f4df25cc-4f65-4d86-93dc-546cece0e65e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "54b9aaf2-18b1-4341-909a-83b9ffc18018",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9e49ca01-1726-4c49-ab37-293dabfba539",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a70ba9be-c615-4245-a3bd-08d0e45e17d1",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c88217f4-b5c2-40e8-a3a4-f378a80f4fcc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f193840d-b2e6-4403-a589-1bd2e02b38fd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef7d5973-375b-442f-a8f7-66bc5061f561",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bcec4af6-d9a9-492e-8819-df5f6930aa1c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "78aee6b6-7c8f-441c-8739-2997283fda60",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0fe734a2-8657-4cbb-a703-483f2b778acb"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b257f744-3e85-4421-8e24-20b044c43931",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "53d67bb3-cd52-4cd1-a797-a70624fb7a3f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0fe16a5-081a-4e8b-aa18-05036df7d977",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9342f41f-e8c0-4b36-b98f-efc93480a333"
            }
          }
        ]
      },
      {
        "id": "e8c63579-c90e-4941-b7f6-8673714a54ce",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8d7ec78e-40e8-4a5d-b876-228490a0b889",
            "name": "Negative Testing",
            "item": [
              {
                "id": "99d734a9-d9d8-495b-b00e-f586e1dd3549",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3018dfb0-fdfd-41b6-bf97-2e874f996558",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7570ef6-28c4-406d-b0b6-1a2d32f38487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a82f8fb1-fc3b-4e99-a037-8f24c36031d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a1c006e-b5d1-4ba2-9ed8-9840b36abc49",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c8b77c-9697-4202-96ea-49addccca0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1ce28b46-96f2-4dad-b8d8-ce6c46ca8f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3741d0-1cd3-4f30-b345-259a5aaccd40",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e61b31-2212-4b53-baa3-7a69448e395a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49722763-33d4-46ff-a041-2d5d24cb99e0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "368b662d-40bb-4a1b-b10d-c8504c5762f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5634ab43-3171-4a20-b38d-8d7af8238ed3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0584be-aa69-474a-bce2-fb5d7a2ba7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "99f3fc00-18cb-4c2e-a638-29754963b031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87ab7a68-2345-4561-92fd-ac7f8c3b7dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "656425a2-b81c-4b2c-b573-fb46f7cdce54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8714ae0f-5a1a-4539-b86c-5d2184d259bf",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc43fd8-6cc6-4742-b1e9-4263dcb9b9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c1b8fd7-cadf-452f-923c-164bb88909bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a58ac2-3ca0-44e1-92c7-146bf9b1a644",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b81404fd-a542-4f04-8520-1c15cb9e1706"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "719bfa3e-0dfd-43aa-9572-4ece0455d9e1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3a45f6d-ebac-4da0-b1bc-58daf048e4df",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f47cce0-d749-4b1b-a5f6-a303e4671877",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e70cd273-5168-46db-9457-5d460190b556"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6262992-6cda-46b4-b1fa-407f1b87d5e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "603b61a2-51ab-4969-812c-0851fa6c9372"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3464070-6b6a-4a61-96e9-2b3852b87c75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a864050-7ded-43df-84e6-7b0b4ae0a44a"
            }
          }
        ]
      },
      {
        "id": "e2b20cff-9a6c-4bf1-b2c4-443cd5867c50",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "24412a8e-00d4-492a-b40c-1c157a20dc66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "11e5c2cd-4d43-4d41-b613-37f590325034",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ca4d1af8-81a1-4f5f-afbc-cb34aa3955aa",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2055cb9c-de27-430b-bdc9-c4849180830b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c536cb99-c559-4647-80ba-a405694f2055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa47527-1ed8-4043-b0c2-08e6958668af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2bc2bbe8-848f-4d6a-bcbd-8663e68ab6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7af60fc-2a72-444a-85c3-14891a12f3f4",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacef24b-6d99-47e6-ba56-bf0d17bc7018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e2b7de-689e-458c-938f-4569c525fb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076014c9-e5f2-4b2a-839b-be9920ceac99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fad222b2-4935-43a3-aeda-fbfc5de82188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddbc701-26fa-48a7-8109-e860769003f5",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25684cb5-a9a6-48cc-9b71-3280261d4420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f440be94-7bed-4417-b466-19c2833c1023"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e96054-b7f9-4d2d-80d7-069e07a5524a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52f21116-12c9-4584-a206-bb4b23d57782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016b8b1e-d593-49f9-973b-24aed4373ab7",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16228da-1bbc-4aa7-a63e-5b9791828b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41bd99e-5eb5-4445-8dff-ad3ee2e37bcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd35112-ab76-488e-b11a-2891bb3424fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "412a0656-072a-4189-98cc-196b14ab56e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f54c9115-4c80-4cc5-afcd-d025d9d35b3c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55d6ba6-3691-4014-a75f-ea0aca233c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46054095-5007-41fa-939d-6a7b2228a9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9d62b9-7ab3-4bae-bd3f-3adca10767f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b296fcc-0f5d-4617-9a0a-3ee0b668a9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed5adfd-2e27-4ada-94aa-5c4d44793f2e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c186754-8371-408f-834d-c5b1c46884e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da1cd29d-30c3-4ddd-8066-82162b0ba1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2b7ef7-6b0b-4b20-8e46-a11ea3f39501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2485bb1c-1c55-4200-9ea8-341c0a047d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4cdb986-9999-4619-bd14-df1194a75869",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7f80ee-6cb7-4ce7-a808-4c4f9edd76dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ba974f-bab5-4288-a825-73049cc4f4ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca23cee-0edc-460f-80c6-323db2ba31eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "129034ef-65af-48c6-8ca8-e9d216b60249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7934ee-c44f-48c1-aacb-140b8f344df9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5da57b-b39d-4597-b313-c522b5eb3b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f2408b-09ee-4280-a5bc-343d196befaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb52e72d-db09-4f10-86cd-5d1450a21d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c452f2f-52c4-427c-a509-c93a36f15dc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b870d1-56f2-4894-aaee-9fa78b98b190",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22199fc9-90a8-4aa7-84b5-8632aaa64f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b60e9ce-f261-4037-b8e3-baafbc6c705d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b947a53-23c8-4af3-bcf0-ddab352aea37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21079138-30f8-4932-84cd-1cabdaf6f9d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460ef431-7777-4c7b-9d8a-9742160211ee",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2b4f2a-7653-43d9-8104-ccdcd66b0d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e66ae8-4d5c-464a-83f9-a794ef6e7a4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85547fd6-4376-48d2-9140-dad2cdc15110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1473c40b-bc02-4e7f-96c6-f7f940d9efc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d4ad44-879e-4129-88df-e4bf4a5e821e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1983d6-f808-4c52-93e6-674337e10c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c66e6e-e341-48d9-a8a7-49156f9e9287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03edc99-56cf-4d49-b0b7-93eb83ce8380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "22c8097c-6a26-4894-9540-cc2b77c7e10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6a0d4f-ee66-4b7b-92d8-39c992257217",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "358aef69-5841-4840-8b5c-1b9ad945217d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250fb9e7-3959-4092-be3e-9d016fe096f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac40b753-af0a-4125-9fc1-cefbd0c79094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc3413ea-f767-4c9f-9dc3-2d801087667f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5b767a-37ff-4ff2-952a-85a199d940df",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87327497-b704-41fb-aa17-10efac90da80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ee6f9c-4544-46ca-a6df-2f790911921a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c95b085-677d-4614-90a8-9075d263b368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5507eb09-df58-47bc-bad0-ab1812093087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38127541-fc04-4a44-89f3-3551ffdb5099",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a3a900-053e-4bb1-8d5b-9181a91225d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c727d6cb-d22a-4eae-a1bb-cbcf8ff94557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b7f0e3-2434-4b75-8612-8ec6f2430f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc20b46f-ada2-4206-87d0-65a97568c6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8bcaed-e7db-4133-b309-748061a02888",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e3012f-6eaf-4932-ac23-c306d1990df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "624e48d5-0470-4d4f-803d-e81587cdc75f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a519a74-7962-4c30-a841-c90fe9d0471e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a9c9a7d-a973-4199-9895-4129ea35816c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66d4d1c-5710-484e-a33b-e4150f12fc95",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2cf494-f68a-4326-92dd-00b3f0857bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2927239-55c0-4ef5-975a-be03603e3116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76edf29-b131-4de2-bff8-4d79c44e5175",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c3868a5-ff8a-46e9-9bcf-ee5b1befe52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8ac8742-f477-4613-8926-2e709207090e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7dcfdd-491e-4305-bcfe-4710ed157dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc07dad-c1c4-420c-bed4-9c2ad15f19a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfbae32-1b36-40b4-b752-80f876a758ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db2aab9b-0465-467f-bdc8-5cd42371f680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fce9cab-7e48-4ba3-8fea-a331297d221e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b40c8c-4007-4422-bce4-e76dd902ded1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d081b6b-bf90-4173-baf6-08bc75b2b9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a359739-a98f-4f13-85dd-57a0d305d94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f86760a-62ca-4eb0-84be-e1132f1162e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fca2194-7d7b-4098-94af-c90fde1b9ae0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "229bf0b2-0249-46b0-967d-0b5220b613ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe55808-5415-4eb1-8a46-9d4dc8009c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fb09f8-2396-423b-afd2-84e570475b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d17eb3a-72d6-4394-8f2c-d7e69e317558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fad98c99-4fad-4eae-9f51-b196d72b63ec",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948d6ee7-8d30-4dca-aa44-9d0ba6d682a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f114ca1-f43d-4c03-8ca6-ee08a831acbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4281175-d896-4f6e-b95c-efe80d6fac41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d57f86c-d5a6-43e4-b5ec-b62d17394636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9080cc87-0477-4de1-a8da-8880a5cc3df7",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8154403-1c93-4943-a677-03f96809ff61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732be4ad-e70b-48a6-9d0a-2592f48cf437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934e5e80-f9c3-4d33-8ce6-55f0bcd515b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e2c85d7-26f1-4e46-987f-d4b311368513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d604c18-70ce-4087-87a0-54ab94264a60",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e6152e8-80de-49b2-bc5b-3ba4a29fc1cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0547d4ef-4776-46cc-94bb-b97f31dc435e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2877f5-81eb-43ee-a5b8-df3ca82b3445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "607dd67d-c2c1-47b1-b054-397f64651be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "291cb3bf-4178-4f36-8932-822bc94cffd4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc6c29ca-25e4-46ad-8ed0-16b777bb7b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ea39b0-5378-4534-9bec-cfd4291c497b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fd6bfd-0c48-40c5-8e63-4a9e345593f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b032f08f-7406-4ab3-85f7-ee8c6a90ee93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb605a5-01bc-4d3f-9c9b-99ca14d297ea",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c0b05f-7b20-49d7-881a-ca454e121975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b6d698-45d8-4cc5-ada9-9180fc2eb04d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea3fa76-137b-4647-8019-93d1b7e38db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc7c351-10ff-47a2-ba15-63fc594f7924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63274a5-da59-4dba-b01f-9f3fdf8c06ad",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277d7583-3c1d-4eb2-a42a-25ba7425214e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3780dc7c-cda3-41e0-bbd5-aa5bac22252b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb8dbb3-3dc0-4c07-a718-bc92a4754464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6da898c2-32f7-46fb-8c91-259004e4eddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc721a83-c91e-45af-a516-362242da58f8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074b1284-2340-4936-99b9-bae203827147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc79625-273d-41ac-a543-83d9dad6280a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06af742e-1749-4ea5-a587-7357ad3fa943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "54e3fe07-1e2d-4071-a303-cee353f6ee7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df11008c-9d2b-401f-aa0f-089d8d55a47a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "932fb3ed-b406-444b-bcec-48b1b17adc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "002e7215-0c31-42e3-8808-2a350fe2b942"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68cc9f2-7732-4846-813d-6be6113b525c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00dd2e0e-fb0a-45df-b26b-22dbc6e4c95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15caa5c-e4cf-4628-a6cd-a3f4fb53e650",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a03f87f-18d3-4e5e-86cc-c69258684450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bed320-de39-473b-866e-c32158e879e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c110bf50-af2c-4aeb-8714-ce2e397fb88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa06838f-5326-43b1-aea1-a798d46bb638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab9a737-8db0-484c-a64f-064a9fe8f137",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75d319ec-db00-457b-8535-1bcbd78a6482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b8fab5-4cee-4071-b54a-4811b643c7d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c68976a-a696-4e0e-a7fc-57cc0ae05f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1bd57b-7244-4517-8aaf-6380f5c9800a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114ad5a3-9d7f-458c-8434-8954fd530040",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23426447-07f5-4961-89d1-de9af17c4b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea00457-5998-4781-8516-336da225ff19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2988eb-de89-4c57-8be8-f96929067a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3665bf30-aa67-44bb-a625-a2d0ce8f3a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae98162-2f46-49d6-baed-91cbc4db8b52",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3625da0c-073e-4e56-b7b3-3edf3065ab61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf58e701-2e8d-4954-9145-616a947d60fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b450007-76d9-499b-bcdf-c776eea45ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1618583a-aa2f-4caf-92e3-823ee20ca14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28f39d1-a545-4c32-b169-f28133cd9837",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5297ac94-0ab2-45c0-9c26-79109fe02b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be95c15f-5318-4209-a42d-d8bed5808a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8eb81a4-bdc6-4dfb-95ba-88428a6564b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2dbf657-f5af-4049-a1ca-1b06572d30c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e5a482-8c5e-40c7-8ca0-c6700f0abca3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951be125-8885-43df-98f5-afae44117096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecad7f7b-24bd-480f-ba2d-efb98e45a95f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdd7772-9e39-4b01-bb76-8e99c70ce490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb809c9-7265-4438-a331-8637806613a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccdaee67-fef8-414e-ab00-23dea1f1513a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6318f66c-0a0d-47af-b4fd-01166083f5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d4a6f3-bfc7-463e-a32e-dbdd7389bb68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42ca3c1-14c4-423d-9c4b-ce92f28606e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6833d2b7-e438-445b-af1c-8392af3dc726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8533af-fe28-4d3c-9ebc-e8f2599674e6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d11e823-7be4-4674-a526-81e6856e0e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed45bfee-662e-43bc-bd55-cabf266c30bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5620c26d-ada1-4ad0-8fd4-2a3df6b3fd35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a9d2ac-4b7c-4f40-b46b-7836f8ac5cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5e4c90-6b26-4076-8323-58578f9eb3b2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3ef20a-e6c5-474a-9d85-7601770b9da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c508aa76-43a8-4646-9b02-f289e28248ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bdd3c5-bca5-4b14-b4a1-ec4429757632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0134b27d-afa0-4f06-8fa4-12abb4eaa965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef68009-5eac-45ca-a8c7-614fa9baa3d5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d8edf7-f9fe-4e2c-94e6-e2646d3d9d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a591784e-18e1-4f69-ab64-f343578b01ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503faf35-e048-4675-ad9e-cf9398f4e258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "074ed61d-fd12-4cc3-9183-e819ee21f4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c35ecb-f8f6-4177-b55c-21655175e89b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaba8e1b-a12f-4edc-bfa3-dc454e5b05fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc445ceb-dd09-4867-8c37-1b8435a87770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1c2d944-6680-47b7-b9a4-9b0d05c3048a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b556424-e715-4a24-bd9f-10c3595f545b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9503d0-5b5e-415f-a575-1d6947e626b6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b2a2b8-4c43-4100-8d51-28bd232a537d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bafaf93-4c11-4366-ace2-2870a6445829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee80236d-c413-4ac8-b6ac-2d87b8585e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7024025-51de-4840-b11b-4684966d494d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09245c19-d656-4168-b4ed-0ad398a4539e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e470a6f8-4c03-431d-803b-02b3c9ef2549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cceed20b-96bf-4c19-ac07-bc8eb2196aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8384521-58ee-410c-a6af-7c0ebebea180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "04f0aab3-efb7-4ce6-97a6-ed60df89b674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f7dd75-3f42-4a61-8ff1-8ebf9e973809",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5eb194-403d-4f4f-a610-4243a4966d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8b5a5b-810e-4a8a-af6b-df039a6eafb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e0b294-dcec-4d7b-9692-150d08584dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7573f19-0014-4599-983b-c355d0836d19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04c865e-0825-45e7-8134-fd4fff102350",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425d6d4a-9ef0-4797-9f5f-ac68b4a81927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfaf299-1b2e-4104-95cc-432df2bb7bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36045b1-a837-494e-a1c6-c0eafed1ca30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "394fd349-46c1-47fe-b336-7a49ee3bc524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12821852-60e3-4d57-8293-65f03e5e8216",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5315176-7955-45ad-b36c-623bbe28d821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc31f07f-756c-4a4f-ae54-f03607e5c28d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73adb0bb-5efa-4bb8-a0e2-2d442c93106c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "57a8853f-1991-499f-ab93-8d8afc07204a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef0dd20-4160-4ca7-9082-42cf0c4d5f39",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4342df31-3da8-41b5-a705-f547a2dc4207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c35cdbe3-3c72-469e-9fac-9ac34b5930c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e640b362-91ed-42aa-9f7f-67831fc09a3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f837ae-eb9a-4deb-8e0c-b35eae825800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8740db18-dcb0-413b-86f4-ab65e6c7477d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46053073-faef-45c2-b25d-d445291a0c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3805e2fc-a68b-4398-85c0-d6debb18ee7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292ae302-ab7c-4d89-bb9e-0c61ac18dac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa08695-c5e7-4ea7-ad5a-cf3eaf0c9399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745b79ea-813d-4f91-93ba-978978f43cc5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c481437f-3b24-4443-bac8-f86dc9f1bb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208530f6-4219-4f12-8aa2-cf8960a2cbf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1579c98-c04f-448b-9b74-0992780bb146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5d7e91-fe64-4b41-8e87-ab0b33bd4e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd204f5-85b7-439c-8fb2-0baf2fe6c20f",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b2af12-3082-4b8a-a95b-ba8943e59f45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "378ef802-7a5b-4731-b942-f653a193cfd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9927231-3529-44d5-9b7c-73e6b0448e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3f8209-b87d-4c9a-af3f-aae0cfd4e6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6b5b06-83db-4373-9d95-d7b9b74633ac",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c1c8e8-3502-437c-95a3-bf731436bece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785f4acd-5756-4bfd-8d40-ad9ad188863e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3639b93a-f2e8-4fd6-97b6-c48a5b328085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1952b9f4-1801-4fc2-85aa-634e2753af26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d415c69-b421-4610-8edb-515dc5ef4d57",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5835ab14-ca25-402f-9f7d-e3484c906795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c16434-7458-4dde-bd07-1bdf7eb1c3c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659fba51-c39e-402d-b190-9f77343ae639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f197199-8008-430b-9b25-0b24a2a39d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ec4b8d-ea7a-4de0-8b79-84f0e2acebb8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfdac1d-7f0c-46d7-a166-3d385ed31927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ae911c-4243-4ef6-8b8b-8d7a75396b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264ad4cd-6784-483c-ba72-7cfc93ab19e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d226094d-4ea6-45ea-bdac-437ac6731986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af5f52c-442a-42c3-b986-77223d0f4e1b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e294b333-6540-4bc0-9c1b-12c83caa1407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65f9d9c2-60a2-46fd-aa31-eb60447b1cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf70cf5-4f6b-43e3-9d48-8e662b62b8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12735448-c9b5-4a6e-a850-cea8c37cd10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552845a0-5bd9-4070-a4e7-31056355e242",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884f05c4-56cd-4cb5-bd44-e3c847186015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbf71d3-925b-493e-b285-7e23ec241bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043d23b3-15ae-436c-87d9-23a7d49d6a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b3c487-7520-4e47-9113-a71c13c66050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7abab6-3f5b-4b8e-91ae-945aed6b850d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cce86c-b649-4252-a33c-0e9355f1fae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4faf760-e233-40c7-8eb6-c3e44d9cd144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca24caae-5733-4e85-bc1f-16895db03ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "20b4191b-5fcc-4559-b01a-cd183daa1fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a61baf4-c240-4976-a117-731e73f78a91",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bce3e2d-1af0-45ab-ae3c-eca8094eb59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23313f0-ab26-41fa-a5be-57f2974f562a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdbc583-d7d7-4d9f-99ac-e72261988616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cfb43d2-fb16-4edf-b349-aba5316bc341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45e61d9-40f0-4611-ac55-a890dd600e37",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cd74323-6c87-4d1b-a78a-5bea2941c74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e7853b-b1ef-4c0c-9032-b55c86685c4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2e284d-a37e-456f-a1c4-cf4a70b483aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a1eb2d-8740-4be4-9431-c0c5f0fbe9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1e6945-9f75-444b-833d-14fd8855fdc1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e60135e-aced-4574-9b62-ac7a3dafdc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585cccc9-276b-487a-a0c4-32c4e056230a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591665b9-2c8f-47d4-9f70-0f6ec38e00e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c541585c-7a75-4895-9d10-6b4786b7bf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f34f2b-7f06-4cff-a6f2-2e7a61553870",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb30df09-2284-4af5-bdb1-67b5b6b353eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d96683d-b6a4-4187-81c0-95995b8f5afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2559c0-2709-422d-b507-9139aa997d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3bed8347-5862-4e7d-90e2-553207eaa4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c400a3-7945-4df0-9938-bad11f4bc162",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b1cae0-a09b-4d1d-822c-fd7cf47a10ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0636d4ae-0b59-4e9c-9de1-0816c2095270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486655a1-a67e-4cd1-a4ff-50d26065ea66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6676fb0e-ae01-41bd-9320-a5fcdda8d402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e862f99-01a3-465d-adbc-c347ee7d1ffe",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeaadc44-4463-4091-9510-acf620fbbeb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bafb3ee-70c9-467b-8536-d32dc4ae80e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbec4f38-0bcb-419b-9607-260e08c741d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1c06bf-d6cc-4b64-ae60-b48321a0db6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b86d10c-b93c-40d2-a1d9-6a489eac923d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00f9291-464d-4b1d-8808-a9316b2f3ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d83d6b74-863d-41ce-a4c9-382305de80c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9c7648-6f24-4407-9914-2dc78c7e7ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e186d53-daf8-4e7e-b847-c458805079cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e935e2-7264-4c9d-a3ce-2d90cf26992b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7a6c4b-c283-4895-bb32-8b25a0ed3be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ab4dfd-bbaa-4f8f-8d68-89efe05f4105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7eedf6c-8eef-4d8b-bf18-b489ce7a4b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "eda42eca-4c1c-42e1-964e-0343bb5cc0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fe070d-6227-4ebc-a41b-4d8169e3794a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e9b730-ae67-43c0-959d-1b4e3ebb661d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3425a813-eb53-401d-8280-5bd1de68d951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6352f78-28e2-4cdc-8f58-2665894d7d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c549be-2a1e-4588-95ef-4f118f23bdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def4655a-6685-492e-a2d5-756d192cb8fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f615077f-084e-4ab8-9736-1fc2951ca18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8eff04-f965-4645-9da4-c00db751539e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0956a006-0a5e-43e9-9b80-7c3071960360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4602a2-9c17-4def-a3f2-1b3dcba918ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2dee966-19e5-487d-984c-4d09749d9891",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc12748-aa46-46fe-b622-ce58be53c54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bed649c-9be2-4aed-85d9-55875eea1ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ff6769-ac7f-4cb6-980b-b8deba4afff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5f8d23b-80ba-41a5-a49d-66b1d258d333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6df4c4-f3b1-4387-b71d-7ef6e4e81b5b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa36443-b41b-4f8a-b62c-ee9ccfef130b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50bf634d-bddf-4b19-8813-557ad8d8bb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d49edc2-07e4-4da0-9c57-d42ac95450b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "937de60a-736f-4e18-acaf-52e6ac2155ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe8852a-6bc0-4d39-9cef-40cd6fe277b1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ffd622-2629-4283-b7be-f2564721f74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7398619-fd75-4d9b-bd73-02873b311685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5cce6b-7e60-4456-aa95-56648a8698a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "334789b4-d57e-4ad8-b56c-55d21e5f8abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351d6ffe-6eda-47c9-8453-1bf36efee945",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16494ef-47a1-41a3-8f5b-1adb1652b8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8db8a2ff-79a0-4580-90b1-0b862e5b1870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da244bdc-36d3-4984-ac44-47ff72da2427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3449e08-adf6-4e16-8317-77811055db58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389ef6c7-96fd-4fba-a19f-a3e8e7162dcc",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b68d4324-0d0b-4c5b-a406-510f19fe3fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03fb285f-1d51-4612-bdd7-1d883524093b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed630e2e-7081-4b41-8e9e-621e656804a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa1f84d-4e8e-4fc3-8e96-46055a9cfcee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be477e9a-8e76-4096-895d-72cf9bf831ca",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d93c2ea-a131-41fc-8c73-5dfedd0c6472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec81f64f-45db-4848-81c5-f8e044f3c177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c256e1-53ad-4388-8cd5-2fa866f5dedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "764ef42f-151d-4430-a50f-40af11d405fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cb17e03-f4a2-4501-aaae-f498d1bcd942",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7e4e80-a71a-4984-b807-bfd3648f5456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec26411-c530-4409-80bd-60bba1bbcabf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7abf613d-f4b7-4a13-a299-d5c80da716a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e191e36-603a-4b67-b830-48f9dceb57f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a958df1a-73ba-4ef0-93e5-e13687cad0ef",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d74a7d-4d0d-4531-94c7-9ae891dc6b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db2b24c3-61c1-4ad4-a9ab-0a1a4c4ef1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d4fa9c-ddd7-4d58-bf74-cb2711c2ee65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "50f8295e-a0b0-4568-971d-364aad071a06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d180fd-3e2d-4fdd-a820-ad648ff5f64e",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5587db-49f5-4b35-b81d-ef6ac750faa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd98f89d-8d6d-4b9e-a992-22bce5e59242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6fd854-4007-428d-bf14-d6b23bd8f0cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7768ac-9509-4e82-b9c7-95d0fb50f30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8c8e5c-5166-4053-8de2-d2ae79bb5acc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7346c6b0-4500-44be-b5fb-0ea4a9ced9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa49a034-10b3-4592-9158-5415ea4c91e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33af3921-c44a-4ae6-9af3-0055fe3b41eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "230ee52d-6d8a-466c-97d0-aa1994052dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a930ae-1134-42d6-b30b-49c8220eff3e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7baf9daa-2d35-48a1-bb8f-bebd5d5d81c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81a18b0-4923-4e25-9394-bc7338df3360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e68ee23-5b06-42fa-8c81-a6f3d793fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a653996-2d11-4d8c-9e3f-89d2b1e6a14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c1b178-6364-4619-afe2-bb06abd190f2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d4249b-25a6-4998-a33e-3c4d09b3b762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab382e6-61e4-42b4-8b7f-1adb31983370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93aa7efa-1b58-4e7d-ba13-5ed1a3e988a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bd753bb6-e837-4af2-8317-cc7eff78ff02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e6af32-3079-499f-b24e-aa07027082a9",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b183180-449a-4333-8b6f-6afa38b294ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7778d4ca-a456-49eb-a4ab-7c694f0feef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4c6864-c58a-4d0b-a0cf-0e566b754315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92e1c8cf-cd9e-498c-8986-1337a5accf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b823c1-c575-4054-a256-56624952e2cb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f95fbb7c-9027-4f8f-b8f6-7e16101e1026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e981c38-a55e-4add-adb1-e1c80cf71aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc16d97c-decf-4201-b5cc-3b27be1a307f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad731713-d26c-4931-9180-d91858056ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7d06f2-33cc-4650-9b1b-22f660826aff",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4e714a-b192-448a-8ea3-ba2e8932f0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f49b154-7434-4849-a6a0-eb87ded07ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d41078a3-377e-4507-91e3-f8b7a7541c0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c04d0413-3dae-4fc1-891a-d52c80dc2b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056586fa-3d3b-4277-9203-c70a6694a3db",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cb88e4-96f7-445b-885a-d7e3b962bb6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b4952c-8f11-4461-bf82-f97dd21cba30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a21c82-7726-4b00-a64c-e430ff92f51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72aa01ea-bd75-417e-a0a4-996c18ffb6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24548b21-c2f1-4d9a-a74e-ef2657c354f3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33175ac2-05cf-419c-a617-0c8b620f4504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b1e856-ec6e-4586-9ce2-188060882cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b93644-0da1-4d3a-95b7-7df0f2a7b47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a559c384-f43f-4038-b5aa-76e5fc2f54b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce9a369-38e4-4daa-b6c7-ce760a3cd894",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74984fd-97e6-44f5-aca1-1fccfe37668f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e5c9fd-c93a-45ad-b843-7cf91fc9449e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d385da-808a-4561-a282-67e884654e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b9c711-3ed3-4fb2-be5d-57f2ad5f69e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f693019a-087e-4e3d-99ef-fa2448fc1667",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22a8698c-a5b1-468e-9a01-f4ad53e83f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f12a89-0dc1-4f6a-a686-37d0b130922c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b46b03-a31f-4308-b8bc-af87ee3fd19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ffb181-07e1-41b4-aafd-801dd1cee6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa942bd-47ff-4196-bde9-584c008b09c3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac1a98c-75db-433c-a09e-1977d3ef88ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc8eee6-1ec0-476e-b2b5-422db4db7161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "335a10b7-6550-4d8d-9ff0-c1db0a88f96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9261c458-3dad-4e32-8200-59a54ee5b51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5605cf0d-4c50-4a38-a568-f273b3c7ad2b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe4e81c-581d-4b87-9b4e-1814d8d05211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e90be096-82ee-434e-8d56-339d76147289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc48f72-9364-4561-9906-1409cf7617f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f6b88b-7ca7-4d5a-a44f-32a072480e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e77f76-c38a-47ac-9ccd-0e64325b22e0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30d43d6-781e-403c-9b80-9bab7d772920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5c883aa-91f0-4631-99a1-a482bd3db5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4769e2d-70b9-42dc-b6dd-0e5356e9bbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fda1628f-a766-4021-a6b7-5714bc8e57b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ec463a-f302-46c1-afa0-633620d1e825",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2702dda2-cc9a-4a20-b456-b9a0fbf9971d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58dc90d2-eb34-4d9b-8142-7bf8868fc4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e570b9e5-4018-42ff-9db0-76cc8abae207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34bb1223-918e-465f-8f2d-461747a8a3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee156f7-93ea-4f60-aa0d-f2ae62f02fc1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d87fea6-50cc-4b2d-9f48-f8b6776aa094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d60d04df-6b6a-4738-9a8a-4ee77a049ebd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557ae167-981e-4ab0-8610-0d36d2cb7cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ac9e2c-da46-456d-a955-e2d7763d1fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "966ca230-faab-44cd-b7d4-90b4b8ea0382",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "129cad87-1dfa-4cd0-aaeb-e4b207ea61d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6e987e-63ac-4b79-8f30-8dd794c2d43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032b2f56-2680-42f7-b4f1-2707fa012069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba18e73-da6a-4b8d-8dae-47ed713708df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ea7c445-1f07-4508-b4b7-79fc6d69cecf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0747809-4e08-4e5a-945f-002cf79f9b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3baf8f3b-3bc0-49a7-860c-b10fa5dfdbe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d1b38f-01b2-4830-a0e1-97208f7de828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "47f654b5-3c4f-4527-ac5b-699379c5ae43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "401916d8-c9a7-41c8-8153-b6b2480711f5",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24d0b9d-40cf-4770-9b4f-061425eb59ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3f4093b-9554-48ac-a373-150bd58fe143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6839681-f41c-4668-9f39-3b19cb0fe854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "558e2238-ae0e-4820-bfc9-ccb823e1378d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254d8ce1-336d-45d5-8422-e7b328a41309",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9188ac-e840-4518-ac21-7f242643b686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f678b4-2e38-423b-8680-857b8e57d9ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "138a297d-849a-4a94-8348-14fa0c999f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "55f23feb-1bdd-4d3a-8e32-9ba312787f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b69414-e512-45fe-b4de-4714970341c3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ceebde-731b-496b-8039-b6d313ecd965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e8c530-196c-48b6-9a73-3ba592444311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7946daf4-39b3-4266-826c-08c732f913e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "722670f9-61fd-4bdc-a906-f21207a71a32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282f402e-ac4d-43f2-a2b6-bc1c35cd00b3",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b28091-3735-4882-b236-0fc24a39c494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17af46ad-e603-42cc-9f15-61f227457129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "550b7a98-48c2-4a4b-9022-d6ad1bf6bac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5887cf6-796b-4228-b611-481e0f63d7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1133078-37e4-479f-94c8-2e5b22e9c37e",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "951dda27-5f6c-46c2-80a6-0972ec87b430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "164ab259-595f-444e-8a8c-ffab00509b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab575b7-9c51-486a-a709-0f944c1b4d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b52a67ec-14d8-4c39-99fc-2321d3483b54"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5d487365-4dab-4d4a-b25a-71f2f12e212f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2627b7cc-a816-41a3-b88e-84fb01f90dcb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6365d5-8598-42a3-a59a-143eb0acf7e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "961b81ef-5e7d-45cf-8e5c-eb204dd670a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f46605bb-e311-4073-b140-0da0099db476",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "167c0f10-0fef-42a4-8e95-d77d537e4600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba96b168-6f07-4b74-929f-5282547adcf0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f392f20f-027f-4385-a16c-19c92d7d32ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "288794c8-6c11-4ddf-95cb-86aa9251f965"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9e2eab2-ab19-4e28-a037-13fb92308429",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "197e3cb8-9d54-4815-9d6f-77e9efb8cf03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af8530d2-6b50-4a4c-b959-8a2759d6aaab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10897ee3-266f-45ca-908e-b39d17b1a980"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f51ac28-9f8b-4e61-b57f-1805027c00a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8603af96-61e8-4f92-a55f-706748e5adb1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "255e86ba-4952-4511-8cb8-ca32ba8a9db2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "529f29c1-0fa1-4db1-85b2-869a45bc6263"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fa13a575-5dd5-4ecb-8ada-652ddc18debf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8dcdc51-6b33-40f0-8b33-a2f75b3575e6"
                }
              }
            ]
          },
          {
            "id": "3a6f0113-bae1-4fd9-9fc7-5f5db0292e50",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4bc7819a-afd6-486f-9a8b-799a167c89da",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78edd246-53b8-42dc-b12d-3d2998322d37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81e45a32-c7fe-4bfa-b3d8-9ea5cb839f41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b470ce8-e13f-496f-a8b8-4309548377ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "506929be-5d16-4a31-92b3-97d42a6ac935"
                    }
                  }
                ]
              },
              {
                "id": "09dbe6ca-4802-487b-ba88-50ac8374fc94",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "455e2ca2-6bc2-4253-bb05-48679dfe2d2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d171339-3324-4832-80c1-641facc7c4e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2391fb6c-d105-4c82-9e44-712cf9781b07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "01726127-5958-4079-8dd3-d2daebfa217a"
                    }
                  }
                ]
              },
              {
                "id": "829aa079-22a8-4a5f-b888-7975cab351ed",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b76044a1-fa75-41f9-bef3-a933ed37cb01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b74425f7-209f-49dc-8d20-f9a27eab7f19"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38ecbf4a-a5b7-4892-8452-b4acf01c0d5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e3ea30d1-04f7-4a03-b899-56249e22bbc5"
                    }
                  }
                ]
              },
              {
                "id": "0f5b36f6-6626-4342-b36b-f8f741fd83b6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e00ebbd7-da5c-4dd3-93f5-3d08b7bf254f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95c34633-1518-4a87-9a81-b2a3e37cf149"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8fa844b-1b77-4ec5-b3a0-fa096410ebc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "79905c8b-b330-4db7-83d8-c2e022e3550d"
                    }
                  }
                ]
              },
              {
                "id": "c273f080-1f35-4e7d-a819-daaf8fb05dd1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27158dc1-d9b7-4713-a940-e924352e847d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8e0872b5-adc3-4be7-87b7-0c3c70226539"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b01b12c-278a-4697-9b9f-0b0c911f3018",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "473a7b5b-6ddd-4980-a96b-35df1fa02939"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c57c55a0-56e3-4863-8585-72a56f5186f5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4aa8f73a-8606-4ee7-9485-f5efd84b206b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "170c3f93-88d3-4f83-8b2c-a28472a55b0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "47bacfb3-2b62-4386-b308-2c7055579a64"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed5a8c20-e150-42b6-aad7-4fa8db918663",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "01d94e0b-c4d0-4cc5-8225-5c9ae8818313"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7e439b8-f482-42a4-bfb8-6bb1697d0bbc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "efa924b8-f401-48c8-8659-501430bc9d43"
            }
          }
        ]
      },
      {
        "id": "98896cba-4315-4510-848c-eaae39ad6726",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ab899f63-6833-4c15-a80d-c26fc85af249",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a73e063a-1e10-462d-9960-6057f3ada19f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eebf5328-db2f-4652-805e-f95fc5d09a26",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fb4e47-44d7-42b9-a89d-502f35b2ec34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f634165a-51d7-4979-959f-e2e3e67dd6df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0468240f-9782-4493-a564-f8b2d3330095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "459efd9b-d860-4b09-887e-94e08bfb729a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f17777a-9cd5-4e7c-90db-51f41bfee96f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed7201d-7d60-484e-97e0-e296f1728580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ae98dcb-317e-4645-bb94-d3eac1003bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6150bef-f773-470d-8288-1b7b1aa4a515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9441e893-77f4-491b-ae99-1b3a8b410090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f220b9cd-9aa9-43dd-be70-d5988a4d81d2",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f52ed56-afce-4688-81a6-91d2dff2cbca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7caf32fc-95a6-4af0-8373-80111f701109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eeabf91-c362-423b-806c-934fc3aeb35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6410b930-0573-4fd4-8464-595638cecb37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52546000-e32a-41c3-ab30-26423e795c7c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a596025-fbe1-473f-ac84-a1c4886114a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6eb8fd7-364d-4e4f-95ef-4cfbe44558e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4067fd6-c583-45cc-8484-81e9143201dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b69396cc-b540-4748-afd9-42e837c1304f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4389ab2-f488-4367-bbda-8d4bc04bbdf1",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8553ed-b5cd-4243-9181-d3b2135ec576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266dc642-7242-4259-a5a7-4d2f077e23f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b33fd6c-b02c-4364-8cb3-182ead746c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1be90350-1e8a-4205-b3af-d823d1843323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b343b425-86ce-4f6c-ba56-46b9ff074b73",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776988ac-f832-4872-bb75-a26567f88140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ac9206-8668-40fe-ba96-f990ad9b4e99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad15ccb2-fde8-47d6-b3f2-c0ca7ce0fa4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41ab6509-f179-4e37-aa33-d3213fa35331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86003cfc-21e7-4fb6-a3ba-dfe504a2f856",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2be4de1-919e-48dc-9ed3-ea9a13699eca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289a1e05-0ca0-40f7-90d2-4d2fe899a204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0d921c-2fa1-4e85-8147-eb97062fa610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca1ce039-5419-4b18-a3d3-c49b197f2415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb306dc-ff4a-497d-8474-dd3ed211219b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9b332d-efc4-4ade-8813-a8dcbc066d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7613ea5-317b-407b-9eac-adc7cc21f50e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6c639f-2928-4eac-8f16-7079249b9d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fa0dc4-6f8c-462c-ba20-242cff3e9f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5e62f1-a095-4d3d-ac3e-f18eadabfc9e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69762b14-2556-4a1c-8de9-e2e092b2c5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c540e25-2285-4a64-8dc9-b98ace10e081"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c8a06d-b1c4-4e09-bb8e-af7a0b5e54aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d408054a-d6bc-4a64-8fa6-4bd7cd058a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f46b54ff-af94-4e13-8fa9-e1523afadf66",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0e44bb-a47c-4a12-93dd-2d88211db419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6a731d-3fa7-4a35-8dad-815d246cd4a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe24dff3-6fb7-41f1-9c4b-3f51cf23046d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5f8072-8397-46aa-b747-db3fe83d7370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15808f6-5ab1-45d3-8be9-62d473162d32",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3033bc25-bcdc-466a-a43a-41bef2548faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00661cec-fd31-4131-a366-a59cf663958b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2f82c1-9f65-480b-b514-3e9feb1edf3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "63648e03-5b9b-4d71-adf8-e396587e2bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab036dc5-70ae-4815-8ad5-2216305fbf24",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6937dfa5-d6de-441a-a02b-f88470587ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf4c4e8d-eb2b-4c3a-98be-9b1e548a6af3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b971f5f-c725-40d2-9ec7-da11bd24dc2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd09ccdd-9e97-4f10-9bce-b7f8a35ff078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66712cf5-578e-45a0-9c38-f304c1b60382",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b2741b-2e7d-488d-a810-24316c42088f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d4733a-f6e1-495e-bb2e-80db95f9c7d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b61e69a6-47bf-4677-83fc-9a140fc9d11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "207581b2-458f-40a3-b7ac-d9bdea3f3543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8b4692-7d72-4dd3-babd-e1ae7db898c7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf7ff9a-80d1-4c8e-837a-629eb7df0e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b3b8ed-d0f2-4aee-a068-98bddd8e6199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b7fee3-689e-4058-8c95-331d74075bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ac7a7b-176f-46d2-9ecf-c208c51cb801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f43a704-833b-43f4-8957-77cf89ba8465",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64d1438-b994-4210-a531-57ddf34a1f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ed38d7-72c9-4592-8ad7-bc6d2eec8a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a15280f-52e9-4333-b397-fe0bf35d12fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d83dc6e4-70e0-4b4e-9291-1749d267002b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e6d40e-110c-492a-b955-0a60b5195f3a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060d1af3-363f-45a2-92b1-a65ecc77d937",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e425af24-b8a7-4bc9-a09f-c04c1f32f3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fb0160-2b6e-471b-8232-0387c416ef28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "80e62aec-6a4f-4728-8b52-768ed6799931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640d161e-2e3a-4198-9db6-0ecb4fbd7f32",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "063265f7-16a0-4ebb-8e20-f45d27745185",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d7fbc4-b72d-479c-ac3f-826418b72f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b64c1ea-617e-4e5a-bea5-78505a16c586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3455b1-455a-4a8b-8097-02a2f008f484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d061d506-33ac-4095-82f0-fd678248ee9f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0170e9ce-fecc-4f06-b40f-1e0bb79a8cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee373fd1-d448-4985-a096-cbaefcb3948e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ed7ece-a0bf-48b9-ae2a-f78e4922bde6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8537c596-a43d-4d72-a5c1-e308714791bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8d4da7-9174-4268-b2a9-dac6c5534155",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ec2213-8fcc-4cad-b0aa-0326d3baf535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796c678b-c3a3-4b42-be73-ffe7f828a878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4777354-3f8f-410c-8d3b-275d0323760c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c2e6d7-ad8f-44db-9318-41d804ce1342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ecee3b-f450-41da-ae12-4c40ba3f3e8c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed53927d-1fcb-446a-a417-84bd0f006685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39cb057-c43d-4813-9552-2686b45353f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6bdcc03-bacb-4cc5-9e0a-0a3d9243e54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3fad2a-bec9-4189-95ee-5feb372315ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21505e06-cb11-4839-8521-2c09011feffe",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c30c41f-8f59-41b7-9ccb-ffe0e00829cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c088be9-6da6-4ec0-8865-778447cfed33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b73809-9d3a-4993-b6c1-c474d9b51632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da3d3ce8-89ce-4ebc-abaa-1fed843d199c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8a6fae-2163-4c53-93d0-86be15468908",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a996cf8f-8153-42ff-8463-e430fde61461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95dbf170-1218-4b8b-91f5-7ccf3d14c95e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f00565f-2b56-42a8-bb9d-da7dd5f42b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecefc132-479a-4ddd-b680-2fb4b83e882d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ae5b39-430f-40d9-81b7-f4084824107d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f1962f-a9d2-4483-a32f-3c19f5a94891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d00e534-a78c-4922-91cc-8c8e53789b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b0f52a-9b70-453b-bc6c-e963c333a626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac51a347-3fe7-4aae-bd8a-bc243bade01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8a1aab-d3b9-4b13-93cf-03309345766b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf2ec85-06b8-4ef6-b8dd-401a15a7e199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600936e1-5d3a-46d2-9f06-6bd2331b42f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e92853a-44ad-42d2-ac63-5d5a0f26c993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4447b4f8-0db1-4256-b190-f10d67161d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9771b9df-304d-4515-9849-8e0a85e5b46a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a97bc14b-e040-4a68-be0d-ed62a5e6c119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036b5735-4df8-4fc0-97b8-a11b13dcf9ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31aa103-e199-4259-90be-84ba29ac4888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a915ec6-01d9-4476-b24c-cf11d032b6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d690729a-61de-4d91-bd56-eed52ad7c84f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3536e473-87bf-445a-93f1-ba9c7b210abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccddecd1-aefe-45f7-97b9-78775d0568a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2cf9a89-b765-4804-98d7-20819617f373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70192b5b-bec4-4b8d-88e9-626bef01ceed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ebbf1a-b584-4055-93ce-deca49d7a287",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb2c990-fffe-48ec-8777-dbbbb77efebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcb372f1-51c5-472c-9c2e-953c8bd59305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93e76b5-6aab-4f2e-ba93-4a56061fe387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9ee111-2699-40bf-8216-4d5744c4f76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409a489c-f68a-4916-8103-b6f4a42ab7b9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a964b76-2bdf-4be0-8dad-85013f523eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77fc10ef-e3cd-412b-8e7b-a8d3a0d4f3c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1fb073-e1ae-4d0e-8ae6-019ec66bd9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c77c2e3c-b3c5-4be1-a352-24f41f645378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94564092-fa40-4c6f-b983-16479017801b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b314648-ca7e-486e-9377-bfcea8dc5652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff3c0156-f5fb-4759-a5cf-9115e3af2d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56209c24-6b03-49b2-af8e-3171b2b4b376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fc6f3d7-4b93-46f9-9dd8-fc673314d25a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7102f9d-d24a-40ba-8149-27e3e9bf47aa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739f0a34-15a6-45df-be78-3c1ef3cc2c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82e3c7a9-c8ef-4b4f-af9d-4d734645102d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae3f38d-1102-49f7-95f1-993b671d5818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4547916c-97f1-4b8d-a80d-bfb7e48ada24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27663ddd-e6bb-4e2d-a549-70f6a88371f6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49183fd1-fac7-4928-bd5d-56bc6061248a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cd8c04-7ad1-4f3d-b72e-daaac5a8a199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26dcf7be-201f-4304-aca0-e6ee3ffe028c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "366f6195-64ca-4331-9406-222bcba68f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c742e3f9-b648-414d-8e41-8bbebc60cf67",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "873e32bf-3a84-4397-bdbe-42a4a6bef46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1be6d9-de63-4f5b-9102-cf88cfd96a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611c3140-51a3-40e0-bbe4-c4fafdba20f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23f0c008-9f6c-4979-8fe3-078b8fea63a7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d5fed64d-22c3-4bee-ac8a-0a8c28ef6d66",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "01b3999a-c62a-448b-9345-385c5212717b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca959f9b-1631-4c0c-aef7-6a49b29a3148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a2db34-a8c2-4302-bae6-ae4e0f7585d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fca893b-09c2-43b5-adc0-dda7680a1a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "609cc650-147e-4914-999e-148747b26dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7265574f-0c3c-4546-937c-7254e81925c2",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119b98c0-c4be-4094-958c-db8a9b0dafae",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "76a8f885-3bc3-47d3-a990-8812a7c76953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c8565d-6541-4ea2-8afd-af3de37f7999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c83c077-4067-4440-91d8-937a827aa256"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ddb751a-75ce-4f40-bd17-8e090081b17c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5970f7c0-b724-41d1-992d-199455ac96de"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04f33d47-685f-4239-b7a7-9a6f8aa128c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8d5766f-7483-42f1-b27a-2504b9ddecb3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b68a2df3-b652-43dc-9500-7d7f4c7c55ca",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "92a70824-d696-4aac-8195-42e01699a955"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d192b17-8782-4872-99a3-bfc241c9c08c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "237a5160-00be-4738-a279-a70bcf0088a1"
            }
          }
        ]
      },
      {
        "id": "92374a70-7a85-42b6-8448-5b2a15758510",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cbac8177-a126-4153-b5a7-a94b7d6d5675",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5a49d3d1-83f9-45e6-a66f-175784d1fe43",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2f00e818-f650-4abc-80ad-78c2a5ab7f82",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de6ae71-5bc6-4527-80fa-d67444c8064b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522355cc-4ddf-41c7-b9ef-33d88f248fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f517c471-1579-4a51-a22a-95e37218cbf6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f02919-1c51-489f-b527-cc35364ab7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e849782a-8cd0-4267-b917-11c6ce82ad61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d7ec85-1140-48e2-a6d8-89744efd6cc2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159daa43-7c0f-46b9-80bb-dc49d8b8bb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ce9d3e1-85c9-41c1-9209-57af598e8e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c287f083-efc5-4d95-9ded-0899c3afee24",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61ded36-9003-441a-8178-ff0890136ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62728ea1-5358-45e7-a607-70f9ef97397f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a965a0b-3d80-45e7-9b3b-f993dcaa9bb0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabc8e8f-c64c-4de2-8545-955c038be8f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1839dcf-3fa3-4267-9e07-38c3e661c4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb68a0c-a39d-4e5c-abf8-2555c45a8519",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f885dd-aad9-4da8-819d-f299dba291da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "285de9e4-2d78-4bb9-af04-ca281c13228f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d68a01e4-e596-4be1-9220-09263fa81d21",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c153c516-a5c6-49bd-9c45-8f66a9e0a944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aab1051-ab56-4e15-b3b8-9de485a16c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d046311d-44e9-4f6a-a8e7-f5b443407c09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9574ebb0-78f5-45ff-aa43-d942f3a09833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30ea112-96d7-48f5-bf57-58448b225e36",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3887a6-026c-4646-b788-975517fe59f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd243c5a-4f72-4bf3-86ea-2114e252dbe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6a4080-1aca-44c9-a2c7-069d44381163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecd76007-a611-4a03-a004-8a55890249c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352aac07-f961-4153-8482-4c6c80a4a398",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4039f87f-2c15-401f-9633-fe9691ff8ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0acfb0f-12bb-4747-81ad-9d4b1e4466ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca18de2-7f41-4e24-8a7f-38b5eefc35ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d6971d-3738-4b61-960e-4dc06f67060a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64912d13-6692-4872-be1c-fae5777e774a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03788524-a475-47b0-9221-63e1615a827a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7e77d0b-6aea-40ed-9e65-a28f667e77ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c246a346-694f-4e49-9afa-d191bf8919a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b154bac-5eab-4812-9a5c-303611878e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "116020b1-7312-4ab2-8366-7896891eaab6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f2530ce-c552-4b84-a3ff-dfa0ece48d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc9db9d3-bd71-4cd4-9419-7a9f1248e15c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7d73cc-be46-4ad4-8fcd-81870d1c199b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6db7f53-7df9-46fa-ac17-aa5f21dab7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8472a8d1-b156-4f39-b7e2-06cb95c9fb35",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434f97ee-1b24-47db-8417-ed1ff2338eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e6089dd-3001-4295-bd2b-909f121e6865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4b935e-410b-4af2-a8ba-3686dd4c0a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c447e8b-2388-4baf-a098-e795ef7301d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3aa403-3f62-4e68-8e20-6bb91fc5247f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f0f8e69-27fa-4d53-ae2b-9315f69d821f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cac8649b-e186-412d-91b6-3010fe49c55e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd88068d-a834-4225-bc4d-207e112e1e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23afa61d-0cda-40a7-b229-05c7d79c4ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb7d13f-c771-4c1f-870b-b7608769bb3c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86692cfe-31c4-496d-a530-942e35f05289",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e26a394-62b6-4686-83ba-fcdf1024d4fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e43481-5539-446e-9fcb-d63c2d75ff05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d94170-1bcf-4abc-9ccc-d87ba9d53b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6fdd2b-8c49-418e-86a2-f550d5c5e91d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc8ecd54-8e50-4423-b3e5-368471e41fd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74c2ebde-5f12-40a1-a64b-6320de534af9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b3f6b1-0c21-40f9-9395-c8ab6be2955b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b04ed480-2472-4664-88c4-2ed8f5087f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdeda19-a154-4e61-8748-f509de69e241",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04302436-2363-457b-8cb2-449d42ccaf53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53e3025c-c890-4114-9934-57072506ba3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c6244a-54a1-4a24-8d2c-0049e126d125",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41367aec-b722-477b-aae6-53643ab32da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f41b2d56-7841-497d-ba05-977c6b6f81a6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee8c90d-21d5-4d76-a2af-acb344c76adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be52285-d446-40b2-8fa7-87c27c4b61e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdd87bd3-4ed7-436a-b537-2ccf416be0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eef6feb7-49ca-4e55-9ba9-fae8054a8a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fa7f9a-5570-472f-b3a5-5a8ab8c5a4e7",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03f52ba-4eef-47b0-8e50-eb626ba31920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f0fc49-e137-44d7-b17e-844d843e567a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa6f4f2-78ff-4b82-ace0-3f0a0ddc6016",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df034edb-2812-4e98-9c26-c81e34892af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aefcb80-8085-44a3-9c4d-f676d912ff04",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b080b5c4-ab9c-4fe8-b632-0c3eb2507097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c357fe6b-fc77-4344-a606-5cb988fdd703"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238f83cc-e1b0-4bd0-ace8-3ce52c5fe1f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4e37f41-a6ee-45f3-a655-777c7c320961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba450a8d-fad2-482f-a0b7-c10cd4dd8382",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b478eb9-229b-4ed3-a4fa-07e60104f690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6843b360-2ea6-4427-a783-74dfadb233ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b289d23-19fe-4a57-9a80-5a3f6307dfad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c3ed435-7050-4013-9df2-97c3dbec5a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6987d72-99d5-4249-9d3b-66743e986cd2",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db30bfb-df98-49dc-a3ba-9b1a99196b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799a959f-feaa-497a-bf29-ff2bdc0a9402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dabd618-f97e-4fde-a1fd-75e699258f1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea6a7a8-b677-4c76-8b1c-18cf05dfba4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d003c3a4-b126-4855-ab04-9f0404a71583",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5c3764-bd2f-4df9-9bfd-2fd1be9ed6fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9523edd3-45ab-49f8-a6fa-a557873d3e38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "844289cf-5303-4ab4-a26d-17c1c3c10954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ed8ba30-f63a-4651-9027-5a194f79f2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352f1977-df60-4794-a296-4fd408356048",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49dae1e5-9cfd-43a8-b064-0be61f3d388a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1a3131-6ffb-4baa-839f-4f17e8e01692"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7f5c38-df26-4303-84f6-7a00785a6ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2559b8f6-e55c-4b0c-8bde-08373a358692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8028c11-09ec-4755-8603-523eefd38d91",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6539588-b0bc-4f1b-847e-cc8b97703810",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82e08f8a-ee5a-44e2-8170-d2b57efe388e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d90bde3-5841-4d0d-ba5c-8c3c194decd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c36d79ff-d7de-4e70-b97e-032adaada39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216b9c95-81c2-4bc3-a532-85538d179b5b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e05f30-4267-4c62-bb13-70fc248afd77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c4e4477-9837-4e36-82d3-d1af19f5d299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd76f1af-9634-4907-8f16-08c07d1304f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801a6665-0038-441a-b923-5e3c06ac36e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d69be8c-7415-4d7f-a2f2-605a78d4c8e2",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459592d3-7f07-4e9f-8ecd-7f233c76927e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "543f6008-4e63-42ce-b462-038f4d6d18e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824babb3-65aa-48d1-aefb-486abcc8d6ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb42d1d8-e9f0-45a6-b9a7-bcab3facab43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc4e739-236d-4b21-a468-1b706349a88a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14279c48-3114-4de7-b34c-7328e05d9ff8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b529799-2cb3-45f4-8ef5-786bddbe6992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558a500d-826b-4326-bbb0-4f127428d7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953ea0f9-bcb9-48a6-b7d2-945f65340f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e00517-7c94-4a93-9719-a28067641d17",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ce9a84-47ae-440b-8bfa-57634b2ac785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f67d832a-d760-4599-a097-d8fda5f989d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34825986-6dc2-4ee8-aa6e-1a398c71b2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e002e2-b5eb-4586-a38b-410febc7a153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a572651-7356-483d-a19c-188428349761",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8eb88d-5323-42d7-8de3-4106b19760f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46214617-88b5-42ca-9dc5-183ceecd6a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3dbc8e-abc2-4f7c-8694-fc50038ffb42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c1b40f8-07b1-4013-920d-e826999c1171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79847265-a093-427c-8aad-b6a004a3dea9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c719170-344f-48d9-bbed-4efc3f3b9dbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f992fa1-0be9-4e68-9946-fe59b67eea31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62293f17-3b65-428f-b2f8-3b963b1792d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65bbea85-957f-41fb-9329-06015880601b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc38b83-cc49-4512-8a08-19f84b01c69c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e295163-2dd4-457f-b26f-d924302e6382",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba838a94-e375-46dc-bbba-e86d65338ea6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4a04c9-1cf9-45cc-aacd-90906d4b4ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2bbfd2a-0aa5-402a-9471-ae9b3888d0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b8f74c-a8b8-4aa9-9657-21900a3dafd4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d426359-fec9-4652-8c09-48f285967e97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6477456e-dd19-4be6-9107-ae1c8dd4cd05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c2ebae1-28e5-4577-b688-bd6e2bea7da1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ae5c292-dab1-4559-8cde-bfa39c2f1f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64606ea-4409-4740-aaa6-5063a88a3437",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2051134a-3aca-44ff-a37a-3671bcccf1ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b8d888-cd43-43dd-85f2-a3caf9d34a2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5073cbf1-ca04-443d-96f8-834d19605fda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bcdbc05-8f5f-40e8-9349-5404d81ff787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bf10e9-b231-4a9e-903b-22a507693f5c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5ea481-15c6-4e6e-8961-dc51933428ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c530e623-a61b-49ad-9077-692042f138e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2299b67-128c-4bec-b2e2-a47def0c1d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6a3fd9-1745-468e-845b-b612d7d3d46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb8edbbb-355b-48e2-a8c7-7edc041cbef5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3527ba-d469-49d5-9204-7cc2b5f0510b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41bf5258-31af-4323-931a-c09d92d62386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599482bc-1688-433e-b17f-f99cbc6195ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07bca7f6-82f4-4783-af22-87517562aabd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b2e746-b110-449f-bd08-5b87134c5cce",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c95a0a-5a45-4449-aab8-e2a2ab5262a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d171fc99-9447-4ebb-aea3-16f0a2cfefda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fc6f76-670c-4f85-911a-e79f412d1c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92ec5f04-84c2-4c3e-9429-79245e56faf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3bc22d4-a7ad-4a8c-9506-a074f53e6603",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ab7cc0-4347-43e7-86d5-7cf6001abd36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b50c43-d919-41bf-b2c5-3ff3f5ce48fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e7aa5f-5b8a-4167-a125-b2502f06fbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0e73a0f-abf7-47b1-8640-3858d92d822a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7272e0-f370-4b25-b08b-72fcc6c8870b",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e42daed1-d870-4f06-b8fc-e098d938e1ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18108ec-6963-49f0-ab64-032709a2e51f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "690a6e84-4093-4724-850d-d7bdacb8e2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe66cc49-b4b5-4119-9021-324c05a815c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf267fb-b1fd-4fb2-aa0d-b40c7452e14b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8caa7b0a-a39d-47a0-b86c-499df3e9b02f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d49b7a-344e-4442-add2-cff00a0d7017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15320bf7-ab46-4086-b06b-c2990f5ff42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437cd382-3ef4-49a3-9feb-2d1bf9135d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4d83df-b401-41f3-ae88-7373a39ff172",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3eea74-d10b-4731-a93c-c95f5f3db668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06beb8ed-52ac-40a0-8f81-769164d96cfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcbca38d-7264-4ffe-b7b0-e4010587fa19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73252c31-4c63-4ce3-910f-694ed16511f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2522a7a4-9dd5-41bf-ac75-7203b9799c8c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e994958-bc19-4674-ac5c-ffd16d15fc51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f50ca6d3-2d66-4b03-bc11-e625b8fe5e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e46579-acb7-4361-9175-fcd324499e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa6c531-ad0b-4726-ba63-3f69ec4f38e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd96083-4864-4ca8-8c0d-b1da07945fb3",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9290fe6a-4f42-4658-8e91-3e61c9397396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b184f8e7-21a3-4322-b5f4-1da8d6823d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35c243f-b797-4a5c-8fe5-545bc0716bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e71a93-4991-4f25-b697-c7505e36210e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1668faea-0e00-4439-ab96-27a7e304dfc0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54c1344-3a25-4b02-b1f8-7b94476ca46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15fdd87-92df-42ef-9223-414225750470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4baa076-ed19-40c0-86da-d4d8cf5836d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abde23f-6604-49df-8da7-93e1f7530b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0aa44d9-6c95-4abe-84df-4eadb0f9f248",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4268f30-7613-413d-a8c4-f7ed1a2d2c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e10d7f9-3bdb-4fba-b39e-cca490582d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba227b8-84af-405b-8f7e-cbc9d1e4432e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df86e55a-ea00-4b2b-878d-88db257ecd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8328e010-5a0c-49a0-99a2-ec842955d4e8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98944dc-1e15-4ff0-b7df-e8547dacbe61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d608156d-dffb-445d-bed8-2f7b62067568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "321b1c4c-936d-4013-8a3f-40e53d55ca31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d38ea4-7039-40bf-a53d-e078faec0f4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c407de87-1187-4be8-9602-198be37e758d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f00540b-7136-49b8-9d57-3fde53687434",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7410cc44-5c3a-49d2-b539-d3739f87b1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b247dda3-d21c-4e4f-8428-8d7e21eefbc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43fb8ef8-b70a-40eb-bf01-37f7b1429796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84892928-6bc6-4bb4-abca-d52402f00a48",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f92340-008f-4056-95d7-7047005440a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe452d9-3a2e-4e03-8ca0-269228ac0b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bbd0ce-8afb-48d5-b0b6-af0f88f2b04d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ace8004-6674-49f6-8bae-26884b056422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1cd04e-814d-40b1-9e7c-b1d2751bab28",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1521de2-58a5-4c2b-a628-7feb005447fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff7b7b6-fc6a-492f-a0cc-3fd395e2b927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c09633-2685-4474-820d-ab06ea53ca4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d82bc5b5-e056-4516-aa11-447651828c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fc117d-8a03-4fbb-89b1-8dec2c7c5702",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "055a605b-edba-4892-9578-27b505f0f817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b89834c8-c6ff-4a66-82da-6f545be49ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275b91b9-ce3b-4840-acc3-120973e1c1ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1645d04-b119-4a28-87ed-9e5f169605df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1953b1ca-c443-44a5-b27a-186f1356e2f7",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c5d6f54-9dc5-4940-aaf4-7212d4cda638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891ebb4f-83b2-4ee5-8c29-fdf1b1b06090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6096d21-97c7-4ed8-90f2-d615d84fcacb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb10e282-813b-4767-a400-6feaf110b848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f671a803-fcfd-402a-a356-36549872acd8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7901f0-6ed2-4668-aaa5-7cf532406f47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a49beab-9bf5-4b69-bb04-e4755a44a7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310543af-c694-4be8-a5ed-21b8a143473b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c1e629-b8f8-4b1d-b9a5-49be2a9225f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d542728-e421-4bbb-92aa-36002e56c93b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4840497-4751-4a43-8cf5-d961200403bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ecc0d59-2571-4c15-ae7c-28d1ef5c18d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e6fe1d-3f6d-4cc2-913b-b15aef755dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94cc055e-5246-45c1-abae-1a2265eea791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc30fa9-f854-4eb0-9ce9-3984518e9b2a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b77aa56-f51c-4e6e-bc08-1a5342ecc466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f977dce4-5e11-49a4-8463-11c1dc583ecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4354f863-7d76-4051-a6b3-bfc1898fbc8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493377ec-7486-495a-b540-9973db3b77af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626fbf98-ac3e-4e26-b975-1f6202791a1f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badf2526-1bf5-449e-9e60-b2b0d28a5b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4938c48-374c-4bd4-b463-015502061cc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c694e434-5c0e-414b-84f3-3b272b7cf6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "926eb124-7ae7-4e82-9067-96c2203e2ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544ba938-2b89-4eb3-9c50-855eb1ccc5c8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f88d4f-8dc1-4513-b852-0e63c221b9b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abac2d6-4d28-4e7b-9343-735f5309d795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cdf683e-5337-4215-b492-e790c688988f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f17973-7950-410d-b02c-4b83c39143f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5099195d-6f3e-444b-a6fb-2eba8e957642",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9d9239-ba04-44fd-b29a-13c2e7b9e152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "445899f1-c9c4-4595-9454-d920a4848a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e801c6-d1ae-42ab-a16d-927c5a3a8219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4a2497d-bc1d-40ee-a2ab-11b7ad9a9e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87faf493-60b6-43dd-bee3-80fcf24170c7",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a860a5a2-de01-4393-b590-592165cf6761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f5f3366-8db4-404e-bf35-dbcc251d56b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3cc50f-32ca-4a85-9aae-64fbc51c9743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04151f66-4d8d-4b9e-8b95-94520c007cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cade086-74f0-4ece-bb0b-53b0fd0819f7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6426ba-b036-49e6-83ab-37ab1419b8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158bcdf1-fca6-40e7-b3a0-03f2397386ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44300704-7b09-49a2-a432-d83055a0bacc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b4e795-821b-442f-918e-371c594597ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd74d184-1b0d-4ce0-a51a-8a62601a7ecd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4564dcd0-f4f4-41e2-8933-0cd89b491f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7689287b-91b4-45b9-9348-34d84f9b16ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fb50b2-d2e8-4c58-94db-9294593b027e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933dcb0a-61b8-4273-898c-7bcec1297b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "726c895a-7490-4e86-a7ee-b695503a0df7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0faddf-68d9-46c3-a7e0-4484194278df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "503371d1-6c09-44c0-8e1e-c291d32e30f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e55f414-4d2e-4356-a555-9ae1dfb9ae57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cddfbc-df4c-4460-ba1f-b05c7587bf37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a3724a-90b2-4d0b-bf5e-f407366634e7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39f83bc-440c-48ba-afe2-5b2f939a1ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ef2406-b44e-492d-9d65-0291812a6c26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d065fb4-a258-4677-9bd3-5f19df54f5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ab104d-7175-4dfa-908f-1118f9ab27a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13deac13-4b5f-493a-986c-ba9eb1939fe0",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e572bc-920a-4b6b-ad1c-98b387910e6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b64797bb-7bb5-44af-b41c-1709c0bf0f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "069e90d3-7cf8-4090-b3c6-091dea539245",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545fe979-00d8-4c0b-83f6-b6faac4399ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f47bdb-3e1e-443e-862f-c257eb42bb8e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82dcb18-f7a1-42e8-897a-c2f2dac3863e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e404fa2-6c38-414f-b4c8-c66e0459e2ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a72e35b-35e8-4a43-9e35-add893cb8a57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "283a5e3b-5b8a-4db6-9c7f-7eedf0a945c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179d76d7-c9d6-4f4d-ae76-5df5245a1e93",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39afd22a-3a3b-44ac-9454-fa1b02f6303c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e838b44d-0d09-4338-ad58-64681e5a4e12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a30242-c862-4f66-89cb-06fde353e757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6347205-f586-4b5d-b58e-571606835a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d79351-924f-4599-83c7-94bd992a0154",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce730d5-f5e8-41c8-acdb-b6731e175b7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78064a0f-a0ed-4bc0-89e8-c3296d79db20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c935b308-317c-442e-ae60-99ac1b6be4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2ee038-51fb-43c6-857c-49bb1584fd1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2874cc0a-b2f9-4940-8bd7-fd33c4d34039",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ecaad8-daaf-41c9-a87d-051057b7f757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13721171-aec4-44d8-9529-a50618da240f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c0b3a4-56c5-4f02-94db-6f42c0401482",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008758f7-e8be-4059-b67c-12599c907121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73081b08-473c-4e67-a344-7ecff546199e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0a8213-17b8-46ab-bf9e-f7fc15e95489",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "135ba743-8987-4e8d-a19c-90bc46dcc6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f69b13-6ce3-485f-9e83-c640af2ac9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e64d94-8a43-4460-9758-d9c9bebd4d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbb34ff1-3433-4e7a-be48-09e778c86359",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8a2f18-9179-437e-9755-a437c1e0f9e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0259ebc0-666d-4467-b143-68879a26a047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7679b811-974c-485c-ba5d-34d2d358e5b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18aec4fd-b48a-4d18-813b-0c0e09632165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e294852-bc54-44f2-a0df-9e306519fd56",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b848d43-87a6-4aba-aaf6-f65f4d83623f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34dce9da-6df6-4747-b3a5-e3ff69001ee9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b92bcaa-cc8b-4e6c-ac65-88dfa0a49ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3778888d-a268-49b5-af0e-54c99c89cdd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226c8507-b6a9-4671-aa2d-6ce76aa6e36e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c674fd16-c580-4bbe-81b2-895d66487713",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2f3f7e8-44d2-486d-9ae8-5ff7fb2414de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e925140-65f8-43ff-8d66-6bff81711902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ee0866-a4a3-4ca3-90fb-cdc7dc46c024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583aa1d2-4e57-4087-be4f-c35a8fee8c4d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be823bb-edee-4d0c-96b6-14e878f381a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ec9051b-8c07-45a4-a5ce-ce6b176cdb9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66547802-4715-4823-bf5f-b2d43c9f9b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4311c128-4360-49f5-9ade-394691dd82c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12537f3b-3f3a-4d1c-ba7b-63f67707e504",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a94d500-0dae-4168-b665-533266ece84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd334dc2-bb1c-4c53-9949-aff14a907d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81cd2e91-f47f-4872-85b1-620ba6d078dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307c4b88-dfae-4a0a-98c0-a3f81f63f8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29dda221-c610-4f1c-8a9f-b147295ff324",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f944c017-ca3c-4a78-81b5-a0dc87887c78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e448757a-abcf-4429-be75-73013be0b4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6fe82d-2ebf-46eb-93d4-a08b4f52d28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504bc35b-0b55-4464-bde5-800bfe3ec192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a7aac3-167b-4989-afb8-a87c085936af",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec105159-7d19-4d70-bff0-d6bf3e8be3e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6741b236-b4a5-44e9-822e-5dd0116f1f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71869058-bc9a-46b1-b13c-8657df8f5222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adfe1452-be79-4d74-afdf-5469e4eedda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe079469-0215-436e-89a8-c98b9ded6df6",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887638d8-ec05-444b-b08c-0b757808c839",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0ac4897-46e4-463f-a572-93fdfc17202b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c5c6a4-883b-47d5-9f09-f88defef7b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae12fa0-f05b-43c0-a01f-8689d0b12a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50dde5a5-772d-4425-9f93-35710c8573a2",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad7b64d-2a89-41ae-9e4b-565486e59ffa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c76ba05a-7413-4264-b085-9f1f0e01f6eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f03afb5-e6a6-4161-8d84-1d66fcd57b69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d923ab-6855-4d05-8de4-252d9503c2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a287197-297c-4394-8f3b-5cdab08645a7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43950968-f8ab-4ee7-9c20-4abd4476b3c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92e354ba-fe34-40bc-ba9c-43d7cfea2151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f6a6a2-eed9-47e5-bdde-0628799f40e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2feec94a-2501-4638-9d4a-46d3b4a2847f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5292b901-0f19-42b9-8f4a-a71cea6606f7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3290025-297f-4bf7-9b7f-bef80257aee6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fadb3427-d775-47ed-b2eb-e41b177c87cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0339b2e7-5ff4-41b0-8804-0fbb0a4d0fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98c50a3-b183-446b-a4a9-3698d9f59a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e86dab3-f9c6-42c7-8c64-bda22bfc804c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97dcf8b-8cfb-43fe-982d-a9fafafffd10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b7ae89-9bad-45c8-8489-6524d45144e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e06b42f-59fa-4f42-9020-895d21e9278d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b620512-5d58-4c9e-98d4-0c44207180b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b6ca84-4385-4e7e-bbc4-2ac799f87ecc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "232aee60-abc0-4b8a-8fc1-43bc753e16b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5686bd1-5a11-40ec-9471-4eaf33f0b10b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bea3f0-5999-4056-b96b-08db5780f86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a92204-beb6-45a2-9880-19606f09240a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d58a4e-f7ae-4103-aba2-4c5b092f2cbc",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81e1c5b-0ac5-4be8-bcc6-2f6b8f71ea14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fc7b1c2-fc1f-4e90-9c55-f329d0b94da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459438c7-d7b2-4260-a091-e30a6175b031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1c8c177-60b8-4be4-abb7-edf4d744ff22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "639ef7c4-3d82-4a21-9684-83eedbf075ce",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e73e49-8ad6-45ee-8295-322f22dc7ef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69d09883-7724-4a4c-bc9a-cebc303b862c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c533cdc5-6311-40be-9455-19936b291e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2dc1f20-fb29-4856-9692-c761c24f794a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced99212-47f3-45fc-8c35-4cf38468aa6c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "987ea473-b898-4246-be7f-dfa0cb9e0fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1170d1a4-7de8-4daf-84e1-748b035441e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d08f18-f108-439c-ba9c-9f1e3a2de495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a80761d-26e2-410f-b7b9-e4b42b3f2b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28080f7a-b58c-44a6-b230-badfcceb283a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e284a068-6319-4463-9412-32a348301094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7557840b-af0b-4f7a-9d53-4633e5d17c51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459c7d82-25ef-45df-8c91-e9d5548e8f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94ae07f-2cb2-4e1f-951b-1f19b70fc19f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b79a1f-5eaa-4320-a75e-b8e7893850ae",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb95d598-33fb-4818-8e03-23c633af26e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f0df397-3ab4-41a8-aafd-c356c34875b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df794c7f-2138-4746-99a5-928555a090a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8504509-2847-4457-b492-21d923908ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10fc2c30-a78c-49e9-8b19-af2efa62c60a",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029ce3ba-09f8-4be3-ba7a-f09ce1967147",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b653c05d-2a34-47ba-ad69-4e36c10957f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d714d3-b16f-45d5-a680-5a9c6048202d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53865856-b0ec-4932-9a9a-099307c67ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99cd7a0-ccdb-4f6d-8ac5-3bd0fec264b5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6ffa37-e312-434b-84a9-d7b2099430a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5db4865-3654-4653-b17c-247c23eec4d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6e1ca3-abc7-456c-bb39-657131debcb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e7b7eb5-784f-4629-a31d-2fd8c734b43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bf89ece-969a-4d69-8f9d-6537495b3bed",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cb11e6-1579-44fb-a495-1c5168946050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b7117e7-f1c6-4aa3-910f-4c61bc0872cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b62dece-d085-4273-90a6-22926b015df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33876e61-a09b-41e6-bcdd-72637c6a14b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0fb1e02-b2f7-4b97-821a-c60eec209ad3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5c7994-7e7d-4233-b203-82150f257231",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5724951-650b-4798-b834-61851ace682a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e812d4-def2-4871-a3c2-5cc73f959cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1b44c9-fa0e-4d44-9b93-fbe44f765b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e049d1-3726-45a9-b22c-5848e0dcfff3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec2fe377-1b48-4b08-a031-daf7973dcfc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe512e4b-0402-40bc-9882-0f10291204c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c16526-31fd-486e-9b45-1cdb085c87d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700b72fa-08f5-4e88-b6eb-cbea8703d6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79723282-8d63-46d4-8fff-d403af960475",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "803a2845-c59a-42c2-8007-8a6aa62d4f69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8527277a-b2fd-4149-a528-ea9bcb6d27a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa377bda-0de3-47f1-af0e-d7c64671abc3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97076802-5401-4894-9891-2dfd71ea6658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1b49b0-c029-47b1-8c7b-39adc6686dae",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a75a8d-a6a0-418d-86ef-d9268c383af4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77aa1f4b-e30d-4493-84cc-1a0b8cc10db2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd66d449-ada2-4616-99ec-78fafcd75bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6441838e-cf58-44d0-b278-22d2da6176ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66dc8a4-f058-4149-9472-c2220c9c9d59",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882fef26-6aff-449a-9d59-ca25d71ea1f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8171bc69-83ec-43bc-b510-9c94e0f77757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9f8c78-0a1f-4234-a9b4-dad881d53c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12b9d2b7-5a3d-4fd0-9061-f93276baa5ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03659588-99bf-4e56-8355-fa17dddf05aa",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7dcafe-9fec-4e14-98fe-0ae804d0b138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6634915-db94-4ebd-8911-8a032b852204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf02310f-6259-4b47-9311-8e211099c4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6b2edd-0d73-40f4-bbea-452e67c90d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd52fb6-a3b5-47cf-921b-802a01f2a4e6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5be8580-1b19-4bd5-8e18-4fe909d6fa36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c446fa3d-896d-4d48-96fc-749fcbb5c042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9156ecb7-0dbf-4c1d-b03a-d6b2be3d1719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e44d86-e14f-450f-a032-f2da84838e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561cd912-0c15-43e5-bd6a-40cce2f65201",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d8bd58-27d9-4cac-a192-f3d5158c230c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64175726-6d51-46df-ad1e-5f01c5367425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5aa41bb-732e-4c5a-9eef-f285097d829f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152681fa-4875-4733-9bb4-a310e83854ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15a3632-b33b-430a-a282-1902c46b3ff8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0a4c4c-079a-4463-a776-759978e5eaee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bc699f7-5958-431d-a7f2-9e5f34629cc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc87749-7f37-41fc-af19-be26a07020dc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263c7db8-1711-4c2a-9130-7747f903f997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc13dc84-d708-4c45-9970-3ff229e08b24",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fac6e3e-da24-4467-a6cd-d47489651456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "848bf34c-4fda-4341-887f-041bf3519a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebec5a93-05da-4b01-890d-a1b43aa8f127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd766fc-b8c8-4034-bccb-3d81c84079ef"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "601f511c-7dd2-4127-8f38-4ca8dd5125dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86f93f3d-9542-421a-bc56-363a68e170bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "582e0f09-7525-4454-8e86-90121b396e95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e00c20e-b46d-459f-88cc-a590451655fb"
                    }
                  }
                ]
              },
              {
                "id": "11b28e13-a0c3-4e7f-812e-2ec275b4631c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec493311-b687-4221-9891-b4453d812654",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7524229-a77a-4e41-a090-09158a2d8571",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "440dacd8-af1c-47f7-84b4-b52b87a8561b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075b0b6d-8023-428f-b702-d711cd034344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be37622e-3853-452f-bc5e-ac048e3d1794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d24f62-6606-43f2-aecf-dcbe32f21624",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857f1130-2140-4c35-bd69-7d234c01d518",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dc67f362-a0e0-4d43-b062-76b162111386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6461e274-9ab9-436b-8300-b158cff03552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "785c66a9-9582-4a20-944e-2b6502c67dc8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a80752c6-4108-49bf-9920-653921489cfc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2f80271-19a0-4fa8-ab9b-9339d4c3d106"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3907335b-390e-4e47-9cca-796921c8375b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebfe013f-5637-45da-bbfb-3a9992956972"
                    }
                  }
                ]
              },
              {
                "id": "7680dadb-8001-49f4-ba51-f8daad073179",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "abae7cda-7491-42e3-a3b1-943133c66ffc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f804add-dec6-467c-8aa8-66e6ee2b5e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "25d63392-2237-454a-9f18-87880a8ee4b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d2360b-9174-47a4-9289-18ff2ec409c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2b5fd1-2ee4-44f2-bcbc-2785275b9a83"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eb907d36-d40b-48a6-bf0d-4bcb5e6cf21c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2828a1ae-c3a0-4aab-9cca-40302db78c50",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b86f263b-186d-4f7d-9495-8a16f7d2a54d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1b3c7465-ccc1-4a00-be6d-68bb44eab077"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d38d7ac5-929a-47bd-a03f-2fddf74d0a2f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "529aa59f-2047-4d91-bfde-8edb7a82401d"
                    }
                  }
                ]
              },
              {
                "id": "468da044-8756-4c2c-83b2-1d1a9dec5485",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7cd31bf-95ba-4c74-ae50-89b7f83b6047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cb4d36d2-5256-4e72-bff2-0c5541008abf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c41dd854-4887-49b0-b6e3-f12120cbc856",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d550276c-a524-459b-b128-5d69b3cd2542"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef971b18-2cfb-4f0a-96d5-c04b5f5248d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "aee4d404-d5bb-437c-a8dd-447e23f08f69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f46f48e-d556-4edf-9608-4655aa6a9428",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "353a335a-2b93-4fa9-a42b-e2e8f31c5407"
            }
          }
        ]
      },
      {
        "id": "91b76c3f-eb92-4c21-922c-73d5212fd64e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "99857a6b-f849-456c-8b8b-6881ea3d125c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1be993d4-92ab-41dc-a999-4da223ce1da2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "99f6efa3-8a0b-40d0-82cb-25ea4ff1e94b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb2437b-5cfd-459b-a4d7-0698d4128c27",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a039fc26-7533-4148-89ef-f33607aa26fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30931b5-3b84-4664-8974-088139ada36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f8e3c14-1efa-449e-9af6-6754af34bf58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b90391-4717-4105-8d79-4ed9865ea012",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bc1759-5ffa-4609-9e35-66d15d68af1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "50952a13-91ac-4f29-b4e9-5331528d5cf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b6fe55-8b7b-4365-9bb9-085cd8a8379d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73e35d2b-fdc4-46e2-9db3-0abb32908154"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b9c7c28a-29ba-4e44-adef-876f1c3c38c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "753ba4bd-bc15-4bdc-b79f-8725e0c63f28"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad8815f9-4eb2-4e1d-945c-28a55fe25673",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "398afe79-e849-446a-8cea-e8f75cf02c2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e4a604f-ff59-436c-a619-bdd3bf6e4ae9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "137af471-a8e1-4575-aef0-3655bcf07a0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2ffb565b-0aab-4743-87d7-09a9ee222d56",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d35576ae-1b81-41f6-99f2-b34dc33bb5b0"
            }
          }
        ]
      },
      {
        "id": "f17aaedb-e519-48ed-bf14-fe50ac14c14d",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "f3e613a7-b271-4bef-9a33-c3668e9ba6c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "63506e31-6aa2-436a-83c5-a682439b33e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8889089e-4441-47e7-ba71-9d755727ceba",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9306794f-d09d-4ee2-a54b-faf621a3b652",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "88a44c96-a9e5-438c-a0af-524d9906dce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3e9ccd-2a9f-4155-bdae-7d524a32517a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "015ad114-f8e2-4af8-bab9-eb5a93ca65e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219e4f3a-6f35-45ae-8db8-b97352b4591f",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f6817b-6b91-40af-ac13-13340ab95273",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "04ba53c1-fdf4-43b5-926a-f27c31aee408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51323f3c-1677-49f9-a5eb-fadf2fa006fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f40cd78c-e5c3-4465-8225-d4b927fb6bc8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e608c04b-1347-4f3c-a99d-20cea8137530",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44d7a466-cef9-428d-a1cf-024ccb449375"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f92e3e05-ea0d-4ad5-b7c8-918ba95d8e21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6ca6462-8be9-4a9c-b7ad-a86a4c89779c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "945b2a4b-fc7b-4a0c-9211-efa6033526d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "26a5abf6-3f4e-44c0-8939-73e438e353f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f8b65a9-fc36-45c9-b689-2d1a109d4b97",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea3ecb5c-d540-4c52-ac7a-f80a4eaa4fc1"
            }
          }
        ]
      },
      {
        "id": "7fe824ba-8ab8-4aad-8270-9d2ee9605ea9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "460d5324-4fc7-4b2a-ba56-24ac35a3c5b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f98613dd-0c65-4fac-b2f5-aa238a8236aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba6a019c-bd0d-4e8a-acb1-c5b2dcb41f7f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eb77956-3d51-4048-9d8e-1f103d5b9885",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0979f45e-8cd1-4977-bc7d-ddfb5259f5ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b349f938-5951-407b-be02-28eb71050e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "781b7dbe-32c5-4f4f-bb70-4d3d0c248b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad29b3a6-98a7-41fd-a393-18977bf721d9",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875c0cc3-dfc2-4851-9b88-e3b120d303c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a46b9ddd-b97d-409e-a738-53657fdd3bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e19d14-dacf-4b88-be8d-fa243c96326c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51b38a02-c2e3-4696-bd24-4cf9d0f89309"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ea435198-3dd6-43f6-9490-2605e4071e28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7b36ad8a-53f0-48fa-abdd-6a69724ec7ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ab03301-483f-4a96-98b2-822f643c5476",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "525dc363-ce82-4375-ac47-330c961bae43"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48befab9-a4c8-4d53-9a05-faca931798d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d43a11e9-5d27-4c8d-93ac-6acdf54e9d54"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00fb4b7e-acc6-4298-b504-08a9ff3da63b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa54add8-77fa-4b42-a86f-a230719dff20"
            }
          }
        ]
      },
      {
        "id": "0bf83fd5-086a-4c5e-bd07-4dcbdc84a174",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca0e229b-0ddc-4354-9fd7-049d818ffe15",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a9143d10-5735-4de2-b7d4-020f4cfe83ac",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "79ea0f11-1a89-483c-8910-313efd7fc64a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cccf5b81-2a95-473c-bf34-54fb952099b2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "310c2cef-9044-4065-9268-1f6078268317",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 15.498445111676215,
      "responseMin": 8,
      "responseMax": 251,
      "responseSd": 27.09624407178411,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675298440618,
      "completed": 1675298455618
    },
    "executions": [
      {
        "id": "c0a45616-9cce-43cb-bd2b-6eb2c45c133a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c3c0b805-dbd4-4f3d-b630-a319bedfc8ae",
          "httpRequestId": "eee6c640-f90b-453c-bfd7-a1215f67c831"
        },
        "item": {
          "id": "c0a45616-9cce-43cb-bd2b-6eb2c45c133a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bb5a9053-035a-4072-b9de-d3975cfec13e",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "2a87c59b-308e-4f94-b669-9c7f3abb2b5e",
        "cursor": {
          "ref": "dab7853e-cbac-426b-bbc0-c42417c76122",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9393009d-062a-42ab-b9b4-8e9fc6ab35fa"
        },
        "item": {
          "id": "2a87c59b-308e-4f94-b669-9c7f3abb2b5e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9665ecf2-fb8c-49d2-95f7-dbd68018dc8b",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "a70ba9be-c615-4245-a3bd-08d0e45e17d1",
        "cursor": {
          "ref": "cba26e33-d295-4e5f-a08d-c21d75d43949",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "52601435-ace6-43ee-a1e1-564e970c027d"
        },
        "item": {
          "id": "a70ba9be-c615-4245-a3bd-08d0e45e17d1",
          "name": "did_json"
        },
        "response": {
          "id": "9ab970f2-0f5c-4eb2-a96c-b895b83c7d1e",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3018dfb0-fdfd-41b6-bf97-2e874f996558",
        "cursor": {
          "ref": "e6d26aae-cef4-4bf6-a10f-eb20f34af14f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d71662fd-db29-4632-9a44-50871a93dc4a"
        },
        "item": {
          "id": "3018dfb0-fdfd-41b6-bf97-2e874f996558",
          "name": "did:invalid"
        },
        "response": {
          "id": "63cadd84-77d7-4f55-9214-7063cd2d1c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "3018dfb0-fdfd-41b6-bf97-2e874f996558",
        "cursor": {
          "ref": "e6d26aae-cef4-4bf6-a10f-eb20f34af14f",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d71662fd-db29-4632-9a44-50871a93dc4a"
        },
        "item": {
          "id": "3018dfb0-fdfd-41b6-bf97-2e874f996558",
          "name": "did:invalid"
        },
        "response": {
          "id": "63cadd84-77d7-4f55-9214-7063cd2d1c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0a1c006e-b5d1-4ba2-9ed8-9840b36abc49",
        "cursor": {
          "ref": "90a7081d-43c0-472f-9844-177f859f6f46",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "36672b39-9434-4181-ac71-d84c1fadeaec"
        },
        "item": {
          "id": "0a1c006e-b5d1-4ba2-9ed8-9840b36abc49",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1f13e4c3-3759-4f61-9773-3484ee726f25",
          "status": "Not Found",
          "code": 404,
          "responseTime": 50,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3741d0-1cd3-4f30-b345-259a5aaccd40",
        "cursor": {
          "ref": "cec9025a-b42c-4fb5-b313-8cad304c2bd5",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9616422d-53dd-47bc-95fd-2d657cf1b0bb"
        },
        "item": {
          "id": "fc3741d0-1cd3-4f30-b345-259a5aaccd40",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3285f142-12bc-4976-b5af-1fad64b3e120",
          "status": "Not Found",
          "code": 404,
          "responseTime": 10,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5634ab43-3171-4a20-b38d-8d7af8238ed3",
        "cursor": {
          "ref": "0adcb837-4426-41e1-918f-1459abfe54fe",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2d5cd4b7-950f-40ea-86b0-3d22750fcaa0"
        },
        "item": {
          "id": "5634ab43-3171-4a20-b38d-8d7af8238ed3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "43de5ea4-358b-468d-b830-ce74717e2e75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8714ae0f-5a1a-4539-b86c-5d2184d259bf",
        "cursor": {
          "ref": "e0833020-431c-43c2-a186-0eaccc4b19bc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3036638f-6802-4b78-99bd-57468af94aa8"
        },
        "item": {
          "id": "8714ae0f-5a1a-4539-b86c-5d2184d259bf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "237236e2-ab62-4670-a4e6-e0c8efd5a6d5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8714ae0f-5a1a-4539-b86c-5d2184d259bf",
        "cursor": {
          "ref": "e0833020-431c-43c2-a186-0eaccc4b19bc",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3036638f-6802-4b78-99bd-57468af94aa8"
        },
        "item": {
          "id": "8714ae0f-5a1a-4539-b86c-5d2184d259bf",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "237236e2-ab62-4670-a4e6-e0c8efd5a6d5",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 10,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a45f6d-ebac-4da0-b1bc-58daf048e4df",
        "cursor": {
          "ref": "164cbd9b-a8db-425c-8c61-699b2f0b9d52",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "7a22ecb6-022f-4152-8104-73c360aa829a"
        },
        "item": {
          "id": "e3a45f6d-ebac-4da0-b1bc-58daf048e4df",
          "name": "identifiers"
        },
        "response": {
          "id": "169204b1-7131-4aa3-8cbe-67990ed4cb6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "ca4d1af8-81a1-4f5f-afbc-cb34aa3955aa",
        "cursor": {
          "ref": "b4592756-c450-4b29-8bfa-fb25ec7e4334",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "92ec24c0-2dbb-4230-841f-4e6f555d481e"
        },
        "item": {
          "id": "ca4d1af8-81a1-4f5f-afbc-cb34aa3955aa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e2516d7a-1d02-40fa-a682-a125b0009a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4d1af8-81a1-4f5f-afbc-cb34aa3955aa",
        "cursor": {
          "ref": "b4592756-c450-4b29-8bfa-fb25ec7e4334",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "92ec24c0-2dbb-4230-841f-4e6f555d481e"
        },
        "item": {
          "id": "ca4d1af8-81a1-4f5f-afbc-cb34aa3955aa",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "e2516d7a-1d02-40fa-a682-a125b0009a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7af60fc-2a72-444a-85c3-14891a12f3f4",
        "cursor": {
          "ref": "eb34187b-b4b7-48aa-9f83-f4f18dc79100",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0de2c6d4-5986-4214-a824-cf88ada49439"
        },
        "item": {
          "id": "a7af60fc-2a72-444a-85c3-14891a12f3f4",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "96a925af-9902-4d96-8473-829dbfc6b06d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddbc701-26fa-48a7-8109-e860769003f5",
        "cursor": {
          "ref": "62e5cd78-9f29-42e1-972a-bfed77e53762",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1f4cf604-b56f-4286-bdf9-c735a2ae6c09"
        },
        "item": {
          "id": "6ddbc701-26fa-48a7-8109-e860769003f5",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "2bfb1efe-d001-488f-857a-be56d81f28af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016b8b1e-d593-49f9-973b-24aed4373ab7",
        "cursor": {
          "ref": "464cf8f3-c7ed-487d-9224-266adf17c605",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "27e34a05-31fb-4b82-9a7a-b979c72dd746"
        },
        "item": {
          "id": "016b8b1e-d593-49f9-973b-24aed4373ab7",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7c50c649-3efc-428d-9a9e-dbc68e209be1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f54c9115-4c80-4cc5-afcd-d025d9d35b3c",
        "cursor": {
          "ref": "69f82ba4-1ea2-4ece-8a42-7a73f4c0e433",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3c0d40ca-f150-43be-96a0-1824c26cb4cf"
        },
        "item": {
          "id": "f54c9115-4c80-4cc5-afcd-d025d9d35b3c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ba4cc51c-edc8-4dad-905a-7006fcb22cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed5adfd-2e27-4ada-94aa-5c4d44793f2e",
        "cursor": {
          "ref": "58b2f5ba-6b13-4839-b785-66398878e099",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6e5eea22-4ece-45be-8741-df79212b232e"
        },
        "item": {
          "id": "eed5adfd-2e27-4ada-94aa-5c4d44793f2e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "c4c14fdf-7606-4b82-becd-32017c4ac987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4cdb986-9999-4619-bd14-df1194a75869",
        "cursor": {
          "ref": "15c29db6-62be-48df-bef4-83204b3689ae",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5efa9be2-16ba-4303-9d15-cf7291a7076c"
        },
        "item": {
          "id": "f4cdb986-9999-4619-bd14-df1194a75869",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dd26ce46-7d50-4c8a-929d-f0cd076a0b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7934ee-c44f-48c1-aacb-140b8f344df9",
        "cursor": {
          "ref": "caef86e3-91fd-4e9f-8594-dcf213b19595",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f6c8cdcd-023a-429b-9eb1-102aa53c50fe"
        },
        "item": {
          "id": "bd7934ee-c44f-48c1-aacb-140b8f344df9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "765c54a3-5357-4b79-a862-c6cdb6998a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b870d1-56f2-4894-aaee-9fa78b98b190",
        "cursor": {
          "ref": "c92ddda3-838f-40be-806e-c563cc0385b7",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9dc1455c-9a50-4982-8cad-b957ca80efb5"
        },
        "item": {
          "id": "74b870d1-56f2-4894-aaee-9fa78b98b190",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b1a6a074-6d00-4a17-8a3e-b33ab5ee25a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460ef431-7777-4c7b-9d8a-9742160211ee",
        "cursor": {
          "ref": "ded16356-7138-4e97-8d66-be1a211a4e83",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3e153600-9c5f-4fc6-999f-9f5eff49531e"
        },
        "item": {
          "id": "460ef431-7777-4c7b-9d8a-9742160211ee",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a6012cf5-9f96-4b10-9e5a-1619a2f83ada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d4ad44-879e-4129-88df-e4bf4a5e821e",
        "cursor": {
          "ref": "0bf449e7-c685-4853-b55b-49f957b0fec6",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3565f62c-379b-46d6-bd1a-c8e392294e8f"
        },
        "item": {
          "id": "34d4ad44-879e-4129-88df-e4bf4a5e821e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "84771971-0363-4299-9bc2-059e18f1129f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6a0d4f-ee66-4b7b-92d8-39c992257217",
        "cursor": {
          "ref": "dca574a5-eaf1-47ef-9296-8bc7a0f103eb",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "06e5983b-aecc-46b4-b0d1-b6f983eb7294"
        },
        "item": {
          "id": "9f6a0d4f-ee66-4b7b-92d8-39c992257217",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "e4097972-a546-437f-933b-cbb46a8a7fde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5b767a-37ff-4ff2-952a-85a199d940df",
        "cursor": {
          "ref": "578ad7ef-388a-4a00-ab6c-87ff9a6a693e",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "39e2ee2c-4664-4315-9a7f-1f7f4ec8c3c9"
        },
        "item": {
          "id": "fd5b767a-37ff-4ff2-952a-85a199d940df",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0d54eb38-3fc2-4a61-9601-5ea39478f001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38127541-fc04-4a44-89f3-3551ffdb5099",
        "cursor": {
          "ref": "4b933493-19e9-49ec-8ac9-18395f6efdfb",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7a6ef36f-4d16-4bd3-94a9-6f0140c104a6"
        },
        "item": {
          "id": "38127541-fc04-4a44-89f3-3551ffdb5099",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "42a68f8e-ed5a-4db9-9638-ffd562bb93fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8bcaed-e7db-4133-b309-748061a02888",
        "cursor": {
          "ref": "edcaf376-f5cb-49a9-82d2-16c4b9230e63",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f1c75319-7957-49df-9733-f74520bc0ee3"
        },
        "item": {
          "id": "1b8bcaed-e7db-4133-b309-748061a02888",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2991c481-a6d1-4d7e-83e6-fc1d0f3c86f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66d4d1c-5710-484e-a33b-e4150f12fc95",
        "cursor": {
          "ref": "18642af1-42dc-4aa7-b970-5d11c1527cc0",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b9382c49-2e1d-4917-a22f-78b9d75d2d2d"
        },
        "item": {
          "id": "b66d4d1c-5710-484e-a33b-e4150f12fc95",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9c37338b-c80f-4f0a-b370-42072e380a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8ac8742-f477-4613-8926-2e709207090e",
        "cursor": {
          "ref": "e6a0b7e5-7508-4258-adb6-e1c3acc3b231",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "478373fc-5315-4565-91ed-b8cef8522c32"
        },
        "item": {
          "id": "e8ac8742-f477-4613-8926-2e709207090e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "11f78a58-e5cf-45df-8763-0ed8e2f7d8ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fce9cab-7e48-4ba3-8fea-a331297d221e",
        "cursor": {
          "ref": "287979e9-b6bd-465b-9d33-2ea07edf2c3a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7adc49e3-ce1d-4e2c-815d-5cf2ab52f067"
        },
        "item": {
          "id": "0fce9cab-7e48-4ba3-8fea-a331297d221e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "38fa3ffc-7f64-4da2-9a35-cc68c7796a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fca2194-7d7b-4098-94af-c90fde1b9ae0",
        "cursor": {
          "ref": "ca7dc0ce-ea8b-49f1-a531-dd13063761f2",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4f415431-7569-4ba5-916b-3cca8aae9c15"
        },
        "item": {
          "id": "2fca2194-7d7b-4098-94af-c90fde1b9ae0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "08b97b60-e7ca-404f-a2c5-847c5d040d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad98c99-4fad-4eae-9f51-b196d72b63ec",
        "cursor": {
          "ref": "5d897cb9-5c64-429c-847a-4ffdd325095f",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "308d31e4-457c-4c02-86b4-1eaea9ea6807"
        },
        "item": {
          "id": "fad98c99-4fad-4eae-9f51-b196d72b63ec",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a1f398fe-09d1-43d6-a68b-c9880233ed4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9080cc87-0477-4de1-a8da-8880a5cc3df7",
        "cursor": {
          "ref": "399b320c-4963-413e-8400-c1cc79916000",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "baed9613-178b-4e94-bd5e-7845fa949ab1"
        },
        "item": {
          "id": "9080cc87-0477-4de1-a8da-8880a5cc3df7",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "91f903b0-dab6-403d-ac1f-b8475f55ff03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d604c18-70ce-4087-87a0-54ab94264a60",
        "cursor": {
          "ref": "e40f5c15-bc30-4fc2-a984-271875877b2c",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6616bc3d-b8d3-414e-8655-032492cf7dd8"
        },
        "item": {
          "id": "2d604c18-70ce-4087-87a0-54ab94264a60",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8162f93a-1b50-48e1-b162-e125c5ba3fd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "291cb3bf-4178-4f36-8932-822bc94cffd4",
        "cursor": {
          "ref": "60cca491-57de-49bb-9a50-239b954e7e79",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "2b9b4cd7-fdc0-4f35-b33e-957c82423468"
        },
        "item": {
          "id": "291cb3bf-4178-4f36-8932-822bc94cffd4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "63a6ce7e-4291-4588-820d-cb8f483049c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb605a5-01bc-4d3f-9c9b-99ca14d297ea",
        "cursor": {
          "ref": "4bc95079-49cd-4d49-a2fa-b485afff9980",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f91bc723-a07e-4e10-b8e4-57f399200e25"
        },
        "item": {
          "id": "0fb605a5-01bc-4d3f-9c9b-99ca14d297ea",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "208c8b2c-ffc3-40e4-9b94-30c5be89f86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63274a5-da59-4dba-b01f-9f3fdf8c06ad",
        "cursor": {
          "ref": "c4b855b8-e5a8-4144-a8d9-bf9e84fd0b6c",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c72fd7aa-1257-4785-8c05-756b1300d592"
        },
        "item": {
          "id": "b63274a5-da59-4dba-b01f-9f3fdf8c06ad",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9a6f91df-1a06-4c24-aab3-ffa80fb47a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc721a83-c91e-45af-a516-362242da58f8",
        "cursor": {
          "ref": "72669aad-4cd3-4983-abbf-9a22390977b1",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "cc2af13e-8ad1-406e-ad38-71b509900c60"
        },
        "item": {
          "id": "fc721a83-c91e-45af-a516-362242da58f8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c570273d-e5a2-4cda-87e9-2c749cfaa80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df11008c-9d2b-401f-aa0f-089d8d55a47a",
        "cursor": {
          "ref": "6814e44e-4100-4da4-ad4d-23ba9e91dd68",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "499d67f1-3d08-46ec-9a05-38dfb066170c"
        },
        "item": {
          "id": "df11008c-9d2b-401f-aa0f-089d8d55a47a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a4d0cb0f-b212-42a2-abdf-47a9b084cea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15caa5c-e4cf-4628-a6cd-a3f4fb53e650",
        "cursor": {
          "ref": "7237b268-3fd8-4a8d-8a4d-c15dde3d5468",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "aa386bf8-fead-491a-9cf2-ebf663be31c1"
        },
        "item": {
          "id": "a15caa5c-e4cf-4628-a6cd-a3f4fb53e650",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ddba3acd-9ed7-4d6f-923a-b0686e28cce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab9a737-8db0-484c-a64f-064a9fe8f137",
        "cursor": {
          "ref": "b0a6627a-3fe3-465a-ad4f-8142b7b505a7",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "6aa9c756-4ee5-4045-aa29-778e6ce44d02"
        },
        "item": {
          "id": "2ab9a737-8db0-484c-a64f-064a9fe8f137",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a5c8994e-cad2-4070-8ce8-5c92218d20e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114ad5a3-9d7f-458c-8434-8954fd530040",
        "cursor": {
          "ref": "119f6cfe-acc2-4d67-97ea-7385b1e5b21b",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "819a9fff-3828-4876-8cea-7d731f59cd99"
        },
        "item": {
          "id": "114ad5a3-9d7f-458c-8434-8954fd530040",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "111ca1fe-b608-4d09-ab51-39a192745a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae98162-2f46-49d6-baed-91cbc4db8b52",
        "cursor": {
          "ref": "65bb8127-25aa-4ba2-a40c-97fe14dc6182",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2e6df9cc-5fdf-402d-8d6a-e456ed8860ea"
        },
        "item": {
          "id": "aae98162-2f46-49d6-baed-91cbc4db8b52",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "023d2de9-6e8d-4cab-9d6f-c3d3fb2a78bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28f39d1-a545-4c32-b169-f28133cd9837",
        "cursor": {
          "ref": "35127851-6263-414b-ac1c-a62f4fab4d70",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a4d29f4f-126a-4746-a4af-89ecfffc38ac"
        },
        "item": {
          "id": "a28f39d1-a545-4c32-b169-f28133cd9837",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "43bc321d-b080-4561-922c-c4d2d82c7f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e5a482-8c5e-40c7-8ca0-c6700f0abca3",
        "cursor": {
          "ref": "d88a5475-1179-4849-82de-fc0494e302ad",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "1076a843-e862-43c0-b89c-40042359da7d"
        },
        "item": {
          "id": "50e5a482-8c5e-40c7-8ca0-c6700f0abca3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "49b29270-a543-496e-a148-d8f9aa821fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccdaee67-fef8-414e-ab00-23dea1f1513a",
        "cursor": {
          "ref": "8ddfcd67-f206-4ee2-97df-0b1defa74341",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "53e8a6b0-b0a2-4d3d-9d41-246357e81ff3"
        },
        "item": {
          "id": "ccdaee67-fef8-414e-ab00-23dea1f1513a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e6a98b3c-6dcd-4c29-b7f6-3f9aac419d2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 16,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8533af-fe28-4d3c-9ebc-e8f2599674e6",
        "cursor": {
          "ref": "0416db47-28b0-40da-a0d0-98de5e732142",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "141feeab-f6de-4d7a-a237-a08e11633025"
        },
        "item": {
          "id": "8c8533af-fe28-4d3c-9ebc-e8f2599674e6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ba5ed6aa-86ba-4575-ba56-bbb47e135b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5e4c90-6b26-4076-8323-58578f9eb3b2",
        "cursor": {
          "ref": "626c8f42-b7b0-4ab2-9c88-1588d6e47ec9",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3b21a10a-d18e-43b9-957b-34c7fc8fcacd"
        },
        "item": {
          "id": "1e5e4c90-6b26-4076-8323-58578f9eb3b2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "001161df-bf65-4e3d-8e7f-052591b3a561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef68009-5eac-45ca-a8c7-614fa9baa3d5",
        "cursor": {
          "ref": "5c1fab22-e269-49ea-ac21-faa6703d1815",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "d64f240c-4629-4a48-98fd-2de9f99bcafc"
        },
        "item": {
          "id": "3ef68009-5eac-45ca-a8c7-614fa9baa3d5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b9094263-5164-482d-b19d-afe0b2fb5e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c35ecb-f8f6-4177-b55c-21655175e89b",
        "cursor": {
          "ref": "0fbe1496-ba71-439b-a1c0-3a7af859a9d4",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "91e7ead7-a484-4968-baea-a609dc778c6b"
        },
        "item": {
          "id": "31c35ecb-f8f6-4177-b55c-21655175e89b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dcd73564-09cf-421b-8b88-b8f1c9487198",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "be9503d0-5b5e-415f-a575-1d6947e626b6",
        "cursor": {
          "ref": "30ddb00f-ac23-411c-bf86-8b4e9a23481a",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9713c7bc-78d0-4153-be94-a23262365020"
        },
        "item": {
          "id": "be9503d0-5b5e-415f-a575-1d6947e626b6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "ea9983f9-8a84-4f9a-bb06-fa8a53d10b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09245c19-d656-4168-b4ed-0ad398a4539e",
        "cursor": {
          "ref": "fdb9e54d-5df5-4f2a-8057-8c6f1eca6036",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8c86d2dd-e710-4f54-a340-f634eca8d262"
        },
        "item": {
          "id": "09245c19-d656-4168-b4ed-0ad398a4539e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f1ef291a-d140-4a71-8de6-71e03c98bff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f7dd75-3f42-4a61-8ff1-8ebf9e973809",
        "cursor": {
          "ref": "b3e208ba-760f-4415-a80b-f560a71d8c28",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "459c2532-d0de-4750-bbdb-1224e89e318e"
        },
        "item": {
          "id": "31f7dd75-3f42-4a61-8ff1-8ebf9e973809",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a991c120-d2c3-40a4-9976-85f3908a0613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04c865e-0825-45e7-8134-fd4fff102350",
        "cursor": {
          "ref": "afa73511-8080-4b7e-aca6-d614d16d8eae",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ee7eac07-b66a-4876-9ae7-0775397a0afb"
        },
        "item": {
          "id": "e04c865e-0825-45e7-8134-fd4fff102350",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "eeadbd6f-3bed-453a-ad62-7d2c3fd0a23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12821852-60e3-4d57-8293-65f03e5e8216",
        "cursor": {
          "ref": "c5da47a7-a5a9-46d7-8ab7-f4f5c7a74a82",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e8dea58b-53c6-48c6-a710-774530b3423e"
        },
        "item": {
          "id": "12821852-60e3-4d57-8293-65f03e5e8216",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d6c9aaab-c820-4399-aeb9-f378c075978b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fef0dd20-4160-4ca7-9082-42cf0c4d5f39",
        "cursor": {
          "ref": "b2b66171-eb22-417e-8ea9-ae65410ccf82",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "849b1643-763a-42da-8732-1f5fae864d7a"
        },
        "item": {
          "id": "fef0dd20-4160-4ca7-9082-42cf0c4d5f39",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "826c1739-d781-4367-8ba1-a46d829c77bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8740db18-dcb0-413b-86f4-ab65e6c7477d",
        "cursor": {
          "ref": "c5ba8fd3-898c-4cf2-8318-736ccf3ef1d7",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ce308e14-4159-42f8-aa34-0510662dbd20"
        },
        "item": {
          "id": "8740db18-dcb0-413b-86f4-ab65e6c7477d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6cee864b-b32b-4672-bbc7-4d4baef98e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 18,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "745b79ea-813d-4f91-93ba-978978f43cc5",
        "cursor": {
          "ref": "44d7abdc-64ad-433e-bdb3-53ac2266e78c",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6a146797-5658-4032-a92e-415694c3f502"
        },
        "item": {
          "id": "745b79ea-813d-4f91-93ba-978978f43cc5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "60209ce4-e21b-40a6-8fd9-4ef98b30484b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd204f5-85b7-439c-8fb2-0baf2fe6c20f",
        "cursor": {
          "ref": "edd7b2a1-fc1e-40b1-b90e-bda4af32674c",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2736eb86-5139-4570-9826-3a83a28c76df"
        },
        "item": {
          "id": "bcd204f5-85b7-439c-8fb2-0baf2fe6c20f",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8d40e1db-ed50-45de-86ae-d57cce2c168b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6b5b06-83db-4373-9d95-d7b9b74633ac",
        "cursor": {
          "ref": "8da6a439-048b-4cb0-86ad-7567a41ae0f3",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2f634d13-1f15-450b-b4e7-48975fd3bafc"
        },
        "item": {
          "id": "6e6b5b06-83db-4373-9d95-d7b9b74633ac",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1aba75cb-cc72-433e-a025-95346a9820ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d415c69-b421-4610-8edb-515dc5ef4d57",
        "cursor": {
          "ref": "f5e849a8-374b-410c-b794-d12dd39cfbaa",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0e1ca077-59df-4bb6-80c9-bfbc1fe1c845"
        },
        "item": {
          "id": "9d415c69-b421-4610-8edb-515dc5ef4d57",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "10f25bca-ef1d-4c3a-80d7-6c1cf8cd72c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ec4b8d-ea7a-4de0-8b79-84f0e2acebb8",
        "cursor": {
          "ref": "ec1a78bb-c4d5-406d-9f69-9ff0588e3604",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9b8f1ae0-da9a-49fe-8c9b-361e6dd033c1"
        },
        "item": {
          "id": "52ec4b8d-ea7a-4de0-8b79-84f0e2acebb8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5aa1a217-9158-4a35-b0c3-4dde836efeb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af5f52c-442a-42c3-b986-77223d0f4e1b",
        "cursor": {
          "ref": "fd8da3df-5557-41d8-851f-e8e8e7bf0fe6",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2058a448-335f-4c48-bd20-e613604188ec"
        },
        "item": {
          "id": "8af5f52c-442a-42c3-b986-77223d0f4e1b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a49d2339-5679-4cb5-adaf-d85fe2e33180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552845a0-5bd9-4070-a4e7-31056355e242",
        "cursor": {
          "ref": "83e82b2c-bb26-4a59-bc88-58af6623a70c",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a62420f2-b230-4ff8-ac83-785e4d1d8d07"
        },
        "item": {
          "id": "552845a0-5bd9-4070-a4e7-31056355e242",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f2a79103-b1fa-456a-83a1-d3541534e9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7abab6-3f5b-4b8e-91ae-945aed6b850d",
        "cursor": {
          "ref": "c41f2b9f-f6f7-4df7-a1cb-78498eeb5c1e",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "42446f52-6411-4770-9ed6-6316f2665376"
        },
        "item": {
          "id": "3a7abab6-3f5b-4b8e-91ae-945aed6b850d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f1c916a5-2afe-4942-96ad-09c9de60166c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a61baf4-c240-4976-a117-731e73f78a91",
        "cursor": {
          "ref": "b6c449c3-3c6d-4e27-8dcf-08c8726706f1",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "1b4763ab-7181-4f72-8f74-45f421be64ba"
        },
        "item": {
          "id": "3a61baf4-c240-4976-a117-731e73f78a91",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "19bd8968-c457-4b2e-84a6-9ae359dddcbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45e61d9-40f0-4611-ac55-a890dd600e37",
        "cursor": {
          "ref": "865a9293-5379-4870-8e38-bdc1c2bc65b8",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e9e77d6c-96c6-4597-bacb-dcf06bb9e8b4"
        },
        "item": {
          "id": "a45e61d9-40f0-4611-ac55-a890dd600e37",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "585ee89d-659d-4aba-bf98-c976fbd98c9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1e6945-9f75-444b-833d-14fd8855fdc1",
        "cursor": {
          "ref": "1e710476-53fc-4e48-99b4-009c5c75df45",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "802b2697-fd0b-440e-9b9f-3c0afa2f68ad"
        },
        "item": {
          "id": "fd1e6945-9f75-444b-833d-14fd8855fdc1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "72840933-b469-4b66-a11a-f5aa67d570e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f34f2b-7f06-4cff-a6f2-2e7a61553870",
        "cursor": {
          "ref": "1ef36e8b-8071-4fa0-937a-160280fac1c1",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "37611675-3ede-4866-9ab5-bd9cfa3d209f"
        },
        "item": {
          "id": "b8f34f2b-7f06-4cff-a6f2-2e7a61553870",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3298aadf-63b7-4bd3-9e01-a6900f6712fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c400a3-7945-4df0-9938-bad11f4bc162",
        "cursor": {
          "ref": "0f414575-d2e7-42c1-be37-5d6df62b6271",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e633bbd2-4368-41b5-82b5-1800afddf6ca"
        },
        "item": {
          "id": "a1c400a3-7945-4df0-9938-bad11f4bc162",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "872082bd-f88f-4066-b612-1ad49c5e7550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e862f99-01a3-465d-adbc-c347ee7d1ffe",
        "cursor": {
          "ref": "d423b024-a416-413b-8bc3-f647d58502dc",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "c85f5ef6-795f-42ee-800e-02179b382cba"
        },
        "item": {
          "id": "2e862f99-01a3-465d-adbc-c347ee7d1ffe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1ef438b3-ead1-4f95-8d9b-7267d2a1e176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b86d10c-b93c-40d2-a1d9-6a489eac923d",
        "cursor": {
          "ref": "c299037c-3bb6-47ef-97b9-184355b6bf71",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "79f594ef-3a05-40b8-b0b2-3cf2f50a92c9"
        },
        "item": {
          "id": "6b86d10c-b93c-40d2-a1d9-6a489eac923d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "19fb4755-dbd6-4beb-990e-f0d1dba18197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e935e2-7264-4c9d-a3ce-2d90cf26992b",
        "cursor": {
          "ref": "b89c37d4-7e6c-4f35-a1af-2c87b031900c",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4dca7a74-5f2a-4f89-8502-c7328dc71354"
        },
        "item": {
          "id": "b4e935e2-7264-4c9d-a3ce-2d90cf26992b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e4fdaf70-f967-4177-92b6-03c1bfc730bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fe070d-6227-4ebc-a41b-4d8169e3794a",
        "cursor": {
          "ref": "17aa8a36-4607-4ce2-be6a-7d0dd7253333",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f22b26c9-8eb0-4205-be97-9c321c07a38f"
        },
        "item": {
          "id": "19fe070d-6227-4ebc-a41b-4d8169e3794a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d31367e6-e080-432a-af98-191cfcc82bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 14,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def4655a-6685-492e-a2d5-756d192cb8fa",
        "cursor": {
          "ref": "dda61065-ab71-475f-afe6-1a7ab6bbe067",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "be39f6c4-ffcc-4e3e-960d-9bad1b8bd9d7"
        },
        "item": {
          "id": "def4655a-6685-492e-a2d5-756d192cb8fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3c100c09-b1a5-4c51-b6a4-8c47b5878d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2dee966-19e5-487d-984c-4d09749d9891",
        "cursor": {
          "ref": "c0178e09-95b4-4f5b-9b8a-1aa0d78b8496",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "beb582cc-db5f-44d8-a926-b813183ffa40"
        },
        "item": {
          "id": "e2dee966-19e5-487d-984c-4d09749d9891",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "01bc043d-0ca5-430b-8c51-0d4d02247187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6df4c4-f3b1-4387-b71d-7ef6e4e81b5b",
        "cursor": {
          "ref": "a40f60bc-1690-4d97-9f9b-70917b6265f5",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "74d1629b-b820-447b-ba80-d63c57c57a6c"
        },
        "item": {
          "id": "6e6df4c4-f3b1-4387-b71d-7ef6e4e81b5b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4860d2ab-12a8-4a9d-8feb-ec97689edfa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe8852a-6bc0-4d39-9cef-40cd6fe277b1",
        "cursor": {
          "ref": "399a7be0-1e07-48d2-9207-217241571bb2",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "78f52016-c8af-4919-9818-0aea25f454d6"
        },
        "item": {
          "id": "dfe8852a-6bc0-4d39-9cef-40cd6fe277b1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "45bac5f6-ed74-45ae-ab29-ea017a4d9c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351d6ffe-6eda-47c9-8453-1bf36efee945",
        "cursor": {
          "ref": "0f39f271-2666-4df1-96d5-39742764fcf7",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "46487a67-c03f-4b1a-8d13-a25d21d05700"
        },
        "item": {
          "id": "351d6ffe-6eda-47c9-8453-1bf36efee945",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0b78cb35-c3ee-4050-8262-cac2d03331d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389ef6c7-96fd-4fba-a19f-a3e8e7162dcc",
        "cursor": {
          "ref": "e4a8c379-1855-410b-83d2-54c0c2c416c1",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0300986f-5a21-4393-9bb8-dffd444f3cd1"
        },
        "item": {
          "id": "389ef6c7-96fd-4fba-a19f-a3e8e7162dcc",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "45469f85-bb8c-424e-b767-c08ac04ba3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be477e9a-8e76-4096-895d-72cf9bf831ca",
        "cursor": {
          "ref": "ad3a0dc2-a8b2-4c73-be30-04c8c380da65",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "665f1b09-06f8-49e6-b667-cbb0cec920a0"
        },
        "item": {
          "id": "be477e9a-8e76-4096-895d-72cf9bf831ca",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "be69d98a-2674-40bd-a63b-17f5b01c7868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cb17e03-f4a2-4501-aaae-f498d1bcd942",
        "cursor": {
          "ref": "94c44455-c672-4f63-a13c-6de0ef607b9c",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fa9cef5a-4b7b-4178-a35c-9098d3bbd3c8"
        },
        "item": {
          "id": "5cb17e03-f4a2-4501-aaae-f498d1bcd942",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d3ff0cdc-8a2a-4aae-b1af-e76fb21604e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a958df1a-73ba-4ef0-93e5-e13687cad0ef",
        "cursor": {
          "ref": "4dd2e442-a9d7-4eb6-8638-f073b794171c",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d85ef8e0-4b77-49dd-9f54-19da979b039e"
        },
        "item": {
          "id": "a958df1a-73ba-4ef0-93e5-e13687cad0ef",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2cc61564-60bd-406c-a6a1-c0f771e892d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d180fd-3e2d-4fdd-a820-ad648ff5f64e",
        "cursor": {
          "ref": "c310849b-3a6a-4b65-a503-84f362746a07",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "be5f1fd2-eb52-4bb0-95e2-66c9fa21bd20"
        },
        "item": {
          "id": "05d180fd-3e2d-4fdd-a820-ad648ff5f64e",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7e7d7e18-6de5-46fc-9f78-b2515fa4f84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8c8e5c-5166-4053-8de2-d2ae79bb5acc",
        "cursor": {
          "ref": "0fbd015e-985b-47f1-9f04-20a77b32f210",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "79f8f50d-ce59-4343-9464-7b51a54cb8d0"
        },
        "item": {
          "id": "2a8c8e5c-5166-4053-8de2-d2ae79bb5acc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b59ae1ae-fbd5-4fa3-a197-20378e3615a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a930ae-1134-42d6-b30b-49c8220eff3e",
        "cursor": {
          "ref": "e44c88e1-9b0c-4012-a010-fcb56187a405",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "decb868f-2dc2-466b-9f5f-6d6747bb6f46"
        },
        "item": {
          "id": "23a930ae-1134-42d6-b30b-49c8220eff3e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a6ce2bd5-a276-42b0-8c55-14a893388425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c1b178-6364-4619-afe2-bb06abd190f2",
        "cursor": {
          "ref": "a8610731-5d4c-4dae-a745-09d7649307a9",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b8aca420-8839-40c1-9cdd-78222005c869"
        },
        "item": {
          "id": "08c1b178-6364-4619-afe2-bb06abd190f2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4c7ab245-4ce0-44a7-8ec0-dd514ceed0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e6af32-3079-499f-b24e-aa07027082a9",
        "cursor": {
          "ref": "0d5dbe7c-ea3d-436f-8382-5258d2381873",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5d4a7a40-9bb7-4dc5-bde4-031c75e49f03"
        },
        "item": {
          "id": "b6e6af32-3079-499f-b24e-aa07027082a9",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ad4cc66e-6cb4-4f20-8b6b-3fb76e0be816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b823c1-c575-4054-a256-56624952e2cb",
        "cursor": {
          "ref": "451e9731-0ef2-42b7-b158-3beda49a9145",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "5b06c986-967e-4c87-a2b9-68c2a38e44c3"
        },
        "item": {
          "id": "98b823c1-c575-4054-a256-56624952e2cb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0730d048-859d-475b-be7b-bbeb2369e782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7d06f2-33cc-4650-9b1b-22f660826aff",
        "cursor": {
          "ref": "e60abbe3-3d39-409e-a74e-b4e787680fc2",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "09b57c94-e47e-4126-b78a-9a41d4757b7a"
        },
        "item": {
          "id": "0c7d06f2-33cc-4650-9b1b-22f660826aff",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0948aa29-d743-4562-8114-2f8c31fe1850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056586fa-3d3b-4277-9203-c70a6694a3db",
        "cursor": {
          "ref": "9c714f43-63be-4af7-9c9c-fd94b40a18c2",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "410b794e-c7a5-4f81-9424-8d98d4dcbe1d"
        },
        "item": {
          "id": "056586fa-3d3b-4277-9203-c70a6694a3db",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4b070efa-aaa5-40de-9721-2a81f8aed864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24548b21-c2f1-4d9a-a74e-ef2657c354f3",
        "cursor": {
          "ref": "16a70292-4fc5-4795-b9ee-d50859c40493",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9b1707ff-e3c8-445f-8afc-465f8dc43091"
        },
        "item": {
          "id": "24548b21-c2f1-4d9a-a74e-ef2657c354f3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ed0990c2-580f-4b86-bf6a-0c143f177e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce9a369-38e4-4daa-b6c7-ce760a3cd894",
        "cursor": {
          "ref": "930dac55-e7fd-4f0c-9189-28e78f24db39",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4853ddb8-ff2f-42d3-af8c-a29844c30644"
        },
        "item": {
          "id": "4ce9a369-38e4-4daa-b6c7-ce760a3cd894",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bb3b36ef-5306-45f5-9d80-c4140327bfd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f693019a-087e-4e3d-99ef-fa2448fc1667",
        "cursor": {
          "ref": "1d01346d-b2b1-4824-8e9d-5b34bc5fb138",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "de4f1d0e-64f6-4f83-b20c-d3547adabd2b"
        },
        "item": {
          "id": "f693019a-087e-4e3d-99ef-fa2448fc1667",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "785bc1a7-f111-4811-984f-b9aead7101e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa942bd-47ff-4196-bde9-584c008b09c3",
        "cursor": {
          "ref": "ba64bb6e-e145-4d94-b60b-30f287697f13",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5a6a6181-b2e3-45ec-a782-9386a9d3a2c7"
        },
        "item": {
          "id": "5fa942bd-47ff-4196-bde9-584c008b09c3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c0f23f3a-f15c-4d8e-97b9-ce763ca916e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5605cf0d-4c50-4a38-a568-f273b3c7ad2b",
        "cursor": {
          "ref": "22aa51bf-a744-4155-b52c-cf297f76b8f0",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "008c7130-f804-42b5-83d0-219fab61ffe3"
        },
        "item": {
          "id": "5605cf0d-4c50-4a38-a568-f273b3c7ad2b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "16de5d34-393a-4077-9991-5a0ec5a20b54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e77f76-c38a-47ac-9ccd-0e64325b22e0",
        "cursor": {
          "ref": "798a602a-f2fc-4dc9-ae7b-2499ec772978",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c532f85b-c872-406a-b778-f5015e9e2373"
        },
        "item": {
          "id": "20e77f76-c38a-47ac-9ccd-0e64325b22e0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5eff9453-0a00-4a50-8df6-9e3d81f5a3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ec463a-f302-46c1-afa0-633620d1e825",
        "cursor": {
          "ref": "13f0daac-b0ec-4851-9666-f53b61f01601",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "07d6e9d2-6264-4e9b-912d-f680df59ce98"
        },
        "item": {
          "id": "07ec463a-f302-46c1-afa0-633620d1e825",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c8bfc842-6d1a-41c5-b33f-a9f2c485064d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee156f7-93ea-4f60-aa0d-f2ae62f02fc1",
        "cursor": {
          "ref": "b987a0b9-8978-493a-9759-04c8b9e9a16e",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ac07cf98-bba2-4616-ad9b-2b63a2c1f36e"
        },
        "item": {
          "id": "eee156f7-93ea-4f60-aa0d-f2ae62f02fc1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "39788175-c5ec-4bd3-88c8-62545b2e989d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "966ca230-faab-44cd-b7d4-90b4b8ea0382",
        "cursor": {
          "ref": "1094ea38-d98e-4447-b22c-16eedd77c0b0",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "64147174-3b2c-472e-bfab-14e4c5d20209"
        },
        "item": {
          "id": "966ca230-faab-44cd-b7d4-90b4b8ea0382",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ee7bb2fa-51e4-479d-b9ce-3421b3ceff86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ea7c445-1f07-4508-b4b7-79fc6d69cecf",
        "cursor": {
          "ref": "83311eaa-f527-4ac9-9883-3d0b8d7b8549",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "15722070-836a-45a4-92f0-de6a3e9dc7ae"
        },
        "item": {
          "id": "2ea7c445-1f07-4508-b4b7-79fc6d69cecf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6f8a1a25-cd61-4b39-85d3-760c01db9eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "401916d8-c9a7-41c8-8153-b6b2480711f5",
        "cursor": {
          "ref": "dcdd3340-5ad5-4902-a65c-6f8ebe686d09",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "45064191-1bd5-445b-a7ef-af1dfd4371dd"
        },
        "item": {
          "id": "401916d8-c9a7-41c8-8153-b6b2480711f5",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "481552d5-c9de-4efa-9dc9-2d58489b2770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 17,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254d8ce1-336d-45d5-8422-e7b328a41309",
        "cursor": {
          "ref": "16194170-6eab-4753-97d3-ea3464825979",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "abc9d66f-d42c-4b73-ab2d-051355055340"
        },
        "item": {
          "id": "254d8ce1-336d-45d5-8422-e7b328a41309",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "87188539-cea0-40ba-8719-455343dda302",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b69414-e512-45fe-b4de-4714970341c3",
        "cursor": {
          "ref": "274dcc02-d9e5-4428-84db-307712568a3a",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "378e0124-8c89-4d1b-b20e-81d7cfa899ad"
        },
        "item": {
          "id": "29b69414-e512-45fe-b4de-4714970341c3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2a4090b7-09c5-4a3e-a29f-5904e19f21d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282f402e-ac4d-43f2-a2b6-bc1c35cd00b3",
        "cursor": {
          "ref": "70a423a4-ae4f-40dc-a403-0cb994e7986e",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "56cfc709-bf5c-43dc-a732-64a2875b5d83"
        },
        "item": {
          "id": "282f402e-ac4d-43f2-a2b6-bc1c35cd00b3",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d8644a8d-8e35-43ac-98fa-2fc10aed178f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1133078-37e4-479f-94c8-2e5b22e9c37e",
        "cursor": {
          "ref": "0c853043-0149-4d08-99a9-93f0244db2cc",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1457e11d-2409-41b4-8f91-5987f09e9481"
        },
        "item": {
          "id": "f1133078-37e4-479f-94c8-2e5b22e9c37e",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "174833d8-c7ff-4228-8a73-2c885f3eb796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2627b7cc-a816-41a3-b88e-84fb01f90dcb",
        "cursor": {
          "ref": "6928eb7f-9950-444e-8a67-708fbc4f66e8",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0b5d9938-68af-4094-8ddb-66f2548095e7"
        },
        "item": {
          "id": "2627b7cc-a816-41a3-b88e-84fb01f90dcb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8d5fdb19-36af-485a-9c70-e41c2fa0b49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "ba96b168-6f07-4b74-929f-5282547adcf0",
        "cursor": {
          "ref": "c4fcc71a-c92c-4b93-821b-7e4c49a11a33",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0f28921c-4cd8-4521-ade4-716b086d2cc7"
        },
        "item": {
          "id": "ba96b168-6f07-4b74-929f-5282547adcf0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "674d2722-ccb4-4584-b801-07c05a739527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "4bc7819a-afd6-486f-9a8b-799a167c89da",
        "cursor": {
          "ref": "313c6d77-6737-46e6-9311-9395d1403742",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3bd42020-0d1f-4c09-b59b-357179051ed4"
        },
        "item": {
          "id": "4bc7819a-afd6-486f-9a8b-799a167c89da",
          "name": "credentials_issue"
        },
        "response": {
          "id": "42f6a7c5-c8e7-4b69-acbd-476d35cb4e2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "09dbe6ca-4802-487b-ba88-50ac8374fc94",
        "cursor": {
          "ref": "4587cfb8-f79d-4466-b97c-922934cd8eda",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3af5295d-55ed-4ba3-bcb4-6c3b1374212b"
        },
        "item": {
          "id": "09dbe6ca-4802-487b-ba88-50ac8374fc94",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6da37876-c0da-41c9-8722-dbdc54dccfea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "829aa079-22a8-4a5f-b888-7975cab351ed",
        "cursor": {
          "ref": "f20bbca8-f412-4e82-9f38-09a67bb5fd17",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cf14e458-7af2-4911-9555-cff54d5d4506"
        },
        "item": {
          "id": "829aa079-22a8-4a5f-b888-7975cab351ed",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e3143759-7aa9-4123-962d-c938a4207aeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "0f5b36f6-6626-4342-b36b-f8f741fd83b6",
        "cursor": {
          "ref": "e6bd41a1-40ad-43d4-9fff-d6da20f3a2d2",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e04355da-4a0e-4f42-a1f3-eefcba680ccf"
        },
        "item": {
          "id": "0f5b36f6-6626-4342-b36b-f8f741fd83b6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a6d5c350-1243-4fc9-93d2-77d17db5e975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "c273f080-1f35-4e7d-a819-daaf8fb05dd1",
        "cursor": {
          "ref": "6bba348f-0342-48d0-97b6-c95aabbcf2b4",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1d517130-0582-4a9e-b2dc-8e8df43afdf6"
        },
        "item": {
          "id": "c273f080-1f35-4e7d-a819-daaf8fb05dd1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d6c0b61a-d14f-4a9a-9d94-96179f175c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "eebf5328-db2f-4652-805e-f95fc5d09a26",
        "cursor": {
          "ref": "f6d91514-b0fd-43b5-94c2-8ba6e1a2fca7",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b25e1bfd-0322-42b9-a289-271492d49a84"
        },
        "item": {
          "id": "eebf5328-db2f-4652-805e-f95fc5d09a26",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1aab5d3a-bb52-4dee-8c28-59b570bbeede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebf5328-db2f-4652-805e-f95fc5d09a26",
        "cursor": {
          "ref": "f6d91514-b0fd-43b5-94c2-8ba6e1a2fca7",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "b25e1bfd-0322-42b9-a289-271492d49a84"
        },
        "item": {
          "id": "eebf5328-db2f-4652-805e-f95fc5d09a26",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1aab5d3a-bb52-4dee-8c28-59b570bbeede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f17777a-9cd5-4e7c-90db-51f41bfee96f",
        "cursor": {
          "ref": "1ff359b9-fdf6-4e96-aabc-4b7b917a8801",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "da2f8065-137f-4bc9-b159-4da3f099b2be"
        },
        "item": {
          "id": "9f17777a-9cd5-4e7c-90db-51f41bfee96f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c4d3cece-e1e9-4192-80be-6dd74eeb034c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f220b9cd-9aa9-43dd-be70-d5988a4d81d2",
        "cursor": {
          "ref": "8bcd5516-6e7d-422a-82ff-0bfe9692626e",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "47ff5786-a3bc-4c2c-9703-0758db534b58"
        },
        "item": {
          "id": "f220b9cd-9aa9-43dd-be70-d5988a4d81d2",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "34e40664-4157-40fd-a305-e5b4e4462870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52546000-e32a-41c3-ab30-26423e795c7c",
        "cursor": {
          "ref": "f5ea4f2d-0a7e-4d2f-9256-ac5222f6d40b",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1216ed85-a0e6-47a2-bc4a-f7cca1e9333b"
        },
        "item": {
          "id": "52546000-e32a-41c3-ab30-26423e795c7c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cf053b01-92ae-466d-bb80-df9a14a5df77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4389ab2-f488-4367-bbda-8d4bc04bbdf1",
        "cursor": {
          "ref": "7e50c8c7-4bb2-4455-85ae-3d03b7359acf",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "28330213-f71d-4b63-9851-3b799def592a"
        },
        "item": {
          "id": "e4389ab2-f488-4367-bbda-8d4bc04bbdf1",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5a10b191-609a-4e3b-b352-c9033773e24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b343b425-86ce-4f6c-ba56-46b9ff074b73",
        "cursor": {
          "ref": "47424783-ae55-4317-8476-18f0ac13adf9",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9260cdf9-1d30-4e28-a8dc-eb6d7bcaba6e"
        },
        "item": {
          "id": "b343b425-86ce-4f6c-ba56-46b9ff074b73",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bb6a8376-84a9-40c0-93f1-6270144f7fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 12,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86003cfc-21e7-4fb6-a3ba-dfe504a2f856",
        "cursor": {
          "ref": "1012054a-80b7-4721-b82a-222f7f5ee586",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "566ce48c-e62a-444f-acd7-b0053355d1e4"
        },
        "item": {
          "id": "86003cfc-21e7-4fb6-a3ba-dfe504a2f856",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d85931b0-bc6e-4c16-992f-8357ef425227",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9eb306dc-ff4a-497d-8474-dd3ed211219b",
        "cursor": {
          "ref": "62996913-0952-40bf-b55d-c30cfeaac0f3",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "50600f45-59bc-46d7-90ae-b3e494902a28"
        },
        "item": {
          "id": "9eb306dc-ff4a-497d-8474-dd3ed211219b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "0aa008f4-1a12-4e7a-ab9d-677a0458eb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5e62f1-a095-4d3d-ac3e-f18eadabfc9e",
        "cursor": {
          "ref": "f44799db-8e35-47b7-acfc-001d9b27249e",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "aae3c3d1-c673-429b-aab5-b528c6c419eb"
        },
        "item": {
          "id": "3c5e62f1-a095-4d3d-ac3e-f18eadabfc9e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "e60abd8f-760e-4576-879b-2a74c474e828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46b54ff-af94-4e13-8fa9-e1523afadf66",
        "cursor": {
          "ref": "95e98932-7f14-423d-96f6-cfd924004466",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "05c4eb95-c722-4ef4-9a19-6315584292f2"
        },
        "item": {
          "id": "f46b54ff-af94-4e13-8fa9-e1523afadf66",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2add31aa-7f59-40bf-8d3d-6083a2ec6155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15808f6-5ab1-45d3-8be9-62d473162d32",
        "cursor": {
          "ref": "5b8eab9e-106d-457a-a4a0-832d96883dde",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "57e6a8c1-f9b6-4d47-9fa6-49d42bdfb5f6"
        },
        "item": {
          "id": "e15808f6-5ab1-45d3-8be9-62d473162d32",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "908845ab-6c6a-46e1-988c-4be04856fba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab036dc5-70ae-4815-8ad5-2216305fbf24",
        "cursor": {
          "ref": "6360ba83-0542-4216-b6be-74ebc76e5c56",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "51cf2f11-db66-4d38-bc4b-8ee37cc9b634"
        },
        "item": {
          "id": "ab036dc5-70ae-4815-8ad5-2216305fbf24",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "494b9417-aafc-4329-ae13-6fe24688c776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66712cf5-578e-45a0-9c38-f304c1b60382",
        "cursor": {
          "ref": "2a8a08ac-df29-460b-8266-f008850bd490",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2f04077a-b66b-4dd4-8fab-83f0f50a58d1"
        },
        "item": {
          "id": "66712cf5-578e-45a0-9c38-f304c1b60382",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7400a371-dbf4-45e4-8771-1c4f5921b187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8b4692-7d72-4dd3-babd-e1ae7db898c7",
        "cursor": {
          "ref": "eb3b633a-eb28-484f-94f8-f18bcfb42202",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2a11b743-2741-4ee8-b45d-2e87986cea7d"
        },
        "item": {
          "id": "de8b4692-7d72-4dd3-babd-e1ae7db898c7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bf38fc4d-622a-417c-b8a7-299d8f369d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f43a704-833b-43f4-8957-77cf89ba8465",
        "cursor": {
          "ref": "f30f8495-e82a-478a-ad42-ca999be0b9eb",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7b605d8c-ffc5-467d-892a-a076c82119ab"
        },
        "item": {
          "id": "1f43a704-833b-43f4-8957-77cf89ba8465",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9aa4cc52-a91a-4805-8f87-c00732efa438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e6d40e-110c-492a-b955-0a60b5195f3a",
        "cursor": {
          "ref": "8f0e6c59-8391-471c-8827-9f7f0576daf3",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "03168159-e84a-4e72-a8e1-93383105934b"
        },
        "item": {
          "id": "17e6d40e-110c-492a-b955-0a60b5195f3a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "22de775e-19bd-4d1d-8caa-620ca64897b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640d161e-2e3a-4198-9db6-0ecb4fbd7f32",
        "cursor": {
          "ref": "9bc5c4ae-308b-4ed6-b93a-92b8a148ed3d",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f4c8de51-e656-4842-96f2-1c94e346cc3a"
        },
        "item": {
          "id": "640d161e-2e3a-4198-9db6-0ecb4fbd7f32",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "847c30ae-a64b-4abc-9772-81f73c2e2f90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d061d506-33ac-4095-82f0-fd678248ee9f",
        "cursor": {
          "ref": "27197416-24ea-4e2a-b65d-8745dba82001",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dfcf6842-5542-4cd7-8273-e340f61f6ab5"
        },
        "item": {
          "id": "d061d506-33ac-4095-82f0-fd678248ee9f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3b5c2520-3578-43a5-896e-ba2fc6bb8ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8d4da7-9174-4268-b2a9-dac6c5534155",
        "cursor": {
          "ref": "ee5db6a6-74e8-448b-a302-8b39d56dc764",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5c4d8268-1f56-4b08-883f-d660d19486e0"
        },
        "item": {
          "id": "8c8d4da7-9174-4268-b2a9-dac6c5534155",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "dfb3e200-4c50-41ef-a57e-3b0614dee16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ecee3b-f450-41da-ae12-4c40ba3f3e8c",
        "cursor": {
          "ref": "29cccdfe-12a3-4a35-ac6c-8331d00bbba9",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "03926f65-dd9f-442d-b87f-a8b64804032f"
        },
        "item": {
          "id": "57ecee3b-f450-41da-ae12-4c40ba3f3e8c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9776c4eb-32d7-44cd-8dc1-ac5a59e9befe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21505e06-cb11-4839-8521-2c09011feffe",
        "cursor": {
          "ref": "49e76a1f-f3c6-4687-aa70-87ef79483902",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a01d1f1b-aef1-4406-89be-223e9c9f3426"
        },
        "item": {
          "id": "21505e06-cb11-4839-8521-2c09011feffe",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5e171df8-5d99-4ff5-8b74-6f8bb1b115b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8a6fae-2163-4c53-93d0-86be15468908",
        "cursor": {
          "ref": "772caa4e-5a80-409f-8f72-82cbefe9b1d0",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4015db03-6f59-4181-b0af-d9d1e6534a82"
        },
        "item": {
          "id": "ac8a6fae-2163-4c53-93d0-86be15468908",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0baf835d-51fe-4a40-9051-531bb145d4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ae5b39-430f-40d9-81b7-f4084824107d",
        "cursor": {
          "ref": "daaf6707-26d5-4463-a954-0948f0f80ffb",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "46cf8900-64a7-4f01-b3c3-053803a7a289"
        },
        "item": {
          "id": "53ae5b39-430f-40d9-81b7-f4084824107d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "15416f50-5196-4405-9ac2-3022558260c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8a1aab-d3b9-4b13-93cf-03309345766b",
        "cursor": {
          "ref": "5cbc2486-ec3d-4689-8435-a66e81b1990a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b75d6b3b-2581-40c7-a4ba-143273baf2e0"
        },
        "item": {
          "id": "ca8a1aab-d3b9-4b13-93cf-03309345766b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "294ba373-3d3e-4f2c-9bd1-95b143c7a945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9771b9df-304d-4515-9849-8e0a85e5b46a",
        "cursor": {
          "ref": "6958742b-183b-4116-be76-45cee63b7fa1",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "118e47b5-0f95-4a66-9e0c-d61a6387aefc"
        },
        "item": {
          "id": "9771b9df-304d-4515-9849-8e0a85e5b46a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0d6b9807-a7e7-48fd-a3b4-7fe74f8ca689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d690729a-61de-4d91-bd56-eed52ad7c84f",
        "cursor": {
          "ref": "c87fee26-1974-4c0a-ab28-687182c07fd3",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "eb6b0c30-471e-4e88-8c1b-53543dfadc90"
        },
        "item": {
          "id": "d690729a-61de-4d91-bd56-eed52ad7c84f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5f065515-907d-4f9b-9b34-d2c6dfbeab80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ebbf1a-b584-4055-93ce-deca49d7a287",
        "cursor": {
          "ref": "d21bf4af-260a-41e8-938b-cf4b34c4a0e0",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "27846023-f5a2-4bf6-a6a7-c0a6de991452"
        },
        "item": {
          "id": "59ebbf1a-b584-4055-93ce-deca49d7a287",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8a965c9a-2d53-4e16-a2f0-ccbc6f8a5643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409a489c-f68a-4916-8103-b6f4a42ab7b9",
        "cursor": {
          "ref": "47e59989-5d09-49b2-880f-0ceabc016954",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e2c6100e-f8fd-4974-ae22-ce2a85cfea08"
        },
        "item": {
          "id": "409a489c-f68a-4916-8103-b6f4a42ab7b9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b46e4e9f-2a1b-4314-a2af-7a093442aefd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94564092-fa40-4c6f-b983-16479017801b",
        "cursor": {
          "ref": "2c4faafa-9e42-4ec7-aea8-bb43020df0fe",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cd2ea932-2011-4488-88be-d133a7e32041"
        },
        "item": {
          "id": "94564092-fa40-4c6f-b983-16479017801b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a25e711a-177e-4f81-8993-bad7be42797c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7102f9d-d24a-40ba-8149-27e3e9bf47aa",
        "cursor": {
          "ref": "8b0eb04a-fba3-43d1-877f-7ff2e8e678c5",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "684ccbf5-a549-4273-9784-22d6df2884ac"
        },
        "item": {
          "id": "a7102f9d-d24a-40ba-8149-27e3e9bf47aa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ab6f02bd-d2e7-44c8-ab45-786556941706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27663ddd-e6bb-4e2d-a549-70f6a88371f6",
        "cursor": {
          "ref": "2d29da57-3c24-4943-a36b-2b5b7e659b8d",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b10687cc-643c-4b36-ac0d-c64d6e21feb0"
        },
        "item": {
          "id": "27663ddd-e6bb-4e2d-a549-70f6a88371f6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d5c1fa03-6776-4456-94fc-38bd5fa2b0db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c742e3f9-b648-414d-8e41-8bbebc60cf67",
        "cursor": {
          "ref": "aeb40b80-156a-46d9-a4a5-940ce29e6b63",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "679f19a9-d25f-43fa-9ae1-292550a37278"
        },
        "item": {
          "id": "c742e3f9-b648-414d-8e41-8bbebc60cf67",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6e2e8c37-6de6-4dd9-aabe-48d17cdd0067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b3999a-c62a-448b-9345-385c5212717b",
        "cursor": {
          "ref": "6bca96ff-acd4-4bdf-8786-413d801a57de",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "44773eeb-73ed-43c4-b2da-30e585414119"
        },
        "item": {
          "id": "01b3999a-c62a-448b-9345-385c5212717b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7c08dc42-16d5-4d8c-a580-5525081f93b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "7265574f-0c3c-4546-937c-7254e81925c2",
        "cursor": {
          "ref": "77713c49-22bd-47da-890a-5b3c84f5207f",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a0545f42-7ab2-4fa6-8902-1630504916e1"
        },
        "item": {
          "id": "7265574f-0c3c-4546-937c-7254e81925c2",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "0ab7b3e8-9684-442b-bf10-003199aa67ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "2f00e818-f650-4abc-80ad-78c2a5ab7f82",
        "cursor": {
          "ref": "e4efa950-ec36-4551-bb60-0370b41fdb0b",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c6116467-a174-4990-9a2c-e1d1194e6b1f"
        },
        "item": {
          "id": "2f00e818-f650-4abc-80ad-78c2a5ab7f82",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8a13a59e-237e-4300-99b6-ab482364db5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f00e818-f650-4abc-80ad-78c2a5ab7f82",
        "cursor": {
          "ref": "e4efa950-ec36-4551-bb60-0370b41fdb0b",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c6116467-a174-4990-9a2c-e1d1194e6b1f"
        },
        "item": {
          "id": "2f00e818-f650-4abc-80ad-78c2a5ab7f82",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8a13a59e-237e-4300-99b6-ab482364db5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f517c471-1579-4a51-a22a-95e37218cbf6",
        "cursor": {
          "ref": "d816ab27-b37d-4f1b-a24c-f6a8cdef5f88",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "01135355-6b93-488c-9dfb-d30a355edf4b"
        },
        "item": {
          "id": "f517c471-1579-4a51-a22a-95e37218cbf6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4dcd1a8a-7609-4541-99c9-878b0b69f918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d7ec85-1140-48e2-a6d8-89744efd6cc2",
        "cursor": {
          "ref": "3f2385bf-20ba-427c-a7ab-55fca6024876",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a67e7e4b-ab40-4f8f-8c37-28ed0465575c"
        },
        "item": {
          "id": "f9d7ec85-1140-48e2-a6d8-89744efd6cc2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "60cb7ff2-f208-4977-bef5-fae706881e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c287f083-efc5-4d95-9ded-0899c3afee24",
        "cursor": {
          "ref": "2e112f90-ebfa-43e8-a67b-8f4b67c68e8b",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "11b6c921-c1f4-4200-8fc0-830ec946e7f1"
        },
        "item": {
          "id": "c287f083-efc5-4d95-9ded-0899c3afee24",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bc7eb69d-08dd-4fcb-a42a-1b5e191341be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a965a0b-3d80-45e7-9b3b-f993dcaa9bb0",
        "cursor": {
          "ref": "96cb6cda-8194-4250-b1af-a3d3819a12d1",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "34474ff1-3cc8-41bd-bdc6-92a4fd474003"
        },
        "item": {
          "id": "1a965a0b-3d80-45e7-9b3b-f993dcaa9bb0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "13f52a63-6f8c-4134-ad66-9205fcd480f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb68a0c-a39d-4e5c-abf8-2555c45a8519",
        "cursor": {
          "ref": "3eaa695e-7935-4fdc-b28b-4bdc0647fad4",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "36fd86eb-7c7b-433f-b600-95694ae116ec"
        },
        "item": {
          "id": "3fb68a0c-a39d-4e5c-abf8-2555c45a8519",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3e8d0d91-6424-4bfb-a0df-5d0a80515cdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d68a01e4-e596-4be1-9220-09263fa81d21",
        "cursor": {
          "ref": "e87fd726-3c4a-4fd4-bcca-bbae174da72c",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d5dc8ba0-8fe5-430a-a39b-69352ee2d5fd"
        },
        "item": {
          "id": "d68a01e4-e596-4be1-9220-09263fa81d21",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "d1a9f2df-e11b-4946-9aed-1b811c31cb9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30ea112-96d7-48f5-bf57-58448b225e36",
        "cursor": {
          "ref": "103ee715-0bf8-45c4-bca0-4e85d705c5c0",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "bf703a5d-9bd4-4132-b7fd-21557303058d"
        },
        "item": {
          "id": "d30ea112-96d7-48f5-bf57-58448b225e36",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9a5afdd6-a944-43f7-85d6-37eba3589d47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352aac07-f961-4153-8482-4c6c80a4a398",
        "cursor": {
          "ref": "984f5225-a31b-45e7-a426-ec9011ad1f17",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1db9f145-0732-4f25-aa44-6d296ba77726"
        },
        "item": {
          "id": "352aac07-f961-4153-8482-4c6c80a4a398",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a7ad171f-e4f6-4061-9aad-044a14b480b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64912d13-6692-4872-be1c-fae5777e774a",
        "cursor": {
          "ref": "df3fbac1-bd7e-453a-9d05-5ef8c294eb9b",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "55d5f884-4b8b-4315-8507-8150379cffac"
        },
        "item": {
          "id": "64912d13-6692-4872-be1c-fae5777e774a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a1a8c286-fc93-4d5e-997d-57155729f594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "116020b1-7312-4ab2-8366-7896891eaab6",
        "cursor": {
          "ref": "607650cc-ccc9-4ff6-99c0-2cfb47e5acf2",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f2eb8484-9563-4d0c-8f25-af8536ef7e2b"
        },
        "item": {
          "id": "116020b1-7312-4ab2-8366-7896891eaab6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "773e9eef-9479-4e59-b2cd-fe8433ee71bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8472a8d1-b156-4f39-b7e2-06cb95c9fb35",
        "cursor": {
          "ref": "dac10f23-f961-4761-bb2e-019c1c8e4811",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "61b54c72-288a-4cee-bd1f-c083086d9be0"
        },
        "item": {
          "id": "8472a8d1-b156-4f39-b7e2-06cb95c9fb35",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "3f0d86dc-be77-467a-b0a0-1fb162b407ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 15,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3aa403-3f62-4e68-8e20-6bb91fc5247f",
        "cursor": {
          "ref": "65ef0414-d133-4c13-a592-22196214f1c9",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3b3fd0ab-8f54-458b-af0b-bd77d147bd58"
        },
        "item": {
          "id": "bb3aa403-3f62-4e68-8e20-6bb91fc5247f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "08cea534-332b-4fe8-9058-b0ab5ffbce3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb7d13f-c771-4c1f-870b-b7608769bb3c",
        "cursor": {
          "ref": "6d78c63d-3ba3-4137-aaed-83277d92f20a",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f5d6dbaa-c10b-49f2-af52-a3c6f26b2ada"
        },
        "item": {
          "id": "abb7d13f-c771-4c1f-870b-b7608769bb3c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d8bd5452-f2db-4550-be3e-c02988642b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6fdd2b-8c49-418e-86a2-f550d5c5e91d",
        "cursor": {
          "ref": "72cd5a64-17b8-4c1d-9efb-93e3f6b73ec4",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ce3d342b-4279-4677-82bd-0722a9845aa3"
        },
        "item": {
          "id": "8c6fdd2b-8c49-418e-86a2-f550d5c5e91d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "5520e3be-743a-4e42-8be5-90fdee3dd8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdeda19-a154-4e61-8748-f509de69e241",
        "cursor": {
          "ref": "c0136f04-8690-4441-8cec-4bb1800c9609",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fe383a1d-b454-4813-bb06-8b6fcc14ad2a"
        },
        "item": {
          "id": "8fdeda19-a154-4e61-8748-f509de69e241",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "23ec61e9-1c0a-4de1-9df1-9e8c54ddba55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f41b2d56-7841-497d-ba05-977c6b6f81a6",
        "cursor": {
          "ref": "9d9ed820-b9d2-4e62-bb50-07fe997a6707",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "cad8e056-e9b5-4d03-a2cf-4c32b7c00346"
        },
        "item": {
          "id": "f41b2d56-7841-497d-ba05-977c6b6f81a6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "80ad08d9-ea87-40a6-a762-b11b46d69664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fa7f9a-5570-472f-b3a5-5a8ab8c5a4e7",
        "cursor": {
          "ref": "bf985266-f9e8-44d6-ae96-1c12e61ca4eb",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d3560533-2d31-4c0d-b409-7b6ae433248b"
        },
        "item": {
          "id": "07fa7f9a-5570-472f-b3a5-5a8ab8c5a4e7",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "e54534dc-a19c-49e5-b775-6bfa48d74b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aefcb80-8085-44a3-9c4d-f676d912ff04",
        "cursor": {
          "ref": "d6f3d5e5-ac92-4638-be00-14632b70344e",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "1388117f-e14a-40ad-903f-ce5244134d4e"
        },
        "item": {
          "id": "9aefcb80-8085-44a3-9c4d-f676d912ff04",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "16a48601-65f4-446d-8190-fc56c1414c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba450a8d-fad2-482f-a0b7-c10cd4dd8382",
        "cursor": {
          "ref": "5c9bd793-9ea0-446d-8a89-1efaa6994959",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bc5b4479-6696-49dc-b087-8c69691a2bb1"
        },
        "item": {
          "id": "ba450a8d-fad2-482f-a0b7-c10cd4dd8382",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "34654493-4eca-445e-aa45-273600ec6445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6987d72-99d5-4249-9d3b-66743e986cd2",
        "cursor": {
          "ref": "0163fe14-6af1-43d7-8665-a70d55648823",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "681a3cbc-eaf3-4281-b356-b09f7cfd2654"
        },
        "item": {
          "id": "b6987d72-99d5-4249-9d3b-66743e986cd2",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "4cc7eb88-121e-4078-896f-3de51b64c87b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d003c3a4-b126-4855-ab04-9f0404a71583",
        "cursor": {
          "ref": "0fb7ac8c-2ea5-4453-9a71-dfaccf460915",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "402ee5cf-3337-4f16-b25d-5e8a808d94fb"
        },
        "item": {
          "id": "d003c3a4-b126-4855-ab04-9f0404a71583",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "2c71132e-fb7f-426b-867c-31a442599b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352f1977-df60-4794-a296-4fd408356048",
        "cursor": {
          "ref": "9ab4678b-bd9a-4f7f-9b8c-06a759df8f82",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "a9f013f2-5d39-43ea-a72c-aa3a29dec65b"
        },
        "item": {
          "id": "352f1977-df60-4794-a296-4fd408356048",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c565d3a1-61ad-4085-8b6d-4cfdf43d9743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8028c11-09ec-4755-8603-523eefd38d91",
        "cursor": {
          "ref": "fd406306-7f1b-4213-9918-49a39d46c8f3",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "85a7df0a-a1fa-4506-9560-1dd5cf6305a0"
        },
        "item": {
          "id": "d8028c11-09ec-4755-8603-523eefd38d91",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a57b2446-a7d0-41f8-bf44-488f80a91483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216b9c95-81c2-4bc3-a532-85538d179b5b",
        "cursor": {
          "ref": "a9753c35-31a8-4c88-b1a2-a9b1c9166b7e",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3e9f1c0b-bf92-4146-a2b9-bb6143579089"
        },
        "item": {
          "id": "216b9c95-81c2-4bc3-a532-85538d179b5b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cf88dfb4-67ba-40ae-9de9-47612d5b4407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d69be8c-7415-4d7f-a2f2-605a78d4c8e2",
        "cursor": {
          "ref": "9168094f-2eb6-4bc9-9169-047b9fc647d1",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "566e6c1b-484e-41d8-9312-f2c0c2269ae9"
        },
        "item": {
          "id": "9d69be8c-7415-4d7f-a2f2-605a78d4c8e2",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "942d3d5d-3578-4217-9331-75a6cb858ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc4e739-236d-4b21-a468-1b706349a88a",
        "cursor": {
          "ref": "17f4a32d-b18f-4589-9797-60770a4bf575",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "72d4d8ea-4348-46d6-b8ab-8b613918c9f2"
        },
        "item": {
          "id": "adc4e739-236d-4b21-a468-1b706349a88a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aad65464-071c-4075-9187-86e0f58da6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e00517-7c94-4a93-9719-a28067641d17",
        "cursor": {
          "ref": "e336cc64-fee7-499b-b5ec-e8716473ec8d",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8b573f72-c375-4d96-9b04-0ccbb82f168d"
        },
        "item": {
          "id": "38e00517-7c94-4a93-9719-a28067641d17",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3270e8c4-8726-4fc3-8ce6-7863946406b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a572651-7356-483d-a19c-188428349761",
        "cursor": {
          "ref": "6a8d156c-c139-431a-b753-a688eb8b9880",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "e4d2a148-ac6f-41f2-ac1c-caafb96dc397"
        },
        "item": {
          "id": "9a572651-7356-483d-a19c-188428349761",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1dfd140c-92cb-456d-a26c-0c46aae02591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79847265-a093-427c-8aad-b6a004a3dea9",
        "cursor": {
          "ref": "f76d018f-4f40-4dfc-b098-d0ea12fed95b",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "a9467b95-9e87-4671-845a-6509407a1883"
        },
        "item": {
          "id": "79847265-a093-427c-8aad-b6a004a3dea9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "079fde3e-3ec8-4555-9c50-1c36c0e6ea56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc38b83-cc49-4512-8a08-19f84b01c69c",
        "cursor": {
          "ref": "d4bd4fda-2da3-47c3-9efb-10bb170a8725",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a0eb4ce1-a15c-45df-b9ea-3a78b5e0884d"
        },
        "item": {
          "id": "0bc38b83-cc49-4512-8a08-19f84b01c69c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f39b062e-8115-41d0-815b-f9fadf859725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b8f74c-a8b8-4aa9-9657-21900a3dafd4",
        "cursor": {
          "ref": "1b346ce3-2f55-4806-abc6-1969ade281b6",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "03110f3b-2c47-496d-8909-aad343fcd2a3"
        },
        "item": {
          "id": "51b8f74c-a8b8-4aa9-9657-21900a3dafd4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "cc15895f-747a-4b1e-9a74-d18df37c7b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a64606ea-4409-4740-aaa6-5063a88a3437",
        "cursor": {
          "ref": "c9e50b73-2558-42c1-b4f3-9b5559e13662",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a511d563-ebf1-4e93-9c73-ebdc6f51eb19"
        },
        "item": {
          "id": "a64606ea-4409-4740-aaa6-5063a88a3437",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ee53a016-b140-4273-9813-51a84c5dae3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95bf10e9-b231-4a9e-903b-22a507693f5c",
        "cursor": {
          "ref": "a621da1c-9366-480d-a23f-6295912e783a",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b289ba13-d816-4491-ae0a-45c972094ae8"
        },
        "item": {
          "id": "95bf10e9-b231-4a9e-903b-22a507693f5c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4a095b6a-eb35-409e-bb62-10ad02e40818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb8edbbb-355b-48e2-a8c7-7edc041cbef5",
        "cursor": {
          "ref": "abf90101-2682-4b56-8cef-98cc790aa582",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b554cb78-fd7a-4d37-904b-2ecb9d798607"
        },
        "item": {
          "id": "fb8edbbb-355b-48e2-a8c7-7edc041cbef5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c9dd0973-5791-4862-b329-c2faa7082870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b2e746-b110-449f-bd08-5b87134c5cce",
        "cursor": {
          "ref": "c4be5e4c-68e9-4e6b-8965-cb35968d5ad9",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3172f661-f0ae-4024-bfe4-7f1b4ac438bc"
        },
        "item": {
          "id": "03b2e746-b110-449f-bd08-5b87134c5cce",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f09fb2e0-c510-425b-ac3c-5aeac1e2b4a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3bc22d4-a7ad-4a8c-9506-a074f53e6603",
        "cursor": {
          "ref": "bcef0a8d-0ac7-46b9-9877-edc0f0db9cd5",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "23617f64-8b8a-4f67-a66e-214d1f483443"
        },
        "item": {
          "id": "e3bc22d4-a7ad-4a8c-9506-a074f53e6603",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "96d3d217-96b3-4993-95b9-8bdc761a79bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7272e0-f370-4b25-b08b-72fcc6c8870b",
        "cursor": {
          "ref": "43282317-f776-4184-8fe7-5de9041dec3e",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1854752f-e7ee-42fe-aa76-caf948bb1251"
        },
        "item": {
          "id": "3b7272e0-f370-4b25-b08b-72fcc6c8870b",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "404935fd-98b8-4d7a-ab48-29bcf5ae0e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf267fb-b1fd-4fb2-aa0d-b40c7452e14b",
        "cursor": {
          "ref": "977a76ba-9919-46bd-9b88-e5b46c90c452",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8b6ed3c9-4ad5-42b5-8e75-8f8a3de13936"
        },
        "item": {
          "id": "dbf267fb-b1fd-4fb2-aa0d-b40c7452e14b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6dd267d6-3766-47d1-aec1-33d713567af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4d83df-b401-41f3-ae88-7373a39ff172",
        "cursor": {
          "ref": "d0142199-1751-4392-9d70-f21abcb06627",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "7c990d81-36b4-414d-b1b5-c7dae03e4445"
        },
        "item": {
          "id": "ce4d83df-b401-41f3-ae88-7373a39ff172",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3fc5ecbd-d95b-4b97-a84c-ae4da66765eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2522a7a4-9dd5-41bf-ac75-7203b9799c8c",
        "cursor": {
          "ref": "d3fa0af9-f097-4dc8-8551-908d1e2b1075",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6e6bb39b-1f5d-42d3-a50d-b2e45b08bd7a"
        },
        "item": {
          "id": "2522a7a4-9dd5-41bf-ac75-7203b9799c8c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "15ffa532-53df-4aad-aa02-5848b3a4ba4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd96083-4864-4ca8-8c0d-b1da07945fb3",
        "cursor": {
          "ref": "046b4035-d750-42d5-b9f8-02256346eea4",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9aa335d2-d397-45f8-b51b-aa27bc922ba7"
        },
        "item": {
          "id": "2bd96083-4864-4ca8-8c0d-b1da07945fb3",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "944c2cec-a7c5-4d27-9a92-00531a08fd77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1668faea-0e00-4439-ab96-27a7e304dfc0",
        "cursor": {
          "ref": "0e150052-a649-4941-b403-2989e6ea8d09",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a0c65bc1-e7c4-4946-8f1a-a2850619814f"
        },
        "item": {
          "id": "1668faea-0e00-4439-ab96-27a7e304dfc0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "db44180b-9487-4043-9d98-136fb000aa08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0aa44d9-6c95-4abe-84df-4eadb0f9f248",
        "cursor": {
          "ref": "22ae668f-7032-46c2-bd20-8ee3292ad1cb",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "da8a97e2-c186-47d8-a36d-5596be54aec6"
        },
        "item": {
          "id": "c0aa44d9-6c95-4abe-84df-4eadb0f9f248",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a5b75bbf-7140-4df8-ba81-8c1cba2abc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8328e010-5a0c-49a0-99a2-ec842955d4e8",
        "cursor": {
          "ref": "0e7331c3-1f28-42c4-9a1c-544dfe47ae34",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8e5b8115-213f-4bfd-8e17-afa73db83d02"
        },
        "item": {
          "id": "8328e010-5a0c-49a0-99a2-ec842955d4e8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "623b7770-459a-45c8-b28f-0be34cc78119",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c407de87-1187-4be8-9602-198be37e758d",
        "cursor": {
          "ref": "a1649c96-9312-4fb7-b88b-873e3970bc68",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "86a71703-f9be-404d-bcb4-0bb734c4c6b1"
        },
        "item": {
          "id": "c407de87-1187-4be8-9602-198be37e758d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ece29f6b-1558-4566-9776-2be46866122f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84892928-6bc6-4bb4-abca-d52402f00a48",
        "cursor": {
          "ref": "51a2822d-7a76-47f5-87a5-d562d7485c51",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "37b3c280-dc6c-490e-bcac-0d55a884b6bf"
        },
        "item": {
          "id": "84892928-6bc6-4bb4-abca-d52402f00a48",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f9ab3830-5a26-4d93-bd82-d274c813947c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1cd04e-814d-40b1-9e7c-b1d2751bab28",
        "cursor": {
          "ref": "c4876ed8-996d-4359-bde6-2545429d3159",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9fd4e53d-61de-45b0-bbfa-e3b9c15d577a"
        },
        "item": {
          "id": "de1cd04e-814d-40b1-9e7c-b1d2751bab28",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b0da06c0-4998-4890-a6b5-a042167a575f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fc117d-8a03-4fbb-89b1-8dec2c7c5702",
        "cursor": {
          "ref": "47db7134-a386-4b62-9282-488d72795f11",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a72ea1c1-59bc-4694-9fc6-bc2be185a1ad"
        },
        "item": {
          "id": "03fc117d-8a03-4fbb-89b1-8dec2c7c5702",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e8446867-794d-4a1a-af52-2fbe7d34aa8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1953b1ca-c443-44a5-b27a-186f1356e2f7",
        "cursor": {
          "ref": "e25279aa-5286-4558-9a97-af3ce582d57b",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8ddd2978-c1be-492b-9502-ddc5cc03775f"
        },
        "item": {
          "id": "1953b1ca-c443-44a5-b27a-186f1356e2f7",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "846e8316-883e-4115-8cbf-4a4a624af0c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f671a803-fcfd-402a-a356-36549872acd8",
        "cursor": {
          "ref": "f97256ae-96df-4f5e-96eb-220e10aa015f",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b800832d-6d64-48bf-8e2f-cd1eae4d8c74"
        },
        "item": {
          "id": "f671a803-fcfd-402a-a356-36549872acd8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3ed20ef5-9013-4b23-9349-081b35fd806d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d542728-e421-4bbb-92aa-36002e56c93b",
        "cursor": {
          "ref": "e4b9a5f0-bab8-450c-8113-ae08ec60386d",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ff06325b-6d9b-4af4-b6af-5d684d9272df"
        },
        "item": {
          "id": "5d542728-e421-4bbb-92aa-36002e56c93b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f706cafb-9db6-44c8-92aa-1be14bf2bcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc30fa9-f854-4eb0-9ce9-3984518e9b2a",
        "cursor": {
          "ref": "d4b7e9b1-7914-41d0-b593-2302276fdd48",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "54607282-77cf-4f84-976a-9f649a6c67aa"
        },
        "item": {
          "id": "8fc30fa9-f854-4eb0-9ce9-3984518e9b2a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6065e66c-2bf8-419e-8640-7c4de0a202d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626fbf98-ac3e-4e26-b975-1f6202791a1f",
        "cursor": {
          "ref": "076d4256-49b0-48ae-8a42-d48e27009afd",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b1979565-6128-45bb-a3ee-d96e24fc1c67"
        },
        "item": {
          "id": "626fbf98-ac3e-4e26-b975-1f6202791a1f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "61a1e825-728b-4534-b93c-ab4d50012a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544ba938-2b89-4eb3-9c50-855eb1ccc5c8",
        "cursor": {
          "ref": "0d5fcc76-0f27-4b7d-a7d4-8ae0512f146d",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "adc13c11-8ee4-4f89-a9bb-96e0a32238d5"
        },
        "item": {
          "id": "544ba938-2b89-4eb3-9c50-855eb1ccc5c8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "80247827-5c9a-426f-9185-698e7f99561b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5099195d-6f3e-444b-a6fb-2eba8e957642",
        "cursor": {
          "ref": "d7dee335-d74d-4b60-9992-03154c5916da",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ede2305c-357b-4898-b7b8-211ac78f8702"
        },
        "item": {
          "id": "5099195d-6f3e-444b-a6fb-2eba8e957642",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e2a924f8-46df-4e10-83a4-2deac619b559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87faf493-60b6-43dd-bee3-80fcf24170c7",
        "cursor": {
          "ref": "003d2eae-1d7e-44d9-92e4-180f98aa0f51",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "40b60992-51ff-424c-ad1e-b8df4e13b955"
        },
        "item": {
          "id": "87faf493-60b6-43dd-bee3-80fcf24170c7",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e90300ab-b45d-41a5-a9eb-9757ba646353",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cade086-74f0-4ece-bb0b-53b0fd0819f7",
        "cursor": {
          "ref": "62b91fac-9339-4c87-8a21-5116079e6bf6",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "47af6482-9354-46e5-aa43-a0566b0e0f8e"
        },
        "item": {
          "id": "2cade086-74f0-4ece-bb0b-53b0fd0819f7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1e84125d-f573-4519-8604-9cadaac1904c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd74d184-1b0d-4ce0-a51a-8a62601a7ecd",
        "cursor": {
          "ref": "da97c073-04ee-4231-aa0f-c7714d51cd00",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1d7d8952-f35b-40aa-a16a-84aac8dd8ce5"
        },
        "item": {
          "id": "dd74d184-1b0d-4ce0-a51a-8a62601a7ecd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "ad01cfe0-478e-459a-bf03-764d3148171a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726c895a-7490-4e86-a7ee-b695503a0df7",
        "cursor": {
          "ref": "f9f8f14a-6ef6-47ec-8091-c9a5448821ba",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f49c23f7-a58a-4302-8730-449ea27539ff"
        },
        "item": {
          "id": "726c895a-7490-4e86-a7ee-b695503a0df7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3f8240a2-18cf-4d41-8542-6414609e185a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a3724a-90b2-4d0b-bf5e-f407366634e7",
        "cursor": {
          "ref": "f50f0d8a-1263-4f94-80a6-822b543d5942",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "457d7c54-30f2-4db1-893a-7a9cdc85832b"
        },
        "item": {
          "id": "51a3724a-90b2-4d0b-bf5e-f407366634e7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8a40b645-2fae-4a34-8cba-020c4b3a1492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13deac13-4b5f-493a-986c-ba9eb1939fe0",
        "cursor": {
          "ref": "826beafc-b954-4a7d-9107-fe6fa7e7a8c3",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "72028b85-2381-4d8c-a96f-382b99ec745c"
        },
        "item": {
          "id": "13deac13-4b5f-493a-986c-ba9eb1939fe0",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b887dbc5-7e75-4cfe-a6cf-5d2aee2cf598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f47bdb-3e1e-443e-862f-c257eb42bb8e",
        "cursor": {
          "ref": "c96d3948-e2d5-415f-93d3-c6505d32a50e",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b9bd0e8c-2672-4e80-87cb-b2b324ece3e6"
        },
        "item": {
          "id": "f4f47bdb-3e1e-443e-862f-c257eb42bb8e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "157bbc02-1861-4f28-a97d-6884f8f6c2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179d76d7-c9d6-4f4d-ae76-5df5245a1e93",
        "cursor": {
          "ref": "86f8e2ec-1f8a-40bb-94a5-7dd90c22c1db",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "27ef4a95-84a5-4c04-af35-d1fe1dcb4219"
        },
        "item": {
          "id": "179d76d7-c9d6-4f4d-ae76-5df5245a1e93",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "29da2f2f-f3cb-4ace-a6b6-dc03e14f0bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d79351-924f-4599-83c7-94bd992a0154",
        "cursor": {
          "ref": "20bace40-d897-41bc-a878-68fd6b639a5c",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "2031d6ad-b731-4beb-b501-34662395e9b9"
        },
        "item": {
          "id": "b2d79351-924f-4599-83c7-94bd992a0154",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "b8d487f2-fc24-4b4d-b4ac-488a13ef96b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2874cc0a-b2f9-4940-8bd7-fd33c4d34039",
        "cursor": {
          "ref": "4383266b-a621-4557-a62a-3f178aacbce7",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5e7324bc-ea26-4ce4-b18f-8fed63c46ca3"
        },
        "item": {
          "id": "2874cc0a-b2f9-4940-8bd7-fd33c4d34039",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2cde63f0-287a-487f-bdf2-3d011749f79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73081b08-473c-4e67-a344-7ecff546199e",
        "cursor": {
          "ref": "fdfa45a7-8daf-4e90-ae33-0c24f30b5686",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "54e822ce-e4ad-4a75-8b4f-d7a2de6c10af"
        },
        "item": {
          "id": "73081b08-473c-4e67-a344-7ecff546199e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6cdc3dbe-b746-42ce-9296-c0552dafe32b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbb34ff1-3433-4e7a-be48-09e778c86359",
        "cursor": {
          "ref": "2d5275e2-9a4b-4356-bd50-52bb66409761",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "695d7718-ffbc-41d4-a789-9b6eee67fe67"
        },
        "item": {
          "id": "cbb34ff1-3433-4e7a-be48-09e778c86359",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "24815d68-be3d-4d8f-aa10-411a7efbacc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e294852-bc54-44f2-a0df-9e306519fd56",
        "cursor": {
          "ref": "8c5eea51-b15b-4e22-960a-b6b63a8e018f",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "abbc6937-661c-4da8-90ef-5cee85ed469a"
        },
        "item": {
          "id": "2e294852-bc54-44f2-a0df-9e306519fd56",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "50704ed1-a035-460a-afff-577b85eba4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "226c8507-b6a9-4671-aa2d-6ce76aa6e36e",
        "cursor": {
          "ref": "3e057d02-9ace-49eb-80dd-98b1cb6c97cd",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "66c5ec33-478c-44a5-95dd-190178c93729"
        },
        "item": {
          "id": "226c8507-b6a9-4671-aa2d-6ce76aa6e36e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "aff49c67-7c15-474f-9aa0-87d34c04c7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 8,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583aa1d2-4e57-4087-be4f-c35a8fee8c4d",
        "cursor": {
          "ref": "39357aa1-04e7-48eb-89a1-815ddd2b1d6b",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f0242c40-e791-4003-9a67-4e63a8d6c9c6"
        },
        "item": {
          "id": "583aa1d2-4e57-4087-be4f-c35a8fee8c4d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "488254ca-58e9-4627-9697-66a6d2e682f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12537f3b-3f3a-4d1c-ba7b-63f67707e504",
        "cursor": {
          "ref": "cca1d207-3ef9-4103-8f92-638d9c6fe692",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7ebb843c-de78-42a7-bf64-fde4696fa6ae"
        },
        "item": {
          "id": "12537f3b-3f3a-4d1c-ba7b-63f67707e504",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "536979d7-8874-41fe-a219-d872bde963ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29dda221-c610-4f1c-8a9f-b147295ff324",
        "cursor": {
          "ref": "5a2c119c-bb3e-435f-af2d-c40ebf6f5a38",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "facacfeb-66ed-44af-b65b-9b34d3ade6e7"
        },
        "item": {
          "id": "29dda221-c610-4f1c-8a9f-b147295ff324",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "334fc07c-4452-446d-b570-9608aa94adcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a7aac3-167b-4989-afb8-a87c085936af",
        "cursor": {
          "ref": "d5a86e4e-aa4d-4264-b9fc-fc5880fe81dd",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "852ad712-d2e5-4d19-a37f-ccbb5069ec2a"
        },
        "item": {
          "id": "47a7aac3-167b-4989-afb8-a87c085936af",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0f27d3d2-cb5e-41c4-9292-50551a945c18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe079469-0215-436e-89a8-c98b9ded6df6",
        "cursor": {
          "ref": "a5d84289-e7f0-4227-9775-5d8745522815",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ada57eda-f823-43ea-b9a3-3e35c5d5e6e3"
        },
        "item": {
          "id": "fe079469-0215-436e-89a8-c98b9ded6df6",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "18d50b4f-cbdd-4ba0-97c4-f5ac8e2346f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50dde5a5-772d-4425-9f93-35710c8573a2",
        "cursor": {
          "ref": "45d62b3d-f26e-40c3-be76-f6d09264c72f",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "54a082f2-2214-457f-a0f0-e62b21132970"
        },
        "item": {
          "id": "50dde5a5-772d-4425-9f93-35710c8573a2",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f84912a5-7fff-4a74-90ff-3ae17f54d23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a287197-297c-4394-8f3b-5cdab08645a7",
        "cursor": {
          "ref": "ba1ba124-72c5-4b33-a42a-b0ad5c377b7f",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c9deed1d-ba86-4bc1-b6f6-96c9ac12072d"
        },
        "item": {
          "id": "3a287197-297c-4394-8f3b-5cdab08645a7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "11763756-7120-4645-a99c-be0dfa58f07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5292b901-0f19-42b9-8f4a-a71cea6606f7",
        "cursor": {
          "ref": "dfd06a0f-ef6d-4073-907d-62d6333e38db",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "951dc1fe-4007-48bf-a729-68e38d11dd57"
        },
        "item": {
          "id": "5292b901-0f19-42b9-8f4a-a71cea6606f7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "87397c66-9374-4abc-9e8a-cc98ebb8be0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e86dab3-f9c6-42c7-8c64-bda22bfc804c",
        "cursor": {
          "ref": "49fc8081-4afd-4fa5-baeb-b96891d5c1fa",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "02d96ac0-10cd-456e-8e42-6fc2adc81db1"
        },
        "item": {
          "id": "9e86dab3-f9c6-42c7-8c64-bda22bfc804c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2d7500fb-9cda-4d97-adcf-7e298b79bb78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b6ca84-4385-4e7e-bbc4-2ac799f87ecc",
        "cursor": {
          "ref": "e7f5a45c-3564-4193-97a1-84392e1730b2",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4142fd47-3964-4677-ba3f-fff8a068e6ce"
        },
        "item": {
          "id": "78b6ca84-4385-4e7e-bbc4-2ac799f87ecc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ddc46c8c-6e59-499b-afeb-cd66a82c887f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d58a4e-f7ae-4103-aba2-4c5b092f2cbc",
        "cursor": {
          "ref": "92d6bd62-3eca-46c8-a3ee-bbd6dca05e10",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "691b951d-a323-48e1-9bdd-39754dbb6c3f"
        },
        "item": {
          "id": "85d58a4e-f7ae-4103-aba2-4c5b092f2cbc",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "83b6f2c2-09eb-44f8-ab04-1fde9642f684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "639ef7c4-3d82-4a21-9684-83eedbf075ce",
        "cursor": {
          "ref": "8601cda2-2f9c-428d-afda-dcc83d2dfaf6",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "61e8e76d-6a42-4f06-80ae-129fa6faf3a1"
        },
        "item": {
          "id": "639ef7c4-3d82-4a21-9684-83eedbf075ce",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "465eee75-4fc4-47f6-9a68-574350dd659f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced99212-47f3-45fc-8c35-4cf38468aa6c",
        "cursor": {
          "ref": "27626292-7b8c-4221-b9e7-f5d6bdeb8de1",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7aa95792-c101-448e-be49-f8db0202639d"
        },
        "item": {
          "id": "ced99212-47f3-45fc-8c35-4cf38468aa6c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b28f845b-2866-40dc-8886-b14ca33e6cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28080f7a-b58c-44a6-b230-badfcceb283a",
        "cursor": {
          "ref": "6726d6f4-43bd-4200-a831-a3cb78a957ca",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e799ef92-9f82-4bad-b25b-700eba249465"
        },
        "item": {
          "id": "28080f7a-b58c-44a6-b230-badfcceb283a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9f6b057a-54ff-40d7-9951-cedfbe5b712d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b79a1f-5eaa-4320-a75e-b8e7893850ae",
        "cursor": {
          "ref": "53fee6a3-ab7e-46be-a392-a86c270431ec",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6210793a-5b28-49fe-9a8d-6fb90ef7929d"
        },
        "item": {
          "id": "12b79a1f-5eaa-4320-a75e-b8e7893850ae",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e9fb9c11-0135-4574-90bb-be7468f7d2a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10fc2c30-a78c-49e9-8b19-af2efa62c60a",
        "cursor": {
          "ref": "c49dae9c-4d17-4c81-8947-8125a8853101",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "908c6c2d-afd6-425f-8273-4d76fc97762d"
        },
        "item": {
          "id": "10fc2c30-a78c-49e9-8b19-af2efa62c60a",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a915e276-dcb9-4002-b06c-f798eeb366ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99cd7a0-ccdb-4f6d-8ac5-3bd0fec264b5",
        "cursor": {
          "ref": "fc0a37d8-6a88-42d8-aa8e-2f0ec60386a7",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b7a261d7-2c20-4e13-82ec-763a81cd58da"
        },
        "item": {
          "id": "c99cd7a0-ccdb-4f6d-8ac5-3bd0fec264b5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fc2ae0d0-9674-4d55-8efe-4064e2ef0692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bf89ece-969a-4d69-8f9d-6537495b3bed",
        "cursor": {
          "ref": "00ef9f13-f161-4d6a-8c74-b1430405fa22",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a17e4080-fa5c-4ea2-98b4-3989321774c7"
        },
        "item": {
          "id": "6bf89ece-969a-4d69-8f9d-6537495b3bed",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "621b6494-a4f3-42aa-9fc9-40cdfdd4e236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0fb1e02-b2f7-4b97-821a-c60eec209ad3",
        "cursor": {
          "ref": "bef40521-fcfd-404a-a592-6cf1c272853e",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bb51a6a0-b163-46e5-9112-fd1b3e73a74c"
        },
        "item": {
          "id": "a0fb1e02-b2f7-4b97-821a-c60eec209ad3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "146c4d51-f307-4ab1-ad13-0a1c44ae10c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e049d1-3726-45a9-b22c-5848e0dcfff3",
        "cursor": {
          "ref": "82945a4c-8c41-493f-959d-305aacba19e8",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "44bb408a-4fbf-45d0-acd5-68d7f862200e"
        },
        "item": {
          "id": "20e049d1-3726-45a9-b22c-5848e0dcfff3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9ad7995e-5211-4ddf-b559-40d44f22f1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79723282-8d63-46d4-8fff-d403af960475",
        "cursor": {
          "ref": "39fcc4e5-1450-420f-8db5-abd6237e2e0a",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f33ad317-f44f-4477-aac0-3179eb9ac8ef"
        },
        "item": {
          "id": "79723282-8d63-46d4-8fff-d403af960475",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "293dde74-ac40-4a8d-8512-53b8d0a83228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd1b49b0-c029-47b1-8c7b-39adc6686dae",
        "cursor": {
          "ref": "0d6ea2d1-3e2c-46a2-b6fd-c688b24244a9",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "496e706a-cf66-4725-96b4-8c0d077ecb0c"
        },
        "item": {
          "id": "fd1b49b0-c029-47b1-8c7b-39adc6686dae",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6f7f4733-e773-42d3-a7d8-b209a8b5553d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66dc8a4-f058-4149-9472-c2220c9c9d59",
        "cursor": {
          "ref": "f66575b9-b0d4-40e0-bf4d-3d4a407f99d2",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "42ec71cc-7f75-4e3e-a47d-2079f53f4e34"
        },
        "item": {
          "id": "f66dc8a4-f058-4149-9472-c2220c9c9d59",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ec99f18a-f5f3-42d2-9dc0-6e2c4ae21028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03659588-99bf-4e56-8355-fa17dddf05aa",
        "cursor": {
          "ref": "b6761f01-0945-4756-974b-7939830e4800",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "90d0c6d4-edf0-4cfd-b407-583ec670e0b6"
        },
        "item": {
          "id": "03659588-99bf-4e56-8355-fa17dddf05aa",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "39e91d60-1181-4aaf-8fad-b0955064cac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd52fb6-a3b5-47cf-921b-802a01f2a4e6",
        "cursor": {
          "ref": "47bc7ca4-54ec-4f7b-8f89-95059172a7f6",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "36c7e2a0-7784-4c8f-9456-d78cc4a67daf"
        },
        "item": {
          "id": "afd52fb6-a3b5-47cf-921b-802a01f2a4e6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b08faff1-aca1-4ae8-9d34-621d9723a5d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561cd912-0c15-43e5-bd6a-40cce2f65201",
        "cursor": {
          "ref": "4a298736-33dd-4c17-886a-cc2827036e6d",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2348a2c1-1706-456c-8fff-5bb38c9ee611"
        },
        "item": {
          "id": "561cd912-0c15-43e5-bd6a-40cce2f65201",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "83950d73-a9df-4fba-9ae5-20e759230d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15a3632-b33b-430a-a282-1902c46b3ff8",
        "cursor": {
          "ref": "26da4cde-4c54-4156-8116-8d1b076eb891",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "59bb5e3d-c395-4bbe-a94d-1d87ae4a3e9d"
        },
        "item": {
          "id": "c15a3632-b33b-430a-a282-1902c46b3ff8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "775094ef-81db-4426-8215-bdde0bb31bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 11,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc13dc84-d708-4c45-9970-3ff229e08b24",
        "cursor": {
          "ref": "ccbb2392-81dc-4daa-a456-8870d57f7af9",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b1148005-f120-47f1-a746-e7cab64a5780"
        },
        "item": {
          "id": "dc13dc84-d708-4c45-9970-3ff229e08b24",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "649e5ba1-4dfa-4865-9a65-2c3b13f7427d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 9,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec493311-b687-4221-9891-b4453d812654",
        "cursor": {
          "ref": "c41e777f-2a87-4909-85c2-05548b500ce8",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "811ee1af-59aa-4545-adc5-176330888afe"
        },
        "item": {
          "id": "ec493311-b687-4221-9891-b4453d812654",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "11eff3f9-660b-4c6f-ad2d-6ff45ae737ed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 10,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d24f62-6606-43f2-aecf-dcbe32f21624",
        "cursor": {
          "ref": "6dbf6fad-0b2f-4cb1-8ceb-5766791b984d",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b77976ee-f438-4992-a459-a78b876475ab"
        },
        "item": {
          "id": "a9d24f62-6606-43f2-aecf-dcbe32f21624",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "7f6d6b91-c3bd-48dd-835c-41ff1ba07bc2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 9,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abae7cda-7491-42e3-a3b1-943133c66ffc",
        "cursor": {
          "ref": "c28791de-cda5-48bc-8b7a-1b812fd31fb5",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1c318e62-5730-478b-a4bb-a011b7554fe1"
        },
        "item": {
          "id": "abae7cda-7491-42e3-a3b1-943133c66ffc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1cf0dfeb-5861-45b4-8084-bd30ea013864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2828a1ae-c3a0-4aab-9cca-40302db78c50",
        "cursor": {
          "ref": "04bc3f5d-2953-433c-8d3a-b3588dfde600",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "3a0aa405-73f6-4982-9469-0f1e04b27110"
        },
        "item": {
          "id": "2828a1ae-c3a0-4aab-9cca-40302db78c50",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7291993a-d562-4a08-80d9-0a346018919b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "468da044-8756-4c2c-83b2-1d1a9dec5485",
        "cursor": {
          "ref": "e52dd7a4-4088-4e12-a557-3587b9a9991e",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1e43d503-5cb5-4fe1-8983-e151fcf4a39a"
        },
        "item": {
          "id": "468da044-8756-4c2c-83b2-1d1a9dec5485",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2a2e7075-125d-47c5-8242-0d42bd9316e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 10,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "99f6efa3-8a0b-40d0-82cb-25ea4ff1e94b",
        "cursor": {
          "ref": "d662a012-9f67-4bfb-9ade-209345a5f717",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b09498d5-1f60-4a5c-a144-ceff0e726bda"
        },
        "item": {
          "id": "99f6efa3-8a0b-40d0-82cb-25ea4ff1e94b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "99f6efa3-8a0b-40d0-82cb-25ea4ff1e94b",
        "cursor": {
          "ref": "d662a012-9f67-4bfb-9ade-209345a5f717",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b09498d5-1f60-4a5c-a144-ceff0e726bda"
        },
        "item": {
          "id": "99f6efa3-8a0b-40d0-82cb-25ea4ff1e94b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "99f6efa3-8a0b-40d0-82cb-25ea4ff1e94b",
        "cursor": {
          "ref": "d662a012-9f67-4bfb-9ade-209345a5f717",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b09498d5-1f60-4a5c-a144-ceff0e726bda"
        },
        "item": {
          "id": "99f6efa3-8a0b-40d0-82cb-25ea4ff1e94b",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "f7b90391-4717-4105-8d79-4ed9865ea012",
        "cursor": {
          "ref": "10808994-a65e-4779-a0a0-85e503bbee90",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "262c6deb-43ee-4dcf-a224-7444f30a9f81"
        },
        "item": {
          "id": "f7b90391-4717-4105-8d79-4ed9865ea012",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8889089e-4441-47e7-ba71-9d755727ceba",
        "cursor": {
          "ref": "3f069628-8dbc-4059-9e7e-6b058a4644c8",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7d34175f-a607-44d7-9acb-ed3d0a05a2bc"
        },
        "item": {
          "id": "8889089e-4441-47e7-ba71-9d755727ceba",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8889089e-4441-47e7-ba71-9d755727ceba",
        "cursor": {
          "ref": "3f069628-8dbc-4059-9e7e-6b058a4644c8",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7d34175f-a607-44d7-9acb-ed3d0a05a2bc"
        },
        "item": {
          "id": "8889089e-4441-47e7-ba71-9d755727ceba",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "219e4f3a-6f35-45ae-8db8-b97352b4591f",
        "cursor": {
          "ref": "6efa547c-eb4a-4562-9298-3937c3a7beb1",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "675a2fdc-182d-4dd6-a29b-b75bd7909895"
        },
        "item": {
          "id": "219e4f3a-6f35-45ae-8db8-b97352b4591f",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ba6a019c-bd0d-4e8a-acb1-c5b2dcb41f7f",
        "cursor": {
          "ref": "40ee0c4a-31f4-43ae-b55c-1b7d979f22a5",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8216a4af-68b5-4f56-9184-aafd2a6b72ca"
        },
        "item": {
          "id": "ba6a019c-bd0d-4e8a-acb1-c5b2dcb41f7f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ba6a019c-bd0d-4e8a-acb1-c5b2dcb41f7f",
        "cursor": {
          "ref": "40ee0c4a-31f4-43ae-b55c-1b7d979f22a5",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "8216a4af-68b5-4f56-9184-aafd2a6b72ca"
        },
        "item": {
          "id": "ba6a019c-bd0d-4e8a-acb1-c5b2dcb41f7f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ad29b3a6-98a7-41fd-a393-18977bf721d9",
        "cursor": {
          "ref": "d639894e-b6d5-449d-ba22-75986a66ea9e",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a1c1b02a-3566-4d0c-a580-b06742632ddd"
        },
        "item": {
          "id": "ad29b3a6-98a7-41fd-a393-18977bf721d9",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}