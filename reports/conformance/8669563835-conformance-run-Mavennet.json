{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6b4bd96b-d9b9-4345-9733-7551478715d5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "7cfd0edf-db82-4f42-85b7-15fba2dead36",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "452aa5a4-95db-4c2d-9dde-c03b49441459",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7c8c2ea1-7748-42b0-bc70-b491dacf811c"
                }
              }
            ]
          },
          {
            "id": "e8656751-72ae-483c-97d0-91636405abb3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8095ac4-183d-4d2f-8df3-c2b9fbcd46c0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5ce3c097-0154-40de-b678-8b9d3a383dac"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4dc48289-9fa5-4b3b-9ade-f0fbd79713ce",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ef95066a-4efb-4144-b93a-adcc100d064a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc779b06-d0f8-4018-b610-d85d4a337349",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "52817983-cbe4-4a8c-8879-271e1c1360ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb7bc25d-5346-4270-8aed-e2d85c61ecf3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fc0572ba-c9d0-472a-9588-b68d22d2a0ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1ae7f79b-5bc9-4de7-bb74-0b74ec1b4001"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b9ddc167-67a6-4c8e-be91-96a23722f625",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e27e4259-5fdb-4c1b-a548-ac88c2d4ef7c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c80569e-dfbc-40e0-b209-f7ce2e4db314",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "878a881c-90b0-43ca-865d-883cca2c36a4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "518f22e0-b495-4092-9a2e-21c8b695a9b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b955b2f2-8705-48af-ab5f-e58fee3a71dd"
            }
          }
        ]
      },
      {
        "id": "315cbee3-45b2-4ad5-b086-c66f74aa5f2f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5764ccaf-db69-47ee-9180-f227aa1276c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f8dbf858-6d01-451b-ab80-21415ddc7e76",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "93d8ade1-bb5e-465f-8afe-71840231e0f9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92ce556-f5ac-4ac3-8d1c-eae2ed0b3ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "983aa863-1c60-4ad8-b97c-262fb0b725a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1877017-5e78-458f-b4bf-2ff83550bd45",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae1474b-6282-4c0c-a9cc-19674d37f027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "615cc0a3-6929-44cb-b86b-769ba7777040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a136470b-ad53-472b-a767-ea905b055288",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e88fede-ca5e-4610-b51a-571089864649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58f07c55-b25e-4081-b402-3c74bd0e77c1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ea07d51-5fcf-4ee9-9295-518f44d41b31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a775e9fb-3706-4938-a511-cbbb17162538",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d2dd94-e5bf-4791-bece-efce8416b42a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ecf9c82-9f1b-4137-ad20-b5d2106f1a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522831b3-f047-400b-b047-f6d842ecb9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7e2676b-6819-4698-99e7-1de5d7ce5bf2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d6765161-7c2f-49c0-9e89-33a1457191da",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4b70bf95-3616-4d6e-814a-164386216aea",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "905dc230-77f8-40a2-8633-43688748231b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "84986dc7-e660-40ac-ab81-abd7afe39d37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8024ba1c-49bb-4711-9c3f-f23f6de0ac48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ef211676-7855-47f6-bdc6-c5d65595bb71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83dcef69-4151-4390-95ee-2bf580ffd148",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d20d704d-b269-4877-9ac8-e042e5debcce"
            }
          }
        ]
      },
      {
        "id": "0b5f4cbe-2118-4aec-a74c-a5d9ae0ebb54",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bd7e4ad8-3153-4667-aea5-01143da6812b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70d0eea0-3bfe-4eca-aadb-ce5e9fc9e9b0",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "496fd8d7-2474-4e20-be41-9ac97dbed67f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39049ecb-662e-47c3-bfad-45ad87728b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c86cd0f-58fc-492a-b8b4-11128e92b02a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075290d4-922b-440d-a2d9-cb0ae5a63b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04d3ec3f-a98d-471e-8d7c-645ba3dbfb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d02cdc92-8638-46b9-9f00-eb2ec0ef245f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742f6317-3546-4e62-9543-3db3c855b8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f935ed0-89cf-47df-9501-9f39461c4b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9511163-8ff0-4a80-837b-5f28c36499a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b15e98de-43ce-430b-8ea8-3a8d1bc43aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a078a39c-9541-45ab-af72-0fc56ed00a63",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff59f27a-2919-457f-bb63-f3ffd50e9974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef56ecc-af60-49f7-8832-70232cb94306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94616f9-ecc9-4eec-88d3-c63a2273e864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "036067f6-b41c-4a88-8771-9ad5d2947216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad00e63-7726-48de-8233-2c3f99fe1331",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ab8164-d46c-4060-9359-6fe41539f12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe9b4a0-8351-4fe4-a820-0528e071aefb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4262605-2b19-4e65-ac3d-1ad612062b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6818120-7099-44e0-bc6e-0a73e38de2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3ef927-a7d9-4ee7-85e4-4b9346881bb3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b324a8d-2571-4789-8b7d-847a831a31ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940ca95a-2634-4408-9f2d-954b75f571d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a510fbee-eb18-4b9e-8dd4-65beff9340f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0dc0d4c-760f-4f8b-b326-7757fed07b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2918d713-cd50-496a-8094-760895d1c3c7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e444143c-f27f-46da-ac17-4d7c8b8c5ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a38f2536-29ac-47da-8014-1086cdb6b908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e76763-9367-44db-aca1-4b12dea6c6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d1d1458-d95e-474d-a5a0-4863cf947f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733788e7-bd9d-42ca-8a90-7d70f7998b1f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7514851-c8a7-4220-8a13-2281348ab298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0408da0-35ea-4fe8-8ea7-4460f1ebf347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b303d83-0c4e-4289-a025-819ba576c02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "653b60a2-865c-4843-a2e1-3b2c95d23ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40eb23cf-d79f-45d0-aa29-21d46381366d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ef9416-ac15-4d59-b7a0-5e87a51fe4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88598331-a066-443e-99b1-0890cb6d3490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a92d9a2-727e-46ba-90c7-b4302eae0f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6597eb0f-710c-472d-9fa3-c0d5f130eea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7d1e8a-adc2-4cb8-a333-2399b129f063",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1b7c24-a4ec-4d78-b00e-e453b7c29002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a338dc-ee58-4397-89c4-7cf756776a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c446ee0-afe1-46e6-8461-0fb84967437f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df6ec9f3-02fd-4557-8f71-9d020a71e4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e55f0a-9e39-494f-adb4-caa2b505b406",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e082c26d-9e0a-4e15-869f-a13920220b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4522e79d-70be-44ee-934c-2d19a03ba074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf7873c-be79-4332-a2ac-da8f6a79c7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30b3eb0b-2928-4fb5-903c-0be9cb844e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "499378bd-7a70-4758-9ce6-14dc3df6aa02",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61b930e-c008-4017-bd51-76d5abb1f8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59046c52-8500-44af-9557-88976ddf3d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2891016-1997-4e3f-b466-e2787a4840c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "031f8ce3-6e67-4301-a91e-0e93b32bd034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "416cab23-c0a7-4046-ad66-9e75884ad783",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8151e5-816f-4f51-8877-28d7e44868e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1536963b-d5e6-432d-9c4c-f7c8e3ceebc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0001320a-704a-42b6-93a1-ee9886160d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cf43ef1-6af3-432a-9ee3-49204eea81e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73777e06-9ede-4d86-b2ff-678f61850b88",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c98dd10-ce7e-4c0f-a42a-813f7223d9dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a009eea3-ace3-4670-a809-dcb04c53665a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22012ed1-22a9-42f2-95ca-29b6aef59969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc60da70-f6d5-46c0-8a2a-c4b88d35cae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dacb7fb-3837-4546-bbb0-ef24a3551193",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945b08b5-f784-4b02-8116-fc3ff7163d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11a4d09-13b7-445d-bade-cd6ca7dc3608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928352b7-a003-43e0-b4ff-768f5c446f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a170cbdd-e072-469e-986b-4ecee3750552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44996c34-8945-43c2-bb05-9ea01fa2da54",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4412a1-f7b8-4540-90b7-8a1d7d97cd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c0525f-8b47-4499-af60-3903dc6fe082"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a558130-bcea-49ba-8efd-33368fd3aecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed9eed29-8dca-405d-9c74-05f245629fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11dcf3f3-879e-41d3-b85d-90d9b611e4b3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5376e2-79f0-45d9-ad47-cef81c91d06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5662b41-a2a1-46f0-8bee-8a1aa27c5734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713e0807-f62f-4438-9eed-396e9063750c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3282313-9e33-4333-85f4-3da77103c3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e238b4ff-ed2e-4406-a2a1-5dfba9830ac9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916ab7eb-a8d9-4326-b3e5-bd39e237d6a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "227f6291-a803-430a-a355-770e849745f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e647160c-62f8-4e05-8706-287f62476e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "531949ba-e8f0-48e3-a6ea-84c7651fe4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928e94b6-1acd-407c-8e89-816d0f8df8be",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff5fa25-1d65-409c-a00f-d701b984477c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b89a8e8-e49c-4154-abf6-648aa8cf127b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19fa8e1e-25d8-47a4-b07b-71e9e28d7c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "322ba31c-7f8f-4bb2-9ec1-b31fda5d1af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e00c4e7-3a01-4533-ad5c-0b319e28ac13",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b72b5f1-82f1-4dcd-a946-4e3a5d867adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5507c78b-8d2c-4bc5-8207-32d0759f57db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6addaf1d-49fd-42d4-ba8a-f44af20bd649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a57aeec2-65db-4c5e-b3d5-71c6287d7987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22dea213-ea85-49e4-8f37-cb61ccbd8835",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5f80ef-9d08-4cb8-b498-582f42872e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e0d49d-6e42-42df-a0c9-4b6f6933efb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e08f1ec-0768-4c08-9b75-505af9f49ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f63a5042-d724-43d2-ac0d-401380b109bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1e958a-4b1d-4c39-9549-a40c1ec87666",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c7ed44-8751-4d33-baed-7a698a0d9455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae6eada-a74b-498a-9c1b-f255fe2352c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c63b5c-4a5f-4216-b3c6-ebc29c72db0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a31427d5-d927-474c-aa41-20a48ca4164f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee981dfc-3f91-497b-904f-40086aa774b6",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33bd0e1a-d5ee-4134-a8e7-cf4aca75a710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed2b4ab-e4e8-4aba-8494-998a3f0a5995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb8ee63-98c7-4613-ab9b-e74e59b384f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91f45a9f-ee0b-4a49-a38f-7a21b7ccfc32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52747e54-70d9-492c-b822-c3a0f60732ee",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "245243c7-a4e0-43b1-b621-1f32aa163902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292dbf92-7ac6-4143-be84-088c503c2f1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5863dc76-dc70-4b68-a0ba-8d4863d580a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2e0ad7d-3229-4c36-a6f1-e1cb8286411b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860c5e42-2461-46fb-907a-a4d856c7bcd8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd2df0e-c317-410d-8fcf-810f5561460b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ca958d-d6f8-447e-99f9-1c69908658be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe3ed7c-ee93-4b3d-a057-3649b8aded67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff1ed5b3-0b94-4cc2-996a-a94b8d311e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f69c40-f2e4-4c68-aac9-1e35a62b446b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142cf5a8-2949-4d01-bdb4-551e2ba23155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74375d26-0505-4de6-b897-ec1392eec12b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60d73d1-cc34-46cc-8a5e-712a206e35cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4243b0-92c6-4b45-9f6b-352153b92ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed56b7ca-2690-4365-8beb-89df5d3309a6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33ac6fb-855a-4c16-ae4b-97b849514f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd577dc-596e-490a-8543-a04c4543dcbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ca8fd6-c930-4ace-b157-62b605b780e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "813d84e6-16b0-468b-b088-5e7a14104920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23557abb-a32d-4aab-92e4-a51dd6f45cf3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc4c67-f2ba-4e6b-a573-26cd45fc7312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b0cc13d-426f-4775-8393-a7e2ca9f5f11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d9b260-6575-4eb7-9a73-f13d0c078fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "184e9074-0708-4587-9805-548ae84048e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afb303e-ff90-425f-a28d-a7bbfa65c16a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4950eb98-a824-4a97-8e50-608c019bceba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2939ff7b-dbf5-4f13-a6ea-e9d72cbc315b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947ad1a7-324d-457b-9de4-abaadef35b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b58a796e-c237-45a5-94b7-a23523234884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f0c500-f4ad-4dc0-958b-c6ef850ff8cc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6b2d17-8ad4-41ff-be6c-9b425d55baca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79dcd409-5c1b-44d8-a67a-d9d0e8c41430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b97bb5-16e1-41b7-a234-08d285c5f40d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb96ae24-3f39-45bc-9426-2f7a7d972b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c386a2-74d3-4715-a9ee-0dfc8d0d09f5",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d732d4-acdd-43fe-9606-6afd067d8d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2770d6d0-610d-47df-88bd-b4420201f4b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5aac2d7-e9bd-4b2d-be4a-156f9949169d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd93e3f-7aae-4e5b-b0c0-92bd8e857f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b0ee3a-d442-498a-9b29-51c6664b4c63",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f2e1b90-c51e-45af-a540-dfb1c20dac82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f937cda6-122c-4111-94b9-716977131177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ce42b78-7b30-434f-b8e4-6d3bf992e94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e67b40e5-e204-4905-a234-27e077a6ca30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61612432-5a7d-404b-82ff-705bd0cb04cc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7958977b-a8a9-4df7-b267-51b85ce0d4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada46adb-9d4f-44d0-ac01-b5abeb9441a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebfc5be-1275-41ed-b3ef-1b1345e4ac68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f239336b-ca75-4e36-9bc7-f285a5c41679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d3d3d9-89df-4f67-8ae6-b94226de8a9f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e419393-c486-4d44-939b-81891519ae2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb599f86-7a7a-4c37-9f51-c09d47c2411b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee0e88d-ec74-4225-9487-41d73faa2cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27510a07-f344-44f0-a718-88e9445e3cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3e124a-dd41-434e-91b6-5c91635d4d98",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "486bba1a-c9ca-4a41-9696-679826ab49f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c97f264f-1724-4935-ae18-40cebcb8be5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446ab853-b5ac-41b9-9e3c-b2dc418b78ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5107cbf4-8eb0-4937-8e59-9933ed1b18c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a41deff-5fb7-4f81-9f04-e05a4d776128",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc469db7-b5ca-4457-9aca-b86bc35bedaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4889585-9d89-41c0-b90b-a6fc35612306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dcfcd7-7ff2-410f-b88f-35f43d2f99f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8de5943f-4c33-4516-9bd4-3bc5e905f95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9827e340-8ecb-4ff1-9847-a6429e65c7dd",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945b4cb8-82fd-456c-81e4-eb0ab7d68e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f43e109-c81f-46db-b8ab-f75c0a3ff2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3c7d8e-49e6-4cd4-8cf0-87713a9b836b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "24325844-50e4-4b1f-9c2d-29f07fba6a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa8c5b77-0dc5-4474-b52f-6989f3a35614",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9184c7d7-a173-49d4-8c93-c24b0729ac5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e168becd-bd31-4f1e-aac0-dd8413092caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df63606-01a5-4b4a-acd1-af641115d002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8920a954-3ddd-4293-8d9d-07b5445bac76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee93d6ab-f126-404d-89aa-04f09ae000c9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90aadd45-3910-4be6-bf0c-e8f879830ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72777ce-f265-417d-8435-61496570c94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b3c980-7301-4a49-b29d-8fe40f8a0550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f49c5e-1b7a-4427-9c0b-9e9570913e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a5d1be-cfb4-46ad-b223-b3188f9918cc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2df1b9-4960-4a3e-88e0-db53240ea308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a45bd05-4f07-4dae-a3e0-4b70b83c34a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7e7b44-98c2-44a2-8834-b961391b860c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ade5c12-08dc-49a0-b77c-e35db31b6b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cadce38-4114-47ac-9fcc-3fb6a3cb7988",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "359b6650-c197-4af3-a8a5-f359fb18461f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66eb5725-ddb2-437a-9420-1d34afc2dde9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ab9595-b4d5-4052-b090-aba18b254afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1679652-699a-48f9-8690-2d78c25787c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047b6976-d461-464c-938a-fd05d849fda2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be5a900-a69a-4cb3-b03b-da2c2252c7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4d256cc-295e-4d48-a584-fbc059169abc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1abfc3f8-ccc6-404e-a2b0-74969881a045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e93ac954-a4fd-4abd-82b1-a689cf009db6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899ca291-e3f7-4313-ba46-15e97ef72d97",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938b7c04-1817-4983-a08b-ec325f181a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffe4355f-70dd-45c4-ac90-51547fd07a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5324a76a-104c-4d03-a618-996ba8fcb47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "63108cdc-f228-469b-b0d3-d387e65532c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f7d708-1543-4d78-abba-4bbe3c7bd067",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74761b3-69dc-4699-9482-cf8e082e8964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b257cb5f-d0bc-4daf-b49b-90e06170fb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5901c02d-973f-4d27-a782-00d6f0542560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "381efcb9-388c-458f-94a9-5ad6d1eff8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e72cb01f-e586-41d0-b559-119d45b4766b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd10c950-434e-4eb4-8de9-6f28dad5a9d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3900045a-b2ba-4deb-b6b1-e3d750302f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3a4b14-0f29-4353-8a6d-74f7dabb4f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "361581e6-b597-4dd9-a4b9-cc44fca95185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4520a9de-2f21-4b42-9638-d0eff8d3c2d1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fd02af-8e80-496e-85c4-143905018a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c94cc4-10f6-492e-8f4c-57e697ac2fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1931001-288a-4e50-96b2-e584c5105b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c05ee16-74d7-43bd-a9a8-4bd272c0e0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b8cd66-47e6-4846-92a9-694500c397bb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67fafe78-285b-4153-9a17-3f8fb22e3eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c59d4bd-37f2-4e83-b670-6b13c8e0d611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf24a9c8-e6f1-4203-9fcd-91311a0631e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40294786-cbbd-4929-8ed2-6c9c2a6e99cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0770f81f-4153-48b9-a736-22143dd233e5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23d6468-3439-44ec-8497-998cfe709985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c2bd46-2b5e-4016-89fd-55069f880437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50d77fa6-8b98-40b9-8be2-4929cd2915da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d6b952-2503-44e0-bf80-3f39066c8733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd4af53-d75a-4084-8150-b87b43f34ad8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218b45a3-fe4f-4ba7-aa38-2980bf521c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b818dc-ece3-403d-bd80-2622ea69d0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b88e2ad6-b9af-4436-b863-fa7ce1a0958d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d68074e-9e38-467f-90d6-9894875c0102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c0de06-34e0-479c-b5fe-ddba32b1bccb",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f43cf6-7991-4e2d-af3d-b00e4d4f1eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "616d6d3c-c399-4575-bc1f-f7af7e458ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6ddce7-9976-428a-b804-182a0c631ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7b6d42-69f1-45c7-84f1-333ad3376ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da022c50-83a8-48ee-a0bd-6772bba09b4b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "325f582d-f5cd-421e-80b6-c832ae86d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5dd408f-6652-487e-83a0-e64966bf5edc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f2c7070-d3ea-4e54-9ef6-0e8c1e380b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9072237-118e-44d6-8522-e3e0e8e7c236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588aac6c-a78c-4a92-bd34-0ae50f326921",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e381fc55-b8cf-4bb9-8908-690f9d052afe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86f06740-dd1e-4c06-9f57-22bbba4f55b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80548a4-74b4-4313-a2eb-ebc70820d4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc051e1-cc79-4773-ad25-57208749bf16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c600e0-7655-4754-96c8-202329506f32",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb98175e-49a8-407b-9d37-12f95d0c2f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8973d37b-8211-4090-8556-21b1dc9d6b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc2a54e-97ac-41c9-9197-1eb9250573de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e39e022-a69e-449f-b81b-5b0c25f8b055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be210458-20f7-4321-baa2-0e1dc55649b0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a998f016-dc8c-41bf-9eee-9834dc1cad9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3b6a0cd-618e-4ca9-849e-281f08c423ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6afe12c-d21c-4688-af4e-3cb90aea78cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d96b47ab-a017-4883-95b8-d23c4050409f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ece5968-9f59-4e7b-b75f-ea2cf7a751f3",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8863fffb-f035-4a3b-8439-6b1d935e10ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0970813e-9dee-40c1-ab96-aee5878244ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed07cab-15fa-4a6a-b7aa-7db36b3aef71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "07940a75-1c0f-447a-bd59-92b1dbb6e201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0035226-9604-4843-b92d-66041b5cca8b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fc97e9-af5b-48c7-bd32-fbe615f10be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbfaf6cc-0150-46af-b717-30614ddf48b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c551d2-c535-4879-a10b-bc27e4828436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b7774a8-7da6-4a8d-ae3a-0c69d46e2e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92d9eea-a789-465b-b0de-6b08767f0dfa",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5803e50-c1d7-4fd1-9d26-3366dca5b841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632369c7-5677-4b79-a3d8-cb19f5a27cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be64ac3f-e96a-4c80-8a37-198c335dadb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1f3b303b-5beb-4d7d-8990-6a57dd17ea57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26df9ea8-d616-4037-a2d6-5c8b2ac3ed56",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65611da0-e27b-48a4-b5f3-7056ba914d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "020acfb1-37b1-4e2f-902a-0e29dcdd3e46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65030a78-d0f6-4f88-8113-b51154c1c45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "612967f8-0a23-4d6a-8523-c34a742dc2e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3b1b86-cbb3-4444-9516-3f48ec28db58",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e7a134-a241-469a-b512-c1a789cae6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "789f25db-48c2-427b-8858-dcea827a4b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a140c17e-bb92-4ea6-9c8f-ac16dfd94d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff71fea0-560c-4c90-9324-02ade051842a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6328d18c-d0d7-475f-8424-6fd15a54a376",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44cff507-c578-4e39-83fa-08644ffe0944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f1923be-3a34-4f9b-a3a4-fa7941072085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622be100-21a4-4512-acfe-786dfb665891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "06cf781e-7afe-41fb-88ef-5c00b90b35df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ce2293-d978-4ce5-8d18-c15e82b8acbb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d20d785-1ecc-4a07-8f35-f5900aea580e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ea47c7-daaf-4931-aada-9fc4f8d3b5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d07026-a25f-47d4-af4d-53f8a5b5b038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f90f3ec1-bd89-4ace-b914-e360231ef919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33352f36-5674-4348-a290-b12d3c4345eb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2462d171-ab6e-4ca5-9149-1475b75c2daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "802ffbd7-5e52-428d-844a-a37a221e7218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca4854a-c541-4585-bbe1-3391c4d0a48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "963eac4e-e468-4e20-bd8b-24ee87b157c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5971a871-c496-4631-afe5-21549edf9230",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4159458-a4d8-4a41-b461-0d2ec005f31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54befe28-8ad8-499e-9311-934578e8a2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f24e99-de39-40e0-84fe-98ce8f234239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "89aeeb3c-4df7-49c9-9e23-eaabd67a4636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb02b82-5ef4-4ce5-abc9-6244f819c0f8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c46afa-326b-4b34-a239-5bd25e4670b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8197071c-3d19-4201-9281-c45e9868c053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f7a44d-aabe-4921-b730-846dcd6cd113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab88647-a7e6-4215-971e-9836eafa329f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd31665f-666c-481b-9500-1898336edc40",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2995086a-4731-47df-8ee5-53d2af7a449a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52359f60-1f6a-424f-a71d-3b4a4611e03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de321db7-ba2b-4ca5-9424-26c02fb8942d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe2fbfb-47d8-4b6e-bf83-7130bb4fee43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56d50cb-1ace-4f38-b9fc-f23a74132347",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2a7be9-2137-4d72-8dcf-80ee67c0e5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf94231d-f021-48c4-9e7f-08bc8419970b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c927e12-7842-4dde-b9bb-21aacca5f7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8577eae6-6d2a-4b67-8cb1-4a9b2941bf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9ee0e9-ad14-42f4-bd5b-9cebcba48f84",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c46320b-0455-46de-8135-292128926548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1673d37e-f450-484d-92d2-6ac46bb52a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2403b513-f873-4bf9-8ea1-fe89fa35eecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6d91ff-8fea-4941-9c92-4b2f41c4e2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c305e01-34de-46fe-8eea-08b4ccc0d2ea",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80754b89-4bf3-48e5-82cb-f5382d35cf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0077b1-e9f0-4dd2-99c5-37498f8ca961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eef4290-f6d0-4f81-8adf-53e9de62f141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "de5d271d-b6f5-427b-98ab-8636262ece66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33245ba6-51c7-4b2a-ab27-a35cbc4597ee",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c39db0-0944-4ffc-a89b-b23c6d91c894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae964323-7543-4037-abdb-e4a86b049f54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500081ba-ba4f-4bfe-aad4-0d68f6976872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "db3c3b42-fed1-47fb-a5df-57088ec05698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad37a0e-7ecd-4d0c-b2a5-3c2853c2e58c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9ad32b-4f1e-4361-9e1c-f9a8ac5d2f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4660e3e9-292a-4d1c-a26b-57279686deb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6244532-cc3f-415f-874f-b38e335e886a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0afe6f0e-57e5-424c-825c-2b299370afe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347ea07b-3c25-4d54-82d2-728fcc2ae1e4",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18cd277f-cead-4e47-a503-df7190f11630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "866e0046-a198-475b-b8a5-a827f0e181b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c312ecf-81ae-44f4-93b0-0723f878c538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "64047e76-b1f6-4ca3-8f41-4c59a1203fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a1e8d9-f419-4bc0-bd79-3fa9e89cc3c3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad2ecfc-cf37-4308-a41c-0344e2051fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6e47c7-1d59-4f72-9b39-4144ab8b59fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41703621-7389-4c45-96e5-b68e67bfd722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ccbed63-3d0f-4f1c-b08a-80f4dfc70b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ad3adf-5d0d-47db-a19a-68bd507bb1f7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21f2b30-7587-4fa3-b558-e4ea24fddcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a20c7f-4c45-4ad1-b523-99bea31f5195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb5a81e4-d51d-4dfc-9d38-7f5c7d0dfe84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "def290cc-68c8-4254-b78e-46dc6519635e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb620c3-eda9-43a9-9416-a552e5582e54",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805eadb9-c7bf-4642-8603-7b2069a0e5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87cf9777-efda-436a-bbeb-f742b2d3a7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf47e14-da38-4005-812f-44c26050b9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20cc1579-a12a-4d33-86e8-5edc2ef78ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ebf2eb-6422-43a4-9562-56f5064446ac",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10517c6e-e8cc-4293-9288-ace73993f9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf44bd76-9eee-4fb4-b58e-37f2d7fab2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfd5e9c-84ab-4134-9b5d-4ec6ff5b829b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9641bc0-8843-4b70-86b0-41600901af45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e59357c-2720-48c7-9484-589c9f70ae28",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1b5013-49ef-40b1-a3b7-0d0424072fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74725ac9-188b-49ab-93a4-e09fa3172696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4143b7f1-6e6a-4334-89ee-2babcb0b841f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f777318-791d-4d60-874e-87afa83890a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c09fff5-3462-420c-b65d-41f3fa631731",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f06a29-805f-4e72-8cf7-3fb2dc1ed811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd294e4-adc7-420f-b8ed-2054ea25b645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38f4ae3-a44d-4d0f-a1e6-a4c5fc8ccaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1e5f3b-547d-4206-a731-5ad700d9f74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7193a6d9-34fe-4485-8dfc-4f424fbcf5c5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be02dd1d-586e-4744-8905-af1263445829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7493a53a-3177-4efe-b9f9-5e03d94ddee0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47017cae-f741-4da3-ade9-8e679190e3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18761324-0a5d-4207-99a5-cdee236e85e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137a5c6e-def4-41e0-8112-1a113b5b1d1d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dbc786b-69f8-4e61-bf56-ce0cfeed21d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94bd9599-df0f-4b7a-85ae-a8d880d5c88f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00df4b44-1724-4254-9345-9460699841b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcbf51f-c42d-40e3-8af8-4585b1fed27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e7e0a4-b39f-4d6e-bf26-ba04a17ecfaf",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a6eb07-7709-4ac4-9fc3-db6e7cccd53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1a4f14-1263-4e32-972f-4b541e6e4d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72882040-c1d1-4c43-a7f0-ee9a01db08b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8a89dea-f0b3-4112-af8c-da6383287a68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca6b068-6e65-45bb-8a6a-f7906f8acbc3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8401ad89-8b77-4893-a1b5-3d62a2fe8f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053fe979-a1d0-40f5-8390-016ff5f095d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528f03c6-f321-4097-88cc-affbcc0ba0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "03887cea-425c-4c73-aae5-d99ead957af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566517d3-bd57-45d7-971d-51e13298d774",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40946db9-d6cd-4702-a2ec-4e7e8c222384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e0acc5e-9193-4a82-85c5-03f4bc199845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c9e02d-bcf4-49bf-9d49-75167ac7e227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b72257c-153c-4931-aced-4e580ca750ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6cdddd-7f0d-4f35-a2b4-fbefe46f9d8e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "014178ff-79bc-4bec-b44a-479b5ec9cb85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37dcc2ac-453a-47f8-8c61-dbc50714d0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d7e30c-2f58-42a3-b98c-5d1ec9813acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e277df89-f94f-4acd-ac41-a1c1b9a989d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891d9b5e-3406-4d78-bf1e-11053754a83e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d81f24a-8ef6-494a-9969-b4936e1c3103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5d645a-56fe-4864-80cc-86e8fd57893f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d246580d-942e-44b1-a1dd-7ff17b16db23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0172537-d88d-4a24-8125-c1d6b1a205d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198f2789-8131-4b08-8b05-cf184275ae4e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29076d8-7b72-4aca-a84f-5933f4e66d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ed42a4-4183-4c6f-a305-9970921dd440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9043127a-cd30-479b-b3c4-0b0574997c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7742a97a-52dc-41e3-baa4-aac10281c4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60d8c08f-fb03-4e10-ba5a-b7eb5268ff46",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2675e6-864c-4e45-98b7-efb42fe64bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76afd97a-50dd-4756-b351-77fedd178ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d5d153-0179-45c9-b03f-fddbe536af6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99dcece4-6503-4e03-9600-a0bb7beb1c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93869e84-2eff-4e11-ac58-39e0339ae067",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ff45be-4a03-4c21-a361-dd8b52dbce9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf7d3619-4d51-4842-8498-4c7f0cc6db4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b698e025-d3ef-43d8-ad5d-eba47d1aef03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9db760e0-e3ad-4906-ad2c-ea3615ab3137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed93872-6488-4660-9a60-dfa50755e8bc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b75f4d-0746-4493-af1e-75bc952cded7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d39ef1-33bb-4fe5-938e-bfe1b7bb49e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f75c8f-39aa-4036-b3ef-15dfd964b63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "36234a06-7343-4fde-b690-c10441866107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf477f5-ad14-450f-9a49-d0a985ca0ded",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a5cd76-516a-43ff-97e1-a98eaa58d159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276ded00-97da-4779-aa22-c726fa556186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c93a80-b0bc-4f98-9ace-fa271e655811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "40d461de-750d-45a8-b84f-cff5858075ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec41337-8f00-4cd7-96dd-4363e0cc6107",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe384ce-32b3-46dc-b333-5c51a979707d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f2042d-9955-4dc9-a713-22a729aa5af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe01fea-7e0e-4763-a5ec-85b52872d85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a60593e8-b808-45cd-a186-0628360c2c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d798156-ec3f-449f-a89b-b7fcd3c84eb4",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9c9781-dd84-43a3-923e-f1b167100d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dab971-3e94-40eb-8791-c08b6ca3ce39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4ca568-be62-4f65-a56b-6a72ad5253bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a832a35d-1146-4b57-8b9e-5d028aebb108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347b3539-524c-4be1-83a2-daa25865731f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46f3423-9eba-49c3-932a-e373a8019854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c8096a-82f5-49f5-a229-8e68805086ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec733c7-8bcc-4fec-b6f3-cfbc4b3e5041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2afaa90e-c6f2-4460-8d3e-9286ba33073d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909d7be3-544b-4416-ae19-bec0d464c87f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40dcab1c-a1f0-40e2-b89c-01f3e07f6a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8908b2de-861a-4af8-87c1-09c67255b446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29508225-70df-42bc-8bfb-c812a0494693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1275a86-bcaf-4dcc-864d-d76d14389637"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b970058c-6e6b-40e0-b949-01aed6a959b3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8d3aca2-0fe6-4653-96b9-dc48aebd7971",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cc25eb-71e9-466a-8924-b42f0636bee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d3f74927-d6f8-451a-afc9-4809a7b535ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58a9977-efc7-497d-8cd9-3d1cf60f3eb8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6ffbebf-a6dd-4964-b0d7-b79fdfc67032"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "706e0298-b3f0-4dfc-85fd-219b7d6951d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c20b14eb-7815-4084-a5eb-d1f656d363f7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "036a6c17-e415-4aa7-9949-d5f84e866e8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a7a7dc8-1ed2-4184-b8dc-a92b84fb2382"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "afe543eb-0153-45c0-a2fb-edbc8a263dbb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc92cfcf-bb49-424c-82d5-3d161c77f1a6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b04a826d-542b-47c0-ba85-27507804831d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd9227d2-5b2c-4623-9534-0ca45db6169c"
                }
              }
            ]
          },
          {
            "id": "0b6f2eae-dd64-432a-b615-8a426144542a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2db31d72-566c-48cf-9439-ae922797a66e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "eddcfd1e-9b7c-4c15-8bbf-303eeda33411",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8794152b-28bf-4d28-b24b-0267f70d375e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8481c41a-c51e-4f0c-82d1-5c5c553079b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c0409c8-0fe2-47a1-a637-03aaeda45745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a16a9b-ff53-4357-b93d-f414fc305dff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1db78db2-51b9-4e75-acbe-b22f944d428e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e1e7736-6d5d-4b36-b197-c0cfbbc27c0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "358e8d9b-abf4-4a5c-b767-1390dfaeb1ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfaf1bf4-6341-4cea-bd9c-dd08a5d5f30a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5e8f7f81-054e-4dfc-812e-c6e5b671b5a0"
                    }
                  }
                ]
              },
              {
                "id": "da0f8e56-4ac7-455e-b3af-a7948c6e8013",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "494a8482-e65f-4356-a54e-1047198fecbc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c8434377-78fa-4177-9875-ec16ce8652fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "186b14e9-3605-4b56-ae40-c23636d44853",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5c0c7044-bb01-4c7e-b9c5-8aa61cf6762e"
                    }
                  }
                ]
              },
              {
                "id": "2eefdf3d-78b0-4053-8874-3ebba18cb84d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97da401f-443e-4fa9-b7ce-589f0f2e4c5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0734c3d1-2ea5-4858-965c-98f840878462"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e57ed53f-ee2a-4abc-a0f5-0ba1a6dea51c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2dd91006-0498-4bd0-98da-36f624f3fc2a"
                    }
                  }
                ]
              },
              {
                "id": "2d81babd-3a6e-4f99-923a-88a806173362",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afed08f5-ff80-4580-ac5e-bfa90c86cfad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5af16c58-fa20-4cf3-94cf-e98ed472a7b3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c86153c5-829a-4d8c-9390-cc0854adefca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1b2fa0b7-fbfb-403d-9364-1a4c7407c265"
                    }
                  }
                ]
              },
              {
                "id": "f3014fe2-8c14-4279-9cc2-102fd9263851",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b98dadfc-0b7b-43bb-8faa-138f0eff1333",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6101ec7-b9be-4cea-8320-b7789d1d500f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87b22998-8ba4-41f4-be26-36c581e65d82",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e79f976f-10e1-4e72-ad3c-52f3ca92dfb6"
                    }
                  }
                ]
              },
              {
                "id": "b8d7979f-6d75-4948-8040-164ced4acfbd",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ef88c81-35a5-4ebb-8a4c-3a9ba3a918d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08abde59-04db-4bde-9e3e-75a1d2831e68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56f3dbd6-0753-4d33-861d-b21102696f36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "07548d33-94ad-4e0e-a114-8daa52874e7a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8098ebb8-264c-45ad-821c-a7baf972f0e1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4cd0aa6f-dc53-4a85-9b73-ea536ea956e8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "20e3b78b-7f84-45fc-b564-10f235fdb006",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c95a8d7d-c1ca-407e-a8dd-69f2e781297e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f6a1b5c8-0498-4da0-9451-d7a873c4ab03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "925a5fe5-3061-4488-9b2f-f87868d9e876"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26d48156-b9dc-425b-bdef-0b0c8834e692",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2cc28159-685b-4fbd-b064-b49cda8ac2fd"
            }
          }
        ]
      },
      {
        "id": "bca69113-fcae-431e-abda-c46080674ca4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1825381f-0ce0-4a63-aa3f-80cd4b72db8f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df0b417e-03b8-4a22-966a-81b0eb4fbe77",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9c160fda-cdd3-4dbd-b203-5970e4987da5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f67ade6-eeeb-4751-8aaa-336ddb0af66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39f16d1b-1eba-42d6-aff4-49f68cfa4ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d26076-ef15-412a-93d0-8e64595d068c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e99f007d-d554-45f2-a38f-8b23e5a13821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52273d0d-df50-46ab-b37c-145827f1850e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacd0ee0-cbbd-4299-becb-d97944b4260e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2637e27-3f33-42f6-9f4c-4acfe562849f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa32d9f7-2157-4a81-bff7-1aec8001a4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f3a8ec4-dfb9-4a5b-b434-6fbf62bc02af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83dfb16-ead7-4326-9f36-188437c1e349",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf0dd01-b529-4f6e-b2f2-cf9dc11f4141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ba700f7-9485-458c-a996-4bcc0a269a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a1fa25-8f94-4b09-8e1d-0579718f56c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "769b8b9f-6cd0-4547-aaef-bb802d773305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f493f7c-4de0-4faf-903b-98bc4ef53c96",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb0c96d-ae1e-4b02-9cc3-9d7fd7399ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b73bad-aef9-4512-aa23-f4745bed91ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5876c4f6-2613-4d25-8212-c31479bede96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f41031a6-9a5d-4b1a-b2a3-a38bf1e36258"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d64bf46-c5d3-49c9-bb8f-9b5bd0c86303",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5a1e67-d8c6-4507-8006-bcf6e14fc253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2ebea9-9853-4e49-8cc2-f06ae8c5bdd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f28955a-5565-4795-90ba-74b675b77a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e01adc35-bf51-44d1-8b65-ef26ea532a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35413df3-0308-4c57-ad58-e926c1adf44a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12118a0d-cffc-48dd-9f73-f225ac4950e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "113da054-8f11-4d53-b013-a48231563c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1ee8a4-0e63-467e-ac96-433fcbcecd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11c30760-aaf3-4b09-aaab-6a8ae9f373b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b249a7-f112-42ac-a283-b04e9d0fd33c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1acae02-111e-491b-a850-ec7ccdc8ce25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f04da83-53d2-4261-bf8f-ca4008a885ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6bf851-1937-4770-8925-d8089606c671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad7df2d8-d07a-4425-9f22-0bbe098071f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace2e791-1633-4324-92ac-b47f92ebd707",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32dbd3ac-9952-4d7f-8db3-57a7b9239f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888a1d3b-1e50-462e-8d94-d45057737154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4853e24-8be1-446e-81f9-7072079b55de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25eaa953-81a0-43e6-aaea-88e5c2498aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ac384e-ea73-411b-b65f-39fcc9d7a0be",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da03a157-0fa5-4ca0-b1e7-423c5b0f7ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "443ff9d4-45e0-4095-91d6-5fe9d3c9258c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5b56bf-c745-4e9c-a437-897425243c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30528b4f-4c41-4d67-9222-997b2491a094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625e75cf-b117-4791-966f-da192582ff5a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00465788-116e-43e4-a5cc-ae8975ebe2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2442a14-93ae-45da-af49-c1820b993585"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9f8dab-75d9-48e1-a2ec-083ac171b8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "947066a7-b309-447a-99a2-bf7ea202667d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2660e7e2-64a3-44c9-b039-e894100373b8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc13d0b-52f7-47e8-a9f0-0ce39253e3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85f80dc-2a90-4cc1-b4a2-cef771515602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16df770-f5c9-4845-93de-19ff3281fcb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "40428d78-626b-4545-8242-f9bf8d96a691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a72bc69-53ac-4ddc-a4c1-5197c3730e3d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1644ad2-34a6-4795-a562-2f0ab2a93505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c24aee0b-ed14-4c88-b71d-7953b237566e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcaeadb5-6c86-493c-96d8-c63c6fca6df3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9aeef59-2547-41fe-9236-88b620c38cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5dc0da-5895-4a82-811c-d78c5dbf21f3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "815021ba-fad8-4abe-91f4-e9dfc95188ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7a51d0-946a-402a-82f1-911624467b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d306b7e-fb36-4aba-897d-b461b09a72b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdaadec-3305-4ce9-a2ff-0688dcead98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9592b8-d8e9-4668-bb7f-d0a36cfc787d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7112879-dfbb-4c70-a88a-24e58596b83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42256689-fcb4-4e68-83e9-774f50c05556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17eb3f32-16a9-4be8-95e5-840b8465d9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7808a2c1-9ef3-4245-aa47-d82c07750cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c9704f-6e1b-4794-a901-ac6098b5f81c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fdb931-7b0a-43b6-adaa-95ee71297395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54114c57-178d-4b22-916d-a9028c0a26fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1aa416d-0473-4c8a-abc3-4cd5b53c759e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7f52810-610d-45ab-b480-f5df7f802182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc0fb0fc-bae3-4936-ac32-1a93cd6f3a03",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "328ec861-cd78-4fda-a41d-f8014a6faab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bcb4798-c965-4de7-9f33-28f8e581c80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d766b7ae-5171-4ba2-8ebb-50ed3b6f9e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb63e110-87dd-44fd-aeae-c415f482869a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8607f46-9482-4f96-b9c9-b38161c8340e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9b4f25-de96-42d2-af66-00a7151a497d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a42ea9-00be-43ed-b372-d77f8e6912cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054a33d4-f660-4a80-ac14-857a11477213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "17dccaa8-b3e7-4883-82e5-fbfdc0761154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac264e90-d24c-4126-a720-219acddd6eed",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83e39fcf-ec9a-4dff-af3a-d4938b3f27dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c8cc396-f640-4895-b49a-c2d020232db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97afb2c7-679e-4696-bceb-15e269620a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "95fc224b-c69b-4ab0-b26f-8f0f2691b57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c6cb90-4c8b-4219-9176-b372080ab2f6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e56b16d-0922-4097-b3cd-a9f9f58a571d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1963990-9390-40e9-a5b0-daafdc717357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9366b25-3485-4a28-bb7f-c9be4bb064f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e274244c-50c2-4346-b202-9760ecb3dc54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba062380-35ec-44e0-a8ef-2523a243be82",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac14f6d-2db6-474e-a6bc-804a9fc0e08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad224f4-5cb4-4a46-a964-3da55f076efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15458c90-ad7f-48df-a7ef-0f8af005ff06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48d042e8-b6a9-425b-80a4-733c36b752da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897813e9-6fa3-4c2f-968d-745663914446",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc2480e-9ba6-49b1-bb11-df2ae0917861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f1bb7f-9b20-4233-aac1-0bf0c9fa61a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42cbd6b8-4d21-41ae-9f5d-c45523e53532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce84a10e-78e3-4867-82ea-c442d7bb393b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c648886-ccb9-4867-8743-a1da66f032ca",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c1948ac-7b06-47e5-b29c-ef82d8f66ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea02eb9d-2d77-425b-a847-a04e6de5a51b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b12fb3-227f-4dd1-9bfc-97f6d232f67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea07c4e8-90d5-4eff-bdff-7c7170a302be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b32db189-6f86-4b8d-b09c-d0bab795e318",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396e38b4-7fc8-4522-ba1c-7ddfc48d6bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc82c10a-8312-4530-8fcf-701548b5b7ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ef856c-be60-4154-a99c-31e6d70bf032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a20c7bd-1922-4f11-85c3-e44ed735f635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59283f0-0a73-4adb-b93f-5d3fba9d6787",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77f496a-8235-4268-88fb-a8220ac55a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc41d24-23d8-4d90-b989-2d546a79b77b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b454e4-c3bb-424a-8cc1-3c61e0893cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "446647f1-eddb-44ab-9070-56c59fa5a409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b36ead21-3d76-489d-9be0-e40571b18225",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb96248-4905-40a9-afa7-a5388c8ebbd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f944881-b8b2-4586-9aa2-46983b0bd347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d006128-1ef5-475e-ae44-191d878929fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3791cbcf-b32a-439c-a1b5-3260371504a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec25d81-9971-4baa-957c-064342db2b09",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c202f0f0-90b3-4c9c-889f-19b078ad14a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "567096a6-4e7d-4fb5-8e4a-69d9d42e3a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0856752b-5826-4c53-8b21-dbd4d786c3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06717ce4-900e-4662-a3f6-67fee8405c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e2bda2c-7843-4953-a9ea-ff469130d27d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c4a2bb-3135-4c2e-880d-f189905da98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5be7e54-bf73-44fb-a416-7625ee3b53ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4304299a-633b-45c3-896c-ca5ac4b092b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80019288-b561-4e36-8823-5c07f3315a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a9cdf3-2dde-42bd-bab9-a9a599954255",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc07be73-2c2c-4d07-ae3c-bb05521a891b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d78e71c0-1fa9-49b0-a429-a85cbe26cbb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9111a7-47fa-4349-8a63-dede8ba98782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fda2b7a-7798-41b7-b8e0-ce19516fdb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b6e129-b8b5-42b3-aff9-bfffb825b94a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b8ab86-dc70-48d4-bd07-02798cb3746f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630908e0-dd77-4b52-8e9d-c121b3023787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1cd97f-9b2f-4c8f-8b0d-191fb5e25fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2de358c-727e-4010-86ee-7647ea06ac8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc9103f-c2cd-4f3e-b4a0-a2847fd08c31",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfcfa792-5e2c-41b7-9e1d-e09bd5671e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0e0fc0-c1f1-4e95-864f-9d072c47c016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464456be-838a-48af-aec4-2015d88f9e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15b4b802-b3b8-485a-ab2e-7fa66cc42c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8281b67d-48f9-4f30-8eb6-462de178a08c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cc8fc0-59af-4804-b55c-a4d981bedf19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2a7dd51-d899-42ca-8c80-33425fe3a58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6ca667-3711-4f36-9e54-de42bbaf6312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0647d9f7-c13c-4820-ad0e-d9d35bc46dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe5853a-1ae5-4d5e-b1f0-447a8a8822e4",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961a47a6-4d67-4a9c-93a6-6203a4c4747b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b740b611-60b7-449d-b8d6-0536e5c1014e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13481232-af89-4f4b-b458-cda5be5936c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c764d013-7b08-4dd9-bb28-f939c4b3d461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2263de-b886-438b-87cf-a7c39b4b5164",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d2e8dc-32d1-4693-92a5-24a3d6a9e9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15cbea71-fa11-42a0-bcad-75a4fac0aa65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f52118-db85-48a4-9395-0269de951b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c68b71b-7881-4069-b3c9-3f639bc065ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a29e49f-b25c-4293-8e76-825d2ccfc92d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cff235e-61f3-4ead-a282-8d333a3f76c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca7419e-9a46-4101-b537-deb43b4a5e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ae1f66-44c5-41fc-8659-22157628f262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17c796c1-9303-4f60-8a30-de59ef73e01e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6159e15e-370c-480d-a876-52de0f5d1cea",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "874d2951-bd84-4271-b0ad-599b23b07a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955c866f-a3fa-4faa-baef-d96ea9e92850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54526b71-3f31-4a95-97e8-b79bcc057ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da767de6-ea20-4a91-b884-76d0b5134787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185d0afa-737d-496f-92f7-97a649b28df5",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9a50c8-5030-4b28-b36c-151752414454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96ba05b-49cd-47b7-b010-ae2ddeb90622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40378e4f-16a8-41d4-95df-5fdd4d10ea7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f303bb7-2ced-466f-aa05-e9e30e100935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0328fef4-6e27-409a-8aa7-8bb3b64cf49c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d644f7c2-5cc2-449e-afb0-145da20914e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89852f0-5b27-42b1-a91f-2c6fab17e2e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0344fc-1b33-4d87-9372-0c76bdd5a88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8243eb40-3dd2-4677-aa15-eee2da13e15a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f4ca25f3-2269-4e1b-b3e4-5471fc9b1249",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "89861fb5-3c2c-4ccb-b1e5-d896367eef34",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ff3d3e-617b-4581-8a65-ad93c2850b14",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a8259c01-5147-43b3-9f9d-4fe9fc2ac5d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24bc01c-9924-4054-a71c-04d07320c4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f210fc07-58fb-4841-9294-d09e29083828"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee70fdea-58ff-4129-b80c-2ca3a95f955e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc978a4a-c2ea-4ecc-b701-d39120c7bd29"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16cb85f4-d9ba-42b8-8713-468eb0d34b65",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "083b8287-d858-4a8a-a087-a735ad6ec7fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c558d2bc-1d89-4471-bb76-4c013c0fc8fb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "815da669-a3e0-4ece-b580-606c84f473e9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3ccd3b6-0ab6-4267-a5e6-0d6147f10d43",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "278cbdf4-1b71-4864-a504-53338aedc514"
            }
          }
        ]
      },
      {
        "id": "b29e077b-98f3-461b-b80b-556a5b4c26f4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4795dbd1-0068-4026-b074-ec976650c444",
            "name": "Negative Testing",
            "item": [
              {
                "id": "12a95f9f-f968-4b10-8990-6f36a07da51d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f6a61195-e9b0-4fa9-be5f-ff2521ec634c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fce61b-045f-48f0-9399-68b3a2e283d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90b29cc-191e-4e3c-8b62-88fd405fe734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb4b2f2-7b4c-4bca-85d3-dd07cd42b163",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06fd1ff-72cc-4f40-a30e-b4b318553f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "468ab303-0916-49a4-8cb3-d47c1e6f6df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b7bac1-2ece-43bd-a34e-3ffa4d77d0e3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d59ecb-b815-4174-bb7f-0bd0e9c7312f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e9f049-05e9-4608-8faf-70b0386f05c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eef9453-cd79-40f8-98e5-00a70c1933ed",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8aa18d-247f-4b4d-9569-0a20c6cf561f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7d18c5-16ad-46f1-9c0c-cb71e9edc4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f121dd51-7263-4645-b045-1c8841e3e12e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1d3d20-d92d-44ee-b37d-6af7a9d3e21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3a1b2f-43ad-496e-8faa-d178dfc5f79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "478c2c83-f583-4f08-9c58-a609f16793b4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefb1f0b-b3af-4fa7-85bf-3380fe70dd7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55255c1a-6830-47ec-bb03-445e737694f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6086c7ee-75cf-4379-a813-a097ba0af6e6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a104bc56-6e86-4723-bc59-e0142b9c288f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42860359-baaf-47fc-bb3b-ec08ceeaffc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cd0f48-bc71-4fb4-8811-997039993b8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3cbe03-b93d-4092-807b-4739289ff50b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3736c39-84bf-454b-83bd-51e79f8aea4b",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e425355f-5e11-4210-acca-2572af6039ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4ac423a-4e7a-429d-99f9-f8d5f7ea3ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ff279c-3209-4c0c-9d28-92d4caaa649c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d778bd-8055-4705-9602-a78693c08cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57faedf-48c6-4057-bc56-05eb03fd2aab",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c669466a-475f-4f75-91dc-226f21b3c114",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aa743b5-26d7-4765-b198-f50ca5f02d3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0e4240-cff1-4cd2-b0cc-ea643d1dc931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae312df9-af1e-4256-9c53-156caddc57ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac16dac-61f9-465e-b975-6e06884fcc5d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565dd9fb-ff4e-4238-84e3-870b27551556",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43b81fd0-e8a0-4a6b-8467-d324a1de8889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b904e5-7fb1-4bc6-811b-ad7b78df00a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c69754dc-f9d1-4654-abd0-171de4df5384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f44dde-2b14-4403-8a89-d66453bf091d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028e777e-bf44-432f-9b85-d9e737562485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6861439f-4953-4975-bd25-136541cbafef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d3c644-cf18-4361-9584-bcf6d2a4b6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa0b08e-bc99-4b1a-81eb-c80804a017a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9630c109-ae6c-4509-8522-bf810f56bcf6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89fbd61-2d14-4417-855d-457c03948e7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8efddca6-8c1b-4ed0-b2d3-2a5d3e01cf6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e01ef7-b3d0-441d-b203-f066fec6c62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1bb2c86-3ea8-4084-89c8-85d6e71bd4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0431c6cf-e378-4523-85bd-4fd386712569",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afef467c-d392-4ad4-a418-b1b6f713b181",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dc08ea2-9fd0-4f41-b8ea-647056f69c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7391fbc-5a3b-49b1-af2c-7b2970377a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b04e1b-a4a8-4f23-80ae-181ed552330b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c405561-62f9-4f6c-a895-574d9903ea05",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9759b69d-e86e-4a0b-8b6f-7ecaef4cd6bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b1f9f6-8b7a-4535-b2ef-042ee15e715b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59ab340e-1233-4f25-947e-74013cfc84b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a183f9eb-6164-4a58-ab7b-dbbeef68d23e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71981cb0-83c0-412b-92f2-3c62c0cc1747",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf154ec-6759-41f7-a97d-52e0eb2dfc7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f239d34d-5aa2-47ba-b13e-9705efa098db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84385025-8cff-4732-95ef-fdf6cb96bfdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447c8c1b-ef2a-4beb-ae3e-cd680ce0cd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edcbd4ec-a905-4fef-b9ee-74fa27c18d62",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6688bc7-255a-48f0-9070-6d216835e0f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eab2a06-da32-48f6-ab2b-1625ef794871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "658f3c06-84de-4dd1-82dd-e5f693edc3e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be1f3f5-fd57-46a4-8b4c-1b05e604abc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76964679-9086-42b0-9988-ab45b9d788b9",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b54fdb0-22c5-40e6-9bc1-c67fb256932a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62304a0-dc55-4ebe-9a90-31f2d365d9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b546b37d-6847-4a61-bc1d-55e674cbf71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b0166a-af1d-40e9-9878-5fa9a81fb143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4664e189-11c8-4c09-9ea3-1179e859cdb3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b294e0-fc2a-4cea-a1b1-2e8d989435a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d693a429-5d46-4d70-b1b4-2c1659d8ac7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7891960b-4873-41db-9d86-1f9477da1f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b531d5-5ec7-4411-b886-5f6252f9cc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0f0044-fea5-4265-9083-dce8a29fe053",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a3973a-2a17-498d-acda-31165dd0c91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0ed5b0-94b9-45dd-a993-d39f0ab6b9a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ff9b2b-cea7-422b-815a-db4fb42c3546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d88511-851e-4b14-bcff-70b67ab60148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6888a3-4298-40b1-9603-d68e5e51e3b7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a7e4ef-d882-484e-878d-0d949565cb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "004d58f0-47de-43ec-8b47-dd5de2827b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f2d66b-0d84-4f2e-9dee-46896d5ea9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5163f53c-0f1a-4c41-9246-3e38be72fd52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6fb8bc-926c-43ed-80d9-c7179ac66c67",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82db961f-9b2b-474f-b801-e4e5210f4079",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a02adad-25d6-46d9-afd8-9800dc5388a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff2c13e-a20a-4cf5-a8fb-c2ef77f153de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71511a81-a3f4-41e1-9fe8-07681664f739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf11147-58e9-4825-a3c4-7c1ac7fe7080",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd984972-1285-4b02-a8f9-ed4b47c8c897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9856027-54be-4ac2-8574-e89a6359c050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4115739-87fe-44c7-8eb8-b19586b8d5f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddbd8e5f-5f48-4e44-a966-0dbeb60b8c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f069308-0b34-4129-95ea-318aa1ef3430",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f0a195-0978-4443-b4c2-5cc6864ce4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35da7e8d-f4cf-4bb8-a0ba-81557dcd7eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd164f44-8a86-49e7-a3bd-8e9b00f5c432",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed37230e-6925-4813-857a-cde2c29b4bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272157e8-aec2-40db-b65a-65ced970268d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603c4e01-aa42-4095-84b1-73f94db12679",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e8dace8-7813-43a4-a8bd-53b91132adac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfab0eb2-7b0a-4dd2-9c66-d05836d9af74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82a6500-ac1f-4c81-818c-7492546d2e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e788ef05-9ccf-4667-a7e7-7d101d2ecdf0",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb78521-096b-40a2-87cb-6c3e96675d15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "737b2a8a-724e-4950-b6e6-e7318bef52a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9bf931-0af0-4e23-9283-a82a5b466334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87f3cd4-5897-43b7-9ea0-3ba5878f8390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b982051c-8e78-4706-a7f6-62425fa68e10",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10035447-d1e6-4a1c-9f17-3b667cb58d12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f517af1-5c07-41b6-bb29-d2f79ade982d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "193c9ab0-7bd9-4e13-b006-12aad2d3bddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348cd685-7f27-418e-9036-2c57bcf16e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57ac074-cfe3-4b68-8f21-1d048b0f506a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba6a1b4-30b7-46ac-98d8-a32bbd33bdd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba92e1da-35c9-4e7b-a5d3-4b0b87dfef5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82db6ce1-eb91-4d4a-86bd-5d2444531e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8a44d2-c3a1-4447-82d7-e5d79c991db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "173397fd-6f63-4891-909e-cdaf02649998",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfcb88c9-2991-47e5-bd36-99147fc07ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097e13f7-e524-4990-b7b5-5214aca808e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "150cf65b-0f05-4ab8-9cb8-ab81ad12353b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1726c155-83f7-4ba9-b12f-916d1f55ad3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58f46a3-e9c3-4afa-b405-f071ffab8b1a",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ce92a9-60a9-462b-85b0-3f2322764355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fd6b390-e646-4c5e-9aa0-104dcb07028c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03bd9380-d6d7-4ff3-b7b8-be8f82a5f809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a9c54b-6f8b-42e8-9131-69a3166860fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a818ca0-9209-41c4-8147-2d77605e1339",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d735a6f-03e0-497c-8ec9-540a8c39ba38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef93f94a-60c2-4605-a574-ba73f5187a25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f700f79-741f-4aa0-8d3b-b6580743208b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9824978b-a0ba-4717-a666-8fd8a76a2385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75972d17-799a-468b-bd3d-411ede9839d0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84e8ae0-ec48-47f4-8663-2237932b523b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecd90858-982e-4ee8-8c4c-de8606fb0d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390a7d33-c8c0-431a-b6cd-fdc82398b233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba578b3b-87a5-4aa3-a7d3-f0ceebd9d64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f5eaca-d472-446a-a779-3b7c6927ad59",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ea886e-00cd-4f83-bea5-c7acfc2f2817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "604a2e41-ee49-4109-993c-3bec5d2d97a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83242c35-ad57-41af-8454-6d85003e2127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388ab1a0-e6a2-450a-849a-dbc27f6d92c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01281f30-358f-473a-a201-74de3dbeed4c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7e324e-25c3-40d7-8ee5-4093fcdda135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f47b832-68b0-409e-b725-4c63e4026366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7bdd7c-6993-4856-84d6-b17761e6cbe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d20857-78a4-45d6-82e1-ee9125c8a68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b773aff2-5d81-4b9e-93dc-191345d24170",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184b2954-6fb3-4473-aa92-8b943f3d218f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9b54b34-1179-455a-b8b4-08c486d7f848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9685b29-66aa-4892-93b7-ce0dab1a3a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f52674b-4380-42e9-9700-b57b66618783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b3f58e-b8ec-4e59-96d0-129aaabc947d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a37783-28cb-409f-bee3-47fc65cf7095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3215a8ca-3f63-4022-8c68-3933d430374c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fed9c4-ed48-4394-b3f8-ff5fed0fecba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8402d3ad-bd17-4168-ae75-4476d2fc9a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5b4aef-8d5f-423b-80ad-5099b95e9448",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f656e1-f1eb-423f-bc21-c97b9b714fba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7140738a-1f96-418b-820c-1c4ae72fc84d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9154d572-b88a-4aaf-8dbc-5b386cfdee47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d8bc5a-a8a8-45f3-a9e4-4109330ad37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8047060-2e1d-438c-867a-dfe7f4dd2656",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2fc931b-0ad5-461d-b51f-a15d619051dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287d9615-4abf-4fc9-8e19-975e6725e2d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5abc0a3-0471-44c1-8212-2bc92e763612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d6413c5-efd6-45e3-922c-7258a6153633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3d7c01-c46d-42ab-af17-15eeb8b8641c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085f13f1-fa02-4faf-8d35-44e4d470a633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a49f0563-b2b9-4178-ac0f-4d2479cf23d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6269926-5662-4964-9f9d-c63e8c0489b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d58d67-5154-4add-a4b8-5c586e56e446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0106d5b-5b21-471b-b360-a397c9bd2b96",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b8784f-1f40-4f14-828b-d12c00f5384e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9f81f69-419c-4139-b0c6-8e94aed92d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42458afc-6ca1-48ef-a035-d2bef1406689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eadcae02-36e5-45a2-9b5a-25a06c8c0d47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5584f51a-b9d7-4788-a72a-177d74331aa1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1a9577-7dee-48d5-9d61-a68a89c2c9fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391279b9-5188-4903-9950-b6d070250e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46086c6e-0a25-4bda-b368-63f11e509520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2b45b5e-eabc-4897-ac8c-16d9415ac026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52919034-a571-47b4-8722-6d6844a9129c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1399436f-1e3b-4f22-8523-3f6194b953fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd155bf8-17dc-40d2-ab23-0fa7795265cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ce6f1b-8b4a-45ef-af09-ee8ceedb5c93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bb58d2-b2fc-4f86-86e4-fe78b5ccb309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d5b098-abe8-4131-b5a2-053b3541e450",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaa7536-7dc8-4a7d-9b74-affe62d07808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80b1ec0-fe7c-4a4d-b724-95c7a9eb555f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c18895-357e-43e2-9155-bab6546b403e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce26edf-e3b8-4b3a-a8ee-4e4e8381ca10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de365fe-e169-4950-8b4d-e1a0f66df808",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b69846-6389-4cb3-8747-df703e146ab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f26055-b2e7-4a1f-85db-b3ca1a881314"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "639b412c-cf44-4233-9c17-6d5daa91c71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "030c4305-947b-445e-a10f-2671d6bf2cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c9b20e-79ad-4dc3-a9a8-4dbaed27510f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961ab30c-58c6-4aca-a64e-91c57bbcf8e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ebde31a-ddcc-4630-b584-95765561c769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6897ac6-b11e-49ac-bfc4-beb5b36302f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab63cb35-b051-4738-8233-aa753f4dcdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04597ed-fa00-4240-81e6-a31e59b3bdee",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0b0c46-5436-4736-959f-aa14b9ea08aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d434e55c-6097-42b6-b00b-c17bb104d106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950f91ef-e1be-45aa-b70f-2699b449a55b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548b20fc-a06d-4830-943b-8d58570ef009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efc716e-ffdc-4967-81a7-9623ff4011b6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2781344-a9cd-4782-b462-ee5a30281d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c786d8-6e65-4be6-846a-a6607d6231b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65cb07aa-1806-4d39-b695-615e5d3b3f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86752ad1-c338-4b46-9084-c6be806054b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1824f58-0547-4053-b5ba-f14369b8ecea",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f421d9-8a4d-4484-a5e9-41726af16ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "372d11b5-4d76-4f7f-8a78-11dcc88c70ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ad994d-3b27-4ef3-9be8-f58c440efe77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584b923b-5f87-40b2-b1c5-e66ed9ef4d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643c0943-e15f-4206-85ad-7ee4b294fd0d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e5b0d9-f449-44d8-a740-8fd60621df8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2102aa3-f2e2-4771-b7bf-8c4e02a749f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed2477e-cc66-40c1-a103-5b20e0be1305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f76ea55-f3c0-4732-bb7e-250b1a1ed918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3127b9df-7fa8-40ac-9aef-a2908fbc8241",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9549fc3-7be4-4dab-ac34-63e9922156ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c950d63a-df37-4259-9c9d-e26aca912c53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "402b75ae-43df-431d-875d-34d5bf38d35f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28bbdb3f-56a3-4422-8d25-74d3b60861a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066552de-fa42-49ee-aefd-bfb47b0da79b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10bf3ad8-b0d1-4cea-bb1f-5579d1063db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16111b59-4e57-448d-83ec-782aea1b34fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc56d48-c28e-41b9-bee9-e07fcaf33323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3e9a4a-1fca-4be1-8cc3-0361ae5c8ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733f73ce-3c6a-421b-a1c5-91c2b2023a79",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b557de04-dd9e-40fd-b024-5a6ecf7ca5b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435a8f3f-5a8b-4f7c-a2d9-2c3c598db360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "584ce1e1-8f48-42b5-88a2-bda68e9733cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bed2684-a122-4bdf-8ced-f826b33ae0b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16c3aff-dd92-45f6-bf83-e8ab94b49704",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c66586c-38a5-4a67-beae-e1a0073fd80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8beb5748-a4e4-4c15-a8ae-190823a1e31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a11114f-7fbd-48e5-9fec-9661b5a17dd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64e4f4c-5e35-4249-a5da-66080f959b6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e345fe4-2ec2-4a69-b64d-df848f6d85b3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499b2b3b-ae05-4e00-ac21-c101323e7ede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad339f4e-5c5a-4976-8876-7e79d3f8a4a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d922e5-f9a8-4343-8ddd-1a57168daeea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb2b6058-eb63-4be7-b653-931d665cda86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7401f32-76e8-49c6-a744-16604839d1df",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df33ec6-60f6-41cb-80ef-f54db4240458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bc3600-1512-4a1b-80b8-c4cdc25a9d71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e020ff1a-301b-4a4d-86de-fa4057ea0765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68067346-fa7d-45c6-9aa1-bd43c3dd529a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82701b4b-c1ae-4a40-91d6-53f5cef2ce8d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfff08ad-2a52-4d1e-82c6-e6b020b21d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ee3029a-057f-4012-ab37-ab58b9ed07a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eba755f-cac2-4581-b5d7-43f430a385af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e5b7b8-d8f3-4f7e-a638-058c8fa20a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b15d93d4-0688-4356-9880-0603a7c30d84",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f1bd61-2a45-471c-8918-5806a026a989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f26d3e2-4a3c-4ebf-ba0b-336fe3c23398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c7c586-82e2-4d45-a3d0-318ae49e8427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8a343d-528b-4f80-9be5-e4232aabea33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918882c6-de2b-49ab-a530-39ef2342e2a9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d08f49-2351-482d-8266-ae869ed207eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c003a898-613a-4584-8496-3f4df5554600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "478a331a-96b8-45c8-a9d9-d9438335d2ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4eca58d-29d1-478a-be58-31e4935007a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce4ade80-1930-4f5d-a0e4-f203ef5d0fc0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467bd8e1-ee70-4a5b-a499-ef30b0248e9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f7fcb64-d049-4402-a647-3eaea1ebccda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2096e083-769b-4ba2-bcd7-949772e6c596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adbc7a4a-4346-4641-835a-209c54ac5e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f2f7f6-d1d6-4ffd-853b-76da3b172e5f",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30470b2b-6a9f-45e5-9d5e-b8ee30f1de2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed65ce4-0fa8-4511-8e7a-7c3faf3c7901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17e5540-9c3c-4c28-ad4b-9172229f1e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcf4b01-4586-4e99-910b-a23b3f2f5398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cd8e19-7d07-495e-8369-d365f4500839",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e00d7b-01ab-41cd-941f-5cdf6cda1ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f895da86-260c-4b05-8ced-4eb334b2075a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d67a4b-c13c-40b3-8d82-ba8e4e04a61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3e4df8-daac-4fb7-bb1d-b27794173643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a099ce08-daa7-48f7-8414-3350674f243e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0cef20-06be-4c91-92bc-9be9e8b07b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd8120f-ce65-45ea-a709-60c2ffd2a494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "513b0be8-1c59-4783-9871-d1c30eea7a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952dceaa-880d-46e6-9e69-8958f28e8744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271a4b97-49ec-4c4e-9ea3-328c7c21b013",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b497e286-993c-496f-a254-1642146191f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2f9aee-0e8a-4a19-b8ba-649f0d286ae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f7dc32-58af-4013-a141-193728317f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7136fd-cf6f-42a5-bc80-386ddf717928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776e2a11-e94f-4200-ad3a-bd6f3b8e006c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d61e111-055f-43cd-9018-c38c37bc78ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c715c0ce-28b8-4e23-9a82-f6e54e763e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fbcdff9-3ff4-45d6-b5ad-c3914f97aeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88090e1c-f9a5-4e49-95ef-4cf560a3bca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15c3b6b-c1ed-4082-8985-5db32814385a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99dadae0-333a-48c9-85c1-7e7470f62e02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cbbafc5-c077-4131-98f1-659bfed88b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "554da09f-ec4e-43b9-87ec-0f5117b6afc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8e21a32-8add-46eb-b9d2-799d6200b723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab8908e-9286-416d-ae72-a19f2a2e8217",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4ec380-9df3-4c20-b4fb-08a27a08cadd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd51f1c3-26c1-40c2-8b70-1627b6265aaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232662a9-72a6-4bf5-bc39-8f70db3aa57e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710db9e1-5d91-4569-95d0-e0d4e462ba99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561dc045-660f-4294-b094-b9e6bc2490ff",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c68b6a-9e89-44f9-840c-ba7c46f07ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83badff6-7b58-4de8-8f36-305870872913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe94223-8367-40a5-82e2-e3f9d744ad93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb765072-468c-4b27-8994-a85aca8825ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6216aa3f-2cee-4ba3-b868-93761c128555",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c73b6eca-301e-48b1-90ea-57b834652e39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140f398b-c035-4e6f-984f-c2711b86b68c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf777e93-9835-4c90-b27e-539fd221c559",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "842a4ee6-3436-40db-bcd7-cc04d3868ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fb9d15-268c-478f-a130-ace333ab9195",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b80928d-e045-4d60-80b9-ab9e66293efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5de07849-0722-4f07-bb36-314d8408af21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b97dc9-39af-4894-a74a-2b18174ed36b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4051310-9f03-407d-8b6e-82eb38c5411b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c16a74-5ce1-473d-bed0-fc8a0b2bf0e8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06e5f1b-890a-4ccd-9469-9be4ef17dca9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10ecba0c-d7a7-4a1b-abc2-b83d487038b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c6b5bca-69ce-4b07-b7f6-c81a572b0e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038c6ef6-c6e9-4902-b781-5694fffbb16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217176c6-5174-4d2e-b5eb-69f153a63cdb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84081dc2-93ec-4954-8b34-971f265d76d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26a80696-22da-4270-abc6-7cca5b9f3107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9aa817-e02a-4419-9e22-829e09e848b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3f7313-ffdd-45fe-a205-a400ecc03fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb40de9-f2ef-4e8c-b4b5-a22e61008928",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41861ed-77fb-4d1b-b923-8cdffddf8988",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6d26fe0-e714-440c-855d-abaa07454268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557cefb6-8b24-4074-bebb-7b8ac4c77777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7c008cf-8256-4f17-930b-e2141a2337d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18fb9320-2d9b-44b9-a0e1-b1a00d7a5adb",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e08f081c-64ed-47b3-a0a2-57b3f0a80681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecd05f3b-0c82-4fba-b963-7509429a98d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4c2f11-560a-43df-851c-18e25f547687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0de31da-cff6-4192-a644-c49b6cccaf83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b91d76c-ba76-42ba-b09b-f71b6d6c8291",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6425f2-779d-4827-b730-f66ebb5750d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9817c38e-0015-4c0f-a919-ede15a9a5e08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bb236b-0552-4800-b056-f564699a7e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb60fd05-89c2-4c14-9a93-4308cd807354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad2c4301-cc9b-48b4-9da5-a5a5f01377fd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e681d527-ff60-4b1c-be96-43c70e2b81c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e6658b1-70de-4122-9f14-f2ef75b09f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3bd9b7-8f5c-4a02-a681-108c47a3ceb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e06d393-ee78-4c05-8100-a1324ebd0dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21d48b2f-ecea-419b-bdd3-971314723e49",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9f05ca-fbe9-4b02-8d28-90f49533c01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a59a0ae-c46f-4876-9d4d-e2fab6883da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9447374-89c8-437d-81e0-2c982831d75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4294b03-9174-47bb-99e3-59b337f37398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7073c438-2b49-426a-8907-ad6b8ba31507",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a11117-efd9-46a6-a9ef-a3a6a610fffe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bbeeea0-5c60-4ad6-a717-bcb40443fd5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15204450-e83f-4f53-a202-5f9d728ad478",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b086d32-7ff3-4ad2-a17e-5763bb01dcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dd4e52-d817-4df8-b670-3ed08daea55f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ab751b-8302-4066-87dd-35cf81fc4d7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cdb30c9-1f3f-4b2d-99ff-e72a65bc7856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "759444d3-a2e1-4ff3-93d5-2283d49624b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326b2b14-8031-4c5f-87d0-5bd06684a71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5b99bf-a34c-446d-ba4d-b0e8eceb2d29",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c2e6cd-a767-4706-bd31-b0ee8dd62461",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27acecf3-8ddf-4728-a0ff-19ab32eb6a32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467b86d1-1813-412e-9c08-e6eff0a816ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c604fab3-83b0-4d4c-b14d-0da9e0f13273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b93183-d73f-45c5-a61e-9a15c034869d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1ea608-1e32-4378-83b5-c95474c266eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3120174-fc21-45f6-a801-b8aaad355cf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6db78e65-b913-4c34-bbd9-8ae6e21fd263",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "704ed251-5b02-4500-8ba4-6051e7ab5509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9079857a-fb31-43f6-bbdd-99d1586348bf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7bc1180-a000-4e79-8324-e7295883662b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc0c917-5f38-4360-821b-ccf4a09ce9a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "664b9cad-9122-40b0-854d-e23354ba41ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c32faf-ad2d-4e37-9209-bc69e635ef38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ddffd9-224f-4d36-a449-70661cca98c9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "169f025f-cc0d-43b1-91d8-2e5d8252a35a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee77b02b-0c97-4801-ae7b-dc040f5bf8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16af6d2-968d-4776-b664-11090039c2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b38ce46-aa8e-4a23-a607-7b19c0d258a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18dcbcd-3628-4cda-bda4-8be8ccb97121",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e78ab43-17ec-45c6-85d9-4885cb0b398d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9bd189a-d593-4db0-b7e2-f30442bfbda3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "365077ec-a20a-4ddb-908e-8351b7f3cbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4331a7b6-6b39-4455-aa9c-87942cbc8696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ee275e-3b3e-4c3b-83a8-f46fe5ddb12e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9e2bca-fc68-40d8-bb7b-268908f43fe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba02b2ee-f396-41e2-9eac-b540f6aa19f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa9d72f-61ec-41e1-84df-f33e7cad485a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590283e6-e1da-4bf1-974f-22af6d2d0785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1777d5-869f-4a96-bb2e-7bc4f80c5889",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917f8b0d-4c62-47bc-94dd-2753645908ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f7575e7-0517-4b9e-906b-5724b9b81900"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b9a6b2-374c-450e-b166-b66230278d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0772a04-b7e6-4d2d-ae9f-43a5de4c2e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3f5337-ffaf-4335-a0db-a3f76526fe6d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ba96ab-fc03-4a8d-a81a-d2e6e39652ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a20706d9-d31b-40d9-b602-90ec1fed806a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419e01fe-72dc-44ec-b722-855506c35080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c930038-e63d-46df-abc1-7f57b144ff02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d46eaad-68ed-4c49-8a24-01f5ba03df1b",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a149515-6e02-40a6-a8b0-23387c58421c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61bbfa4c-f94f-4bba-ad35-85d8560a9957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e940551a-9c37-424c-adc6-c7b1611718f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a183ec7-26b9-4d87-8735-72513dde2d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890255b1-f1b9-48c7-96c4-06bb6c10555a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e3b633-3318-4930-814f-1fdd3f13c6eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a385474-e97f-41ca-9d53-a15b840ba85f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b72b8fb-8a7c-4441-b27d-3c5ccbfe0dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6473551b-216a-424f-ab2a-85bb3e0ec516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0b919b-5a2f-4460-aa10-2a2b594afbe5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4962f54-896b-4f3d-8b9e-466945b62ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2bb1e46-5ceb-4523-be78-b19694320571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3765d997-9070-4a9a-a1a5-f268b303372f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3633b06b-91a9-4673-b4bf-cfbf9e2ae081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efc6487-3e79-44ac-84ac-ccc7cee22913",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f329578-fe61-490a-a491-74c8f285929c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8447612d-b36a-4506-ace6-2c8ee0dbcd52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d565b33-85a5-49dc-b9fe-beebc7b84409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bda7a8b-2f91-4ccd-8ed4-df886d5c36cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba66ec4-c633-4f0e-8c4d-2e22d5a9b54f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae6d1da-131a-4439-b1df-941caf7470e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f3dad11-01f1-4733-9d91-6469f2afdda6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b692b6-83bc-411d-a59e-dd4356c7e577",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d6b293-2cc9-4b05-84e9-fc272a5a7926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c43ee3-91f0-49d9-9758-15ac1cdb6ad1",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae59429-f2af-4d1c-aaf0-cf5818138199",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4eefafb-1fc3-4fbd-adb8-5f3ee2eb2d30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55502386-376d-44e1-a728-c8694b0b2c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdff9d0-e77f-4c0e-bb7b-fa49147c8137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc2fee9-104b-499d-95eb-8b19f12a495c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d41d6cf-7fb8-4831-b103-c5f3a4113286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3186fa95-6ad9-4bcd-8d23-f97a09614301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "216162ad-859b-4f41-9e44-bb4a0bc9e7dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96cc2a5-f13d-4ffe-9148-5484d5b2538b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b8f035-2fe2-4efd-9434-5c58ab52435f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "311ee78a-2e15-4e4d-be2c-d12c2faafe78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "538cd1d1-1d72-4d6c-8709-6f384a41eb26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e20e41-d921-4bed-baf3-749615e488a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f9b5f32-7dc2-41b2-8490-3093eaa2eb2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819f7507-fb7e-44e7-943b-096af433c381",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148b53ba-17e8-4b6e-ad97-f8e11101c657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1120f6b-ea53-45fc-99b9-f7e81f7334e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b250f17-cbd2-4d4c-8e4f-26f865bcdfa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6600b61-ea87-4cb6-965e-d52d6e666dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080ddf19-3d68-4e55-b820-83a7b9728c3e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247082a8-c071-4a14-afe4-f304e3687005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef4a7092-3ed3-4ade-9789-b2b4abf5e841"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5054f2-4679-448c-b33f-a752fd053abb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daac037f-fc3b-42ed-a295-1ed206f847ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60273607-a8ce-46b5-a700-4ed538edc97a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae850f3-e80b-433d-ba23-55eb94adee3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e338662-8c40-4840-bb63-325c3290583e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87dd1404-d4e8-4b2e-8d91-584becbf686b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef5467e-c458-4ef6-b2a1-0cbd6348a944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd05945b-0c79-495e-86e6-1b2670935540",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98241bd0-4123-4d3e-ba21-ce6f9506cf94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce232017-e097-45db-a0fc-0d528787a023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef9d7b1-b71c-4737-87c6-6b2fd8fdfe6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf1c6ae-9019-41b4-8922-59d9431853a4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c70f00c-d765-47ec-8227-2ff522903964",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad5e9395-fa14-4f9c-9155-aeabbab6da64"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab9f112d-a815-4515-b7c9-b8df1e4fc436",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4c455800-0d7a-4144-81ee-7298e0d452e9"
                    }
                  }
                ]
              },
              {
                "id": "2a6eb2ae-d898-4951-a795-241a52071b0a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b439e918-5d90-4785-b4f4-dd3afbcbe58e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196f7936-1b3b-41c4-aeb2-3b25b2d232a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d9d41b9c-7042-4e52-85f0-d27743cee26c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3db47fe-3a22-479a-8619-fdcbc046bad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "514faab7-16ff-467b-a467-3dd0a739df61"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a85ffe95-0e4e-40cb-9325-c1f48c408112",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7874019-3c83-4bf1-bf9d-a3cba0de3ae6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6530194-9d18-435c-ad22-1785aad748d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bd5f36e-759f-431e-971e-218bc6e4940d"
                    }
                  }
                ]
              },
              {
                "id": "900db545-c02a-4e69-91c7-e9597ee39e85",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "88bc66b7-b5d5-491b-afd3-a3c51f12470d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e78edc-46fa-43ed-982c-d6e569f2f1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "6593c727-11a9-45b6-a503-a82e73eccc81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "131af1ab-60e8-4181-a999-569f7675dbb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "289ae2b9-b670-4e6d-905f-cd21b1325253"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f7550f49-6789-41dd-b251-f96416f8aad1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d1668d24-519b-4bb0-b727-a3eb2f8e0360",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "072fa8f0-9f3f-4ee4-997f-311da2afe64f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5e6e7542-2511-4ea6-a7dc-9ef549ea81c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bcccb63-9b95-4378-bc7b-ce73d8ca91f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "45326bc1-ce71-4a0b-858f-1afbef685be2"
                    }
                  }
                ]
              },
              {
                "id": "65e56f03-896c-4e98-b3f6-706bc66ec811",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4efc3b0-8e18-4f2b-be2c-634d00d38e75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "38173267-f55d-433d-8e5f-3727d1bd8202"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc517f74-5b67-4e14-bd28-6660b7d50275",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8df6d56d-99d7-4b7a-ad24-345c80279537"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6370ae8c-fcfc-4179-b6c1-1ccbc3b2b7a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8cf4ffec-744b-418a-be53-4927d3abf612"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3edbd84-5262-4d5d-89e0-63a176fbd9b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75371ecc-1db9-44e1-8d27-3880e931f318"
            }
          }
        ]
      },
      {
        "id": "0aedb27a-0761-4397-9093-6fa9970587df",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "938b0a9a-bdfd-4a62-be9b-d194d19fcaf0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f22c6be-5f21-40f0-9f84-f165ad65f2f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6bb9a893-d918-4f2e-9b58-f8dcfb0c0535",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4abec6-3f51-4881-94e7-5fe57ddd3b36",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1c991647-dacf-4867-9ac1-35873cf8b4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7833fdf9-2a0b-469a-95fb-06d6894f55e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5bb9e0da-5c15-4c7c-bd82-4343b04c2242"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "964acfbe-8752-41dd-936e-e9a628b630ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a5ace47-0a61-4858-b6d2-770ad6556495"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4db14081-c87f-454e-882d-f277f13fdbae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f66265a-8b04-4949-8966-55477dc4bb93"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b57adcbe-b973-48e0-8721-95099ae5e232",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3482dcc7-0280-4741-a23e-814ada46d3bf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcbee188-c301-4c43-9508-ffc5620dbcda",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "908fef46-bf6f-4654-a6ae-c4f5a507ed67"
            }
          }
        ]
      },
      {
        "id": "31df6cff-fb33-44ce-a18f-afed37d5a6fb",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "827c0130-a09c-412b-89a8-1d5670a1c396",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a8dd829c-672e-44df-8f70-479fe32e8464",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f73a2e70-6f5b-4a6d-a141-e0fcd5db040d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "935a6533-ad16-42e2-b69a-a10c7583eaa3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bcc3b77-97d8-47c9-a1b8-5ef8e442768a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1c3b3e-dd86-4aa5-ba9a-e073d011f1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e3d738b-5b45-4164-afbb-f1f8b064aff4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "515bba9d-6a40-4138-b933-6a16601260c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6903bdf1-19b4-4b31-aa33-1f42d5f2d292"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9b02be8-e077-4048-b92f-5c32b2b39f1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3422f1e-7bd1-48a5-941d-3f92e85c9cb7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30799872-9139-431d-bfec-cb5cba80d313",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "17c8a198-5000-48b2-960d-d79e084ed6cd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c82580d9-6b2a-4ace-b20e-35b55b334f08",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24cbb65f-76b7-4f35-bbfe-717645c2aa26"
            }
          }
        ]
      },
      {
        "id": "4256ece8-5993-4d9e-b645-9e0f669f5831",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1ad3478f-9a45-41de-85d2-f0f7789f35fd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0ce6e17b-402c-44d2-aeb4-8cdf52cab66d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "096fdaf1-9117-4e65-b3dd-d506f2636955",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257d10aa-39b4-4484-beaa-ef08b72dc6bb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "596270c2-36e3-4c7e-bf1b-b67904865303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b341bd-bb2d-4b2a-8bc2-1b7b6e811c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c955a101-9c31-49c7-bc5d-374b41113d43"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5fe7997-5aaa-4abf-919f-ea16c139a5ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "316b89af-782f-4fdd-83c8-60d7da8bc943"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f152ae92-498e-4e52-b329-d632d4459257",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cd8250a-af8d-494f-a985-2c96f40780b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "996b3e11-dc27-4683-aaa9-eeb104cc2e4d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a5c345a6-63c5-435f-9706-a54e6a7a84fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "41c032ca-b5f1-45b5-a39c-ec5dd338adb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ad79745-cdb9-4977-b843-de54c2215e37"
            }
          }
        ]
      },
      {
        "id": "07da3cc6-9f9b-4621-8339-59d01434f04c",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "592b4674-15e4-4d40-9b4a-203632d634ce",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ec2626b-bef7-41ee-ad31-6918fe4e3061",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f9d9ea47-f5d6-45be-972b-9bee43d5a44b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f36bad86-6f03-43f2-8864-c30c70d466ab",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fc6015b-2818-4581-834d-a9bfa0e505e7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.87301587301587,
      "responseMin": 9,
      "responseMax": 671,
      "responseSd": 81.28418539707708,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1712968180151,
      "completed": 1712968204700
    },
    "executions": [
      {
        "id": "7cfd0edf-db82-4f42-85b7-15fba2dead36",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f619205c-5552-4760-aa13-1c71f94739ac",
          "httpRequestId": "44bdcbdc-d896-44cb-9580-efe51b21d754"
        },
        "item": {
          "id": "7cfd0edf-db82-4f42-85b7-15fba2dead36",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4a0eb06c-d477-424d-992b-15f72478f268",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "e8656751-72ae-483c-97d0-91636405abb3",
        "cursor": {
          "ref": "ad320c4d-b4e3-483d-8b4b-f7af4b52e29a",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2382d180-6de2-4759-97a0-ad0b5a7eb2bf"
        },
        "item": {
          "id": "e8656751-72ae-483c-97d0-91636405abb3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "104d337e-a064-4137-b4b7-62b713b79f88",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "dc779b06-d0f8-4018-b610-d85d4a337349",
        "cursor": {
          "ref": "bb5df162-828f-40f7-b364-368c814257be",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "534b61c0-cfca-4e2e-afd6-a97fe3753462"
        },
        "item": {
          "id": "dc779b06-d0f8-4018-b610-d85d4a337349",
          "name": "did_json"
        },
        "response": {
          "id": "70991e58-b713-41b4-9b54-36bf5fdf0c2e",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d8ade1-bb5e-465f-8afe-71840231e0f9",
        "cursor": {
          "ref": "7562ec2a-3c90-42b1-b2ea-99694757e097",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7fe8c432-b036-4a2a-9a4c-bbefd66f0087"
        },
        "item": {
          "id": "93d8ade1-bb5e-465f-8afe-71840231e0f9",
          "name": "did:invalid"
        },
        "response": {
          "id": "1367594c-743c-4d22-9a6b-ed08152cc501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d8ade1-bb5e-465f-8afe-71840231e0f9",
        "cursor": {
          "ref": "7562ec2a-3c90-42b1-b2ea-99694757e097",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7fe8c432-b036-4a2a-9a4c-bbefd66f0087"
        },
        "item": {
          "id": "93d8ade1-bb5e-465f-8afe-71840231e0f9",
          "name": "did:invalid"
        },
        "response": {
          "id": "1367594c-743c-4d22-9a6b-ed08152cc501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1877017-5e78-458f-b4bf-2ff83550bd45",
        "cursor": {
          "ref": "7dc29180-912a-4545-b3fd-1e58ed860dcf",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "171624aa-1aa1-448a-b2ea-843871792651"
        },
        "item": {
          "id": "b1877017-5e78-458f-b4bf-2ff83550bd45",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c2ec683c-09ca-4a2f-a002-c886f0ba730c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 198,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a136470b-ad53-472b-a767-ea905b055288",
        "cursor": {
          "ref": "c9bf2af6-8191-4a3b-afe8-3f0ccc927af6",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e12a23e4-f062-44e2-bc63-194de11ee427"
        },
        "item": {
          "id": "a136470b-ad53-472b-a767-ea905b055288",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8227b95b-4992-4946-9873-21cdca5b41e7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a775e9fb-3706-4938-a511-cbbb17162538",
        "cursor": {
          "ref": "05994fd2-b2ed-4941-9a8c-60d1d29926d8",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8eeccebb-2168-496b-a2cb-4d205f1a6914"
        },
        "item": {
          "id": "a775e9fb-3706-4938-a511-cbbb17162538",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "c002436a-76d8-4c7e-b9b6-601abefc9e4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b70bf95-3616-4d6e-814a-164386216aea",
        "cursor": {
          "ref": "8475c52a-61e2-49f0-a6d3-638e9ea1331e",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "24dd4349-1d5e-431a-ac16-04a70b64b170"
        },
        "item": {
          "id": "4b70bf95-3616-4d6e-814a-164386216aea",
          "name": "identifiers"
        },
        "response": {
          "id": "21c8c842-dae1-4411-a448-6305e8584bf1",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496fd8d7-2474-4e20-be41-9ac97dbed67f",
        "cursor": {
          "ref": "b0359e47-451a-4080-a68b-1c7b1d5c43db",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b057f451-5641-4d95-b37f-38ec6fd1939a"
        },
        "item": {
          "id": "496fd8d7-2474-4e20-be41-9ac97dbed67f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a0a20f44-93e5-42f2-ba45-d2eb86c559ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d02cdc92-8638-46b9-9f00-eb2ec0ef245f",
        "cursor": {
          "ref": "c33c6ed4-e2cb-4c28-9e60-218cb4d0210f",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c3d8c229-19a1-43b4-a515-9f43716f10e3"
        },
        "item": {
          "id": "d02cdc92-8638-46b9-9f00-eb2ec0ef245f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a68660a1-c781-4206-a495-5d35d9bdb51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a078a39c-9541-45ab-af72-0fc56ed00a63",
        "cursor": {
          "ref": "6b6cd092-cf47-4794-8cfd-6add3e81ff69",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1de1c82d-6832-426c-ae50-8348586d6b9a"
        },
        "item": {
          "id": "a078a39c-9541-45ab-af72-0fc56ed00a63",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a7849d3b-3c2c-4fc8-b0cc-d860f9473d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad00e63-7726-48de-8233-2c3f99fe1331",
        "cursor": {
          "ref": "5b68a9d6-1ea0-4e9d-8aa8-a4a374aeef26",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8bbaaa1e-10ab-49a9-99d5-ccf14cb9ca21"
        },
        "item": {
          "id": "3ad00e63-7726-48de-8233-2c3f99fe1331",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5dabab78-999b-433f-a9b4-f2205b339338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3ef927-a7d9-4ee7-85e4-4b9346881bb3",
        "cursor": {
          "ref": "8935951f-7ac5-4307-af45-83fe7e904fc3",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "efc9ecd2-4928-4ee5-ac5d-3b332cfba2c6"
        },
        "item": {
          "id": "ee3ef927-a7d9-4ee7-85e4-4b9346881bb3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b674a854-ce0b-4d9a-a0dc-9cf995e3ac32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2918d713-cd50-496a-8094-760895d1c3c7",
        "cursor": {
          "ref": "13bc7eb8-1207-4036-bdc9-ed6d21724a7f",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6b9e6d36-677d-4b25-8def-2a11dcc3bc49"
        },
        "item": {
          "id": "2918d713-cd50-496a-8094-760895d1c3c7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ae9d0289-bc57-4f5a-83b8-9d915f0719b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733788e7-bd9d-42ca-8a90-7d70f7998b1f",
        "cursor": {
          "ref": "e6cffd47-09bb-4d76-994b-f1f0ce039434",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "54b53fd4-2151-4935-a408-05a558dcd427"
        },
        "item": {
          "id": "733788e7-bd9d-42ca-8a90-7d70f7998b1f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "05bcd2e3-4161-4d04-85a6-eb5c425bd4f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40eb23cf-d79f-45d0-aa29-21d46381366d",
        "cursor": {
          "ref": "22c1b330-264c-4697-ae1f-6cee9dcafead",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3778cd4c-7584-4d4d-bbdb-086dc86ae1b8"
        },
        "item": {
          "id": "40eb23cf-d79f-45d0-aa29-21d46381366d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "50e197ef-f49a-4215-a90d-c921e05429c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b7d1e8a-adc2-4cb8-a333-2399b129f063",
        "cursor": {
          "ref": "303dab3c-3a8f-4a5d-aea5-99c08755f5a9",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "dc0a76c5-8053-48fb-8f8f-4187af8daca9"
        },
        "item": {
          "id": "4b7d1e8a-adc2-4cb8-a333-2399b129f063",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "27cc940d-c031-4497-98ce-5702a3ea0978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e55f0a-9e39-494f-adb4-caa2b505b406",
        "cursor": {
          "ref": "b480ea91-aa73-4f29-a48a-3a748d6748f8",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8f66f895-a04b-42cc-afb7-bb974e76cbaf"
        },
        "item": {
          "id": "79e55f0a-9e39-494f-adb4-caa2b505b406",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "5800d7b7-605a-444a-9086-d9e171b51073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "499378bd-7a70-4758-9ce6-14dc3df6aa02",
        "cursor": {
          "ref": "c58c3184-f8c3-43bf-8234-910b098459bb",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "443f81c2-ad03-43a7-8677-94e8b23ea738"
        },
        "item": {
          "id": "499378bd-7a70-4758-9ce6-14dc3df6aa02",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cafb6247-3913-4faa-b6fd-891d911507b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "416cab23-c0a7-4046-ad66-9e75884ad783",
        "cursor": {
          "ref": "b1f2004d-8f15-4082-9f8f-d3519ac7ea85",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cc97e693-67f5-4107-8521-1833a0f58ad2"
        },
        "item": {
          "id": "416cab23-c0a7-4046-ad66-9e75884ad783",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d829195c-45ea-4260-ad46-ff4d8b0177cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73777e06-9ede-4d86-b2ff-678f61850b88",
        "cursor": {
          "ref": "050d3e5d-d5c1-4963-bf12-f07691e431c0",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7748fedc-d79c-4150-9030-a4a6cab1732b"
        },
        "item": {
          "id": "73777e06-9ede-4d86-b2ff-678f61850b88",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7d135e10-f95e-4e51-9193-b856b66cdf42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dacb7fb-3837-4546-bbb0-ef24a3551193",
        "cursor": {
          "ref": "9ca1a462-82c1-46f6-99c2-b2d136a14828",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "be0d3b3b-5135-4a65-ae4c-166b01096dfa"
        },
        "item": {
          "id": "3dacb7fb-3837-4546-bbb0-ef24a3551193",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "0fa99792-6093-4f17-9479-395ab03f84e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44996c34-8945-43c2-bb05-9ea01fa2da54",
        "cursor": {
          "ref": "0243aa86-f117-4c27-90a0-982362005f61",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0ee3024f-bbc0-445c-a40d-5a6cd01514f0"
        },
        "item": {
          "id": "44996c34-8945-43c2-bb05-9ea01fa2da54",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a4be1a88-f474-4495-bdfb-fd412b6345dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11dcf3f3-879e-41d3-b85d-90d9b611e4b3",
        "cursor": {
          "ref": "b4a79d95-35d3-4854-921d-93fd3ce01b44",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fe29acc3-6167-4ef1-8313-5db23a841ed1"
        },
        "item": {
          "id": "11dcf3f3-879e-41d3-b85d-90d9b611e4b3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b31367e9-b648-4048-9557-f808325dc65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e238b4ff-ed2e-4406-a2a1-5dfba9830ac9",
        "cursor": {
          "ref": "c7565c00-79b3-4a85-91db-5c357fc59285",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "802c3193-adb8-4404-bc52-294526904c86"
        },
        "item": {
          "id": "e238b4ff-ed2e-4406-a2a1-5dfba9830ac9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f48591eb-e7f8-4aed-a0fa-977086ae7ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928e94b6-1acd-407c-8e89-816d0f8df8be",
        "cursor": {
          "ref": "284bbb12-efc9-4eeb-a09f-efa9447d87bb",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f8e04f01-a80a-4c04-b27e-8c57c1dd7557"
        },
        "item": {
          "id": "928e94b6-1acd-407c-8e89-816d0f8df8be",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9ddc625b-01a9-4728-acdf-202c482f2770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e00c4e7-3a01-4533-ad5c-0b319e28ac13",
        "cursor": {
          "ref": "332b7c99-9504-4a06-9e0f-88d4a20a1c09",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7d7bb0fe-4923-4939-9ee7-1a430cabeab5"
        },
        "item": {
          "id": "4e00c4e7-3a01-4533-ad5c-0b319e28ac13",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9a2bb864-d489-4052-a6d1-312814f37c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22dea213-ea85-49e4-8f37-cb61ccbd8835",
        "cursor": {
          "ref": "fb70e6d7-2ca8-49cd-913f-98beee600ad7",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ee5a4995-f25d-4cad-b376-ebb6da5bade4"
        },
        "item": {
          "id": "22dea213-ea85-49e4-8f37-cb61ccbd8835",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d33b0f65-0e18-4149-b572-20f03d9b3090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1e958a-4b1d-4c39-9549-a40c1ec87666",
        "cursor": {
          "ref": "93556bf1-64b6-478c-bbde-70955150d1b8",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "7c495380-6898-46eb-aa74-5b92e9f948d8"
        },
        "item": {
          "id": "7f1e958a-4b1d-4c39-9549-a40c1ec87666",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "567cfc04-d74d-4020-b356-ae66a9d338f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee981dfc-3f91-497b-904f-40086aa774b6",
        "cursor": {
          "ref": "5481bda5-416c-48be-aca1-7acad3109932",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "415680b6-3f32-47fb-9367-6894d6679d38"
        },
        "item": {
          "id": "ee981dfc-3f91-497b-904f-40086aa774b6",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e47fdf17-196e-47aa-ab66-8c13c06cb817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52747e54-70d9-492c-b822-c3a0f60732ee",
        "cursor": {
          "ref": "10c549b5-f8cb-46da-883f-8ca4c75a2a75",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3538ffd2-9e72-48c2-89b0-d5459399fd75"
        },
        "item": {
          "id": "52747e54-70d9-492c-b822-c3a0f60732ee",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "31791e92-0958-47da-ada3-bfbcb36047a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "860c5e42-2461-46fb-907a-a4d856c7bcd8",
        "cursor": {
          "ref": "1f7eef29-96f0-4b4c-b9bf-30cd480c76d5",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "63e611d3-a9d7-4a60-9d9b-f99c8d82b32b"
        },
        "item": {
          "id": "860c5e42-2461-46fb-907a-a4d856c7bcd8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8d5c740b-fbb4-4968-b8c9-fbd02f6cd41a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f69c40-f2e4-4c68-aac9-1e35a62b446b",
        "cursor": {
          "ref": "a5d2bda8-864d-4c52-a803-c292a08566be",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a125f7a2-afff-4476-97ef-d3c99b5033c2"
        },
        "item": {
          "id": "12f69c40-f2e4-4c68-aac9-1e35a62b446b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "27f0a0e7-67ab-41e7-98f0-c109c9c1386b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed56b7ca-2690-4365-8beb-89df5d3309a6",
        "cursor": {
          "ref": "ba611f02-3a89-42c1-85f5-d5211f5acc4f",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "91eb3000-3c96-40d4-a6cb-e328a95cd385"
        },
        "item": {
          "id": "ed56b7ca-2690-4365-8beb-89df5d3309a6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ab7f0f7d-4c52-4b7c-8635-3bda1714d99f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23557abb-a32d-4aab-92e4-a51dd6f45cf3",
        "cursor": {
          "ref": "a6de77a2-98b9-4dff-9b36-29ec66ccbdca",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e03414be-b5b7-4a0f-9772-231f968095da"
        },
        "item": {
          "id": "23557abb-a32d-4aab-92e4-a51dd6f45cf3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "c79dd5fa-66c3-48e5-a4b6-2bdbca783010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afb303e-ff90-425f-a28d-a7bbfa65c16a",
        "cursor": {
          "ref": "ff0b6de2-33c7-4eba-8ddb-c4ee6a9f17cc",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4f900366-ef7f-41dd-8165-7280139736d3"
        },
        "item": {
          "id": "9afb303e-ff90-425f-a28d-a7bbfa65c16a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "49851f7d-bf20-49f9-ab6c-b784edac0be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f0c500-f4ad-4dc0-958b-c6ef850ff8cc",
        "cursor": {
          "ref": "57222bab-7ba8-4df3-a248-f3c8c2180c71",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5e172b2d-4c77-4654-92bb-a31c2f3f9d4d"
        },
        "item": {
          "id": "88f0c500-f4ad-4dc0-958b-c6ef850ff8cc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2f27d603-fa53-440d-876b-66296e5904a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c386a2-74d3-4715-a9ee-0dfc8d0d09f5",
        "cursor": {
          "ref": "6fc3a94a-d663-41e6-8c77-fbb9db633e71",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "57a88f83-e9e9-4441-b747-e608a75852fa"
        },
        "item": {
          "id": "50c386a2-74d3-4715-a9ee-0dfc8d0d09f5",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "56f13007-55ab-45e3-919b-784d53f2c4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b0ee3a-d442-498a-9b29-51c6664b4c63",
        "cursor": {
          "ref": "1e4bd5cb-db38-4c55-811a-aa8b3cb1815a",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3cb320d0-53b1-44ec-a051-5b0819da7f9e"
        },
        "item": {
          "id": "47b0ee3a-d442-498a-9b29-51c6664b4c63",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5e413526-e041-41fd-833a-ef20b8314a6d",
          "status": "Created",
          "code": 201,
          "responseTime": 671,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "61612432-5a7d-404b-82ff-705bd0cb04cc",
        "cursor": {
          "ref": "79f54b98-83d2-4a0c-9014-c147c9321dd1",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "745bd9b7-10ff-4497-8f22-020f4c673c9a"
        },
        "item": {
          "id": "61612432-5a7d-404b-82ff-705bd0cb04cc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "41bdc63c-30c8-48b2-8307-863bb3199773",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "87d3d3d9-89df-4f67-8ae6-b94226de8a9f",
        "cursor": {
          "ref": "08581bbc-25a0-44d2-9fdd-71557d7595d7",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9fa5e481-34c8-43b6-8542-8737b1e61acb"
        },
        "item": {
          "id": "87d3d3d9-89df-4f67-8ae6-b94226de8a9f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b6d8da82-fdb7-44f1-93ec-e362e7461cfa",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3a3e124a-dd41-434e-91b6-5c91635d4d98",
        "cursor": {
          "ref": "b4ee9a33-360f-4d96-9d7d-bcae68ffc330",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "087c7c70-6900-40ef-b337-c4471516efb7"
        },
        "item": {
          "id": "3a3e124a-dd41-434e-91b6-5c91635d4d98",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "08f59213-6c40-4f5f-82f6-bdc06d9ff928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a41deff-5fb7-4f81-9f04-e05a4d776128",
        "cursor": {
          "ref": "447d68c8-a8af-4954-9148-bfc8d0ba1042",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "fe77b36e-db8c-46eb-a678-c1502d5218dc"
        },
        "item": {
          "id": "4a41deff-5fb7-4f81-9f04-e05a4d776128",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0eadf562-3f68-4d15-aebc-97c5acdfda64",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9827e340-8ecb-4ff1-9847-a6429e65c7dd",
        "cursor": {
          "ref": "88115883-6a05-4386-9b2c-bcb467a335a2",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "68b7d4a9-25ce-4bda-9473-be21452e064c"
        },
        "item": {
          "id": "9827e340-8ecb-4ff1-9847-a6429e65c7dd",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c2155409-88be-4d1a-9819-188730ee83a5",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "aa8c5b77-0dc5-4474-b52f-6989f3a35614",
        "cursor": {
          "ref": "aa03dead-e23e-4629-9e37-d5f8dffbd769",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0e1fa684-8bff-40ac-9a6c-a5d58e237b15"
        },
        "item": {
          "id": "aa8c5b77-0dc5-4474-b52f-6989f3a35614",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "586ad954-9ae5-42e3-8aea-49bf25275be0",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ee93d6ab-f126-404d-89aa-04f09ae000c9",
        "cursor": {
          "ref": "c67cce51-e7cd-4188-a3b6-66423333b7d2",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "319425e4-1e5b-4649-b2e3-b326f29e5820"
        },
        "item": {
          "id": "ee93d6ab-f126-404d-89aa-04f09ae000c9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b36b5871-983a-472b-9dec-35c8f9f86599",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "50a5d1be-cfb4-46ad-b223-b3188f9918cc",
        "cursor": {
          "ref": "d0afe7d3-2271-4ec7-a6af-a2511dfa8266",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e6c8cf02-d59c-4f8c-9606-db8f9cdf7a87"
        },
        "item": {
          "id": "50a5d1be-cfb4-46ad-b223-b3188f9918cc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "13156736-0dd1-432a-bfdb-a389939a6f27",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3cadce38-4114-47ac-9fcc-3fb6a3cb7988",
        "cursor": {
          "ref": "4a2dfdfa-fd0d-4d94-b55a-f10534cab327",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "baa18881-7055-4998-8800-661b6e89022e"
        },
        "item": {
          "id": "3cadce38-4114-47ac-9fcc-3fb6a3cb7988",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8e1ed871-621b-487a-8333-3c2e2f202f86",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "047b6976-d461-464c-938a-fd05d849fda2",
        "cursor": {
          "ref": "b07e7697-e973-4339-a85b-3347a937e7d2",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dacf9dbe-ad01-4807-8a72-9289a1b4fd36"
        },
        "item": {
          "id": "047b6976-d461-464c-938a-fd05d849fda2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a463f122-1e47-47d8-a6c0-aef2f48d2a4b",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "899ca291-e3f7-4313-ba46-15e97ef72d97",
        "cursor": {
          "ref": "4bb4d84f-fa99-4b06-9b01-ecb597e1db09",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2a51a38e-9156-4325-8481-7cfc06a110e4"
        },
        "item": {
          "id": "899ca291-e3f7-4313-ba46-15e97ef72d97",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bb956fe5-5989-4729-b139-5ad194368480",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "15f7d708-1543-4d78-abba-4bbe3c7bd067",
        "cursor": {
          "ref": "9d593a11-98de-4ab1-bfef-8b2e387ea57b",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0afdfcc5-3906-4602-a517-e90eec97f732"
        },
        "item": {
          "id": "15f7d708-1543-4d78-abba-4bbe3c7bd067",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "54da7e1c-0d47-48da-8ee5-862600b22eee",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e72cb01f-e586-41d0-b559-119d45b4766b",
        "cursor": {
          "ref": "9a26ecf4-4e2f-49b6-bf64-13b13a363c9e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e0120b47-b1e0-470c-b6df-5618abfbe258"
        },
        "item": {
          "id": "e72cb01f-e586-41d0-b559-119d45b4766b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "0af4cbae-e9f9-409b-aaae-8f7f9be42022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4520a9de-2f21-4b42-9638-d0eff8d3c2d1",
        "cursor": {
          "ref": "020deea2-ad7b-4ef9-a2f3-43f7a4ed601b",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6071089d-fbf9-49cb-abad-9be3192262fb"
        },
        "item": {
          "id": "4520a9de-2f21-4b42-9638-d0eff8d3c2d1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "dce0fdb5-0dc2-4078-bd51-b28d7d4c8e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b8cd66-47e6-4846-92a9-694500c397bb",
        "cursor": {
          "ref": "a951674a-3e58-4e93-bd17-aa38937d86fc",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d966bdb3-5bf3-4f56-b04b-65255da63d7c"
        },
        "item": {
          "id": "62b8cd66-47e6-4846-92a9-694500c397bb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2c58098a-94a0-42a8-93e7-361470280b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0770f81f-4153-48b9-a736-22143dd233e5",
        "cursor": {
          "ref": "5219b609-f066-473f-98e1-cca33171a808",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8b756d0c-c9ac-4ffd-92a4-cae5ff42f74e"
        },
        "item": {
          "id": "0770f81f-4153-48b9-a736-22143dd233e5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1b4f4163-6341-4fc1-ab01-51ccc625e91c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd4af53-d75a-4084-8150-b87b43f34ad8",
        "cursor": {
          "ref": "839ef6c4-47cc-4bd5-b3d7-a9404dcb0559",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "88657020-ad6f-4557-9e66-1d402225d148"
        },
        "item": {
          "id": "9bd4af53-d75a-4084-8150-b87b43f34ad8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e8659ad5-d088-43c2-8541-9b9f9064804b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c0de06-34e0-479c-b5fe-ddba32b1bccb",
        "cursor": {
          "ref": "c8bf99a7-b3f0-42a5-980f-50f5cfb149d3",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "82528438-afcb-4fa0-a60e-00d662c2b091"
        },
        "item": {
          "id": "27c0de06-34e0-479c-b5fe-ddba32b1bccb",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a401f0d0-c4e2-489a-8077-893c738f340f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da022c50-83a8-48ee-a0bd-6772bba09b4b",
        "cursor": {
          "ref": "a35fbfbf-47bf-4a01-806b-b300f81586d1",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e67bfc47-1572-41dd-9aca-b3cb49dc2a17"
        },
        "item": {
          "id": "da022c50-83a8-48ee-a0bd-6772bba09b4b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "850d14fa-0eb2-4914-a1de-a7f34671c8e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588aac6c-a78c-4a92-bd34-0ae50f326921",
        "cursor": {
          "ref": "43a4dbf8-7d62-4248-a845-79c4459bc27b",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6dcda567-98ef-4cbf-a208-81b360011531"
        },
        "item": {
          "id": "588aac6c-a78c-4a92-bd34-0ae50f326921",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "3350dab9-75af-41de-b7b1-b40b8afa45e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c600e0-7655-4754-96c8-202329506f32",
        "cursor": {
          "ref": "85fb98bb-8cb3-4e67-baa6-2bf054bb6634",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "342b9f9a-b1cf-4686-8fae-e2468df6e4aa"
        },
        "item": {
          "id": "09c600e0-7655-4754-96c8-202329506f32",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b5b9bcb3-7414-41a9-8417-5a7544e23806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be210458-20f7-4321-baa2-0e1dc55649b0",
        "cursor": {
          "ref": "640d56f0-b5be-4508-bc42-82846521c18a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "abdb5c58-198b-4c2b-91bf-7f5afd9f73dc"
        },
        "item": {
          "id": "be210458-20f7-4321-baa2-0e1dc55649b0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "983026d2-65b9-4c5d-8aa0-331cf13192f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ece5968-9f59-4e7b-b75f-ea2cf7a751f3",
        "cursor": {
          "ref": "0adbcb78-4eec-42de-9031-c56de0ae2f90",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "872975a3-682f-4d1b-b9a4-c2f13ce9860f"
        },
        "item": {
          "id": "2ece5968-9f59-4e7b-b75f-ea2cf7a751f3",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3ec1861f-d07d-4e51-ba89-12438dccb985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0035226-9604-4843-b92d-66041b5cca8b",
        "cursor": {
          "ref": "fa183f43-1690-40a9-99f4-a8805da1abe7",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "aa97e24b-424d-42b7-b219-b776f0060f69"
        },
        "item": {
          "id": "e0035226-9604-4843-b92d-66041b5cca8b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8897981d-6652-43c1-ab5d-fee8580bc504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92d9eea-a789-465b-b0de-6b08767f0dfa",
        "cursor": {
          "ref": "2eb9f5c3-07b7-489d-ac8f-40f3473b5fbc",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8416676b-0366-40cb-b494-78699fee3d1e"
        },
        "item": {
          "id": "d92d9eea-a789-465b-b0de-6b08767f0dfa",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f5d64cac-3052-456c-876b-5d88749bb244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26df9ea8-d616-4037-a2d6-5c8b2ac3ed56",
        "cursor": {
          "ref": "5f99ebb2-62b0-42fc-a9c2-605a74c59198",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "699aa3f3-6bc6-423e-b438-fb1b6f5748b4"
        },
        "item": {
          "id": "26df9ea8-d616-4037-a2d6-5c8b2ac3ed56",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "deee10ee-9bdf-4ad9-a40e-5128063beb82",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4c3b1b86-cbb3-4444-9516-3f48ec28db58",
        "cursor": {
          "ref": "90cf8b16-9604-4408-91e1-b3a81824065a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "06476c9b-a128-4965-95a8-1af8e49f9211"
        },
        "item": {
          "id": "4c3b1b86-cbb3-4444-9516-3f48ec28db58",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "63c52b75-5ffc-4c1a-9fc2-a5d4c65c7d27",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6328d18c-d0d7-475f-8424-6fd15a54a376",
        "cursor": {
          "ref": "ec11566c-0759-4a2f-b5bc-8fa390e9794b",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b07c2ea9-2ded-41f9-bc55-33ee3865c52a"
        },
        "item": {
          "id": "6328d18c-d0d7-475f-8424-6fd15a54a376",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "51977f42-474a-41b9-b397-f3edefc7c6c8",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "22ce2293-d978-4ce5-8d18-c15e82b8acbb",
        "cursor": {
          "ref": "3c726468-6f3b-4dd3-8ed7-16e69f252f31",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ba434150-23b3-4fdd-9faf-5f91763ae300"
        },
        "item": {
          "id": "22ce2293-d978-4ce5-8d18-c15e82b8acbb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b67b11c8-3c23-4dc5-b55d-b37ce9c93fac",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "33352f36-5674-4348-a290-b12d3c4345eb",
        "cursor": {
          "ref": "47aea2aa-a2c7-484c-af0f-9824d16d8b37",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ee888559-9f63-4bf7-8127-efc462d9b4c0"
        },
        "item": {
          "id": "33352f36-5674-4348-a290-b12d3c4345eb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dd75b2ac-d920-4444-bf5e-29ea3ca9411c",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5971a871-c496-4631-afe5-21549edf9230",
        "cursor": {
          "ref": "a848212d-7227-4310-9d4b-d5912e70f255",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dd2b765b-7447-4cf0-9d36-159a2f607bae"
        },
        "item": {
          "id": "5971a871-c496-4631-afe5-21549edf9230",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f344e43c-cbb4-4f0b-955f-944f327c387a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb02b82-5ef4-4ce5-abc9-6244f819c0f8",
        "cursor": {
          "ref": "e40e2f4f-f3e0-446c-9979-4c4df7b709ae",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "819d2741-50c6-4673-ba8e-089c33e2bc67"
        },
        "item": {
          "id": "9cb02b82-5ef4-4ce5-abc9-6244f819c0f8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6c5c7da8-683a-44ec-898a-f5ef03f84150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd31665f-666c-481b-9500-1898336edc40",
        "cursor": {
          "ref": "7327eacf-1a20-4ab1-9b87-2a3550a67a14",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9ede8b28-ff50-4933-a1ec-00d44b4ce317"
        },
        "item": {
          "id": "cd31665f-666c-481b-9500-1898336edc40",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "27613919-861a-4415-b065-eb5936796f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56d50cb-1ace-4f38-b9fc-f23a74132347",
        "cursor": {
          "ref": "2f900453-3b4e-4696-816a-08c7f116eb8c",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "04747a46-7d24-4cb1-80b7-f29b9f228165"
        },
        "item": {
          "id": "b56d50cb-1ace-4f38-b9fc-f23a74132347",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4af12bc3-71eb-4d19-a98d-f348685d5725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9ee0e9-ad14-42f4-bd5b-9cebcba48f84",
        "cursor": {
          "ref": "17819e80-41fe-45bc-937e-57881ff03d2e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "36eb5454-873e-457b-bb3c-c9a4bbaaf404"
        },
        "item": {
          "id": "dd9ee0e9-ad14-42f4-bd5b-9cebcba48f84",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9bf5bb67-3c5a-459e-8e33-94c013e0de86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c305e01-34de-46fe-8eea-08b4ccc0d2ea",
        "cursor": {
          "ref": "8db99c13-a068-4536-8e52-85aa438adee0",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "847feb63-215c-4376-847d-76decd6a29dc"
        },
        "item": {
          "id": "8c305e01-34de-46fe-8eea-08b4ccc0d2ea",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "eb711e2a-81d6-46c1-a76f-a6a255ba1976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33245ba6-51c7-4b2a-ab27-a35cbc4597ee",
        "cursor": {
          "ref": "df7b09a7-301a-450c-9aca-11c1347f3b64",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "71853c5b-f768-43e4-82e1-c8db547bb7e6"
        },
        "item": {
          "id": "33245ba6-51c7-4b2a-ab27-a35cbc4597ee",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "869a9d1c-db1d-465e-b00f-1026ffda7262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad37a0e-7ecd-4d0c-b2a5-3c2853c2e58c",
        "cursor": {
          "ref": "cf364863-4303-47e6-94d9-5dec2ccce07e",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2e5e42f8-226e-4d54-b42a-d0180c31f63e"
        },
        "item": {
          "id": "8ad37a0e-7ecd-4d0c-b2a5-3c2853c2e58c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "97bfb745-9140-478d-ad9c-987713503de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347ea07b-3c25-4d54-82d2-728fcc2ae1e4",
        "cursor": {
          "ref": "ad26f3d9-cb34-4f31-9294-79083a3cb5bd",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "098260e5-3fc0-4b22-a31d-416f9b242f66"
        },
        "item": {
          "id": "347ea07b-3c25-4d54-82d2-728fcc2ae1e4",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "91fe2aec-e9b3-4cbb-bcd4-18a0012a5915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a1e8d9-f419-4bc0-bd79-3fa9e89cc3c3",
        "cursor": {
          "ref": "566b3168-7bc6-48ef-a126-0fb594d6298b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5eefaed7-f023-4d36-94b6-c99980ef4ee6"
        },
        "item": {
          "id": "e4a1e8d9-f419-4bc0-bd79-3fa9e89cc3c3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f4697cd1-4158-4cc1-90b2-147f6b1aabf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ad3adf-5d0d-47db-a19a-68bd507bb1f7",
        "cursor": {
          "ref": "abb612cd-b1ee-4f04-bc2e-baf81b120a6f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4a51394f-e571-44a9-b1ca-9d2fd80cf128"
        },
        "item": {
          "id": "83ad3adf-5d0d-47db-a19a-68bd507bb1f7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "41ac43b6-886d-4cdc-b1bc-4ee584f240b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb620c3-eda9-43a9-9416-a552e5582e54",
        "cursor": {
          "ref": "d8cbc691-7087-4c40-84b1-dea5725d12cd",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b6a8367f-d368-41c7-b78c-599230a5c9e1"
        },
        "item": {
          "id": "edb620c3-eda9-43a9-9416-a552e5582e54",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4e754650-8bf6-40c4-b770-b038a339b633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ebf2eb-6422-43a4-9562-56f5064446ac",
        "cursor": {
          "ref": "d5f579c7-155e-4183-9f2a-2702b1f2336d",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6e590fd3-aac6-4dbd-8ef7-807798cc44fd"
        },
        "item": {
          "id": "d2ebf2eb-6422-43a4-9562-56f5064446ac",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8f41fa62-a9c4-49ca-8052-699506dab4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e59357c-2720-48c7-9484-589c9f70ae28",
        "cursor": {
          "ref": "74c929d6-81db-4549-b31f-7608d4cf5c5e",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2ff05b56-8508-4aab-9a9b-79df7e4ad77b"
        },
        "item": {
          "id": "6e59357c-2720-48c7-9484-589c9f70ae28",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a882c5bd-26dd-4adf-bbf9-b145332f3457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c09fff5-3462-420c-b65d-41f3fa631731",
        "cursor": {
          "ref": "2f6b9048-6c66-4024-8205-8e9d816d7353",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "55bb473e-2e0d-465a-a676-65a4361941b7"
        },
        "item": {
          "id": "7c09fff5-3462-420c-b65d-41f3fa631731",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "cc4020f8-501d-406b-9091-424e38f158c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7193a6d9-34fe-4485-8dfc-4f424fbcf5c5",
        "cursor": {
          "ref": "831d32dd-5bae-4a29-8c0f-cd1713286f04",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4706a48d-273a-4c4c-b3cc-d3a495f53058"
        },
        "item": {
          "id": "7193a6d9-34fe-4485-8dfc-4f424fbcf5c5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b82d36f4-d0ca-4265-ab93-e7eee5085765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137a5c6e-def4-41e0-8112-1a113b5b1d1d",
        "cursor": {
          "ref": "0f04a71c-77af-4373-8f99-5c8c77833ea9",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "eff67c8d-379d-49f4-82a0-df040a9369dc"
        },
        "item": {
          "id": "137a5c6e-def4-41e0-8112-1a113b5b1d1d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9a3b81fb-fce8-4d14-ad7f-e08f19c94a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e7e0a4-b39f-4d6e-bf26-ba04a17ecfaf",
        "cursor": {
          "ref": "55509dfd-d04c-46cf-be51-835a24e76842",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3ad686ab-aef7-407e-802b-8fea7ce2b465"
        },
        "item": {
          "id": "26e7e0a4-b39f-4d6e-bf26-ba04a17ecfaf",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "1f7a2dd8-66d8-4d0a-845e-06db521fe601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca6b068-6e65-45bb-8a6a-f7906f8acbc3",
        "cursor": {
          "ref": "29d1994a-50c8-43f3-856b-8031fb65a6df",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "af953728-6b3e-4110-8bd0-f5f56d96bb8f"
        },
        "item": {
          "id": "aca6b068-6e65-45bb-8a6a-f7906f8acbc3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7d6be249-035c-4ffc-bf60-924cdf5863ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566517d3-bd57-45d7-971d-51e13298d774",
        "cursor": {
          "ref": "610cab94-306b-4334-96a1-fb6d89c4ab7b",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f60b9494-2cb5-4ec2-8c2c-ffbf84f86ff4"
        },
        "item": {
          "id": "566517d3-bd57-45d7-971d-51e13298d774",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e40269be-59e3-42f8-a8a0-60fdadeb657a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6cdddd-7f0d-4f35-a2b4-fbefe46f9d8e",
        "cursor": {
          "ref": "aadc097c-e144-4cc6-b502-1ae25bae8b15",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4942e6b2-eea6-4532-8625-64cceb37913a"
        },
        "item": {
          "id": "ab6cdddd-7f0d-4f35-a2b4-fbefe46f9d8e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "847fd871-0821-4d95-93c9-f93598e0b360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891d9b5e-3406-4d78-bf1e-11053754a83e",
        "cursor": {
          "ref": "8e566dce-6e73-4ad6-8af7-246784d6ee9d",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "5954dbc9-234c-4021-9c1a-29b4f3f71a45"
        },
        "item": {
          "id": "891d9b5e-3406-4d78-bf1e-11053754a83e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5ac7ed6a-4a06-452c-8616-d116aacde1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198f2789-8131-4b08-8b05-cf184275ae4e",
        "cursor": {
          "ref": "941addb0-82ec-40f9-9e22-471757fe3d76",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c027891c-2fbb-4db6-9243-93919be8c100"
        },
        "item": {
          "id": "198f2789-8131-4b08-8b05-cf184275ae4e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b8d317ea-dbec-40c7-a692-48f1989f8160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60d8c08f-fb03-4e10-ba5a-b7eb5268ff46",
        "cursor": {
          "ref": "fd18a692-7375-4f02-8b98-610fbdbde9a3",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "56ea9bb9-8ebe-4fd3-8bf7-7dd0a94e461a"
        },
        "item": {
          "id": "60d8c08f-fb03-4e10-ba5a-b7eb5268ff46",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "6dda6140-b22f-49d7-b8eb-b355887a1c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93869e84-2eff-4e11-ac58-39e0339ae067",
        "cursor": {
          "ref": "8d111da7-7547-4b4e-a26f-3f60266e6e58",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fe596ebd-f04a-4d98-8290-99a828811063"
        },
        "item": {
          "id": "93869e84-2eff-4e11-ac58-39e0339ae067",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "784a76f5-70ad-455b-a604-f62ac5fe1c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed93872-6488-4660-9a60-dfa50755e8bc",
        "cursor": {
          "ref": "0d9468fb-f321-4411-86da-dcd4641763df",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7ece7169-d1e3-4591-b0f7-404711bb6fea"
        },
        "item": {
          "id": "fed93872-6488-4660-9a60-dfa50755e8bc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dd8ff8b1-2ecb-47b9-96b4-75018a95556d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf477f5-ad14-450f-9a49-d0a985ca0ded",
        "cursor": {
          "ref": "e460ea5f-42aa-4ad7-a931-cb70ada366c4",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0ad39792-944d-4280-a9cd-160ee6c8b995"
        },
        "item": {
          "id": "adf477f5-ad14-450f-9a49-d0a985ca0ded",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "fb5a3636-e645-4b14-9a31-ffcc5ab3cf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cec41337-8f00-4cd7-96dd-4363e0cc6107",
        "cursor": {
          "ref": "383507b1-2d14-4c80-a67e-65e259a01cde",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cb518cfb-0ca5-4905-abbc-317bf752d4a8"
        },
        "item": {
          "id": "cec41337-8f00-4cd7-96dd-4363e0cc6107",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "547fdd8d-ad86-4c6f-a79c-ca13ab8458a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d798156-ec3f-449f-a89b-b7fcd3c84eb4",
        "cursor": {
          "ref": "eba7de82-1bbb-4c59-ad0c-050390b3ac68",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "880f9123-3cd1-4130-877c-e7b32d237fc5"
        },
        "item": {
          "id": "8d798156-ec3f-449f-a89b-b7fcd3c84eb4",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d9e0fb06-792a-4e7b-8800-3b346789db49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "347b3539-524c-4be1-83a2-daa25865731f",
        "cursor": {
          "ref": "2b1ba53a-a969-491a-8358-4a5acc0d03a8",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "fd7d3547-0f86-4988-8174-e052b05f8678"
        },
        "item": {
          "id": "347b3539-524c-4be1-83a2-daa25865731f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "61e9ff06-fa30-476b-9e2e-6b53a65e156e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909d7be3-544b-4416-ae19-bec0d464c87f",
        "cursor": {
          "ref": "ec776a27-68a8-4a63-8fb5-fd4dde380978",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "94806940-1b5c-4e74-bcd7-9d60f0aed1f0"
        },
        "item": {
          "id": "909d7be3-544b-4416-ae19-bec0d464c87f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e4d1b8fa-127f-4ffa-81ac-a92a9d1a6116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d3aca2-0fe6-4653-96b9-dc48aebd7971",
        "cursor": {
          "ref": "75d32c49-d38a-43e8-b454-fecb6f9a735b",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e6146371-cf77-4515-b442-a9f38173fb03"
        },
        "item": {
          "id": "b8d3aca2-0fe6-4653-96b9-dc48aebd7971",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d9da0210-b2b8-433e-a78f-27b159e42373",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eddcfd1e-9b7c-4c15-8bbf-303eeda33411",
        "cursor": {
          "ref": "698710dc-f2d6-43ed-a64b-e9e77b6153b9",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "30337cf9-a751-4324-a724-babe5acb294b"
        },
        "item": {
          "id": "eddcfd1e-9b7c-4c15-8bbf-303eeda33411",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "bd741514-b9ea-4874-9a04-8098e1a63a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1db78db2-51b9-4e75-acbe-b22f944d428e",
        "cursor": {
          "ref": "5421bf73-29a3-4a7c-bc64-76d5268787a4",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "582a4b22-a85a-43b4-9e2a-9b3a2ecdf817"
        },
        "item": {
          "id": "1db78db2-51b9-4e75-acbe-b22f944d428e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e4483dec-50c0-4ecd-8243-7a12638de67e",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0f8e56-4ac7-455e-b3af-a7948c6e8013",
        "cursor": {
          "ref": "1cb0b52b-7aff-4773-993b-3fcec9999d5a",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0e0f9c61-3ace-4fcb-b0e7-fc133113787d"
        },
        "item": {
          "id": "da0f8e56-4ac7-455e-b3af-a7948c6e8013",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "56d706a0-502f-427b-8502-ae0ebdb647d0",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eefdf3d-78b0-4053-8874-3ebba18cb84d",
        "cursor": {
          "ref": "5b197f86-312a-4053-a95f-2bb0db6816f4",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ed780a5a-5066-41fd-80f2-4af61aa15f3e"
        },
        "item": {
          "id": "2eefdf3d-78b0-4053-8874-3ebba18cb84d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "18a20a61-cc42-4273-ab9b-0a2810b2934b",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d81babd-3a6e-4f99-923a-88a806173362",
        "cursor": {
          "ref": "e59cc050-95b1-475a-b8b5-1b734ac1f3f4",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5d218680-22fd-4ab7-867c-6a247826be9f"
        },
        "item": {
          "id": "2d81babd-3a6e-4f99-923a-88a806173362",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "01a4ed33-176a-483b-8d84-19b60b91f264",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3014fe2-8c14-4279-9cc2-102fd9263851",
        "cursor": {
          "ref": "ad321e25-5471-4a51-b484-491c9786063b",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0ad25282-df34-4a98-b82c-f643b6e9bfde"
        },
        "item": {
          "id": "f3014fe2-8c14-4279-9cc2-102fd9263851",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c08356a4-2f11-4e70-9cf0-76c0c0862250",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-13T00:29:53.860Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-13T00:29:53.860Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b8d7979f-6d75-4948-8040-164ced4acfbd",
        "cursor": {
          "ref": "a1c780ba-3437-4ac7-9732-602b0a20a155",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7c5c805c-3478-407d-b660-770591f9546d"
        },
        "item": {
          "id": "b8d7979f-6d75-4948-8040-164ced4acfbd",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "087fd7b3-869f-4a07-9735-6ac72873eea0",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c160fda-cdd3-4dbd-b203-5970e4987da5",
        "cursor": {
          "ref": "7b894c1a-a407-4ffd-beb1-9165ea30f1db",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5809eace-515b-4cc3-91a8-d64c9ed41ede"
        },
        "item": {
          "id": "9c160fda-cdd3-4dbd-b203-5970e4987da5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3f71dd44-5edf-4030-8f68-1ecb7bc771e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52273d0d-df50-46ab-b37c-145827f1850e",
        "cursor": {
          "ref": "fa575204-4b5a-4f44-b0b0-489d82a9b1fd",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "70c2504f-fd99-4cc0-9960-e5ad67d86cdf"
        },
        "item": {
          "id": "52273d0d-df50-46ab-b37c-145827f1850e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8f61ff74-976b-4d84-88c5-e98d0cfcb105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83dfb16-ead7-4326-9f36-188437c1e349",
        "cursor": {
          "ref": "4daa6e6e-b0a9-49b8-b16b-175dbd816136",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2173735e-59dd-448d-97e5-9fc2bc5930f8"
        },
        "item": {
          "id": "c83dfb16-ead7-4326-9f36-188437c1e349",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8f54e3a7-187d-4b87-b966-929426497f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f493f7c-4de0-4faf-903b-98bc4ef53c96",
        "cursor": {
          "ref": "80377d81-83dc-416b-b935-7c1128c77ca9",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7d756e6f-52cc-42df-9bed-312197156ca4"
        },
        "item": {
          "id": "1f493f7c-4de0-4faf-903b-98bc4ef53c96",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b9be8ca3-7181-44e4-bb4a-3cb25083ff1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d64bf46-c5d3-49c9-bb8f-9b5bd0c86303",
        "cursor": {
          "ref": "a233f9b9-ef3e-45d8-9fd3-f1ea425ae632",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2592ee92-1861-4947-b561-460c6e0a33ce"
        },
        "item": {
          "id": "1d64bf46-c5d3-49c9-bb8f-9b5bd0c86303",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9ee4da7b-9221-4a8f-902e-ad893c19493d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35413df3-0308-4c57-ad58-e926c1adf44a",
        "cursor": {
          "ref": "704de931-0408-46a9-b5fa-b9c944d4b37a",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ee655609-a7bc-42e1-b52c-d88e240b5f15"
        },
        "item": {
          "id": "35413df3-0308-4c57-ad58-e926c1adf44a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1f65f45c-4661-46e9-8783-b707e4650a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b249a7-f112-42ac-a283-b04e9d0fd33c",
        "cursor": {
          "ref": "7201592f-18ff-43ff-b687-e33c24b86a87",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "c2b0bfdc-17f3-400b-beea-30db7767c76f"
        },
        "item": {
          "id": "36b249a7-f112-42ac-a283-b04e9d0fd33c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b42c35fc-e949-4c35-b85b-5222d2f0a15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace2e791-1633-4324-92ac-b47f92ebd707",
        "cursor": {
          "ref": "114fbe9c-3966-4700-8043-8e323572f3ad",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3817f38d-ae39-4447-bb05-836a03214aa2"
        },
        "item": {
          "id": "ace2e791-1633-4324-92ac-b47f92ebd707",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5ba069cb-677c-4eb9-b5c4-c2ae22a6abdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ac384e-ea73-411b-b65f-39fcc9d7a0be",
        "cursor": {
          "ref": "d6628a85-7542-45bb-962f-aa87029bed03",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "585bd91d-d878-4cb0-a720-49a34914ac69"
        },
        "item": {
          "id": "f8ac384e-ea73-411b-b65f-39fcc9d7a0be",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "af30122e-90b5-4a4e-914c-15a3b7b0e9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625e75cf-b117-4791-966f-da192582ff5a",
        "cursor": {
          "ref": "a0b01d41-6940-443e-81c4-b3bf80c3264f",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "7128e6d2-71ca-4fe3-b579-e67e29b0c9bc"
        },
        "item": {
          "id": "625e75cf-b117-4791-966f-da192582ff5a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "97df313e-eda6-4778-8d92-8829ef370194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2660e7e2-64a3-44c9-b039-e894100373b8",
        "cursor": {
          "ref": "c8190b5c-3454-4824-9dcb-44cf5e62dad6",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a50c2fe7-1a3a-4f6c-ad6a-178474f01e15"
        },
        "item": {
          "id": "2660e7e2-64a3-44c9-b039-e894100373b8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f458678d-09d7-42de-aca7-6b2ac4a6e3bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a72bc69-53ac-4ddc-a4c1-5197c3730e3d",
        "cursor": {
          "ref": "b8bd3e62-890b-49d3-a35f-f1b129fd9f4d",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c829f8dc-4c25-4402-8eed-cbb62fb9151c"
        },
        "item": {
          "id": "0a72bc69-53ac-4ddc-a4c1-5197c3730e3d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1b7933ad-dfe7-401a-93d7-aa531082880d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5dc0da-5895-4a82-811c-d78c5dbf21f3",
        "cursor": {
          "ref": "4d9065e6-0127-4119-8678-0c91c0c5cfd1",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b2106fce-e3de-4d7b-b74b-981f8f08b3ab"
        },
        "item": {
          "id": "0b5dc0da-5895-4a82-811c-d78c5dbf21f3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b1e90ce-a46c-4f32-a547-aeede2c66388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9592b8-d8e9-4668-bb7f-d0a36cfc787d",
        "cursor": {
          "ref": "29c6598c-ee95-4dff-9682-bc123ec6210a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cc3833d7-7b19-449b-8ec3-4fb7a6958590"
        },
        "item": {
          "id": "ca9592b8-d8e9-4668-bb7f-d0a36cfc787d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6222d454-2b2e-4d7e-b285-a18026ccfce3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "d7c9704f-6e1b-4794-a901-ac6098b5f81c",
        "cursor": {
          "ref": "0e10b0d3-34dc-4637-ab24-d2a8a8e681a7",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "36d3152b-f57d-49d8-9aaf-9fd4a804376e"
        },
        "item": {
          "id": "d7c9704f-6e1b-4794-a901-ac6098b5f81c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6cdec4c7-4269-4140-9bcd-72c3fbe038fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc0fb0fc-bae3-4936-ac32-1a93cd6f3a03",
        "cursor": {
          "ref": "57b833ee-adfc-45d7-9fa4-9e8412b1d6ac",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8ac6498d-e707-449c-bf16-7d0280b09aa1"
        },
        "item": {
          "id": "dc0fb0fc-bae3-4936-ac32-1a93cd6f3a03",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "018dc789-282f-484a-a286-fab13f60d07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8607f46-9482-4f96-b9c9-b38161c8340e",
        "cursor": {
          "ref": "1bbc82c6-ace3-4237-ad1d-7f26846cb0ed",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f62e46b8-ca32-4844-b744-a0db3d1c49bf"
        },
        "item": {
          "id": "c8607f46-9482-4f96-b9c9-b38161c8340e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e73c19f4-3e92-40ad-9551-033edbbfbf95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac264e90-d24c-4126-a720-219acddd6eed",
        "cursor": {
          "ref": "f14d4287-02a8-4333-a73e-b3d7f7f3b5a8",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7c525569-17c7-4bb1-9be7-1ce255cf0c41"
        },
        "item": {
          "id": "ac264e90-d24c-4126-a720-219acddd6eed",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "439cc048-8e40-4bca-bfa5-70ae3dfd8caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c6cb90-4c8b-4219-9176-b372080ab2f6",
        "cursor": {
          "ref": "10c154d3-0b12-4d35-8a8b-f9875615fbd9",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "69896bd3-22eb-4ccb-9b4f-6c3c9aea6156"
        },
        "item": {
          "id": "b8c6cb90-4c8b-4219-9176-b372080ab2f6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0ec8dcb0-5581-4f68-91c0-f0550b39d240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba062380-35ec-44e0-a8ef-2523a243be82",
        "cursor": {
          "ref": "1baae22c-64fd-4c40-9ff8-10f03439739e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "73d08b63-0889-49a1-bebe-ed4c0b9d6f0b"
        },
        "item": {
          "id": "ba062380-35ec-44e0-a8ef-2523a243be82",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b6bb179f-2ad0-4340-a5b2-f97dd4902135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897813e9-6fa3-4c2f-968d-745663914446",
        "cursor": {
          "ref": "470b0614-66d6-454e-8664-c476eec6c6ab",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f5aebd62-97c9-46d9-9266-aea076c1444b"
        },
        "item": {
          "id": "897813e9-6fa3-4c2f-968d-745663914446",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "555b9544-bdd1-4c7c-a2e5-6093551ef474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c648886-ccb9-4867-8743-a1da66f032ca",
        "cursor": {
          "ref": "e3f9d0dd-3d8b-48d3-9f50-427d59823d60",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0f6600c5-c08b-4938-ae39-2c8c31cf9938"
        },
        "item": {
          "id": "3c648886-ccb9-4867-8743-a1da66f032ca",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "563f1245-5763-4c60-b531-30f4adc86f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b32db189-6f86-4b8d-b09c-d0bab795e318",
        "cursor": {
          "ref": "0153bb9a-c07c-443a-be88-5ed4a990361e",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4e681b79-0cb5-451c-8cba-1b59b78d494b"
        },
        "item": {
          "id": "b32db189-6f86-4b8d-b09c-d0bab795e318",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "46c36343-b0f6-4d1b-8286-5c5f28319097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59283f0-0a73-4adb-b93f-5d3fba9d6787",
        "cursor": {
          "ref": "b2e202dc-cbdf-43a2-9192-aaa1408a77a5",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "000992de-3186-40b8-acba-92999f02b172"
        },
        "item": {
          "id": "d59283f0-0a73-4adb-b93f-5d3fba9d6787",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "015af738-9d4d-4a31-a800-27a19bcd51e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b36ead21-3d76-489d-9be0-e40571b18225",
        "cursor": {
          "ref": "d0122bee-7ea2-4104-9615-6208c43cdfa7",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "507648c5-f22e-494c-aea7-85b87f595ba2"
        },
        "item": {
          "id": "b36ead21-3d76-489d-9be0-e40571b18225",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e3e69849-1764-418a-9640-6ddba3152675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec25d81-9971-4baa-957c-064342db2b09",
        "cursor": {
          "ref": "b6d8ec86-6617-43dc-ba9c-395ed83d62cf",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "b412d790-7486-4fc5-926f-652ae1477403"
        },
        "item": {
          "id": "5ec25d81-9971-4baa-957c-064342db2b09",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5221f176-69f6-4a6f-9761-c9c7fce9321d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e2bda2c-7843-4953-a9ea-ff469130d27d",
        "cursor": {
          "ref": "efcd2e93-50c1-4d3e-92fe-c68b123f48f2",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4d482870-d6fb-4121-9b34-916c8ffe7da1"
        },
        "item": {
          "id": "4e2bda2c-7843-4953-a9ea-ff469130d27d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e3d2ad21-3779-44a4-967e-5e42b739e532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a9cdf3-2dde-42bd-bab9-a9a599954255",
        "cursor": {
          "ref": "5bf19721-639f-4024-9b71-c821a42a9280",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5c2ae52e-21ba-4d27-9a75-5c18a6c4c3b2"
        },
        "item": {
          "id": "32a9cdf3-2dde-42bd-bab9-a9a599954255",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ab449abd-be45-4912-aab9-6de1a1c6f2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b6e129-b8b5-42b3-aff9-bfffb825b94a",
        "cursor": {
          "ref": "e6380c56-a155-4344-88b1-a31c5a7e86cd",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "b6284065-2e6b-42ea-bdde-0eb33935e929"
        },
        "item": {
          "id": "04b6e129-b8b5-42b3-aff9-bfffb825b94a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8cc2d60c-7478-4120-a768-73ad5346bb0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc9103f-c2cd-4f3e-b4a0-a2847fd08c31",
        "cursor": {
          "ref": "e8ec9346-7b26-4ae4-9149-07caa0240841",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9de252bd-4c90-494b-9f8b-a5337e288d1a"
        },
        "item": {
          "id": "acc9103f-c2cd-4f3e-b4a0-a2847fd08c31",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f60ab4ea-7bac-46dc-a85b-f65b564509b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8281b67d-48f9-4f30-8eb6-462de178a08c",
        "cursor": {
          "ref": "3cab3a9c-5a7f-4370-b4d5-ebe1cdb95b14",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b230cfda-32fe-41fe-8546-9e8b8b3fcb5d"
        },
        "item": {
          "id": "8281b67d-48f9-4f30-8eb6-462de178a08c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0f405346-390a-4c32-92a3-c3464b8fc75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe5853a-1ae5-4d5e-b1f0-447a8a8822e4",
        "cursor": {
          "ref": "40f503d4-131c-4f3b-b424-9d17104d6c78",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "62bf8ed2-4082-4b13-a408-75b4653c70a9"
        },
        "item": {
          "id": "fbe5853a-1ae5-4d5e-b1f0-447a8a8822e4",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6a7463a3-eee8-41be-ab9f-3f17d5948b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca2263de-b886-438b-87cf-a7c39b4b5164",
        "cursor": {
          "ref": "82c76f62-2657-4d47-9b93-3dd530cfd852",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a2e7f9e6-c8a9-48c8-acdf-0b4782d2921f"
        },
        "item": {
          "id": "ca2263de-b886-438b-87cf-a7c39b4b5164",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a8a8ec80-e654-40c3-9930-cc2951ee8714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a29e49f-b25c-4293-8e76-825d2ccfc92d",
        "cursor": {
          "ref": "d60e4358-9508-48cf-a84e-85866f2bf15e",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0e944651-8ac4-4f65-a636-f5132bab56b0"
        },
        "item": {
          "id": "0a29e49f-b25c-4293-8e76-825d2ccfc92d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "82975c1a-39bb-4352-8798-908e4c120ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6159e15e-370c-480d-a876-52de0f5d1cea",
        "cursor": {
          "ref": "daa1662d-2ca6-4f36-bc91-9cfdb690cefd",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ded9a5c9-c0af-43cd-ac52-de8fb246cb6a"
        },
        "item": {
          "id": "6159e15e-370c-480d-a876-52de0f5d1cea",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "fcceed5f-90c7-461b-bef1-79f3c348e7b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185d0afa-737d-496f-92f7-97a649b28df5",
        "cursor": {
          "ref": "3c62f01a-80e8-4ff0-b0b6-6c42f71557f6",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f0503c08-9ca9-4074-8ccd-7be15067ead5"
        },
        "item": {
          "id": "185d0afa-737d-496f-92f7-97a649b28df5",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9c7be61e-c79b-48db-bfc6-fefd411ee809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0328fef4-6e27-409a-8aa7-8bb3b64cf49c",
        "cursor": {
          "ref": "e76e4fa1-0924-4fa9-b3da-1f292dd8f0a1",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "1490bd94-d16f-4862-8d3b-86538a81eb91"
        },
        "item": {
          "id": "0328fef4-6e27-409a-8aa7-8bb3b64cf49c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "087e92d8-a690-41d9-915f-e1089de48447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89861fb5-3c2c-4ccb-b1e5-d896367eef34",
        "cursor": {
          "ref": "0652b7dd-95ad-4da3-9df4-d2d7165e507f",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "95d4a4a3-dc44-4207-a82c-1e5022348637"
        },
        "item": {
          "id": "89861fb5-3c2c-4ccb-b1e5-d896367eef34",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9b8986ee-4ca0-4de0-bba1-ab41f1ecc54d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a61195-e9b0-4fa9-be5f-ff2521ec634c",
        "cursor": {
          "ref": "ddd7b44c-cbad-4241-920b-1cac7296ff41",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9acf4708-6595-4f24-8b0d-896649636856"
        },
        "item": {
          "id": "f6a61195-e9b0-4fa9-be5f-ff2521ec634c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c179afcf-637f-4dd3-817b-75435fe7492a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb4b2f2-7b4c-4bca-85d3-dd07cd42b163",
        "cursor": {
          "ref": "f359dfc8-f4f0-4db0-a2b2-baf800a4fef3",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f7ae01b3-5ab3-494f-a7c1-7d81c99dcf2b"
        },
        "item": {
          "id": "2cb4b2f2-7b4c-4bca-85d3-dd07cd42b163",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "74443db9-1eda-4ef4-a807-527059227a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b7bac1-2ece-43bd-a34e-3ffa4d77d0e3",
        "cursor": {
          "ref": "1cd78c21-dbee-442b-8b63-ae25bcb67807",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9f2eb061-925a-47af-993a-fba42e6330d2"
        },
        "item": {
          "id": "c8b7bac1-2ece-43bd-a34e-3ffa4d77d0e3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5d27bf53-049b-4cf9-beb0-30a8acca05c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eef9453-cd79-40f8-98e5-00a70c1933ed",
        "cursor": {
          "ref": "43a190b0-6b8f-4b9b-8db0-2d61451ee7d1",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "d3102a4a-3875-4040-b019-8d113c48bc99"
        },
        "item": {
          "id": "0eef9453-cd79-40f8-98e5-00a70c1933ed",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5cb20ef3-b634-4b6a-8bd2-6d9711009bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f121dd51-7263-4645-b045-1c8841e3e12e",
        "cursor": {
          "ref": "827722b4-d064-4229-89bb-19d561b8b214",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5f502f14-e34d-4d03-b053-5b63b8bae092"
        },
        "item": {
          "id": "f121dd51-7263-4645-b045-1c8841e3e12e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "704c0fa0-5fba-4081-8f52-55359cc5cf6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "478c2c83-f583-4f08-9c58-a609f16793b4",
        "cursor": {
          "ref": "09cde757-2ec7-4a2d-bac3-33e1d566872e",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "86a2052b-88d7-484c-afbd-54b32e56ec3d"
        },
        "item": {
          "id": "478c2c83-f583-4f08-9c58-a609f16793b4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "13330b00-66c2-41ee-ab44-546809a036e7",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6086c7ee-75cf-4379-a813-a097ba0af6e6",
        "cursor": {
          "ref": "5d113cb9-7646-49cf-8813-e8ec51174c13",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3a08c9d8-9b46-43c4-a300-9be565da9c44"
        },
        "item": {
          "id": "6086c7ee-75cf-4379-a813-a097ba0af6e6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ec5ea919-ee6a-4473-b5a4-6900ec532547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3736c39-84bf-454b-83bd-51e79f8aea4b",
        "cursor": {
          "ref": "7c1f04bb-fde2-4c4d-aa40-b5cc2d9263a5",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b1a2f2f1-7326-4097-bd7e-4e6425f30578"
        },
        "item": {
          "id": "c3736c39-84bf-454b-83bd-51e79f8aea4b",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eaf2dd69-ff39-458b-b288-6b2a8640c80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57faedf-48c6-4057-bc56-05eb03fd2aab",
        "cursor": {
          "ref": "b51cb56e-6e76-446e-8dd2-5a3e5352eee2",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d784f763-4a74-4472-a71d-da3e8d28b114"
        },
        "item": {
          "id": "c57faedf-48c6-4057-bc56-05eb03fd2aab",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "bf16e3a7-df96-477f-847c-1b882e84274d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac16dac-61f9-465e-b975-6e06884fcc5d",
        "cursor": {
          "ref": "d3af3dc0-ad66-4e8c-84fc-3ccc92b4ac64",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "54651a8b-e645-43a2-a547-383fb928c744"
        },
        "item": {
          "id": "cac16dac-61f9-465e-b975-6e06884fcc5d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "943dfb43-37db-438c-987b-d7f7e4d542ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0f44dde-2b14-4403-8a89-d66453bf091d",
        "cursor": {
          "ref": "6c79de92-815b-483c-a125-14fb1db009c5",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c139d008-b712-4938-aadc-3f0920998956"
        },
        "item": {
          "id": "e0f44dde-2b14-4403-8a89-d66453bf091d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2eaafea3-783d-41e1-a65c-829f234e5dfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9630c109-ae6c-4509-8522-bf810f56bcf6",
        "cursor": {
          "ref": "1e7ece00-5549-41ed-bdb3-64b227e4e0ad",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d5ff2931-1f31-4f61-b86e-ee955434784d"
        },
        "item": {
          "id": "9630c109-ae6c-4509-8522-bf810f56bcf6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "164891e9-eb87-40a6-bf6f-3d25e1ad65d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0431c6cf-e378-4523-85bd-4fd386712569",
        "cursor": {
          "ref": "358e112e-47b9-4fef-b7ce-07471dfd2d77",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f04f51ed-a1cd-438a-9cfb-437920ecb81a"
        },
        "item": {
          "id": "0431c6cf-e378-4523-85bd-4fd386712569",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6c000147-65ae-4e5b-a2d5-1c98606d032c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c405561-62f9-4f6c-a895-574d9903ea05",
        "cursor": {
          "ref": "cbdbb16d-ceca-4d5c-915f-e476f89ce16c",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "981e47e0-944b-4957-b17f-29d3940bb4cf"
        },
        "item": {
          "id": "0c405561-62f9-4f6c-a895-574d9903ea05",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "284adaf8-ef36-45b0-8220-7f81a4c7851c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71981cb0-83c0-412b-92f2-3c62c0cc1747",
        "cursor": {
          "ref": "f2e5045e-36f2-41e1-bbc2-b38dc736ab32",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "1ad0d285-1bdd-434f-a407-6a3958f73d14"
        },
        "item": {
          "id": "71981cb0-83c0-412b-92f2-3c62c0cc1747",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9e41a086-10a7-431f-9bc4-65f694997634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edcbd4ec-a905-4fef-b9ee-74fa27c18d62",
        "cursor": {
          "ref": "d2d49494-a03f-4d0d-9509-3376645dd05d",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7cb17de8-7faa-4a86-bf77-fc42c565a28a"
        },
        "item": {
          "id": "edcbd4ec-a905-4fef-b9ee-74fa27c18d62",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "42118fab-abee-4809-b3a9-341985960cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76964679-9086-42b0-9988-ab45b9d788b9",
        "cursor": {
          "ref": "98276ca5-7b85-4966-95f1-7548d2eaa9fc",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "591e7b42-6de0-4bf9-9bc5-ff4978563e05"
        },
        "item": {
          "id": "76964679-9086-42b0-9988-ab45b9d788b9",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f210d019-6008-441e-ad84-99e75887c7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4664e189-11c8-4c09-9ea3-1179e859cdb3",
        "cursor": {
          "ref": "b3bee1a0-4eba-464f-bb82-3561fbd2555d",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "da8907e6-8aad-4e72-b114-cfdc3db5be1e"
        },
        "item": {
          "id": "4664e189-11c8-4c09-9ea3-1179e859cdb3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "b1830bf5-b506-4764-bdad-39c281bbe81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0f0044-fea5-4265-9083-dce8a29fe053",
        "cursor": {
          "ref": "4f1bf71f-3d84-4a22-a4b2-11b57bc646d7",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "565514bf-92f6-4fc3-bea2-360a55170f55"
        },
        "item": {
          "id": "7e0f0044-fea5-4265-9083-dce8a29fe053",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "015ec75d-2443-449a-b940-5fdb862cfea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6888a3-4298-40b1-9603-d68e5e51e3b7",
        "cursor": {
          "ref": "9f72a6a6-6435-44b4-8ceb-8cb9fa7a0237",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "3a378e26-6b4b-4803-ab6e-52615ce8e87c"
        },
        "item": {
          "id": "9e6888a3-4298-40b1-9603-d68e5e51e3b7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ef4da485-9b50-40a7-9a22-ebe1420e9042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6fb8bc-926c-43ed-80d9-c7179ac66c67",
        "cursor": {
          "ref": "7a16014b-08b1-4201-b2ec-68f44694a999",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dcb5dc45-b515-4e4a-a702-ef77a1588d6e"
        },
        "item": {
          "id": "4a6fb8bc-926c-43ed-80d9-c7179ac66c67",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ccc275b0-bd74-47f1-beb6-aa3ca5bf2568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf11147-58e9-4825-a3c4-7c1ac7fe7080",
        "cursor": {
          "ref": "c2e2b38d-7f78-4054-8a48-a377a00a4857",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cdef3824-ce69-4c8b-a5f6-7cba54b155d1"
        },
        "item": {
          "id": "9bf11147-58e9-4825-a3c4-7c1ac7fe7080",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4105385e-f3a2-469b-b985-10cfe1eb5b1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f069308-0b34-4129-95ea-318aa1ef3430",
        "cursor": {
          "ref": "9b250298-b0cb-449a-9f2b-42b430c29479",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6caada33-00d7-4522-b06d-560356cdc7d4"
        },
        "item": {
          "id": "8f069308-0b34-4129-95ea-318aa1ef3430",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "3198f213-f8f8-47e1-b24f-527e9124124f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272157e8-aec2-40db-b65a-65ced970268d",
        "cursor": {
          "ref": "874d06e8-80a8-4be0-92d9-0c8eda1cd1d7",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bf80a1c9-5621-48e1-9a06-c52e595c7c62"
        },
        "item": {
          "id": "272157e8-aec2-40db-b65a-65ced970268d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "09544394-7cd8-4781-9146-c59e1bc4fc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e788ef05-9ccf-4667-a7e7-7d101d2ecdf0",
        "cursor": {
          "ref": "126e36a4-0470-4f03-af34-d1755ff382ff",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "96040235-5652-454e-aab0-5adc00fce336"
        },
        "item": {
          "id": "e788ef05-9ccf-4667-a7e7-7d101d2ecdf0",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "ba5826b9-9812-4ebb-a37f-43c6158ac65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b982051c-8e78-4706-a7f6-62425fa68e10",
        "cursor": {
          "ref": "bf391e44-0686-49e2-a31c-7801ff59e61f",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "81bc04f9-c7d3-4099-8a35-a1f66a2400b2"
        },
        "item": {
          "id": "b982051c-8e78-4706-a7f6-62425fa68e10",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "16eded90-5d7a-43c9-81e5-6ecc2556fc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57ac074-cfe3-4b68-8f21-1d048b0f506a",
        "cursor": {
          "ref": "2fcd5edb-78ab-4092-a0e9-06108eb4cbf0",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0ef1af75-2116-40f9-b57d-8834d6d830b3"
        },
        "item": {
          "id": "a57ac074-cfe3-4b68-8f21-1d048b0f506a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ad6508e6-f0c4-492b-a0d9-b3cf6f883623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "173397fd-6f63-4891-909e-cdaf02649998",
        "cursor": {
          "ref": "767db727-8cc9-47a7-8a43-0f55bb09be93",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "12af7060-6540-4204-bb50-8c553a887bbd"
        },
        "item": {
          "id": "173397fd-6f63-4891-909e-cdaf02649998",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ba2c1e9e-281c-48fb-9391-a7ab305708f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58f46a3-e9c3-4afa-b405-f071ffab8b1a",
        "cursor": {
          "ref": "c6d50306-cdf0-48ee-be34-aa1ccd379f86",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "dfd73a6d-095f-4009-9b85-54d2d39bf3fc"
        },
        "item": {
          "id": "c58f46a3-e9c3-4afa-b405-f071ffab8b1a",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "15880683-371e-415e-9b6c-836633d06c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a818ca0-9209-41c4-8147-2d77605e1339",
        "cursor": {
          "ref": "d87d1f06-1f77-4716-8856-e5620f67cbec",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ff971bfa-b727-4f19-bb52-cc5a219393cf"
        },
        "item": {
          "id": "8a818ca0-9209-41c4-8147-2d77605e1339",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "7f42c94a-4397-4f00-a6f7-a60004b70f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75972d17-799a-468b-bd3d-411ede9839d0",
        "cursor": {
          "ref": "8abf4e03-cb6e-404d-8938-bd319a0ce38a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7a6f13c3-0e0a-4b9f-bf00-ee6ccb83756c"
        },
        "item": {
          "id": "75972d17-799a-468b-bd3d-411ede9839d0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2f2bf74d-507c-4174-a5d8-1e0c95dec8bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41f5eaca-d472-446a-a779-3b7c6927ad59",
        "cursor": {
          "ref": "bc55c0ee-67ae-404b-b765-e733b6ae8975",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d18e1ec0-a4e4-42a6-892e-01da9eff3056"
        },
        "item": {
          "id": "41f5eaca-d472-446a-a779-3b7c6927ad59",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "79927412-4b9d-46bf-9e3f-445f182a02a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01281f30-358f-473a-a201-74de3dbeed4c",
        "cursor": {
          "ref": "a3b0e8e2-a48c-44bf-bddd-38adbbe78883",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2b9ac143-5171-4d38-9bd7-98c7eaae6885"
        },
        "item": {
          "id": "01281f30-358f-473a-a201-74de3dbeed4c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "7fd19520-14c7-4212-a92c-34475707ec6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b773aff2-5d81-4b9e-93dc-191345d24170",
        "cursor": {
          "ref": "b839848d-c2c1-4142-97fe-db35bbfd0882",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f84f889e-fcf3-46f8-8168-339fae5ea1c6"
        },
        "item": {
          "id": "b773aff2-5d81-4b9e-93dc-191345d24170",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5e024d75-7850-4412-98e1-77b7cce93af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0b3f58e-b8ec-4e59-96d0-129aaabc947d",
        "cursor": {
          "ref": "eb7bd21e-197d-4e5f-be40-8097f1229dbd",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b45ab6e7-a061-46a5-83c5-c81f144a66c5"
        },
        "item": {
          "id": "d0b3f58e-b8ec-4e59-96d0-129aaabc947d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1fa3f2b7-e0d6-40ef-b02a-124f30ed792a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5b4aef-8d5f-423b-80ad-5099b95e9448",
        "cursor": {
          "ref": "a9652ae0-3044-425e-8bc3-13a18f0e79fb",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "62df43d9-27ab-4122-85cd-c0d85a71f3f0"
        },
        "item": {
          "id": "5d5b4aef-8d5f-423b-80ad-5099b95e9448",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "769a5920-4daa-4a29-ae69-837feebf5d01",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "b8047060-2e1d-438c-867a-dfe7f4dd2656",
        "cursor": {
          "ref": "491e995e-5054-4f9d-bea7-6146b4dd5b8f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c6be66fe-d0d9-4243-b175-33a63bcb4a00"
        },
        "item": {
          "id": "b8047060-2e1d-438c-867a-dfe7f4dd2656",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "af0ae48d-733d-4cc4-abfa-ddfd4595278c",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "bf3d7c01-c46d-42ab-af17-15eeb8b8641c",
        "cursor": {
          "ref": "a2964409-5fd9-4c3f-b46b-0b6ae5ad0530",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "21e552aa-1b17-49fe-a832-005bec017461"
        },
        "item": {
          "id": "bf3d7c01-c46d-42ab-af17-15eeb8b8641c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "000b1faf-c94c-4146-8018-81f201fbb08e",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c0106d5b-5b21-471b-b360-a397c9bd2b96",
        "cursor": {
          "ref": "a98b5294-f61a-4024-b4ae-a7354f51ca37",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "81a604b1-7852-472d-a9ab-dad7166a0176"
        },
        "item": {
          "id": "c0106d5b-5b21-471b-b360-a397c9bd2b96",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "62dc5ef1-4b11-4d40-b317-c6fe87c5433b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5584f51a-b9d7-4788-a72a-177d74331aa1",
        "cursor": {
          "ref": "1707fcfb-f739-4735-ac08-f035e856778d",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "5a88a949-9aa5-4b47-96e1-e09cfac8835b"
        },
        "item": {
          "id": "5584f51a-b9d7-4788-a72a-177d74331aa1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8e3bd59c-63ca-4e59-9b9d-02df54e36010",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "52919034-a571-47b4-8722-6d6844a9129c",
        "cursor": {
          "ref": "29ea5862-394d-4ba3-ad19-b071f5042f7e",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a0869c2e-cc88-4102-874d-9520b23eba40"
        },
        "item": {
          "id": "52919034-a571-47b4-8722-6d6844a9129c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6143032f-d20e-4914-94be-b47fb27db0ab",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "e1d5b098-abe8-4131-b5a2-053b3541e450",
        "cursor": {
          "ref": "8c7af49f-0c90-48e7-ba4a-e74e309ec1a3",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ffa1e628-7475-4f03-b54f-7ab041f38383"
        },
        "item": {
          "id": "e1d5b098-abe8-4131-b5a2-053b3541e450",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "892e71d4-170e-4bb1-8dc2-6ff423a83e96",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "8de365fe-e169-4950-8b4d-e1a0f66df808",
        "cursor": {
          "ref": "df4110a5-3cf1-47ca-9c46-90604ac2f68d",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9344a4c3-c70b-44dc-9ccc-fc85cdf45c2c"
        },
        "item": {
          "id": "8de365fe-e169-4950-8b4d-e1a0f66df808",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "245a67b2-5991-4be2-91fd-2d89223b2a5d",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "96c9b20e-79ad-4dc3-a9a8-4dbaed27510f",
        "cursor": {
          "ref": "4421c5fe-7c52-443d-a7b6-3e45050663e5",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4f89c245-447c-40c9-bf75-aafd2d1546ed"
        },
        "item": {
          "id": "96c9b20e-79ad-4dc3-a9a8-4dbaed27510f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ef5a9786-1592-4af0-af49-68d32420ab6f",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a04597ed-fa00-4240-81e6-a31e59b3bdee",
        "cursor": {
          "ref": "b2dd9118-09f0-49af-b80b-44c2c746a6b5",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "ac123bba-381a-4bc8-ae0c-b71318fad901"
        },
        "item": {
          "id": "a04597ed-fa00-4240-81e6-a31e59b3bdee",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e6db4705-64cf-4539-86d7-71335dc0cffe",
          "status": "OK",
          "code": 200,
          "responseTime": 170,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "6efc716e-ffdc-4967-81a7-9623ff4011b6",
        "cursor": {
          "ref": "da0e9a1e-9cf2-41a7-9609-4aaae6c87faa",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "42a953c3-8e4a-4dca-a85a-5133cffa8376"
        },
        "item": {
          "id": "6efc716e-ffdc-4967-81a7-9623ff4011b6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ca052e3f-9b52-40a3-89c3-51b7da9d471a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1824f58-0547-4053-b5ba-f14369b8ecea",
        "cursor": {
          "ref": "4a3e19cc-b746-4fc3-a1c1-3896b1e1f4d5",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "026cefd3-f727-4db4-94b5-93308f43f1ce"
        },
        "item": {
          "id": "c1824f58-0547-4053-b5ba-f14369b8ecea",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ea38914c-ff43-4780-9a53-5a33e7d361d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643c0943-e15f-4206-85ad-7ee4b294fd0d",
        "cursor": {
          "ref": "cbdcc39b-839a-4130-b6bd-6283778c5416",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "78a8f5fb-a479-4b5d-9984-8d22ba312f1e"
        },
        "item": {
          "id": "643c0943-e15f-4206-85ad-7ee4b294fd0d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "cc6ce391-8454-4db3-880d-aedba6f2198f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3127b9df-7fa8-40ac-9aef-a2908fbc8241",
        "cursor": {
          "ref": "5fa30f53-4d19-4457-86a7-5cb5e2721279",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ab02fbda-89c4-4173-8ba5-3f95b208690f"
        },
        "item": {
          "id": "3127b9df-7fa8-40ac-9aef-a2908fbc8241",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "831b7e9a-6018-4a11-821e-660261c58355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066552de-fa42-49ee-aefd-bfb47b0da79b",
        "cursor": {
          "ref": "1b7ed0ee-c2cc-4f33-84d7-373b2275169a",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6674d675-43b6-4ad6-a271-a1377e0b839b"
        },
        "item": {
          "id": "066552de-fa42-49ee-aefd-bfb47b0da79b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "319f4478-df0e-42b6-af10-03f12a425867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733f73ce-3c6a-421b-a1c5-91c2b2023a79",
        "cursor": {
          "ref": "67f56890-3efc-4635-b4d5-b27bcb67fa89",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "91495201-48e6-4593-97da-60f33ba6b959"
        },
        "item": {
          "id": "733f73ce-3c6a-421b-a1c5-91c2b2023a79",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "71665012-7ecc-475b-ab4a-87aa76c8e1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16c3aff-dd92-45f6-bf83-e8ab94b49704",
        "cursor": {
          "ref": "679fe9a7-4414-4abd-9503-11c50677fbe8",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "9dd3b4a7-6a0d-478f-ba4a-cf6fdce52bd1"
        },
        "item": {
          "id": "c16c3aff-dd92-45f6-bf83-e8ab94b49704",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "83c57f6b-20ac-44c1-9a63-7bc5c5eb86f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e345fe4-2ec2-4a69-b64d-df848f6d85b3",
        "cursor": {
          "ref": "63e635eb-b357-4de5-a069-bb2abd642f1f",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "be7f8d07-b8a4-4e02-ad12-f051bcfd84de"
        },
        "item": {
          "id": "8e345fe4-2ec2-4a69-b64d-df848f6d85b3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "8e49aa00-46f6-4dfa-a54e-71ac3657dea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7401f32-76e8-49c6-a744-16604839d1df",
        "cursor": {
          "ref": "27acd604-9cca-4715-80bc-15cdbb88fbba",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1913c440-4645-4975-9101-ab22870452b4"
        },
        "item": {
          "id": "f7401f32-76e8-49c6-a744-16604839d1df",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9078323f-59a7-4dbf-a15d-acb68ffeab4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82701b4b-c1ae-4a40-91d6-53f5cef2ce8d",
        "cursor": {
          "ref": "02bb974a-c425-4df3-b39d-3ac2f6cb1a6f",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7e725c37-ee58-46af-90ef-fd2d5b170046"
        },
        "item": {
          "id": "82701b4b-c1ae-4a40-91d6-53f5cef2ce8d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c37312ae-60a8-4877-bd17-6c41af8a0087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b15d93d4-0688-4356-9880-0603a7c30d84",
        "cursor": {
          "ref": "eeba8614-a628-451b-b161-f80713d5a8af",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a464f04b-63cc-4d32-bf1f-9252978b1314"
        },
        "item": {
          "id": "b15d93d4-0688-4356-9880-0603a7c30d84",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7c6098c4-d2f1-471f-aa21-575c4ed4df17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918882c6-de2b-49ab-a530-39ef2342e2a9",
        "cursor": {
          "ref": "8ee97bb5-78bd-47be-b7be-b5f1bd906330",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "85159beb-6d44-4639-ba82-3b54df2d3fc5"
        },
        "item": {
          "id": "918882c6-de2b-49ab-a530-39ef2342e2a9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a14cae8d-1de0-4b51-b741-751c5539165e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4ade80-1930-4f5d-a0e4-f203ef5d0fc0",
        "cursor": {
          "ref": "475db44e-cb0a-4c71-8d73-79ba608e84e2",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c64eea75-23fc-4c7d-926c-c1035bdfe498"
        },
        "item": {
          "id": "ce4ade80-1930-4f5d-a0e4-f203ef5d0fc0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e41a3347-ee96-4820-beed-3a0eaffcee7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f2f7f6-d1d6-4ffd-853b-76da3b172e5f",
        "cursor": {
          "ref": "00c2d54d-0c84-498e-b0f8-f32c6afeecb6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "65444bfd-a33b-4b4b-9056-6c9346597676"
        },
        "item": {
          "id": "d8f2f7f6-d1d6-4ffd-853b-76da3b172e5f",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a0c7a529-e57a-4e93-8739-70d12168ea10",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "44cd8e19-7d07-495e-8369-d365f4500839",
        "cursor": {
          "ref": "bf6d4338-3d35-44ff-8885-1f2420ea1f47",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6c94194b-d7c4-44fd-b63c-c4a9b1adae1a"
        },
        "item": {
          "id": "44cd8e19-7d07-495e-8369-d365f4500839",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "40389117-cf3c-48f8-99d8-93fe7f705649",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a099ce08-daa7-48f7-8414-3350674f243e",
        "cursor": {
          "ref": "b1ecc560-2c59-47fb-bb28-79107f278b8c",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "db97f21a-4355-4f64-a113-1e6fa0ed0c00"
        },
        "item": {
          "id": "a099ce08-daa7-48f7-8414-3350674f243e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e26b0144-29dc-48b3-9679-4d62ae54992c",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "271a4b97-49ec-4c4e-9ea3-328c7c21b013",
        "cursor": {
          "ref": "a345d2f3-e288-4b02-a83a-0c8b03a433a4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "79a8b4a7-8ec9-4bc2-b964-fa29e0e0c5c8"
        },
        "item": {
          "id": "271a4b97-49ec-4c4e-9ea3-328c7c21b013",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fe533ff9-5cbb-4512-9741-413e82676885",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "776e2a11-e94f-4200-ad3a-bd6f3b8e006c",
        "cursor": {
          "ref": "a529a7ff-e1d9-4a92-8c98-d3ba8be705e2",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "52cd912c-5334-4ee3-bc61-cf754433c313"
        },
        "item": {
          "id": "776e2a11-e94f-4200-ad3a-bd6f3b8e006c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8f6a47e1-ab6a-44ca-8d43-ed69a5b7da37",
          "status": "OK",
          "code": 200,
          "responseTime": 289,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a15c3b6b-c1ed-4082-8985-5db32814385a",
        "cursor": {
          "ref": "3877a2ac-1663-4837-8471-878f5922b281",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3320ef88-6de6-4634-aefd-75ce873a51ca"
        },
        "item": {
          "id": "a15c3b6b-c1ed-4082-8985-5db32814385a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6bf30434-a748-404b-a050-61f919134403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab8908e-9286-416d-ae72-a19f2a2e8217",
        "cursor": {
          "ref": "581f5a3d-f160-4627-8cd1-252620553351",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "408dec1b-07b8-4225-8ec2-916dc090af56"
        },
        "item": {
          "id": "7ab8908e-9286-416d-ae72-a19f2a2e8217",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d7a669d3-3445-4cf5-a2e7-aaab30fac8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561dc045-660f-4294-b094-b9e6bc2490ff",
        "cursor": {
          "ref": "e51f5fa8-89bd-4db2-98df-03b5968be125",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e369c0df-22f6-4a97-8320-573973eae7b4"
        },
        "item": {
          "id": "561dc045-660f-4294-b094-b9e6bc2490ff",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "cbcbab8b-95c2-4e3e-b5f6-d298146b99e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6216aa3f-2cee-4ba3-b868-93761c128555",
        "cursor": {
          "ref": "039cf496-508b-4b46-a280-325409870292",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e849defe-11ea-4a3e-aac4-e500c65652be"
        },
        "item": {
          "id": "6216aa3f-2cee-4ba3-b868-93761c128555",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4d06562d-a7f4-4e1f-b787-351f1e3baf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fb9d15-268c-478f-a130-ace333ab9195",
        "cursor": {
          "ref": "c8a5159b-0847-48f9-9b7c-4b69583dab38",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "19f0e708-b5b3-4ad5-b454-b6c0f09171f7"
        },
        "item": {
          "id": "b3fb9d15-268c-478f-a130-ace333ab9195",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e835584a-a0c4-46c4-a00d-0baa129f7752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c16a74-5ce1-473d-bed0-fc8a0b2bf0e8",
        "cursor": {
          "ref": "d0923657-312e-49c7-9a05-7a0ae9fb61f1",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e6eff618-c07e-45d6-8ad8-cf800d9fbc82"
        },
        "item": {
          "id": "d3c16a74-5ce1-473d-bed0-fc8a0b2bf0e8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c489399e-d62c-4ee2-be1a-607804485bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "217176c6-5174-4d2e-b5eb-69f153a63cdb",
        "cursor": {
          "ref": "d0cce8c8-4c92-4298-8a83-8e967769daa6",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1d66eecd-d911-4462-950a-abcb46f620f9"
        },
        "item": {
          "id": "217176c6-5174-4d2e-b5eb-69f153a63cdb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "62475532-c4a5-47eb-a363-e7ba38046e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb40de9-f2ef-4e8c-b4b5-a22e61008928",
        "cursor": {
          "ref": "99a71206-ec48-468a-9d0d-8883851e505f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8a35993c-0d15-45d9-83d9-fb594d9d26b6"
        },
        "item": {
          "id": "ccb40de9-f2ef-4e8c-b4b5-a22e61008928",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "74caa2a1-dc82-495a-a885-464a11b63af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18fb9320-2d9b-44b9-a0e1-b1a00d7a5adb",
        "cursor": {
          "ref": "74d3b408-5347-40f9-bde1-f01752373fc6",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "396361d1-cf93-44a2-9a06-f79a4707f7b0"
        },
        "item": {
          "id": "18fb9320-2d9b-44b9-a0e1-b1a00d7a5adb",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d66a4896-c447-4f5e-9d7b-fac607ae4951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b91d76c-ba76-42ba-b09b-f71b6d6c8291",
        "cursor": {
          "ref": "8c1861b1-a49b-4508-afec-91e4371e0baa",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "13efc88b-3c02-40e5-a30a-1b71a9e56412"
        },
        "item": {
          "id": "7b91d76c-ba76-42ba-b09b-f71b6d6c8291",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b33dfd55-9725-45f3-85cd-ed72232da543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad2c4301-cc9b-48b4-9da5-a5a5f01377fd",
        "cursor": {
          "ref": "1b7699cc-c693-476a-9600-8ac86f97d7e2",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e594715c-775e-41b0-a84a-dc056b93fe28"
        },
        "item": {
          "id": "ad2c4301-cc9b-48b4-9da5-a5a5f01377fd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "55b3b4e1-55b3-4764-be12-ed89cf44ac06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21d48b2f-ecea-419b-bdd3-971314723e49",
        "cursor": {
          "ref": "5d89cf01-b5d8-4b44-910c-224e05fc9d71",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "abf3dd17-b164-4125-8d47-e04c53cef3d0"
        },
        "item": {
          "id": "21d48b2f-ecea-419b-bdd3-971314723e49",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a59f7cb8-d8a7-4211-a794-e916fbfd0a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7073c438-2b49-426a-8907-ad6b8ba31507",
        "cursor": {
          "ref": "5d8d7c97-049e-4138-92d1-82ead03b9a5b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ee2ed81f-4f72-4343-a86e-f5097bffcaed"
        },
        "item": {
          "id": "7073c438-2b49-426a-8907-ad6b8ba31507",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9a0b8dbd-b11d-4ef1-8af7-e54482184b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dd4e52-d817-4df8-b670-3ed08daea55f",
        "cursor": {
          "ref": "aae0f4d0-c827-41f2-9481-a3b673bfebfc",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "9af33fe2-c8ca-4065-bda0-a7db0a7b7945"
        },
        "item": {
          "id": "39dd4e52-d817-4df8-b670-3ed08daea55f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ce35c319-ed0b-4d3e-ada0-7bf897bc2d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5b99bf-a34c-446d-ba4d-b0e8eceb2d29",
        "cursor": {
          "ref": "a62e213d-f9e3-431d-a1c2-ec94d78f7004",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3d9e429c-ae0e-4bf5-9a99-7a36894c29f0"
        },
        "item": {
          "id": "5a5b99bf-a34c-446d-ba4d-b0e8eceb2d29",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2ca2ef67-9539-43b4-9b74-44048ed8b443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b93183-d73f-45c5-a61e-9a15c034869d",
        "cursor": {
          "ref": "5399a5e8-b38a-4edc-aeff-1ea4d6aadbd1",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8b0f2bec-41da-4fba-945b-0a611cd4ce44"
        },
        "item": {
          "id": "c5b93183-d73f-45c5-a61e-9a15c034869d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a6b55145-497c-4638-a075-ad16a8034544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9079857a-fb31-43f6-bbdd-99d1586348bf",
        "cursor": {
          "ref": "7915abf8-f4bb-4cc9-9e8c-94cc7cfd3386",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9dfa8977-6c3c-4094-96dd-892ede59e562"
        },
        "item": {
          "id": "9079857a-fb31-43f6-bbdd-99d1586348bf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5e182bc7-3dde-4a1b-985e-498ef450ab8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ddffd9-224f-4d36-a449-70661cca98c9",
        "cursor": {
          "ref": "32256bcd-1a18-46b8-9d38-51e0203d5f4d",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4bc11574-34d8-4a89-8ee4-e51390698dfd"
        },
        "item": {
          "id": "a2ddffd9-224f-4d36-a449-70661cca98c9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1bfedd11-77f6-4ded-8c2f-ece0d57d4e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18dcbcd-3628-4cda-bda4-8be8ccb97121",
        "cursor": {
          "ref": "fa16212a-bd82-4053-b1a8-1308d3554cec",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "63fa21e7-2c90-4276-b2a0-4058376a32f6"
        },
        "item": {
          "id": "f18dcbcd-3628-4cda-bda4-8be8ccb97121",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "332d9c86-5c0d-40b2-a6a8-6ea74d9b1bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ee275e-3b3e-4c3b-83a8-f46fe5ddb12e",
        "cursor": {
          "ref": "ca920af2-0947-4349-83a5-9eded11bb16d",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2d5b4f9a-725c-49e3-a879-30e8c28af154"
        },
        "item": {
          "id": "e1ee275e-3b3e-4c3b-83a8-f46fe5ddb12e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cc1c6237-4535-475a-8533-c0a5e0c1c489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1777d5-869f-4a96-bb2e-7bc4f80c5889",
        "cursor": {
          "ref": "68bd143a-3253-467c-bc5b-33771149cc9a",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "94b434c5-5dfd-41b7-bf2c-c0e965f09e19"
        },
        "item": {
          "id": "0c1777d5-869f-4a96-bb2e-7bc4f80c5889",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1974e585-c8fc-4282-955b-4c3fcb53a0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3f5337-ffaf-4335-a0db-a3f76526fe6d",
        "cursor": {
          "ref": "020d575d-aced-469e-bd25-6de57b36be23",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "29e9a70f-d8e9-4607-a9e0-98aa5ee3279c"
        },
        "item": {
          "id": "9f3f5337-ffaf-4335-a0db-a3f76526fe6d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "efa4b032-2afa-4cba-bb6a-6b2191d6099f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d46eaad-68ed-4c49-8a24-01f5ba03df1b",
        "cursor": {
          "ref": "d2f62c22-4e31-4fbe-889e-124f2e179f02",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "61e30697-03b3-4a11-8066-f3e560e3e5a3"
        },
        "item": {
          "id": "9d46eaad-68ed-4c49-8a24-01f5ba03df1b",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "81e57caf-959d-4051-88a2-c577ddd5df70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890255b1-f1b9-48c7-96c4-06bb6c10555a",
        "cursor": {
          "ref": "69c428df-c883-4dba-8e9c-8ffdc53c55b6",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "eae742e8-e7ce-400e-a980-4303d2d4a2e7"
        },
        "item": {
          "id": "890255b1-f1b9-48c7-96c4-06bb6c10555a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6af24315-7e22-456a-af82-a42432f43acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b0b919b-5a2f-4460-aa10-2a2b594afbe5",
        "cursor": {
          "ref": "53ccc51b-36bb-4c23-b39a-c9b438d39d64",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4696c08d-45ea-439b-ba13-6ff4a1ddb4fc"
        },
        "item": {
          "id": "0b0b919b-5a2f-4460-aa10-2a2b594afbe5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7ef18ace-20f2-4807-96ac-0c74f3905f7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efc6487-3e79-44ac-84ac-ccc7cee22913",
        "cursor": {
          "ref": "90403212-9645-46f6-bcd5-3e997841e309",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "090467f6-c82d-47b2-a8bf-3dcf5d0cafec"
        },
        "item": {
          "id": "3efc6487-3e79-44ac-84ac-ccc7cee22913",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e7bb8bf5-c1e4-4412-9259-b7e70216ba41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba66ec4-c633-4f0e-8c4d-2e22d5a9b54f",
        "cursor": {
          "ref": "0a02ccec-5993-47cd-a4de-4bab5ce5714a",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a79ebb0b-46fa-417d-aea0-53739fc93f90"
        },
        "item": {
          "id": "cba66ec4-c633-4f0e-8c4d-2e22d5a9b54f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "09bd3a4c-f91e-4469-ac2e-087a17dae35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c43ee3-91f0-49d9-9758-15ac1cdb6ad1",
        "cursor": {
          "ref": "13cbbd19-c184-479a-8c17-3a7fc08a603b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1cfb0c06-f413-45a2-80cd-a4548260a529"
        },
        "item": {
          "id": "81c43ee3-91f0-49d9-9758-15ac1cdb6ad1",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "dec57822-a6bc-495b-b226-e3a40edbbf33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc2fee9-104b-499d-95eb-8b19f12a495c",
        "cursor": {
          "ref": "3ea73ef3-7e91-4153-9dca-d229fe4b92d4",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "90f07fd9-7488-4942-87e4-ef2751dafda9"
        },
        "item": {
          "id": "bdc2fee9-104b-499d-95eb-8b19f12a495c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8304d9a6-5bde-45e4-b0cf-1a61b3f06d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b8f035-2fe2-4efd-9434-5c58ab52435f",
        "cursor": {
          "ref": "b8bb9c31-364c-4ab7-b572-795e39f5ef92",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "94bef2a2-944d-4f6e-8767-9e219f0481df"
        },
        "item": {
          "id": "54b8f035-2fe2-4efd-9434-5c58ab52435f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "18f02eb7-10b0-4ccd-823c-203455bc026c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819f7507-fb7e-44e7-943b-096af433c381",
        "cursor": {
          "ref": "4256b249-1fc9-4e14-8eb9-41edf97b69a4",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f17c564e-2f65-4ac2-9a77-f55024355bc2"
        },
        "item": {
          "id": "819f7507-fb7e-44e7-943b-096af433c381",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "902cad77-a6b5-4344-9827-1b64ba0e6da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080ddf19-3d68-4e55-b820-83a7b9728c3e",
        "cursor": {
          "ref": "72d4cd93-41a8-4250-8560-8c4b8ffaf777",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "8bdd8a89-19b1-4370-b883-4726726ca664"
        },
        "item": {
          "id": "080ddf19-3d68-4e55-b820-83a7b9728c3e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8d332f46-be99-4502-88ec-3933d04bc0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60273607-a8ce-46b5-a700-4ed538edc97a",
        "cursor": {
          "ref": "5df2d026-6fbb-49a1-b767-2b9ec85d4c07",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0fa20357-ea39-4780-95e4-952e8fcecb1c"
        },
        "item": {
          "id": "60273607-a8ce-46b5-a700-4ed538edc97a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "283dcd69-73d0-44f9-8551-47278cf89385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd05945b-0c79-495e-86e6-1b2670935540",
        "cursor": {
          "ref": "325aa725-2a0e-4c1a-b713-4451c1c68473",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "63a2c6fc-dd9e-4670-87a9-9383355ebc70"
        },
        "item": {
          "id": "cd05945b-0c79-495e-86e6-1b2670935540",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "5464f6cc-24be-40f5-bbcd-1a69960165a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b439e918-5d90-4785-b4f4-dd3afbcbe58e",
        "cursor": {
          "ref": "c1fcd3de-9b5f-4b12-a43b-f548395bd4d5",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a5d84339-0fa0-4bd7-961c-386c75ca9168"
        },
        "item": {
          "id": "b439e918-5d90-4785-b4f4-dd3afbcbe58e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0ba1adaf-3a73-4dce-9aca-d297829a82e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bc66b7-b5d5-491b-afd3-a3c51f12470d",
        "cursor": {
          "ref": "c02c4a9f-a865-4504-a17e-b3f826b28abf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "40184c35-bc6d-450e-a8d4-d6f401be5e63"
        },
        "item": {
          "id": "88bc66b7-b5d5-491b-afd3-a3c51f12470d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "e48ba4e8-60cf-4a6f-854a-72b30ab7526a",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "d1668d24-519b-4bb0-b727-a3eb2f8e0360",
        "cursor": {
          "ref": "4c5b0d8e-073e-42de-91ff-8d03f4a08bc4",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "78ba36e6-2cfc-4921-b251-6e7942f81d5d"
        },
        "item": {
          "id": "d1668d24-519b-4bb0-b727-a3eb2f8e0360",
          "name": "credentials_verify"
        },
        "response": {
          "id": "590c5e4c-958c-4be0-a97a-0bf8c5d09248",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e56f03-896c-4e98-b3f6-706bc66ec811",
        "cursor": {
          "ref": "d534e70f-eca0-435f-a712-79bb5407676e",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "06845653-dbec-495a-895f-cde4ed05b11a"
        },
        "item": {
          "id": "65e56f03-896c-4e98-b3f6-706bc66ec811",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5f0d47c2-83ef-449f-a5bc-7cdf581cea3e",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb9a893-d918-4f2e-9b58-f8dcfb0c0535",
        "cursor": {
          "ref": "9d21c820-02f4-4e52-9a66-e9a16bac7e2c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c534216c-8aa5-4c58-ab5e-87499d8c3268"
        },
        "item": {
          "id": "6bb9a893-d918-4f2e-9b58-f8dcfb0c0535",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cec46ae0-16df-4e48-810b-475289577b9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb9a893-d918-4f2e-9b58-f8dcfb0c0535",
        "cursor": {
          "ref": "9d21c820-02f4-4e52-9a66-e9a16bac7e2c",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c534216c-8aa5-4c58-ab5e-87499d8c3268"
        },
        "item": {
          "id": "6bb9a893-d918-4f2e-9b58-f8dcfb0c0535",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cec46ae0-16df-4e48-810b-475289577b9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73a2e70-6f5b-4a6d-a141-e0fcd5db040d",
        "cursor": {
          "ref": "8ad42811-45b5-4e24-b888-c0858c3f1863",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "894dda2f-97c3-4443-be57-7eddbf80c691"
        },
        "item": {
          "id": "f73a2e70-6f5b-4a6d-a141-e0fcd5db040d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6cfdeaa8-7f89-415d-80cc-5ac5ecc29952",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "096fdaf1-9117-4e65-b3dd-d506f2636955",
        "cursor": {
          "ref": "032bac5e-b86c-4947-a277-607c03db5a59",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "214b7e10-e4a9-40af-8244-b8983531fc03"
        },
        "item": {
          "id": "096fdaf1-9117-4e65-b3dd-d506f2636955",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b18c423f-1b29-4d00-b1da-521b64fa4a0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}