{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dd6a8f88-8ec6-4529-8d2e-f3c05c1c1911",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8d7e0763-8f72-41a0-86c0-4dae7c9c0e70",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3e258bcd-2788-4694-b3a2-44b32fbaa6d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d599b146-0ccf-4ddc-8398-f92a1aee3ae0"
                }
              }
            ]
          },
          {
            "id": "b5005e11-fac7-4d72-9d7a-2ef95ab03c8d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "840a94ed-88f9-41b6-8205-743d75c2ca66",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c9599148-f639-4ba0-b2c1-ad359fb9d24e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "cf6245e8-a688-483b-9050-cf924f4b36fc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d00b7f79-41f5-454c-b125-6f6ceee41c65",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8192fa64-4732-4945-a53d-401ee74fe80c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a61f1ca8-8c1c-43a8-be56-ae66b28aae03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71aba924-d70c-4db7-b900-19e1e3e72ff7"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3a821e95-8ccf-436c-9a0e-ba274d066269",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2784d718-b266-4fcf-9fab-d9099ed4290e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b4f74e34-95df-468a-9efd-cec86d2167cd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e79d1b0-3202-4cd1-b689-a3dfb5a8aaa7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4516cf4f-b145-45d3-b120-45e22875f000",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fda78bd2-55bc-416a-b028-e3426cbd79c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a1e8f5a-92ed-4f8f-8764-663bd3c32a9b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b1da525-d913-4d4b-99d4-df181072445c"
            }
          }
        ]
      },
      {
        "id": "2d4fdeee-f0e0-48d3-92d5-0632c615149e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "17deb302-6e06-4107-b376-dd629ca10378",
            "name": "Negative Testing",
            "item": [
              {
                "id": "059fb878-b293-419c-b999-fca900d9f21a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c3457a48-8f43-4b61-83cd-f734dd667e61",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f8f9b9c-e999-4e82-a0cf-e793f047f8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ee1e6458-eefc-4aca-889d-eeb1ca6da0d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd10898-4cde-4559-8294-8e1fd22e3fb9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b39732-1b30-4d89-acb6-65efd2eedd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d60339bc-3b53-4235-8c05-c9f595131aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be1c2b3f-d441-4454-a1fb-e9843c7dad81",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341708ff-d7b0-4d4e-b9fb-e3b686edb02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "986f6b85-5cc0-455b-9bbd-c019442da7ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f44cd079-829b-436f-a6d2-3a112cdd6c5f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "267a9be8-3175-42e9-b26a-031a002437b5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1834295d-efa2-42b0-896e-b08217a46120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8e52ce8-1bc1-4649-8492-37619707152a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241c5973-08c0-4a16-8663-8c4349c52ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febefcaa-b18a-4285-8b16-23c485b66704"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "59c2b817-2f2d-4515-a9d9-75c340cd35d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "16ae41b1-720e-4b7d-9d0f-4446ff8168cc",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9efd6ef7-1850-4541-a0ac-7f22b09627ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2bead1a0-49fb-47a0-a88e-bf337f2d8e8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d364579-8098-4e9f-9f64-c62f769fe721",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ad92049b-b11f-48f5-9450-78b26350a5eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "783b7cd3-9565-4c38-971c-9c9cb2c26531",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b1a5c11-226e-421b-9743-4f02f565f9ab"
            }
          }
        ]
      },
      {
        "id": "17808657-0138-4317-8ca5-5b6e63de2fef",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "50e7b45c-1274-4c35-9978-c6e40052e26c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5095902a-299b-4a74-962f-f9385bc67552",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a79b9c5f-a332-4ed2-9d52-94b754987c5a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de680ae0-9e4a-4a4b-b74d-f01e3710a241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed0f390a-acb2-416f-9a07-d6b69987ea8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68772dd-12ce-4b91-8da1-a6c61e994e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca73f1be-e253-4e03-b782-7c062c042ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb1d88ba-a225-4925-84db-1a5208e7e83d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc4b91f-2980-43c6-abee-eaf2e1cdf551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff71eb88-7ac1-4077-a0bf-abdd0915b659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a2aee4-3cf3-4d50-af5c-8c1c65ed197d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03ea1d81-814d-4059-be43-438a358f9f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a19dae-aa0b-46ab-8f7c-0a1cf9951106",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8e9e75-0a98-43a2-a45e-f07d080cb9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50d7f14-75fe-461b-876b-e850a49450df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a26551-01c0-4ac0-9031-09a7f1054869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eeac19b1-217c-4f31-8d54-428cc60c60d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c498391-df47-44d8-867d-751606e4fbbe",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9436a94-b889-4550-901f-5ac424f6cc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba63e221-c6aa-49f4-9bb2-ad5b6e59e7dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a229ef-e2f6-46f3-8677-ee705de54a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b671c59b-2434-4015-9174-0f0c8d751af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26254fd4-db8b-4cf8-a4dc-4902da2e10df",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74b862d-d82d-4edd-9f6b-a46432675569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5838b43-b170-4bf4-ae1c-46170854586b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb95911-a4ff-4598-b703-2ed81123ecd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea742483-b8d1-4b83-bd9e-b85298a85add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876af093-79f0-4c8a-95d9-f8f5c318343f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "161a970c-5fed-4392-885c-b52fc7f4d68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97709a08-8de1-41a0-9950-8648adb18d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6e37e1-3131-471e-99fe-badc623ad431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aee94ce2-7990-4ed6-b128-33beab2a66f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa9db05-61c6-41d4-b744-cfe6abffec43",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be62fe6-4c30-46fd-b3f0-fdf411ee6494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031d7261-6475-400e-adb4-8cb602b57b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4ddad3-058b-4fcc-9359-3bfb3c585bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72ee973d-f2f3-4e63-91c8-d274a4b5f6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0feca1d-d4e9-4729-917c-764369d032f2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f40e97-7171-4e1b-88ba-a297ef5dc49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c3edc2-9c62-4878-b2b5-da0bdbb47da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a45af0-22e2-41c9-91ab-11a706ddb44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfa23db6-7897-4c34-8583-046cf21fde02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8511c34-4914-4c52-8364-f60a0dac06ea",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5c43d8-4f26-4479-a227-f81ccae685e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fe77ff-f5cb-45e4-9628-3d71642563a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b81d15-4258-4223-89e1-4c560e4ca8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ae52455-383b-4f86-a7ca-a7cf17cc0e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02617914-a43f-4927-a7d1-930bdc39535f",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f40e00-3287-4973-bc81-daace70e54f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013ebfd0-cb04-44b0-8245-efa7f401be58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32d3208d-271e-41b4-aa60-09c5f13dd455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1f10c5c-f227-403c-89d9-a630be023943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41dc7d8d-30d5-4198-8b04-e836481a8646",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7211663-a14b-4b3e-91f9-af027c2623d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87e29db-2a0f-409c-bec5-da78ba7ce37d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305ce252-dbe3-4a6c-8ac0-9d58496d322f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9812083-cf4b-4f38-9b57-abc9cf6ded82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09000a18-5b5a-4726-bae9-91c3a1fee541",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4beca503-8eaf-49a5-b5ef-4fe99cf6dc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12c2d02-1235-4afb-a7e1-4fcbffe28e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbff85f-a4d0-4a66-b57c-25a03c56bb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d0ba51b-f613-43a4-a4e7-cd76286ecf46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c429930a-9509-4405-9566-4d3ee47e8057",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196e79aa-32f8-49b5-b99f-0f8f8720b055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf0feba-0442-47c5-90cc-3bd328bb2b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff4029c-7f58-40bd-b995-48475a4124a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37b32b75-d94f-419c-befd-9144e90684e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827b891d-ab1f-4fa3-84bf-96f80b78a16c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c5f0b5-52d5-439d-9967-0a9973b469dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e78499dd-ed06-4dbe-8188-6ed3ac370766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37fddc25-dfe8-40f9-8c6d-703f14ff9815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cfe4cda-6420-475f-b3ae-2a4a2a4127f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5731385-777c-44d8-95f2-850a9f2102fc",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83101153-54e5-4679-876c-b4489c1b1f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebcbb374-0747-4a0f-951b-9b55b5e41b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab4d950-cf0c-48e1-b2e7-c9a1930e14e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07278a00-5a45-4cf4-839f-6ebd6f4bdae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "902298a6-c07f-4e2d-b4e3-ff190066630d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a99a4bb-49a9-4b62-b0e0-34e903805703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2b7106f-3e71-4fcb-b9c9-b1f99a5b733b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7117af0a-b65d-4d2e-9e5e-6b135ee8f7f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8019193-dd6d-4252-af1e-d1b45870f111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2737c6d3-c178-4b2c-b0b1-be172d53ad23",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eaa67d0-5751-428a-9d1a-2951cec83387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "618daf56-4386-411b-881f-517400c92365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d93932-cc8f-4a96-91f4-80c64d73dac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4db3b479-aa50-4684-8589-ed842d799b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc784790-0108-4ebb-8d72-034d04485b5b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af2a485-be91-45c0-87a8-7348c13c8069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f0b96c-4eb7-4703-9aa9-b034227d7b66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6240681-85dc-4e42-b1a9-c16eb902a324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc2a88a-bad8-4ebe-b3b4-4ed76831fd0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6707cb7-bbee-4a78-a88a-92a3a7d39cbc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59548ce3-7214-4a83-80c6-f4f9ad36e2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dea14392-ecf8-48d9-9b3e-dc4cd4fb14c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9521b42-bce4-4eed-8e5b-c3d8f6b06f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dac2b21-4802-4dca-8cd0-7dd9faaac215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd9814e-54cc-455b-a3dc-d6d9db465aef",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ccc2c5-7e06-4fee-ad25-77bc4fd5dc77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c6bd444-2874-40f8-8f35-c931f4aeb863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "652c4ec6-527e-4ed6-96ae-d86ec7a1ada9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4764bb4-0ec5-456d-842a-47512829f4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2193a42-3d52-4830-8e13-2a407ffdf4f8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ff7999-1668-47ed-98b9-73485817ab36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ca1ce4-dbd9-454a-97f8-c1d7527eec3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "075e47c7-e99a-4078-b523-84d0eb9b5e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e200df8f-789a-4a97-bacd-e4782d5ae4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb9fdba-d49e-4074-a44d-664002608423",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feebc46c-006b-42e3-b9a2-faa5b8705902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59437d45-e20f-4e2d-aba7-7ac7ebe10200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29cd0083-1618-4fc8-aa10-82d15c301385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8799a125-60f0-4efe-8700-d9e03c48f1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfeffe3-f2a0-4e0d-a7df-bdd03b2627e0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "551fac31-1f50-4eac-9aa6-a80347a2f030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3c55b77-ba3d-417e-951d-b2d432f142d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f656bb40-a936-430f-b7c5-0a5eaadca048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "766a4db9-ca8b-42e2-baa1-5c85eaa55933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3594d2-dced-4d38-beaf-4028618c6bc5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff2974c-f353-47b6-9e54-cb4769be9635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc5aa1ce-c6a0-49f9-9c6e-c23d624f881e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d920a0b1-0b9e-4766-b9fe-0e4ef517bba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "210991a2-e541-4269-9b56-bcd93c7faf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac2fc38-a14c-4f57-bee0-09f631b2c9cb",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e72a2a-58e4-4ef9-a714-1225253106ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73056a82-0761-4c14-9d02-6f1e63badd24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5f1282-4ff0-47a5-ae8a-1ad3022d22c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e930e701-4807-4001-aea4-85d2ca315179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988a5709-eee0-49be-a8ce-5a5729c8df41",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d904a77-1998-45e2-89d3-f337a9054ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b17733f-0415-4480-b259-dd176aa706c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2348bf-1c9c-4692-888f-80ad226d9e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a83c57-bc50-4389-821e-fb95c3d06f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cbc9ae-f7c6-4090-9b04-2dc0c4bb9424",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b45b1f-3209-48e5-b541-f3a205c1f6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94543460-cc00-42f5-a6af-e1e5ddb8bf50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1360f308-2570-4740-86ea-8a16e58463fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c50fcc97-bec0-4ad1-a438-8ba56d958ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c01c6bf-cff1-4eef-b2ab-946535928e41",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d717e6-3858-4948-9ebf-f75063b79737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fbb7f1e-fd89-4632-9358-32aa0f07d855"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cc5409-6055-4fa1-8252-db7ba0f4824b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23eae9cc-26bd-40a4-b88c-86ff1b7ec791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab2219d-d908-4ef2-af02-ccdda3277142",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec5d3a74-1a59-40fc-b3b3-0404b8189118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88641ed-f037-4ab9-9f6e-365421886e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7006f8f8-e899-4734-bc52-ecd1ff6823d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "351e02b8-b940-44f3-acff-942b4801a17e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7648bb9-b3b7-4c1b-ab1b-cc73de3e5fde",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac13512-1f5f-45b7-89c3-3f536e2ffec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4847e6-9f20-4521-b949-28c533391a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76ad456-dffc-4054-9e3c-70231e02e025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "39f933d7-0306-4dae-99fc-edac7fd4bd61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7485f6f-2a62-43ef-ac81-a7c7145d3bcb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "232d1fd5-22fb-44e6-8b6e-c2951bcecbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b21add-abb5-4ed6-946e-d054392e368e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3da030f-ed5f-4610-993e-2b5a06bef350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b910f63f-b092-432c-97d6-e5c8233f0a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083410a9-1cd3-400d-926e-e72073ae53c2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ec09ce-df06-4b56-b6f1-e9fdf281afb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee95cc1c-9cc0-418f-86f5-33a7e8a9cc6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205f9c38-7526-4816-8a41-a9e2f4ed8c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "200a9beb-26e0-4a74-9d56-b5d15abe284b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9a2dec-6498-48c1-b998-f60ab5b75b48",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ff3b53-802b-490a-ab5e-b10eec08c717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93318be-3054-4aa0-a02b-a0a96532f52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2ced61-e9e7-40a5-9012-946186558c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "23c154ff-e0fa-4afa-8e73-638b280ec270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f14f929-440a-4677-9834-2b2d374efdfe",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ea18e93-d414-43f3-bafe-31dd21488538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfcb96d3-d360-4d34-8868-31e142411781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cfa79f-2086-48f1-80e8-147c6b2d12d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebae537d-6ce8-4504-adf8-23928e7a5834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6295fee-a8aa-457b-992a-78c42aa34cb1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100a980f-affe-47b6-bcef-059b9215455f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241a5569-512e-4b01-b4d3-0031f535f47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850a9aa5-032f-447d-aa84-014c8eb58bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "14f8b15c-d427-4c53-9fca-6b27161e6fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a052d3f7-5d90-4fe0-a2c2-001cc5b14434",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c766e498-4064-4a12-a768-61ec9cff2574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9400627e-0ab9-4fcb-be64-155a9a472711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99649015-428b-40de-8dd3-49c146eb29c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f41120b-8acf-4117-8a74-20fa2afb922e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22e736f-0ed9-4891-815e-864e59162d72",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd8ace1-db91-43cf-84ca-3cc08ced148c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e545589f-1b7c-4800-8748-64d56becdac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429c4233-afe9-4b52-af53-d5ebadc0e113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4badc71-b2f0-4a23-9411-02644a5d683c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ff8d43-9312-4601-95d2-cbad8f5b8f7f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae05eef6-2f18-478f-84f0-de56c4193a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b8359e-0760-4c0c-adb6-e8a2dfe8d540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef89f9fd-ed7a-4cf1-88a7-492327d35ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "64b309e6-1e3d-4fb3-937e-2d232ea93ce2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2780613-d7d8-4383-896f-f05c59d25c64",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d09e39c-c71b-4ffd-8ffb-d2cf253402b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695d9a27-bbec-42e1-9b66-ce57db363af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09613cba-6c5e-4e7b-81c0-a1d4b6ac1997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ed6b28d-eddb-4c30-bb82-80e0c24319b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de51f20-0478-44d9-82ed-82cb69471c59",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d16792-208f-42df-aeb6-60a7f8f4166e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f1a40a-c24c-4f1b-a060-dfad8fa55dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fc7209-7b90-4668-90f2-cdcb3754f59e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0db1a4b9-c3b0-4d42-8419-394d4c522958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ef2cf8-de0f-4612-8008-bbedd8bcdc9d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c54b63-f04d-46e2-93df-d12704851bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c961065-0cb9-4cfe-8cdc-a3e4f5bddf3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c69efb-5f82-42dc-afa9-458d0934e7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "61d9765f-38e3-4044-94c0-00797ae970cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77effd7e-3f5b-4107-9efc-7606a179fb5f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4926ba-476d-466f-b73e-d91649c48f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9522cc-1c88-4f7e-9f27-b1c8aa4bd3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b1e398-707f-42dc-a608-4fc18aa34106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5091a1d7-9457-459d-8c0f-b7179228084a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94cda48-a851-4c3f-9f3f-2782a584b272",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feefefe6-0c3a-471b-bcfa-1adcfd54f97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c044dc78-4e37-47f6-b475-d8d76c45afd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac668530-6639-4b17-b40d-0c6102dc9036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "33984be1-4b19-424b-aaeb-4e7fd331e0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "171fa77d-2575-47bc-8212-867938f555dc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc6a748-e22d-47dc-8db3-4557b73d7abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa86aa73-1a17-4dc4-92c1-df89ca6da9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21579852-e56c-4a74-95e5-26045d02d6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a44778c-51cf-498d-99d5-4ffa4b2d38c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80cd290-00aa-49b6-ab0e-d967636908a4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d71a82-e333-488d-bf8d-309facecc2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f5e07d-7134-46b2-bfd8-c772658e5ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ec5743-5108-4a3e-a97a-0db96474f0eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2310e2-9ddf-49e9-935a-8d51d726955c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c02bf0-69da-4831-a11f-f6e0f7058d5b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dddbe9af-635f-4653-9049-265140ce34f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f64981b9-4a6b-41c6-a577-d5b93d99d8ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013e11d8-b33a-4574-8d20-d17fe3776150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2a984f-4787-4695-b2b1-cf4f84d10cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d418c09-7cbc-484c-aedc-c86acd2efaa4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e9dbcab-bcc4-4acd-a399-c4d5fc16e3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1ade8d-73b2-48ac-90ea-679cfce57753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781fa116-9f99-48d3-96a6-0e8da15d669a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0225bfa-2e72-42d5-92ff-25df9de49a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9011ba3e-5b48-4b20-b8fc-664b8ece0d4a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4801c6-ef6c-409c-8f3c-cf0bccaa97e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4465292-e9ef-4e8a-8e8a-ccc6df06437f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ab3ae2-d5b6-4859-9ad8-b9d502c4abc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14df4f49-dc91-4807-bde3-e462e5f62fc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e92fc5-08c2-44a9-8860-2b750be8d3ab",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3483c5b-cdfe-41c5-8f50-3b54474001f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f6b4c3-6a8d-41c6-a92d-23ca232e4aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faa52760-b992-48dc-bf00-eb369d05507c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b88b616-5cae-403b-aaa7-4c8783fdf95b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef36323-33c4-4130-981d-e94dbd611693",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cb9da4-5216-4fe4-a31d-d15c5ecdac55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca61e8ca-5b50-4243-8c79-630a604d1615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8bff275-46b7-4f9d-8050-31c9d25c5712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0215fbf7-020e-426f-a6d3-9279ccd9f376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3194aa9e-8262-45c0-a280-24335cf5c7ee",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18dec9cf-a683-4689-981c-2f95572f1bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3538fdc0-408e-42fa-924f-b22f09702df3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c8b01f-5575-4fb0-8f6b-25be4ab31860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9d9b57-5b14-4a9f-8825-9097bcd87c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001a1536-1725-47fd-9c15-c15d8041bd6d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf6d129-0410-4463-8a6d-ec775be41ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "642ee65f-facd-4fb4-882f-ee8358c7f79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccf0324-c584-4d5f-a167-8ddfb5ec04d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef031476-7fd3-430e-b983-e4c4fccf578a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988c8e04-8781-472c-a9e4-8afea7205cd3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88208a40-5b06-4a17-9bce-5871917cceae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3fbb27-a3f8-4276-8bc5-c289abb403b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fa3d4d-ce49-4431-ac66-aff75101aaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25365e99-a646-4498-920a-0fe16dbbba4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c89f40-866c-402f-8fb9-ce71646572d2",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "361e800a-9ce4-4502-8a97-fd825ee8eea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79d99a0-574c-4598-8a4c-ec3e82d84017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c53075a-2800-4eff-b8f2-191777eef52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "beb5801b-7aa1-468a-ac83-67ef6dec75e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f7b9c1-385f-43a6-a304-e7eed08d081a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fd536f-773a-4035-9cda-d1c38f261780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa7458e-18ea-4978-b99a-4ba676dff95a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8644e6d4-75a5-4d5e-a8cb-6d6f00620325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfe9e23b-d1dd-4f2c-adb3-05df90304435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dba6d5a-e46c-4042-a756-12a659ec53de",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469937c0-b6f9-4c4b-b462-8cf827f643ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2a8128-e522-49fb-a080-6f98b01fb823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca2e35c-100d-4853-96c2-2f4ef0ec869c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e4c585-8aa6-4bf7-bdea-3a3a534458a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a72c58-42e6-4b69-93b8-c0da242e7046",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c341942f-9dbc-40e2-b87f-f76f389e9498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ac908e-11bf-41ca-b996-ee3cda127796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da42554-f59b-46b4-8097-f69e6172baf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b303944-5c11-434d-9f74-1c6a3a3cabae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590f786b-ad14-4a97-9630-d2c8b203cfa3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0cea3d9-016c-4d27-a908-44e6acf9eaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b292678-396d-487e-9d78-13dd6c8c03ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31c8b5d-c15c-4243-a1a2-be5c0589297c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "913ee8eb-304a-471a-9cd1-eae1d25d971d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebc2aa79-de03-472d-b485-26c479af16d2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6703d84a-9bf0-4a24-a57e-ae736b1b50fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c538fe2-c662-43d6-8862-ff35eaa26a03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ef9cad-2e57-4a7c-a3e0-04429613ae76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5816ca-f07b-4038-87c1-3b4de6f8a5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf4117d-2728-4d08-8e3c-312785acf8e8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657aee42-0ab4-4811-b521-b3c6a80b968c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361f6ae1-5ba6-4aea-bf74-1ac44fa2320f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b79abf-ced5-4cfc-804e-a92b9cbe2d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d77b56d3-565c-4b5a-bdb7-57392d5c0182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e65316-b682-4340-9f85-e7a6034681ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bdbc5b-ac54-40a7-aaeb-238df114e216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc74f98-61f3-4d80-916b-d58bf9a44fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c117b6-9291-494e-877b-bfd07902d83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d24c8edb-d68b-44fe-838b-77ecac57027b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e065763-b521-4634-bd12-da538ccbe8af",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8988aa0d-566d-4744-8c3d-61a8937c6987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16c8de7a-4d1a-406c-8c98-1e55297ff0a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696454d5-7c70-4427-975d-767ceac16888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d95f52-0d67-426c-b4e1-1087d8e1cd26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182aad02-b164-4f42-bd52-360777a48d16",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc93858-eb9b-4352-8770-884c284d8d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d673754e-4097-4b27-9d81-5d858b8199cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c295b8-b8d0-4e55-9457-1b142aeb0c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a2c1a45-6181-49c4-90e1-9af9521c9b99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d9602f-0d97-4ee6-8f49-8beff9661fa6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d101394c-7807-4cab-8c6d-3fe2ba327031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c5102e-260b-4e6f-b970-d9060d4ac468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b9f6d0-28a1-477a-92e4-5d542a737054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "694bc4ab-e84a-43e4-95b2-690a645312f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88286ac8-047b-4560-aee0-43da4a57cfe5",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10fc125c-0090-40fb-bd8c-5ad6f36c2670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7893b953-e6e6-453c-988a-a44133ceb0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8544493f-358a-4949-af71-08a5e7f5ea56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97e29d91-3bc3-4414-aeee-e56421abee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c87753-cbbd-44e7-bb71-134c3300d60f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a64d47b-9772-46ff-b05e-c5ce0e980699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de21b43-82fa-44ac-88d1-89c0c7148ac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "419af228-69d5-4c45-8629-714463b3922b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "365f60ec-b6fe-43da-977b-60a4a9d3b9f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448cbb79-c366-4e31-8e66-4e94df55ab39",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18ad890-2861-43ad-ac59-c29c2eebb4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438d6051-edcd-4a22-8209-71d60ef48c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b73c066-3919-4467-80d9-1fd02145b0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba98898-7e49-4537-902a-58fff587c555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc28c0d-bd00-483e-9a3f-e30256137d4d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f215d2-744f-46f4-ba11-1b4708e6c0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c9ffa72-536f-490d-b293-3e9963f35002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e0bee6-d32b-4fd3-894d-cea1e2f81432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0db6456-3586-4a1a-ba7f-17c64b216cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1652485-0ef5-4f86-9640-944d690e11c9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500f2b46-bacb-433c-a52b-2879a6880016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f551de6-cd7d-456d-9aaf-e98468b3d136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e363737d-9dbb-4251-8541-e651e8536d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b9f427b-1946-48fd-ba26-d4dc685336ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801fa6e9-a5bc-48b8-b1f2-473943a69889",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9254d38e-a01d-48ed-aec1-34254d36652b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66972c80-fb92-4de2-9863-f810868c7ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a394f6f-86d8-412f-bbcd-1eff7e5fd9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c6ee24d-76d7-4a2f-87d3-a02212250aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f443a27-3906-40c9-996b-00ca193e902e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cccbced-d5be-490a-ac42-d16d94b34c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1480912-6da1-40a8-98cc-3b7a07dd36ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81120dcd-7dee-405a-8e21-896ee921192f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4644b5db-3c9f-403b-95f4-66f07edaf7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4a34a1-7315-4921-a4fe-fe5a249ac558",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d4481e-86da-448d-b6c9-bcc293f81dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35c0aeb-36f3-4b9f-9d27-8164990f50c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c24b36-b5e4-49de-b7ac-3418dbfc473e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "410d0c26-1338-44cc-96e5-c1f1ca6c1ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20fe3b5f-080d-4838-89c6-09c8e3bd6a57",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44f478a-e568-4423-b107-5972a07e4faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533787de-0fdf-4ceb-9f0a-eee1f2990d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6e1088-6802-4e88-98bd-3ad6c305d0da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "01acd18f-acd8-493a-8810-91f95b4bb011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10cb4cde-fb9e-4ad4-84de-f81869bdb6fc",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc272e4-1903-440c-b07f-6194a7102a0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b02d313-0ea1-4fd9-a7d3-93e73378b5b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3d6da1-a315-4091-94f8-125fc2141540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3861505-a638-46ff-84f5-efa68b330057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b61fd3e-b026-4078-8055-9985a2e8992e",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6fb9a8-08a1-42f4-831c-dbf226fa3284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeaa2b6a-b599-4a00-85c9-3e01b15a1fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2b6a56-f828-4cf1-84cd-85b3159e33b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "acde4bd4-940c-48e0-8f66-65495880352b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba389768-aaab-45dd-ab42-6b9c366d412a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665cd25f-1e87-42f3-ae90-042baae608e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15bbf92f-eed4-4ac3-85f6-56a5c24142fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d1a431-5134-4cb3-b90a-d8416af9d999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3e7c0d8-a6cc-4ab8-b850-3276deda9a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf85364-822f-401b-98c4-03ae15981880",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167bf209-f375-415b-9652-778a05a1d12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f38d9cf9-239f-46e9-a041-f1c6713433f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b74de52-1f55-4dfc-ac8c-9192dfc62fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "529a93d6-ef09-4460-9cb3-1b8ca1f97395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52830b2f-24bf-4724-a210-427137b8bc68",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d0ea6e-b2e9-470c-8d7c-66d7e0a050b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705be360-1ae3-4938-81cf-881c8fbd8bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6180487-7430-49f1-9c99-88746ce8986e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b175c9-6b4b-41c2-93c9-2d831d86bde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da76f43-0cd2-4991-b528-df20e4e4e7ae",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1bff4b-3fde-49f5-87be-e3ef3a21a5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1733698-73dd-43a2-83eb-de0ac6d6bb01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3498355d-35b9-44d8-8836-f418a4f64152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3559129e-4788-4830-bbed-d8f980f91350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9899ee99-00df-440f-9197-dce1a79b80ee",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1f27c06-9a5f-461e-bac4-6055fc409ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130cfe09-6378-4b96-bb69-2fee90974ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c556e1-4310-4137-9f1d-d0840b38fcb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b501b19e-58fc-48fe-b224-49ad2a0a892e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab04d4ae-fda2-4a14-9823-d46bc8264673",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b49d410-14b0-4ebf-ba7a-0670c98b456d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f91a94-e785-427a-a661-5fbefdcd6345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1932609-549b-4981-b12f-27360af123aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e5f8ca4-cfa0-4056-9de3-d3fe2471ff2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa13d4b4-e9b9-4d7f-bceb-7c073214235b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77e0e1d-707c-4bc6-ac21-619bcf2faadd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa799e4-bc37-4104-971b-c7be08cbb14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0865fbb0-5598-44e2-8c8a-4f9501f72315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "126a58f9-149d-4f18-9ffb-fb3385cecd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa062eec-72c9-4469-8ff0-97062a716416",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc202e2-e82e-4fc1-8c04-5c9251f900f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2482a855-c420-43af-a454-8a5737e1fc18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe73b894-ae26-465f-900f-e83b67e7f715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87b1305e-eda8-4666-bae2-bce1e7e5905a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ab0ff9-ab53-4124-8fb8-e2ba33ee06e8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d90e1b15-3c23-44bc-8f40-301c2cf1b29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00babe0-e178-4267-af43-1d1358ab617a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "767591cc-89c2-4c3a-a00c-8116645f55b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f561ddb-485a-4921-8425-bf90486ec3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5391d3c5-0756-4be9-a618-770946813064",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ed020b-929a-4e03-8b26-9a15a47e79a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75197e9f-6ff3-4a10-b3cb-2103ebabffdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25ccebb6-f1d4-4a47-8588-f35574da462d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "808c74ea-3177-4ffa-916f-309d166ca15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e06884-2e2a-422b-ad52-f48735f78568",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4af7602-2c35-4924-b00e-aec94e216310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ca18d1-cb78-4ca6-afbc-daf5cffd53b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac44728a-396a-4584-9873-72c13cd5f7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "60c88bb9-7901-4cb3-abc7-a37f03eaf560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5a5e8a-282e-47d6-9b93-67110b294124",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dece39d5-3058-4b9a-a306-a4f54400d132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ad3414a-b24d-4ed5-9798-6c5afb8fe542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3155840a-676d-405f-8653-7b77d0985e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab7680c-1568-4280-9a2e-02311b534963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ff2652-ff94-40e8-a65f-87ec0e53713e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cc9318-9ff5-4935-95d0-0496f6935b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d9683ee-34be-4115-ba43-40153c2c3b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32f3748-6072-4d1b-bd4f-c9881a407942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "72e14331-099f-4e96-ada1-2dca85219e4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c0c0dd-7d37-4d19-bd39-e1feb43b9d3d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9d89b5-1edd-4ef3-ab30-c1cd326792df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1c894c1-66bc-453a-a8fb-4c1653e256af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281c38f1-f6fc-4efa-acde-88338c48677f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7d9afa-03e7-4a00-8be2-e35a2ae3a4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e3bdd3e-603f-4218-8d43-1cf3584a50c3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee7706ed-06c8-4d01-9d7b-6a91e4d32a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1564ac-27e0-4685-aebb-2400874d9814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdb6ebd-2297-42f9-ac86-c71ebe851ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b1ce20-41dd-4725-969d-fcdd7a404769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6115e0-1c8f-4a8c-8f3f-f38adb41e2ec",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb6e6c8-8cd2-46ca-b7e4-04a359d41ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94435852-8b44-44b7-9005-49f348776bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bb8b72-fbef-49f0-9922-2bbdd3335490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f3b50c6-9ec3-4ce6-8dee-a9c69cbbda97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e48623-109e-4f54-a48a-c8d966aaf354",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f495863d-4914-46fa-a39a-22734af671d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1d24f60c-bde8-4281-add0-672ad26f7c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b50e2e-b646-4a26-bcf5-4ffa9a290ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "58daba3c-7dc6-4f29-af58-84d5ba65a7cb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aa5280c1-6a4d-4870-b385-e9cd842ecfd6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e7dabc3c-4fe1-4892-b674-398aea16341a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2ca241b-6d72-4fe6-a841-c8319cee412e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2b2ad24-aa9c-4705-a1c7-043f3fd70fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad4e2215-bca9-49ae-a749-9cd45332c9fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "040e6510-1171-42ea-9777-ab52d038e353"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "662aeb5b-e2fe-4d5d-aa02-907b529497dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76e63a6a-a46b-4864-b6ea-9d10b66f4e85"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "49dd090c-9b7b-4410-beba-1fe6f2b2a53b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48010c8a-9e1f-4df6-b77a-03cd2aee09e2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d6c55c3-ac7a-4559-bf9c-6cae0d6f5868",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7e5c4170-0d1d-48e1-aac3-97bfe0b3f1eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "341ab5ed-517b-4557-89e7-ffa0d5ab03d4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "55bd9e69-b3a5-4922-9296-572a1b3f8268"
                }
              }
            ]
          },
          {
            "id": "d6d7f7b2-646b-40fc-8ec6-5e5d399d223c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ad40e40e-65da-4b2f-b4bb-48324e09628a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5e94265c-cc6a-4c0d-b148-51a4e3f4ed40",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1b9e88-6209-4494-9242-a20c9ed10e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4b984f70-9c10-4ecd-9cc2-e020e27d09e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c11b29e8-cbb0-42bf-beb0-85ca4bacf3f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546a22c7-06f7-4b38-bf48-8acc465c0509"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c4c211b-4352-494f-be62-65502f34589d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e621f37-a424-4fe6-8f8b-9ca96a7ca499",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01b379b0-6ec9-49f3-ac77-079c19847a56"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "278813af-bb3d-4142-9089-86462011219d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2eef8aa8-f332-4c23-8b60-641bc308261f"
                    }
                  }
                ]
              },
              {
                "id": "01c3a65c-ac30-4d8c-a56e-93aa1db29014",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "521ac943-5f58-45ab-ad18-89dc9c514061",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "379d47b3-1795-4875-85be-90c34d4ddbd2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "559ed05d-6f7d-4c91-a8b1-67758633f018",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5c3140cf-2376-47f5-a78b-ec4a57f3a8e5"
                    }
                  }
                ]
              },
              {
                "id": "718e6d7a-2e0c-4e4d-8d34-0a706b1dc370",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a42d642a-1a08-4742-b74b-18bbb131865c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5ef88987-70f6-4a42-9357-30857ba04cb2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2e724d3-915b-4ea9-8888-9a859cf1f800",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cc70b736-dd65-44d5-bb73-20fd11b23deb"
                    }
                  }
                ]
              },
              {
                "id": "1552f899-5057-4cf0-9632-140902151374",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "96f89bf4-ad14-4080-b90f-07b03e7ec9b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1fc1f450-a616-4387-aff4-f2e6b5b27474"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bdd1fdb-bb73-4a3e-b5ad-c5cfc9599e9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f998e2e0-b128-447a-8a5a-c7d1bf3f35d5"
                    }
                  }
                ]
              },
              {
                "id": "ac51c172-05cc-4ab8-a03a-63aed42e49c7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba179095-708e-4972-8f80-f2f06f73c200",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5792c720-258c-48d0-8584-b3543f228fe5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b1fdca3-bc98-4350-9c8d-7fd983afba47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f98b69ce-3745-4e21-9129-071ffaa2ca8b"
                    }
                  }
                ]
              },
              {
                "id": "2f50e781-7b13-4760-af3c-c949de22cffc",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0eb39957-bb77-4683-87c4-ad37f32ba9f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "74ee9a8c-6af7-4e8a-873d-4119bc0a5438"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5eef244f-8751-47eb-a391-eda57f2bc6d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "33d7b572-59a8-48d5-9457-70774468d6f2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1eb8fc37-f097-43db-9ad8-202fa0a7aed9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "575a1461-3794-44b6-b617-a7737b2a356f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "215703e5-6e81-4d36-8269-8958625537bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3a07cdba-97b7-4566-8ce0-775851dedb18"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4b8003a-a9f4-4cd5-bb7f-78b078b0edc4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1cfdd7b0-909e-4172-a19e-a642093fbd70"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd99005f-a940-4059-a98c-a6560f084dc4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0beda59f-c382-4273-a21b-1f7bb822a5b1"
            }
          }
        ]
      },
      {
        "id": "cc48676c-516f-4912-bef3-2e6fdba4e3e6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dbd033e1-c5d3-4eb3-97d8-b35c16156de9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd904689-c392-477c-911b-a9d8acdde00a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e07513bc-e2a0-4907-9195-1ce9daf4218a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b9241c1-7463-4a60-af60-efcfa37b45ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb8da5c-4fa5-4768-8c6f-5326c2d153bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb279ab-4203-4092-a6c9-ef9f1e8906e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d669979e-46cd-412e-8a87-d2c51e45a621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1f29f7-af3a-4d87-b832-195f4757bd42",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b863f3a-0845-45d3-b114-821baed70438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79f650e-b91c-4975-8388-b76adc0d85e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165de9a1-923f-4198-99ef-44e011561e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5f1e76-d7f3-4b24-8e3f-794a503ec9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c830a23-b438-4e92-8ff9-8c2ca1a06e26",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f06c423-bb46-48e5-9ccb-28e329e9afe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "781ce9fd-d7a3-4c25-acbc-7b8e5ff65cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ee3cb5-1a2d-4264-bcad-5d3464a82854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad26afc-23ce-4583-b954-a411ce92fefa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049e3141-46fd-4236-9379-1b34145f61bb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837ed2e1-acbf-4c16-8119-256a6893c566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54fdd904-1ad9-4448-bf4e-9a67e30118d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a838e20-affd-4273-af20-ddbd416454c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c56cb2-7898-4601-a700-9bed6134d8a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113fdf9d-d6a1-4be8-a3ef-9d91a576f0f3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbfa3bc-d48a-4f99-a78c-cf50bfa61a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdbf1c02-4f04-4eca-b374-4e98f7ea5f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3686ec-5433-4509-b808-0582ac2ece2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d993145-aaa4-4a97-969b-1eb90276c9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625a079a-0953-4e7c-90e8-2f994b02de08",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e8684a-d4a7-4381-971e-b61460458f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a3f34dc-3d6a-43bc-b59a-d6235cb2bf5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfebb9e4-f570-442e-ad0e-6efadba2199f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95f3ce0f-c449-4ddc-9437-3d0e8881456f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc72976d-846d-4176-ac52-66f2ebd3f697",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb70c6a-c4e9-473a-96d5-39e59a0f41b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd80d0ff-fc6a-40fe-87b0-65cb4eb19be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f1ed35-c990-4ddf-99d2-ccd8c4e4567c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e619ad4-44a4-498b-806e-4f906adc2629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5a28e2-5469-450f-9eb5-f1241208b145",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "147f87fe-965d-4510-b01b-5e69c32faac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32438ff2-4033-4a07-9487-00cf5c946f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15056400-58a2-4f3e-854c-9369b154d57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3addb399-6e8c-4cce-9c7e-b04712a9dd45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a7bd75-7e7d-4dd3-8c26-7e10aa9e1921",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bf188a-185b-4a11-ba45-552a905cfd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e39e7e3-c775-41e5-a2b9-3c80b1e71482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e1e8e2-3e60-4a4d-8414-afbd057142df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f80ec0-a5d6-4c53-aae6-3f02a53cc56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d20eeb-647a-426a-bfce-db3bc3050733",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4407e3f2-ab12-46fd-a5df-1a5a84da9ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96419cfc-3279-4f9a-950a-2d53582a76cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c61b00-3df3-4b24-9522-1f71902a561a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e78e0b0f-eb58-47aa-a7b5-7516bfc40cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908976cf-83e8-4f85-a713-5baf3acb7930",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31951b5-f9bf-41b6-8c50-8d5761ccd039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25efe2e0-2566-4e63-a7a0-d15c4509fb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c337f04-b0f2-4544-af5f-d2cdd471be50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e3adfdb1-cc81-4c12-8a65-103f4d0d8a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5f1310-4dc2-4af7-9929-1ba879af5de9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4a8097-f0b7-49b3-a491-3eb12f475280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a780d5ce-94c6-450b-b5a5-4308dd82f533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d8a425-db14-4773-8a42-6630ebeaa6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8221a7f7-ffc2-48bb-a97d-d8c98d86074d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ddb75c-beff-4ed6-be30-42a34d51765e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf306bfe-cbbb-49d8-8acb-c105ad15c026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f772d2-23ea-4b91-855b-ce805e9dbafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184eded1-8b23-4148-835b-ca3e60b18003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3877c0-524c-4904-b07a-3c1aa6479339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0b7243-1097-42f9-b99a-43bdcf28bd9c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abed8bcf-25de-406a-9c13-b1367880160e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05d5db8a-2a6b-446a-9df1-ecb25c06265a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3405e3-aed1-48cb-9fbf-f336206e1317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5204d20-539f-487b-b391-e6cfa7ee14f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f87a3c-db7e-4e7b-a69b-a570b31ba4ec",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06feec65-2fc0-4d36-99ff-38557a6a595b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0875dd1-b15c-41ac-9700-4aeb6a0b6dd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c459381-ea09-4425-a93b-e0ee139b3a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1706c47b-7efd-43ae-bc4a-db520317ff24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3b46bd-779b-4f5a-9646-201bcdfd0ee0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95b30bf-3b2b-4847-8f41-eb241263a203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "341b812f-89fa-4044-aa49-3398d566f6ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28972961-42ce-4d03-a200-114c9352409d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "396d96da-63b2-478c-a722-c386650765c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24e2e69-5dca-49e0-b9d2-15937cfde209",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a1b24c-3b1f-4da9-8050-63b44a3c67b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd146e23-336d-4b9e-98d0-9c495a70bcf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919d281b-57f6-4050-b41d-0e67c6c0855a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1161b173-f6a2-40d5-a55d-cc5fdc2a0f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468fe16c-7dae-4677-b41e-4689ccd92d85",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4f9d6a-d981-4ec2-820f-944e12d3829a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8b55b70-ae74-4728-8729-1d6f9ed1e84d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaeb3a86-d0e4-45c3-aaca-16da8ef94c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0e601e3-77ed-4001-85de-c511104a4a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe49549-7445-499f-8c57-d5e8ec8fccef",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7a4d99-23dd-4954-80e0-30d1db48a167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1808426c-554a-4013-b3de-07630dc5f517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46be4002-ce01-4e8a-a855-feedc8c04945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45a11ae7-3ae9-4e42-971e-8aef0357c190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1623bd-0ba7-49da-8f2e-c726d21eaedb",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c76f91f-cd0e-4179-95ee-d80e23bb8171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06943d75-38bc-4858-b5a8-ac486a824bca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b38b766-a530-4a42-a9e9-69f5d0672065",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42c4b29c-3eec-4346-8888-bfc65077a02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cf18dc-b29b-4867-8056-2318cb2cec5d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310c3214-53d0-4bcf-b31f-27a9bfaac36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a37f59-cde0-404a-ba06-f8af69b12613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa8da98-c53b-4dec-80e4-fba346341a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bef739e2-b23a-473c-8db3-bb2ab1f8ee1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29e437a0-f05d-40c3-91d3-95c3154cc7a5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f8616c-3e94-42b8-b847-01c12a4f8a20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3e9bf8-6d57-4773-82e0-67fdddbc26b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea033a2c-6e26-41f1-8c73-04906c30aa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12d1f6d4-4e3b-4eb8-aed4-96e81a68c4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ebe70d-a9ad-4a59-b829-d3eef786f8a1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84f1e7f-2c47-4c78-8d6d-9a26e7d46ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db41a30-8226-4a44-bf83-1e829e758b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4eb6cdd-0ca6-4acd-aac3-87676469c768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "344b4c81-5623-4151-a5fe-85502660d729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66196254-38a8-4e37-a86b-e16300ed98ae",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d720064-ffb2-49cc-8312-c4d133d5619b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80bc295c-118c-4b5f-9da3-ea52ddc410e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c274a61e-e803-497b-a6a4-2880bd0cec60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96deb490-7e5f-46e6-ae8e-2a80f618d696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d591744f-b4a2-478e-ac73-836b632b48f2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60166424-a769-490b-834a-ffaeb8ccc95d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e257f056-90eb-4fa1-ae13-d8f1043dcbc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf1c98d-0a9a-463a-b006-2dacd3e00a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eaa3c0c-9ecb-4140-8e2e-7220c9788254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d686dab-c0b2-457c-9e9a-49a96da6aacc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84507781-0164-4e0b-9796-d5dc5088d68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd378ff2-966a-4021-8013-2e8cc876bccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b301b44-7d9a-477f-a042-48cf7bd7c229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e34c54e0-ef3c-4b32-b126-36bac75cba43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8797d65a-876f-4980-9a30-7953c1cbfcdf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "060080d3-f964-4215-bc89-2b5936578438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeafc52d-a40b-4fec-8150-f3ef5b5f3b8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ca1463-2780-45b1-bc5c-5b98e4f37c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4537314b-22cd-4d06-9168-3f661f387c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ddf600-cb71-43b3-a13f-89b7d79730c0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef99007-632f-48d2-9f0f-6adc08019e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc1b8ea-676d-4fd4-ad23-27e2411c6f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1177fbf7-8bdc-4a63-b12d-04ae4b374e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "941f2252-ae5d-4f68-977e-9779aa0db1b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285582af-c64a-439c-b1c8-b68a39625967",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ab3261-f0eb-4ad8-b938-ca3fa4542e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09db7f4d-def7-4213-896b-0fe9c3363a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e18ce6e-acba-4297-a516-56b9a88493c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26766b3c-0b3d-4186-9687-f8432133f152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec790f9e-a451-4399-bcfd-9baf9f04a84d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d120dd-cb84-460a-b306-dc8a14903a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09641e82-5a4e-4959-ad95-974d2688cd91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c53957-891e-4402-b95a-dd7697875d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89cbf2f9-cd3c-4c6b-a5f7-e55406d7c059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb53154a-d619-4fa5-82ec-ad2410c6581c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "416a08a8-4829-49f8-8d89-514ba2f0d1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57fd10e6-592b-46ff-a6af-9ea526dea521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c2ca68-a74b-409c-bd5a-1192c2893bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c7fcff9-5e73-44d7-a203-e877616ab9f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97723741-72c8-4395-8c08-ba505045a33f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c30825-0e1c-424f-a176-5c4821bdb505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c25ec25-f5b9-482e-bef8-46a5f58ecd09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5cee91-a4f4-4516-ba76-d04bfba22b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6f49b9-f5a1-487b-8e2e-ab21340aa23c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dfab1192-4e3f-45d3-aa89-66a565a78a62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3964b377-d703-4a65-a2e3-6a2793825206",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8aad91-d66e-434f-bf5e-a7a21dc0833d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "06edf2bc-1a7b-4ea8-83fb-6d77245a3b04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48d199e6-76a6-4d2f-b517-3920dc047b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eff5797f-4a7e-428c-a548-013200ac932c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "681363d5-9be4-4153-8d20-97e7437dbbbb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1b27f1a-e67f-4a14-a105-14ed2a50e491"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fafff34b-b736-4e99-8790-7648b189f17a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71e1f471-4da2-4808-8667-1a8b870e1c59"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7173b07-42ee-4176-b0a7-afdb4e740bdc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c8fd1ff7-b2e1-4369-abd6-a677b37cf788"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "337b722e-20ef-46f9-910e-051d728374b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18cc26af-9fe8-4c79-bc4c-2de685d1e9f0"
            }
          }
        ]
      },
      {
        "id": "b6b21cce-638e-449a-8a90-f7804f326c35",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "cc706abf-8b84-4882-97fb-a25deb71209d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f62fcbfe-4d84-4767-8486-f5f8fb2676a2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "71422d70-0826-4b5b-9000-6e014c7556f3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9698138a-5056-4d68-9f38-ac8ecf633151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968ac835-3205-44d0-9580-5f867022b9fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2f8937-41d6-4ef0-a6a9-a6e4d3f2096e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "52c651a8-402e-4ced-9259-17194bce2a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd0c1513-9913-481a-aba9-49472681245e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90572341-07eb-47b5-9b2a-d435a37dbcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23d40e44-f1db-4a53-820d-a52b7adec8d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6513f68-ebe2-42e4-a5fa-fa65f5bce75d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "57aec59a-26eb-49ed-9625-aad5af803578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731aa30a-0d1c-4111-b502-eee22fefbb4e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfabaef-f8c9-41e0-9b9c-eaf78027911c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa681bc6-d853-4d28-94c1-29421be23ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c03d6cb-a614-4004-b8c4-920d318f3d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08b6b437-70d4-4db7-aaa2-e1c6fd99899c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20e35d2-d64d-4776-9f80-e09b31464cb0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113b0782-45a9-4819-81b2-d248e8fb88c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d351d87f-4275-4370-9a47-cdb2c6db1dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9022fac2-d94e-4d5e-99a3-746d2c591f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9636cd4c-6007-42fc-b0e8-c3ab2d3208f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251c47b4-77e2-401a-9008-8cc37c52b31b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a910f3a-21d0-4c3a-a33d-6519d7ec65a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b1f46f-1792-4dc2-aad0-c46abe58650f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5beda3f-d424-40e7-9539-2760b23d4f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbbb2663-19c1-465e-9167-fe07e97cac64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf88d032-9490-40db-9c00-1ac7e9e3bb94",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f80962-731d-4f02-ba20-fa347ed4e5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799c7a7a-2d99-401b-b7e5-82fa1e6b8c0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85acc0c8-67bc-433e-a72d-068bd42b46d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30d03077-a18e-417f-b4b0-d1bb716efc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "640f3d06-35fb-479d-8cb3-d86bf2bff0e9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c11eb296-a79b-401c-81eb-eebaec8e60ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314fe212-067d-4227-9ca2-d15e540ad7f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0b3c19-573f-4c2a-afa5-d5df71c3e98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ded46a4-cf09-4a46-8da0-407bc3eb0a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa81bfe5-6d54-461c-aecf-447d5898ca8a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acbecb2-395c-45c3-9052-e3ef9c4aac13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "372ddc60-1fc4-49bd-8af4-bbeafc5852d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae8c34a-9ee7-4f19-a5e2-d76744933331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "414bf7c2-59e7-4006-9021-cb7d21a1ddf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1534187f-65ef-4f40-b3ca-b1c0263be482",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88709a05-dada-4f21-8724-58a0fc429119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c69ab25-ed4e-4b08-9e84-317a50cb76a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0087ab72-c074-4bed-92b2-245ec8750cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e612d4f7-5116-40e7-ab4a-72612590946e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753bf396-d01f-422c-bd07-6f435e23767c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc33677-8734-4429-b60f-0badda4dcd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb4ca44-94ca-435c-b523-ccefe059033d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48877908-b0ff-4575-a671-e542bd2ba203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "96d5f083-65b2-4d89-ad5d-231e4d695701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a0d6e7-c7c3-4bb9-9b11-029fe49836a5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c30114f-9cc0-44fe-891a-c545ede13098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c270f59-d80d-44e1-8271-234fda216b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "941a4e40-c10f-4fa6-ac61-2e0557cf210a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "27308b18-f771-4d2d-acfe-e704e00064e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bf156b-4f0a-419e-aeed-41fd23bd4db0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef741952-1d9a-4931-8a56-5b5d30c59c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20163fb7-1d03-462c-bb4c-bd903a815b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6b5313-673a-4130-abd7-3e451a5aaf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc46851-4721-49dd-a9d2-1daf1dfd81d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ea1697-c860-4e4c-9fe7-66388fa4394b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16107554-c573-4508-a8e4-852bde43434a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e453ac-ff4b-44a5-a1a7-6b68f0697008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de92059-abbf-4e0e-8b20-5f5c92d3f5a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3fb178e-eca2-417b-8788-f1a1784a86d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf22c7be-f07c-4f2c-89c0-a184fb308c28",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923bbd80-61cd-4cbc-a30b-f7c3732a425d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8faebdb4-e7b5-4fe5-9819-ffa3d0a6a01b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36907a6a-f6ef-4583-932b-534b267b4227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a645ab1b-2336-4ee1-8042-4be9b6e8b08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73426160-feb8-4f78-8005-ea25925cacd8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a39e2613-2014-4f68-9d73-953fb11d688b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c63e4f2-063c-4fea-90ea-dd7405e1d0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751fa9d2-d832-46f8-9802-b5719012de91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "05e65904-8805-4071-99a6-390c7a6210e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3965174d-fbf2-4ed6-8d29-60e8c1f291d7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897ba5b3-5275-4ab6-962a-9ff776c48475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "320b1ea2-d8ac-4b2d-9a4d-73a2f7466b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b0fd4a-065e-46d2-9151-ef7399b0e5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae036216-bb64-49d3-bd59-a3cea36d8010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac90b63-d6b2-4d91-9948-725b107e2ed7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a356debc-5725-4f18-9981-82ecd7544970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7dace27-ea71-489a-a026-a72282b4f429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661edb3d-44e5-4db1-a88d-312a73d68196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "832c8d22-a6b7-4b85-891c-b25101ab11cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cc6bb6-0008-45b1-bf37-fadb1f68801c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd62769-75d0-479f-b643-2dd8788ea5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b01f9e3-39c0-47ac-bd1c-346174ad86e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b43d15-4ce2-4f3c-a8fd-e4e7bacb5183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8358fb73-5820-4498-8c63-5454fa5171a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7bddbe1-0f8a-4cfc-9d3f-7cdef6470fff",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331618af-c40f-431b-96cd-78c85f74de81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4319f23-c089-460b-866a-1a70700dfaff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831f15c0-898d-4810-ba61-67a9b075a983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a28589d3-2226-4a09-a0ff-77d40abf66e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdbce213-23ca-46f2-8d60-5ee6cb29e5ee",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d847b3cd-d8a1-40cd-9696-2daa0c6109ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a9ea38-badb-4a2c-895f-f0bc57e9f67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8a1b27-e3ea-4156-b4c6-fcb29dcaa289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "828ff52e-c0d0-4c21-bd73-26bf4bdfcbf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb7fab7-828c-4237-bc25-2aded4495335",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "394240de-4a8a-4e06-a282-398e5000a629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62b0c0b4-a88f-4402-ad1e-98a0807b29db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a381fe4-7eb5-4d1e-bbcb-9edf777da75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "011c395a-af03-4ec4-ab20-b9ef798bd31a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc10dea5-2d6c-4c08-aa8f-8d678a10ca22",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "457c34c4-980e-4845-91f6-30798d767026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d250159a-0d37-408c-8f1d-00f199bf62d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133041d4-71ee-4fbb-9380-0bebea129321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "129ebbec-255e-4564-8e30-96cf5559eb7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c05cbf-ae3c-49b2-9f2a-c86bb9b5a25f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43323275-2286-487a-97f0-b35eb86230da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33fd0082-0dd6-400e-bf7f-aedf025e2cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edadd4f6-2775-454c-ab5e-8b7be84e0cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40c213fa-7bdc-4d62-bf3f-108c30c3a48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb05c05b-2e29-4758-94b6-56b6fb0cfdd9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e053be-0e4a-42ec-a487-9d31289d3cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cfda310-b1fa-4bcd-9587-1f1f19ef2ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521e5b1c-487c-429f-a6eb-23f7905df9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbf8cf1c-ff4a-4480-b6bf-4fe1040f9f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b0bf3e-aeef-4e59-8fed-f75412b45839",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70974f35-bae1-40c8-9158-1a30a431bcfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec50ca6-b888-4087-a83c-dc3bfb06c977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a553886b-2646-4883-af9c-2c2e8417ad41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d00db86c-1e4f-455b-a22d-d5497d43d122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6458f770-6959-473e-b59e-9aaf1ad9667f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a79f00d-89b9-4901-8f62-cb49da761f52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f763e42f-336d-4db7-8ac9-d7172f5c6a96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34aef78a-8dd9-4c54-8e16-ea1134fe100e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5cf398-2537-4b26-be05-65d62859ddea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa69089a-8e8a-4a08-bb4f-17da42facc49",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae1a7a1-446d-46c7-90b8-03a2ecbf9eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad2bbc8-0c09-4062-97bc-585ab497bffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ab559a-4210-44d6-a5aa-1c16d6a7734e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "369e04f3-3bcb-4d33-9003-576fa2bdb1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "544207af-1866-4fa7-9580-f1e3d7e8e37e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59b21e2-81ed-4dfe-8d29-e2d713ab26a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08de720-6897-4acd-a319-d5eeb9be2865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12567d60-b3d6-4ba7-919a-fafd08dfb6f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71543643-58f8-437a-a47f-7b17bbeb8cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4dd155-1ce8-492f-86b5-825e7aa705d7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10eee18b-34f1-4cd3-bfb9-19951cdd5696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6e3adff-3888-423f-9c5b-264a24223954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8bed06-0543-48b6-98b9-0f30d71c8353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5d1e7d9-27c2-44df-b671-f230c50cafb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b20095-1009-4ebd-9be9-e94a621f160d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba66b6d0-4cf8-40a3-8ead-28e9d944b6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25eb0e0-6ae8-42b8-a3c6-d268c36847e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5515695-8a7b-43ac-ba7e-c261ec2a036f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12ef0090-4cd9-491a-991e-e3f27fa70118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87e92d1-b40a-4366-99f1-b6664bcf789b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772e3ddd-443b-4fd8-be51-135834436ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3cf081-6cd8-4393-9ef4-112e14102382"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad50f0a-5b40-4d90-a121-6a0ea2e3f5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eaa676c-9e79-46d4-825d-0ab76c961ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c64c80-7b72-4dbd-8e11-dd0e5cc52a1a",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f56e8bf-f0a8-4320-9062-42e06e14114b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e2ff600-ca68-4154-af56-4735f2c6edb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ebdb697-2a3c-4e1c-86a5-5e2a68b31f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "394a695f-cbc0-4c39-9f5f-d287f6d231e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d8320b-2858-4e25-9d61-9c521f9e88dd",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c45f472-ed39-4529-a194-e6ffe94410bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee25d02-3188-495b-9e6d-416a733267b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9632d4-1ff3-4616-8a80-c90c8b39086c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7bc680-5d80-41d7-9e50-c7fb1182dda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6bc65a-1659-4729-8922-ba79d1616baa",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98760d75-c75f-475f-bcd9-cf7f8ac0db2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a214b35-820a-4165-9676-0b7b8f91c1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4331b4c0-94b5-481e-8f2c-c2670c6e800a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c207ad-878a-418f-928a-5bacb03dd357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af7c662-2388-4dd1-8d2e-11028b16e57e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5446deeb-36c4-4b27-aa37-6d238b0917e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2490d69-616f-41d8-b03e-5f3980735eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac1553e-d8dc-42cd-b204-6cd7b83ace96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "21f5a845-2c1a-4ba1-9a99-8b77daebde54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0ee37e-d55d-4a2c-9cf3-66d35d9e52a1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08ce643-6b64-4cde-8119-6aeb85c81e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ec766f-ec64-4fb9-a777-998911bbdf0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b59b12-a2a7-48d1-93d0-eaa2b0281ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c93ce682-6636-47b3-9eb0-187f29cc3e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1a142b-d02a-431e-bf3a-740f90339c95",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc14d2b-0e23-4e83-bbd0-7daac10da772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f03cd77f-8bc5-4aa4-a420-f3f011651c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd7a52bb-4754-4c29-882e-7647e65bee0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "334cc1f7-3bb2-4e4e-91bb-816ad6b9116d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bf8f5bea-024c-4a1d-8404-f05974dd581c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a746bf7f-8d42-4cfc-84fa-f58e96c1f3d5",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2b3970-7ee2-425b-b443-a04812a25072",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2da3133c-c9cc-4a5a-b5c2-7da058a5db4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7b2ff1-1dbf-4205-bccd-97180aea832f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dfd87d4-1f6f-4582-ac0f-84f86251c08d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28fea9ce-d431-402d-a5be-85ac1d7565c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6603ffef-f902-415c-b070-bc0ebd097c54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e7a8b35-961d-4433-b6e3-e902c15d29ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "984f813b-5114-4e31-91d5-09bafe96bb97"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7d54c6c-1fc1-482b-990f-05b7be5b9af0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95069885-9d7b-49a7-8096-b1fa813655ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a7998e8a-be79-41be-9af6-4733ea779dc2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "948f2645-7b76-4e99-bdc3-a4b8a9b58664"
            }
          }
        ]
      },
      {
        "id": "33fda03f-3608-4e77-832e-567a4599043e",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d9bc6a65-c0d2-4b70-bce9-ec872379afa2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "381853d6-633b-45d2-8ca0-9000284368b3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c3b10d9a-4970-434a-b72e-8d2a107ef7ff",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79686877-097e-4c0d-8417-a3e83d2561af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a515c01c-c625-470e-aa9f-9c4c78f40ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca58f63-1cb6-4f19-8c32-7f106e19dbf0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbbdba4-b362-482f-aae2-ca3670a23205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf66a94-f962-45ca-9217-83113c2adb16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8456f8-0603-4df0-b734-3e73bd0a027d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbbf180-9bc6-40f1-88fe-ea0549a2690a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e33cfca-59fe-4c30-8723-63e6f20d8bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbe3879-0d89-4821-aca2-d2ef3e9a2e81",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc967b8-f728-4fbe-89a9-cc65fb55b175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9dc7bb-6447-4e82-a1fc-b9a36a19a813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d086f1-cd67-4644-b0d4-9b74853e6f32",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9560cd-9ae0-4a68-8c7d-b92811d1674e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad79112-56c4-48a8-aa19-2be2d780ce47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db74518c-c58d-40c8-9d9f-b0a9cc5e52a6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17580ad5-0ebe-48fa-b070-935612f31d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32706831-df09-4fbc-b618-c8dd592c2741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f0aa16-6747-4448-bcf2-79539e58f4cb",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0037bafa-b88f-43fa-a824-814713f98104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99e88cc-3c46-4ee5-9924-2ec3500af8b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fc3e9d-2643-4997-9620-12173eb8c7ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398eb78a-4892-4a99-9b94-d24628900efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9ee84f-43f7-4541-9904-dd7b09232f8e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489c1f58-34f0-4c6b-ac6a-7f04ab92a5f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18648693-ec81-4de9-a37d-a2c4a4695b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f522f400-3c6e-4623-8785-d5ca0fabd5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f70887-f209-4ada-9495-68b9d21ac4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f67669-539e-423d-a853-d71edf192774",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8098375b-32dc-43e4-88c4-e82fab33dbdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93a37223-cc9d-4ccd-a370-c80e8df34708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0764c98d-d8cb-4641-8878-570b1ee41d85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "debb40fe-9b11-4c4d-b052-1d7cda7bfbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9283e668-2a02-4104-90b0-8ef440d219ab",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c292740e-ef5f-4861-b70c-54b070314e28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cf0f8d6-c9eb-4594-a305-1ead027ddc02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd587736-0f35-4016-b961-8ab10b941962",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1012b71a-29b6-4f98-a952-05970055136d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e51fef8-33be-41c2-982e-8ea9a2d75698",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ceed597-3f50-4c02-ad68-65a41d86d064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80128def-52bb-4d83-9f54-fec1600ef4b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d38748-9cd6-4da6-a5e1-a3a2f87fa2f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd16ec6c-f572-4331-9e8a-784643ae0cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "655a7c6a-6319-40e1-b3e6-88d74aa8c29c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5585dd8d-52a7-44ca-b68a-f3944ece90d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19960348-9753-4504-8e97-41689e931df9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c08245a-fd42-4e5f-a4fc-024596bfbb2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54304887-381c-4408-b005-7f12741c25d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5476700-b774-4ff4-b9c2-a23b46fef6ae",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29554dc7-2ed3-48f1-a292-002421012dbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5994001-371e-4885-9761-cc11c0d97059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "096e353c-d1ad-4d8b-b60c-b963cb2c36a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8d81b66-1e50-422f-b027-4631583f3f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3272abab-9137-4af5-bb5c-cb7de2226523",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7b608d-e957-4eff-ae23-b72b20dcee79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f39342da-6226-442d-b1f8-f24ebdc5c13d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c68c5f8-edc5-437e-b0d8-e7744129ad00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a38e4c-ba5c-4156-a516-9a176ef8db01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca32505-785a-40b4-a6f3-078f73cd5f42",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493037be-8cf8-4b3a-9f42-3296b2365d9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e27dab4a-8538-45e1-bae3-1b622645914e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a26038-2c57-4cff-ade1-fdf4ec803b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3e02d5-4776-4f7e-b85a-cdf67d5c8088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd12f11-551a-4793-89ca-40d8ae4881be",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79484fd4-dc47-48b1-95a9-7803fb24f2b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8af4ecaa-c1c6-468c-bd47-01a39401eb3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72075892-8b9f-4345-981b-bfd2fd72e3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254e57c8-4c3a-4653-80d1-a4bac460bef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbc6363-1c5e-41be-a35d-0b00d67f13b5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08e16307-4976-49d2-bf46-5f6fb3d01e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98448645-ba58-4997-94bc-8ca65ce97b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32a312e-0774-4f69-b515-aa0818b28336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a451ed75-b20b-4410-8d80-e18b47577ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be296223-9ab8-4d4c-9868-749fb926ae32",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be6fb0e-0afd-4318-adb0-786d1a24a45b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99976b6-6477-44b7-b0f3-7655173d82b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "297d4185-bfc1-4119-b292-82cede21b082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abb319d1-a04d-4e18-8770-ca2c57662a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71930ba-7e5c-4c4b-bad7-4eecb2730029",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63fb7992-5c3f-467b-98e8-fd36f4a407ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c5b492-ee79-4344-8cea-852441bc872f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f425756-4548-45b8-b2c7-201df3919ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a5d330f-b69e-44cb-b4c7-b7b32df9c28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a8059f-44eb-491e-8e57-ca421266c667",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d3b89b-63b7-433d-a3c8-17fc283ef15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119a0e4b-0c94-49b2-8704-fd914048909f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333595b4-43f3-41c7-ade6-5f17223be5a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca46b008-7aed-4b72-8338-99009d9dcb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5760749a-5e4d-4cd2-873e-c10ea62bdb2f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737c6f52-1258-45f9-912c-fe3cb5898f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48478f3-84ed-4de7-821d-ad739f6f3d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3d81a7-68c9-4e23-9600-d975ca21839b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0b2ab8-d250-42f8-8b37-200cf6cb4c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ff814d-8951-4df9-ad7a-48d35664c746",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4648e635-70b6-4a0a-9998-d14c58645e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6ee19a2-e977-4578-bf91-fa4096dedde9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a30e7e4-3089-4fa5-832f-0958382dcc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34647316-b2c5-4861-b940-c258b67b4f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1deef193-fb95-4971-837c-6adce01da63c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e9d8b3-0062-4baf-80c3-f5d166066bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be71372a-418d-4a1b-b9c3-d782226a7a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e7b84c-0abc-4653-bae8-cb25605f4a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efca7ccb-f00f-4ff3-a26a-26f19dccab1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680adf58-004b-418d-8ccd-4f198b347290",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86d0fefe-9b59-4ac2-92cd-79dd1f1cc8ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95c922be-d9a7-4bf3-823c-4b0c86198b6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f9213b-819a-435a-ae9a-a12347fe66af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b97b4b-7fa9-4982-8afe-81c16bd9627d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ced27d-9144-4170-adbd-5a2109395c55",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cbd718f-d8bc-4491-8f3a-1d7418bdf853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc31f06f-e918-421c-ab15-ced30f73e3ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a108bff-2119-4ffd-9b56-70c7294b8002",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4dccb2-818f-4efb-9fe3-05e754089c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3cd120-f2f0-4df4-b125-87c352262bca",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bcf5f9-9a95-4f05-9f86-e4f08a64ab20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff094210-e3bd-44cb-9e7e-cc5a4e053b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bafa475-e8fb-40ff-b60c-37090a7ddc12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22bd055-1dc5-4b97-b8d6-00f6808134c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa36f4f-eaa3-4f52-8411-566f89a9eea4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a752e65-e849-4526-947f-0bc0aee86aed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2bcb062-f6f0-45f1-8082-78e3507e84f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d24131-d5bb-4a6a-9ce1-d228a3282c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73621313-158f-4da2-8c89-c617652bc30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ff379a-8836-4493-991d-765429334b91",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08899d4-8398-45ea-9de2-0fb5a6523801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbcd0fe-2554-43db-b384-0170328be18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "922b7d0e-407f-4113-98ea-018541dd718c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33c9278-1d29-43bf-9232-ae14fb161a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67046a4-0bb4-4848-99fe-981ff0e318a4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac292a9-62df-4e53-b6a3-6ffae83bc143",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f618b2c-e9e1-45cf-8ab6-a8268dd3ee4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9212be12-7f52-4ab6-86ee-36676a1c1573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a361368-6f08-47b3-bc41-de53eb4950e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2543448-3e1a-4896-bcaa-24893c9e217c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "683c41f1-0891-4fbc-a196-f34449265c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4365ad3-82fb-4f6f-a231-81cdf2c7c9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c800213d-795b-4689-aa85-e9305b38678f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151aa9f9-a878-4f40-a747-9b9980675c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7d589a-59a1-420c-8382-4b74900845f7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c0f7fe-f5a7-471e-a351-f075f1aba7f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43c2393f-2cd3-4b7f-977a-393a8ad11e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d34dbc-e147-4166-9e7d-9547443bbdda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f33aa8a-7ee5-4425-b636-dc083dedaac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e32aa1-e6d5-4bb4-83be-6fb457d736eb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a790c53-ef50-4d35-8ced-83ab12de2312",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f35777-fad5-49ae-aab2-b32b0c8be08d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e6bc34-d41e-4107-be73-446c021b2bc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99254299-2932-46ba-83a4-18548e5a5a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e755277-4025-4cb2-a758-e6144c76d923",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318368dd-7634-4ae0-bd8d-70870bd06652",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59f17473-be4b-4f27-8b20-5742d3b4e215"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9389eff9-a88f-4fee-9b2d-9b2bde4169a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7224c0-8599-463e-b8d9-bcc90ae46bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ae39e9-1bba-41b5-ab6f-6e9fd9b6eba2",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a97898c-6b07-49e7-91ab-aa09c8064da3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f80c9c57-b338-4471-b567-8178ec12c787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da6d761-5ff2-4f28-a9d7-76dae27732bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c68edcf-cd19-4f73-ad71-ee0c8c86589f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aec3846-801b-44c1-a094-e298114b33f9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148d97ba-d988-4b53-8bd1-f29e54fb9935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f54ee96-1da3-4cfa-b5b7-a1a9e3b28b66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c9c6aa-1339-4595-abca-052947264bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4216b8-fe73-48b1-8e2c-51889332f82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd242f53-bb29-4a9b-b878-923f684d6599",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b113a3-d899-4ac6-ad8f-d84c4b8ff0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85912946-befd-4c1b-b9b1-98bf59f18375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a46bf3-3ae9-4f63-b373-40b84cfd93eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f21393a-1c2d-4a26-8214-99207a44d7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9121a552-a44b-47c1-b9aa-c287b07a8cf6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b15430c6-c5fe-46e9-a551-24c13f9041b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c7b111-2628-4864-8798-058069983e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2761f6-014f-4b92-b8e7-243791b8a74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a293d4f0-be6b-4417-93d3-1c059d2c3cfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1022deab-e82c-4219-b1b9-bab5be82a888",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e5493a-b973-45d1-9460-98189359a92d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82ddb53-e631-4971-b895-9907f36503f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a358ced0-6562-49d9-8378-0c2fcb2b1df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "799c9ddb-1ed2-4f64-92ab-aa9a0c92de3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f16bf71-44ce-491e-8a24-702a3e82a8be",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc21dda6-2472-4874-a385-aa6f7127b42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8dbd31d-a667-402d-a1d6-09f59119893b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6171bb86-8a8e-496a-8522-48fdff6204c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae4cd5c-e93f-4a70-8281-e39fccf7bda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d11507d-1276-4ad5-9867-a0871a7bd9be",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f540875-27b1-4617-a038-feed65a79992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf312346-47aa-4e77-9bb8-1132a88c4344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb69edf-b0c0-496e-98fb-f6232b37f0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf4ec497-0cf6-4f38-919e-5c7d1c11f298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a098a235-e414-4d7c-a2d5-1465b46440b4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a8113c-6079-4317-96af-1f365e8b94f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1d8e447-4b89-4f72-a535-7b4ae8cb9676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd4f94e-449a-481d-b6fb-0fca6da28041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84560fe-74b8-4548-9a4d-4b41f311b3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8e03cf-1d16-4fe2-866c-d33ca427e887",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0dbb901-3d33-4fd9-9468-029c4215f82c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda932fc-85e8-40cc-9c42-9645c7fb7bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3af1709-c00b-44bb-9447-b1a58d7884c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ecbf47-9836-4d2f-a3fc-488e981468da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d3576a-e94e-4625-8408-275b8f775b53",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08360180-f73c-4991-b46b-84957b4e077e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa95fa3a-25ca-4585-b818-b2edd64ae499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e2fbbd-1d5f-49d7-a223-6e3d59a223a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8767599e-808d-4c1d-8786-25005b01e22b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753f1118-0b15-49d9-bb53-c04e5db5915a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c29c1a-9cf0-4986-a6a6-511cda2d6f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fddf114-4f38-48bf-b26f-9d48da87c34c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da464c69-4bdc-4d20-8c9d-b6c3a5cc015c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac18bd73-3d5d-41af-8f02-e10a232fe399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7497a3ee-cd85-437d-96a2-8f5329b8299f",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990f0538-eb3d-4917-97d2-062955aa31b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d18b2a-459c-4570-ab6c-dd3adfbcc791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d94ea533-4c2c-41c9-af68-59d5ab09cbda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cc3447b-233b-4fd1-9ea7-637cc6a29b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c161192-567c-499e-bbda-84afb78237bb",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa34c5bb-e893-4689-961e-8c3aa54fe40a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b7526f-5957-422d-b13e-35ea5c8215b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e799201f-18c6-4659-97a8-2d8961b63dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13188ca4-b791-4d86-84d5-0b30ec543008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb8017b-8d0c-4107-ae92-d9ce8aae6058",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ca6e37-c480-47d3-b54a-37f0d2d45c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d46c014-f069-47ee-ba11-26e1995842b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86025ca-71d4-4ee2-b6f2-3d3389fe9d86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b55a255-1dd1-4749-9fee-ae77ebbd9bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9aecae-8dca-4e6e-9053-5e5204cdd324",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba6b618-6c34-4321-b5ac-df36ea2558cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2b4cbdc-5616-49f1-a1bd-bd82784536c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40bc0b9a-9d1f-49cb-bbac-7398297619e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f69c337-0c35-4f70-a47a-a9b326c622bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b507a92-044b-4316-83a6-14037ea4391a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21123fd4-51a5-4579-bd11-4d6a7517da77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231e9e3c-ec6f-4367-ac1b-2aa202182ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "269df1ef-20a9-4454-9599-cb6dda8699f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba5f56d5-1be4-4b7f-9400-ca081b9e95af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efa2098-d85f-4bd7-96ea-5c46a9241277",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf60909d-0408-47f9-83fa-03aa7ceb7082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fefe1bd-a2cf-45b2-b640-4ef9b2f9af89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c93e7fd-3aff-413c-a289-e241443d759c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76ac151-66da-428f-9828-dbd6ede6a423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48945a4d-529d-4143-9f7e-0d4147e3e70b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f25089-57dc-402e-8026-fa568e92fb39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8168ef23-32b7-41e0-a970-fb8e6c4a8fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6693c9a5-e6e4-4daa-8fcb-ee8190e607d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fda02af-2132-4bca-b79e-9c66ab82d089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4383e68-29d3-4e15-8474-bf782ef53f08",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3ffc2e-164e-46bb-8899-c5bcd43ada39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce49cfb9-5251-4cab-8ca0-b551a40e6bfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "282f86a1-2395-4aae-bc75-6e42f6b9de20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c2bc39-b2cf-4e2a-b995-554e96ce41f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc615fe7-9436-4d02-b38b-1a85fdcf623a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332951f6-eacb-4175-a337-60ae874f33ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b78cb469-c260-4cfe-8d8f-c6d34c4ca8e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1aed313-3bbc-4f65-bf88-0b00df811cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88130bab-96f5-46c9-8f19-df920dfbc314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb9a596-769d-48c1-b2e1-e2e0df105e42",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f96f0d-ec08-413f-ab20-18425be31a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4871d10b-618d-4130-87b6-a88677512318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd779de-b762-4361-ae8f-b77ae00960b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0285d459-2e81-46c3-b86e-304fcf66fcc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6624a2e-c2f3-47e9-8904-70bd7679cdda",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62dde6c2-dedb-4b02-bd0a-980de63a1588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb00e23-c37c-498a-9f1f-2c3ecedf43ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59756979-90ff-4bc6-bb26-f88722ce3f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f53a26ef-c6be-4cfb-a41a-5affc0c91c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5f2ffb-f317-4231-b621-a511a613fb2d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ba9c9f-fc05-4c1b-834c-7ab3de50f327",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8717c0c-ea9d-4841-8c37-7ffc8ae5a8a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e09633-d422-40f5-88ab-e4269bddfe53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad3cab8-d6e7-4595-a567-0be199214a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5815c49-043d-4a31-870c-e718f3c0b5e6",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e3c4f08-1442-4535-9e1e-3012a94158a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dd73080-ab66-4b53-be7b-b949b0f17b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f6234c-5d4e-4073-a2e4-b129127fabbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1664a4b9-f42d-4bf3-8674-f10788f18a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80333213-b3e2-4914-b210-dc33f9872957",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da57de9-347d-4b63-8c4a-18ebe01cd028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dddfbfe2-bb01-418a-b49a-876291e66c14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656ca605-030e-48b8-9419-591d2ffcc555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a62684-b0e3-47c0-95bf-dfe01403be80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c56ebff-48cf-4428-91ed-4ab99f67222d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b73d2c-b704-4b25-9035-bc9ea796c9e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6d60f0-2895-4faa-8778-6090a4f0a9ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626927da-f95c-43ac-95b2-144c5a4dc2ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56b1f8c3-6068-44cf-acd4-041e8b604678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de0daf9-a287-4168-8529-1c5dde3a02f9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caee7a1-3816-4ab8-9dc3-4ed2d7d3737c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb6754b-9bd6-4306-a524-eb51a16bf895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c47f19c-4cea-4644-a23b-068ab5ed8d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b053ec-7719-4d94-8765-9a39f332090d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e33b9762-c0ec-405e-a11a-f5cd60266f7e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e333c60-11b6-4de1-b694-796a0dc3d10b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744ee730-29aa-473a-b7dc-0f4dce6fb34d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a113dc30-94ed-4bb2-a24c-dee16e1c4dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f55a7bb-850f-481e-9d73-7d36fb6ea591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac8565f-4c05-4d6c-9f06-88df21bf5077",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9199b028-580d-4552-8bbb-7107d2ad6918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223e98e3-691b-405c-81db-9c6d0b294f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff9ab56-05c4-4ec3-9f89-3e6a50034cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363f827e-4b47-43e6-b861-c64660170c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fb7062-e50a-47bb-9f60-ea2fd8fafe8d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1739e224-ef85-456d-b665-a3341edccb34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f395f46-90d6-40b9-a9e1-143a3c45ec4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89866492-2879-45ac-876d-36fa289abeca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4b07cb-c6b0-48a5-b5bd-9427b746fb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe30c935-857c-4d4e-8a97-819f3cebf3f6",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a700ed3e-0ffa-486d-984d-e6f13bcc0a4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6717cf5c-18b4-4169-8930-e46b9cf7643b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8740b7-8a22-4fe2-8948-f1565591feb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08cdfcff-eabd-4861-97b8-fc9f0a82698d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a7283d-fe80-4f22-9d7a-e35b4b4d2adf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956ffc7a-128d-45c9-a245-6a77913f06ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73d9527d-177b-47c2-995a-b6c8dd1437a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88baa439-b2f4-444b-89a7-df255be887db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae75147-8f96-4754-ac3c-d6c4a7c9cb03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fc466e-b586-4edd-87e6-74a3fcf225f0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fd2795-90ca-43de-892e-49872dc33e9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04a6ae8f-a349-4750-9c0b-51adae3110e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf8e465-48e7-4198-8eeb-d1b5c4e018f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b34d33f-0981-4190-a814-0c091784912e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f834fd-8387-45bc-ab4d-a27cd1ce7c64",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d14fad-f620-4aa4-8850-de69886e4d7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6c9cad7-99c6-4cc7-bf3d-0746e15a1581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86dd9f4-acc8-4475-a504-40a2af57764d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1e4d6e-0b2a-4d00-b92a-7123354bac2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51fbdf87-c31c-43f2-9b88-f2c6ba092ca6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75eaedc6-941e-4b31-8eac-1103bf3d8795",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c74d2bdc-a86b-4810-b3af-cd32b5ee8659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4478324c-a35b-4674-ab79-ab0ee06e1bfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf6b5ae-ae64-4e27-8460-3c5aecf0e32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6afdf7e-b088-4823-a9e4-d0ef592497a2",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb7db8f-ed2a-4c97-9651-bb33b02d8518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a899d3-504c-45a8-b6b0-05c1cf4b7b84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1536ac8-efcd-4b5e-83a0-6f640e111de6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c97d5e2-8b98-4643-9d77-cff5eae4a763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7014e2-17ec-4ad3-87fe-1c90921d110b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcab90f-9ccc-46a8-bee0-afb504c35fb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d8d0df7-b178-4a74-87ca-d82173d7af1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63fd284-4b27-41db-a1fe-4c7af9529aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26025c93-3d64-4231-be1b-6c45fe43ab35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed250d16-c3de-4a9a-907b-90f023e047be",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292d514c-a5fd-4417-be5d-ab69f16a0af6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8713bbf-3282-4148-81a0-e2a839a39961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ec995c-f7ae-46ef-9364-ad87071967ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8fd231e-5fa4-4b0d-89d3-c70a9c69a692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7954d9-3346-41b0-8b7e-8bed5f6620df",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0772099-45a1-4446-8c2c-e2327a2fa96f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22e109e5-1b25-4159-95df-82593ab06bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8366f20-691a-4651-a89f-468b7d4d1ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38005ac5-ce8c-4ba8-bd0d-cf9f13cf5a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4cc7ce-431a-4b4b-9e0f-dcacd12f9f34",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715afbf2-e402-4b60-9cab-4ae8784271c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b69e08da-b2d7-48ce-b217-fcf887c561b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1b270a-2142-4940-826a-1c26d58043d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fdc985-49d2-4af1-87df-7622f0c4ad31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d56d6e29-7c9b-491e-a3f2-f072c92709fd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cb985e-e430-434d-b657-6131fcedb5bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "822f5fba-b7ea-42e8-9581-a17ee21b3960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b35154b6-8f62-4062-bd24-ce1fc777efa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "038c7014-a9fc-47b2-8bf8-3787753340e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06365af7-dd6b-45df-9b27-2e6392140ee5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "093645f5-9556-4aad-9f09-ff1ccda18f92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3745b2fd-6741-4fc1-bfc5-d794ad5a8969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1a6eae-d392-4e5a-9fc7-1941fc360eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9107b1b0-291f-49cd-aa19-80a1f34b85cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139aa4e7-d8f2-4aab-b0f9-729685c358e4",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f9fe7d-ad12-4140-8c15-5e8c68db4964",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af80853f-5227-4eaf-99da-bace91706dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b169675-2765-4f94-aeea-91da6cefcce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c032b6e-7e77-4b1e-8c9f-1832922543ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1856fd-fe11-43d2-87bd-9a4c38dfa515",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2db3e45-a2d9-418f-bbbf-b92951d90775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93d9f9f9-de63-4552-8822-b793d568ff8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3108b1b5-7eb8-4e04-869e-9e0553b83ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "130cf931-709d-449a-96f1-64d9c9d3f29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7debc335-209a-438e-b799-0adace0f4dc9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401c193e-322c-4fc0-9b96-d439bcc52b1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68db76fa-26bd-4402-adc3-6a0ee745b515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adb77bf-2497-493f-a223-44d4339833d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2035616-fbab-4338-804a-b7638822a738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79845855-54b6-4fff-bc48-8a03ef9b67d8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4e56da-103f-4e47-b696-53a51f7b5c71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1edc2630-6e32-41fd-8e1e-36726873c932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1889264e-a5d5-4439-9417-c548d0504116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f1c00f-1737-4bcf-8691-d460e3421c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4c6c95-129d-446c-b0f7-84f4dcb46b8c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7259763-8b63-42e0-844c-32d67118b382",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ccd0ea7-e818-4623-90e6-adc7e66af2f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5145e85e-7cf3-4a4d-a170-8c9032c70eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61db95e4-bb65-4cc3-9b91-68f8c9438159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f0ac21-bd2c-4184-8f45-0128c12890ec",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1f2b98-b0b7-4016-8d7e-c623120df878",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4ff949b-64c9-4b38-a438-b3e454be2a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c93a0410-1c8e-4bba-8388-1915d0c44868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f878d351-dddf-481f-85d6-c30bc30e706c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a91e6b3f-08f7-408e-b52d-0ff45323569b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b4b168-8bff-4b54-9f37-f5fb50e8e901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "554d8532-cc95-4db7-be00-7d5860e3539e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4905e6-fcb9-4773-ac47-bef93f150bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba044fb-ef78-4a31-b9b2-5c15e8d0c7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0d29dc-60c2-4bfb-b9ce-70a79b00a1c4",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e01a99-28fe-470f-9cec-f770bc779270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b48f05fc-0843-4a17-9f11-cc91f3ef4807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f181a1e3-110c-4766-870e-ce02972db706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f51319-d0f0-415b-a74a-ca64d643e818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e01111-7b5a-4bee-96f4-3c387e8e9d03",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d0d5165-e574-491a-8208-da589943974e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92752b87-94dc-45ac-b18c-19b43d64c968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41973cdd-9b5e-4a38-befc-6952c94d8df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4067f323-5d05-4979-80c0-69ff7c045aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c055ba0-bee7-40b1-91eb-586b2d4cd481",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d9814d-5e4d-4950-b195-547d3a71b0d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "383a0312-3fbf-40e0-aa8d-2af0e1250620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e961bed-01ed-4b91-8f49-e0a58fcce920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b33a7e-23b1-490f-bdbb-f1c780da18a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d26593-8af9-43a0-bdff-50685395ef03",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae161ef1-e83f-48e2-a17e-2fbb098035b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e7d84a-3222-4ce2-9c24-ca76fb13b219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a05866-8d54-4c49-adf0-64f7ab007450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b419d3f6-7af5-4900-ac1b-d1f58ae67a20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3068f46b-6392-4d49-bae4-42cafd981c9b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03fcff57-c4c3-4c2f-ac5d-22925e0c868e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2aff327-6b45-40de-a440-01e4ead87ecf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c66200d-e252-422c-a44c-29b5b2b65fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9eefa22-ac38-4a9f-8eac-2eab2679c0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31f320c4-ee36-484d-a2ad-eff8e4ec97c1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb59f12-e408-433f-974f-31fc88dfca24",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e66b6bc9-d883-4144-bc46-6f3830b3be00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b515896d-7bdd-4833-b2f5-63b0d0f27f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79dd0d3f-8bf0-4f35-b371-c46205e39729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aa45f5-6a90-4e14-a0fa-8ab515a56cf6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5357f26c-f6cc-4e77-8976-bcad73cabe6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb25dab2-90dc-46ba-a010-b0bc3aec8930"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce741fd-9df0-4f26-813e-edaec330e32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9edc39b-6a0a-4ee3-aedc-5ed661556725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8ef9c4-6dac-411e-bdc5-5af2503a25af",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010a68ca-44ef-4de1-93d9-c7a9999af073",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8a097ce-8d74-45f4-af16-daa113ff79f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68878122-15e7-42df-b724-3ef59ebdb592",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95b2cf0d-fff4-4ceb-8fa5-7655bb2adfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb88a8c-a1fa-4d52-a6a2-1dc300eedb4d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96354f89-4fe9-4796-873a-c20c784c8584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bb66023-4b3a-421b-a651-9ae0bb61b5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40603246-ade3-46db-9b5f-6aabb49f9b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ed42f0-a553-4cb3-820c-d48fe61581be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0539c019-575b-40a2-a3ec-e467ec19aa87",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665c3503-a866-4ce7-96fe-3d6794abe294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02f99ea9-8d42-4c1c-bf8b-ae37fd471aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddba6e99-1853-4fc3-aa8a-93fa942f61f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30516a30-5446-4e67-8334-0514ea91fe5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07af7529-7906-4cf6-927b-8ef820af89ad",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378e5d11-e62d-4083-8566-58295c30877a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12ae3707-98c5-4562-a1e3-379277012af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0d4b63-a253-45f4-aae4-91e45c363662",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801b8f29-6c1e-45ad-a48a-1fad0f73c97a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edcafb6-2886-4f82-b4d6-af57fbf49a3b",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49d8f5d-3521-4495-b067-5257a952a3da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f96a308-7a2d-4853-a90e-58e7c9d3f541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb72e72-607c-47f5-87a7-f4abef0a30dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36932692-00e4-4aea-a9cb-e650b75b1023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a4417e-76fe-4ad8-a985-c08219356a76",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8d3bba-c285-4d2a-b5b6-72feaca61c86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27daa8ad-a4f2-477b-b1f1-5c7bdb21b977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7452389d-68cc-444f-9a17-f79e89aa0355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c0ef08e-2f8d-46bc-ab07-75a1070cbef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcbc899-ad11-488f-8235-62e291c7b778",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a61f5c-e467-4225-bee8-c40a4a6c32c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f24b6238-460c-47fc-8cc7-1acabdbad8ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce39cad-8fc4-46f2-83b5-cdd5d27f7ef5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ea56c4-2d1c-4c6a-8dfa-bbb216037b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c56659-afae-4e03-9374-4b5de815f8ad",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da5eaed-b523-42dc-9744-74e663255cb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac626a69-f2e4-43a4-a530-5b820862d0d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c6cc5b-d3ba-4dab-a606-1c9adcf30d57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f4b9bec-bb5a-46ee-8d41-3d7c3d468580"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10f7e3fc-67ea-46d2-9a6e-8f325dafb881",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1357f684-e700-414c-a8e3-00cc09b09188"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f636dced-3ede-4fc2-8253-4bd2a0875b9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7cdadde7-1465-4630-8dc1-5da66a7b1cd5"
                    }
                  }
                ]
              },
              {
                "id": "3ed3c8f1-1cf7-4ed1-9d34-b81666c9905a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28405c40-d6be-4af6-89d1-ee31d88492af",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "155c8eb7-826b-4911-b758-b6290965f4ef",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "33fd9194-a5a9-4e9f-a9f3-e39da2ee84fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdaa5c4e-6a14-417e-ab23-26097a27f635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90c2de3e-4074-4652-b16e-15abcfaafc74"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0f24ac39-1d71-40b6-bae8-771e3c01c962",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9544b3d7-414d-4bd5-bdcb-b061f01ff418"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe175c8c-ab92-42d8-aeba-66b9a8ddc2a6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f00de3c-abf8-427c-8e08-945f08aa27aa"
                    }
                  }
                ]
              },
              {
                "id": "d86136f7-9275-4ad2-8396-4808623d0eae",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c3ecd367-e405-4f4b-8967-35d2f7d1638a",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e306fdf-e66e-4d67-9352-3178bf2dcd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "290bf914-72de-4e02-8322-14d3a630dcf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a927be-8a9a-4441-84e5-e7e0756c8ae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172436d9-5697-4d6f-86c2-f123c1a1d10f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e80f942a-251f-4e95-9f31-b21eb5df71e8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "22abc6f0-34d1-455b-978b-695f32eb84d6",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29978eac-f05b-4e1f-9f0a-b90d9462c316",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d2426977-2606-4ea7-911d-14bf89958bc8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90f8cf62-0d14-4e62-bd75-0aa6fa005f1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fabf7461-6ad1-46c8-a6f1-c347e4fbc666"
                    }
                  }
                ]
              },
              {
                "id": "b4969d78-1adf-4e6f-b238-2b67157f8b39",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7e409a1-de0f-41c4-9699-41df4691de03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "62460f47-3cc8-4a40-a552-2c1628167e98"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "288925d6-f544-4bbf-9246-9e967468d250",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd4b1fe6-7f47-407c-b5a9-d7aa65947759"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc91a28b-3191-4c1b-8abf-944235221ed9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "448b53b2-b94e-472a-b991-8f01d6dd64c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79766929-c562-4c6b-af06-0858f47ecf0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54a96fe0-4754-4812-809a-7869f7c544c3"
            }
          }
        ]
      },
      {
        "id": "d6b4a1a0-1e01-48d8-8e47-56498d7c24f2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "eca54a88-f602-42b8-903f-d92b3cf98212",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9dad820d-1a53-4268-8c6d-81e4412312ad",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0bdd85e2-390a-48bb-9b6a-ae0761d4b528",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709700e9-50f9-4454-aafd-c5611633d7bf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d49876f8-54c6-476e-91b4-a70640e1ae78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a920c6bd-9e3b-4359-91ab-df11e56ccad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b83a45c7-d2f7-4bd6-bdd7-450629447b55"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30e75153-1562-42ec-bb2a-11317b760c14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11ec514d-4b8c-40b2-8693-9eb67dfafabf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a258df2d-0cbd-4da0-9b98-692d14864828",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b2e31cec-7a35-4b46-a6ac-2795a470aa4a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8af3667a-1392-403c-a893-05db10fa700c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "482cce8b-6d54-4c61-9ce3-58e6a123d60c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c86f297-6c75-483e-8641-2d5ed905fdfc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ebaed0c-572d-473e-ae7b-2024a81c7e73"
            }
          }
        ]
      },
      {
        "id": "d496ffef-ac9c-4f9b-bf7a-b57ea8e2dce3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dfd81f46-7093-4f77-9d2d-4780bf5d448e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f909a306-6ce4-4fac-bd6c-47d170b26e04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "496b1b81-a0cd-4115-8b2a-be5974c78a1e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0b6f08-b883-4868-bd76-9baba5226837",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "196ce59f-84f0-4a39-8a8e-78e5281880bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b5714f-9a91-4bab-a11a-ce01c23213a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "73c4d251-3414-4399-9aea-98a6755b1342"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fd85f55-d6ea-4b9a-bd78-d679e10c6826",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7735b36-017d-4ed9-8567-689dbd96f437"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab0a4bf3-abf5-4dfb-acb5-919c7cd239aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9f7f3bbc-abb1-424f-9652-049e2bc1e922"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "89baa784-2288-488a-b363-077d832730a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2caf5c3a-bcef-4a77-bcaa-fa77d31ff7aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b1843dd8-1cf5-4168-8159-f27d8b528382",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d78ac1b-81f1-4104-ae39-bb3fbed2a6cc"
            }
          }
        ]
      },
      {
        "id": "d3c1286f-9034-4f4f-8f19-77712b81c177",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c8b18354-b68e-4866-9f13-4798bad9fe04",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b40e5de-b2ff-42f0-a76d-0949e2cb7cee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b68b5115-1886-4091-b05a-d0827ac7db4a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce25490b-d0e9-4156-ab8e-20fc0061ede2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efa255d2-2255-4d10-9fc8-e575b79790a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0ab0b7-523f-4c3f-9b20-db9e89e9f288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5900b9f1-5234-4ce9-b64f-23e9a9a387ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f019ee1-fda7-4d87-8d91-45937400973e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aaf83c2c-ce5c-4f86-91bc-ef274a5e4bef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6782f2d4-bdfa-4137-88c5-293b9d89bd29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0e2af22-58da-497b-9387-ffcded2f5cc5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "029a2963-2833-4ceb-a0db-6357fd26f533",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "75c5fd6e-7d3f-471c-af69-71f179175ab7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3958ed35-3c2b-447e-a14e-cf590b772541",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea3009b2-632b-4b30-a134-6ddb27b7feac"
            }
          }
        ]
      },
      {
        "id": "7ff7d838-6f84-43fe-b905-1082bbb2881d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74d40a42-344f-4ed7-8a6c-13ff7176ddf5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5beb68c0-2778-4059-ba0a-cb59294a73f4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "db99b6a2-b1ff-4535-9609-1f71b6a1de39",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "57038727-952f-4dd2-9528-c5864c519509",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c7639a8-37fc-46c6-93b9-9c5e8b8a50a5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 59.37543859649123,
      "responseMin": 9,
      "responseMax": 680,
      "responseSd": 67.90232479471474,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703896463522,
      "completed": 1703896489645
    },
    "executions": [
      {
        "id": "8d7e0763-8f72-41a0-86c0-4dae7c9c0e70",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f528ce06-d5d1-4c22-ad13-3996d26caf64",
          "httpRequestId": "3a9a3248-bbfd-44a3-a513-c6cdb7cf7b55"
        },
        "item": {
          "id": "8d7e0763-8f72-41a0-86c0-4dae7c9c0e70",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "28978218-743c-461a-b902-60bba0782282",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 0
        }
      },
      {
        "id": "b5005e11-fac7-4d72-9d7a-2ef95ab03c8d",
        "cursor": {
          "ref": "c771f807-d8ef-4114-8360-9fe3e6977c54",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d56e9dcb-b288-4350-9c91-2232fbac7d7b"
        },
        "item": {
          "id": "b5005e11-fac7-4d72-9d7a-2ef95ab03c8d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "26cd86e7-6a3d-47e0-a09b-d9bbfa1f5248",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "8192fa64-4732-4945-a53d-401ee74fe80c",
        "cursor": {
          "ref": "2954fdc4-6ede-40d4-bbfc-048bfeebbf92",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "663ba545-06a0-43a7-ba8d-2282d5e08a36"
        },
        "item": {
          "id": "8192fa64-4732-4945-a53d-401ee74fe80c",
          "name": "did_json"
        },
        "response": {
          "id": "fe177abf-c695-467e-bb0c-a4d242321574",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3457a48-8f43-4b61-83cd-f734dd667e61",
        "cursor": {
          "ref": "130cc952-900b-4432-86ad-5b7a4d915bfb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6b6c4abc-2f2f-407d-aafd-191344794943"
        },
        "item": {
          "id": "c3457a48-8f43-4b61-83cd-f734dd667e61",
          "name": "did:invalid"
        },
        "response": {
          "id": "184477c2-49c2-4b95-b80f-5f0c0e4f2123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3457a48-8f43-4b61-83cd-f734dd667e61",
        "cursor": {
          "ref": "130cc952-900b-4432-86ad-5b7a4d915bfb",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6b6c4abc-2f2f-407d-aafd-191344794943"
        },
        "item": {
          "id": "c3457a48-8f43-4b61-83cd-f734dd667e61",
          "name": "did:invalid"
        },
        "response": {
          "id": "184477c2-49c2-4b95-b80f-5f0c0e4f2123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd10898-4cde-4559-8294-8e1fd22e3fb9",
        "cursor": {
          "ref": "c51ae8ab-d0a4-4959-a6fa-74a0b86cb87e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c9e5043e-5005-4709-9226-a7697322f9f1"
        },
        "item": {
          "id": "2fd10898-4cde-4559-8294-8e1fd22e3fb9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "731ce5d8-344d-4d02-b4e2-af8b178b51cc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 103,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be1c2b3f-d441-4454-a1fb-e9843c7dad81",
        "cursor": {
          "ref": "ed6eda99-5c1a-4e9d-9972-2c6f450d9ec8",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "63997fd4-2422-453e-93e9-4e2f0979b2ee"
        },
        "item": {
          "id": "be1c2b3f-d441-4454-a1fb-e9843c7dad81",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a46d36b0-776e-45de-a834-b510c4ed391a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "267a9be8-3175-42e9-b26a-031a002437b5",
        "cursor": {
          "ref": "1c4f24a9-341a-4415-8338-a1bcc5bc163a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "823c0edc-e2e2-40ee-9be9-c7fc9b759ec1"
        },
        "item": {
          "id": "267a9be8-3175-42e9-b26a-031a002437b5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "da865f20-d1e3-4459-8611-29f1cc11bec9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ae41b1-720e-4b7d-9d0f-4446ff8168cc",
        "cursor": {
          "ref": "cf662f78-719c-44ae-9a62-ed4e081c5c8c",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b3ee0759-f24e-48af-afa1-c204de147b69"
        },
        "item": {
          "id": "16ae41b1-720e-4b7d-9d0f-4446ff8168cc",
          "name": "identifiers"
        },
        "response": {
          "id": "0f7da9bf-1f86-4973-b4b0-3f4dc181b76a",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79b9c5f-a332-4ed2-9d52-94b754987c5a",
        "cursor": {
          "ref": "9e526066-3c98-4bae-83af-1a9ae2c33107",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b678d17d-136d-444d-baaf-276d6c33410f"
        },
        "item": {
          "id": "a79b9c5f-a332-4ed2-9d52-94b754987c5a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2411639f-0fe9-45fc-b09e-2e8c1fea8c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1d88ba-a225-4925-84db-1a5208e7e83d",
        "cursor": {
          "ref": "e378aaaf-18d6-4838-ad95-2142acd8a86a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e4e6e587-ceec-457d-9f66-bfff64f73132"
        },
        "item": {
          "id": "cb1d88ba-a225-4925-84db-1a5208e7e83d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c559fed3-93cf-4605-9a31-33bc9a2d2044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09a19dae-aa0b-46ab-8f7c-0a1cf9951106",
        "cursor": {
          "ref": "a041447f-2dbf-4a1f-b555-d9f9f71116b3",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "098fb845-325b-4512-a019-e3ccfaf128a3"
        },
        "item": {
          "id": "09a19dae-aa0b-46ab-8f7c-0a1cf9951106",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "97acac80-438b-433e-bab7-c1ed689069eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c498391-df47-44d8-867d-751606e4fbbe",
        "cursor": {
          "ref": "688cfdeb-c8aa-40e7-93e9-7e94f360fa4d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "acdf5524-c1bf-43ed-9409-a99a21951bb1"
        },
        "item": {
          "id": "2c498391-df47-44d8-867d-751606e4fbbe",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "171e3ca7-b5c5-460f-8747-3eabf2f092be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26254fd4-db8b-4cf8-a4dc-4902da2e10df",
        "cursor": {
          "ref": "1250b952-4a36-400e-b274-c65749bf6af1",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7e3626b6-9f58-4d16-ae70-cacce2226599"
        },
        "item": {
          "id": "26254fd4-db8b-4cf8-a4dc-4902da2e10df",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a747ebb8-b083-4ba5-aa88-63b1e01e832d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876af093-79f0-4c8a-95d9-f8f5c318343f",
        "cursor": {
          "ref": "55d8c268-ed63-4523-814c-e6f797ae4e3d",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bbf72e08-a072-4d12-adaf-d2245ab4b139"
        },
        "item": {
          "id": "876af093-79f0-4c8a-95d9-f8f5c318343f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "130f27fc-59aa-410f-80cd-b0d094718731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa9db05-61c6-41d4-b744-cfe6abffec43",
        "cursor": {
          "ref": "cce4b8b4-e07f-4670-a156-43cc60537a2d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a37947fc-21a2-4ede-bd68-312df586a18d"
        },
        "item": {
          "id": "4aa9db05-61c6-41d4-b744-cfe6abffec43",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "526b0708-1e6c-4fe0-acb2-27aaa2e4f24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0feca1d-d4e9-4729-917c-764369d032f2",
        "cursor": {
          "ref": "f8183546-eb5b-49ce-afe9-fb1c1af6238a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5a619140-a7bd-45bf-b51f-13b59ad4db94"
        },
        "item": {
          "id": "f0feca1d-d4e9-4729-917c-764369d032f2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "aaccc66b-8854-4ef2-a04e-7cf285e999f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8511c34-4914-4c52-8364-f60a0dac06ea",
        "cursor": {
          "ref": "7ae90b36-5536-4692-9deb-21f840f63a79",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "17c6b985-5797-404b-a8b8-b2c417141892"
        },
        "item": {
          "id": "f8511c34-4914-4c52-8364-f60a0dac06ea",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f20d9227-df8b-43ea-b62e-c18675604cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02617914-a43f-4927-a7d1-930bdc39535f",
        "cursor": {
          "ref": "22fb27fa-a87a-4e65-9954-522bb37f4b86",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "343595ce-2985-4edf-927f-55cb8bffff7f"
        },
        "item": {
          "id": "02617914-a43f-4927-a7d1-930bdc39535f",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "604c7cd4-5297-4b92-80a1-93af3cbeddfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41dc7d8d-30d5-4198-8b04-e836481a8646",
        "cursor": {
          "ref": "fb586eef-d0e3-4c2c-a84c-aa9b83f8eeda",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3aa9cd5f-2f52-46aa-b8c5-07bdd50b9009"
        },
        "item": {
          "id": "41dc7d8d-30d5-4198-8b04-e836481a8646",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c3784080-cd8d-47a7-9483-0fb69c7d9406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09000a18-5b5a-4726-bae9-91c3a1fee541",
        "cursor": {
          "ref": "d63447bf-c7af-4520-9a39-c6428efb0f16",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c7dbd33e-d512-4bd2-92a5-489b1bb7f136"
        },
        "item": {
          "id": "09000a18-5b5a-4726-bae9-91c3a1fee541",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "61f54658-118d-4f02-8ac5-f3b17e616220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c429930a-9509-4405-9566-4d3ee47e8057",
        "cursor": {
          "ref": "111af35b-7e4f-4a7e-9cc5-ce031c84ca5a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9d409f26-26a5-4268-ab66-dec5c59c4cda"
        },
        "item": {
          "id": "c429930a-9509-4405-9566-4d3ee47e8057",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9308d4cb-73e0-42b5-98c8-151207d8d167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827b891d-ab1f-4fa3-84bf-96f80b78a16c",
        "cursor": {
          "ref": "c64fb430-2b5d-41ab-8640-e25209e2ac81",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6d7e5f71-e29a-4f62-8654-ecc845f7f3a5"
        },
        "item": {
          "id": "827b891d-ab1f-4fa3-84bf-96f80b78a16c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "269c801d-b013-4a50-8b0c-195eb15b42d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5731385-777c-44d8-95f2-850a9f2102fc",
        "cursor": {
          "ref": "3ceaa1da-de32-45f6-b13d-b2d3861bd313",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "0daf87ae-171b-49cd-8966-430b8f46610c"
        },
        "item": {
          "id": "a5731385-777c-44d8-95f2-850a9f2102fc",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "edb49143-01a8-4931-a58a-2e3275583fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "902298a6-c07f-4e2d-b4e3-ff190066630d",
        "cursor": {
          "ref": "13dad4b1-e806-43be-bbcd-b5bf011b931c",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "90560417-b337-4617-ad93-7f4920b8114a"
        },
        "item": {
          "id": "902298a6-c07f-4e2d-b4e3-ff190066630d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "20ceed5d-3006-49ed-9dae-f25fe53cd628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2737c6d3-c178-4b2c-b0b1-be172d53ad23",
        "cursor": {
          "ref": "6c3723d8-460d-4140-814f-4b80acd309e7",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dc5ecffd-5117-44a4-8142-17a54f9754b3"
        },
        "item": {
          "id": "2737c6d3-c178-4b2c-b0b1-be172d53ad23",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d663d35f-54da-4946-ac87-f6556f5f844f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc784790-0108-4ebb-8d72-034d04485b5b",
        "cursor": {
          "ref": "3c59ee9f-527c-428f-afbb-63836ac97271",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "133d8248-f04e-4a5c-9aad-09b3a0b3d501"
        },
        "item": {
          "id": "fc784790-0108-4ebb-8d72-034d04485b5b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5cd33343-3cb0-468a-b929-afaf05132cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6707cb7-bbee-4a78-a88a-92a3a7d39cbc",
        "cursor": {
          "ref": "e076d7e7-5587-4484-b93d-af4d3278fd2c",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "caa7aeef-9590-4911-87bd-19d93c659ef2"
        },
        "item": {
          "id": "b6707cb7-bbee-4a78-a88a-92a3a7d39cbc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "c4e6727a-45e4-410a-b3ca-58ba9b4c72aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd9814e-54cc-455b-a3dc-d6d9db465aef",
        "cursor": {
          "ref": "17f6446f-ac83-4a79-8fe7-49fd48e8ceb7",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c230220b-5cc6-4211-afd0-aba7212fe881"
        },
        "item": {
          "id": "0dd9814e-54cc-455b-a3dc-d6d9db465aef",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "07e9835f-1773-4b0b-98bd-fe6d93840b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2193a42-3d52-4830-8e13-2a407ffdf4f8",
        "cursor": {
          "ref": "ed824d73-afad-44e5-bc27-9d40b79ceebe",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "09c5aad0-0bb8-4a61-89d3-b24cde1ff91e"
        },
        "item": {
          "id": "a2193a42-3d52-4830-8e13-2a407ffdf4f8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3b580a71-bb5a-4cd0-ba11-2489cfb68be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb9fdba-d49e-4074-a44d-664002608423",
        "cursor": {
          "ref": "e534d68b-3915-465e-a021-141dcdb35d2b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "21cd7c50-0212-4d4b-a954-c6a628715d4a"
        },
        "item": {
          "id": "8bb9fdba-d49e-4074-a44d-664002608423",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8d5d49ee-b9d6-4782-9edf-d48e7a9475d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfeffe3-f2a0-4e0d-a7df-bdd03b2627e0",
        "cursor": {
          "ref": "d30db147-86ba-4ba9-be7e-d47f9f7254ab",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "027f5cae-8075-449b-8072-1c2c541b4a36"
        },
        "item": {
          "id": "8cfeffe3-f2a0-4e0d-a7df-bdd03b2627e0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "845774f4-5b05-4bcb-9e84-4984fb8734bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3594d2-dced-4d38-beaf-4028618c6bc5",
        "cursor": {
          "ref": "2a814e76-5045-4316-b52e-eb6d9ece20d7",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9a0b7b93-4e4d-47f8-b9f4-3ff16eb2bcb1"
        },
        "item": {
          "id": "5d3594d2-dced-4d38-beaf-4028618c6bc5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0507f010-4a2c-4809-9427-88326145d8d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac2fc38-a14c-4f57-bee0-09f631b2c9cb",
        "cursor": {
          "ref": "51eec33b-33ed-44b2-979c-2498494794b3",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0264adf1-5560-424e-be94-5699453e1223"
        },
        "item": {
          "id": "3ac2fc38-a14c-4f57-bee0-09f631b2c9cb",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ede0d9b4-7839-441d-a125-9dc8feaea847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988a5709-eee0-49be-a8ce-5a5729c8df41",
        "cursor": {
          "ref": "d0ec605e-0966-41be-a9c7-5bcdd5966902",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "00d5b16e-ed61-4fd9-9ad0-6e03ca58b313"
        },
        "item": {
          "id": "988a5709-eee0-49be-a8ce-5a5729c8df41",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "5818679e-0e2f-475a-9375-be7b0dbf33df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cbc9ae-f7c6-4090-9b04-2dc0c4bb9424",
        "cursor": {
          "ref": "9cea9158-0299-44a8-b0d3-4e8afc7fea65",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "514e7075-4ac8-463c-9fe7-23325c1c0958"
        },
        "item": {
          "id": "48cbc9ae-f7c6-4090-9b04-2dc0c4bb9424",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "04c6496b-4012-4241-b0d6-8fed93d8a963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c01c6bf-cff1-4eef-b2ab-946535928e41",
        "cursor": {
          "ref": "74d85f91-990d-4826-beea-2586e3c6969b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fa9b9bd5-7f7e-4725-9515-7fa7e9310932"
        },
        "item": {
          "id": "9c01c6bf-cff1-4eef-b2ab-946535928e41",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1b3c323b-c7f5-4e44-80d9-e02a83bacec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab2219d-d908-4ef2-af02-ccdda3277142",
        "cursor": {
          "ref": "d07c96f2-b9aa-4b6c-821d-ec55cd917fe4",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "79ce7967-7af0-4983-b575-70ad67223936"
        },
        "item": {
          "id": "dab2219d-d908-4ef2-af02-ccdda3277142",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ad380840-85b4-4272-b430-1f19231cea92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7648bb9-b3b7-4c1b-ab1b-cc73de3e5fde",
        "cursor": {
          "ref": "8793f73e-8f00-4b2b-a3f9-760c1c0ca121",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bd9a3813-596c-4046-80ec-c67b032ccb62"
        },
        "item": {
          "id": "e7648bb9-b3b7-4c1b-ab1b-cc73de3e5fde",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9526ee49-0bc6-4485-a63d-67a4cbcd79e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7485f6f-2a62-43ef-ac81-a7c7145d3bcb",
        "cursor": {
          "ref": "b4742b80-2a8b-433f-979f-7e57debdc950",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a5384bed-8836-44e3-bcc8-33858eaa7c78"
        },
        "item": {
          "id": "e7485f6f-2a62-43ef-ac81-a7c7145d3bcb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0871f53b-b7ee-4c91-aa33-69dbf5d9d6d4",
          "status": "Created",
          "code": 201,
          "responseTime": 680,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "083410a9-1cd3-400d-926e-e72073ae53c2",
        "cursor": {
          "ref": "e1c41531-bd61-4d4f-b4a8-2816a17f75db",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cddff041-e3ba-4d59-af2a-ffaf22733c50"
        },
        "item": {
          "id": "083410a9-1cd3-400d-926e-e72073ae53c2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "192c6e99-0270-49cb-a4b3-7b5b78b9a381",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bd9a2dec-6498-48c1-b998-f60ab5b75b48",
        "cursor": {
          "ref": "413756a4-48c9-4443-9adf-2d182bec84eb",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ae1df6bb-11e5-4a4a-9dbd-d4770f176fe1"
        },
        "item": {
          "id": "bd9a2dec-6498-48c1-b998-f60ab5b75b48",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fc934f40-17bd-4bab-b982-f47975c51bc6",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4f14f929-440a-4677-9834-2b2d374efdfe",
        "cursor": {
          "ref": "170c2a8c-0524-4d86-834b-eb40a9368ae4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7312cee4-139a-4c06-aa7f-e11382c7f0d0"
        },
        "item": {
          "id": "4f14f929-440a-4677-9834-2b2d374efdfe",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c929c52f-3627-4e40-845a-849750bfbb49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6295fee-a8aa-457b-992a-78c42aa34cb1",
        "cursor": {
          "ref": "6d002656-5609-410d-b184-0c2a22ad609d",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ab59c864-708d-4bf4-ba4e-c131f6e467f1"
        },
        "item": {
          "id": "c6295fee-a8aa-457b-992a-78c42aa34cb1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "807227ec-561b-4096-95b5-eb28d63a051f",
          "status": "Created",
          "code": 201,
          "responseTime": 206,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a052d3f7-5d90-4fe0-a2c2-001cc5b14434",
        "cursor": {
          "ref": "97e56586-ec88-4d34-a3cc-66e7512f2387",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4502242c-64c2-4d80-af69-578738245235"
        },
        "item": {
          "id": "a052d3f7-5d90-4fe0-a2c2-001cc5b14434",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0b642f5f-b26f-4a8e-868c-bbfbb3d86d93",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a22e736f-0ed9-4891-815e-864e59162d72",
        "cursor": {
          "ref": "c112d502-631c-4d9d-98d2-080790e0be23",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "094d2ed8-a2b2-4e8c-b73c-2e1b1ca5feb4"
        },
        "item": {
          "id": "a22e736f-0ed9-4891-815e-864e59162d72",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2f754a16-5c40-4cf7-914b-7407100daf7b",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "83ff8d43-9312-4601-95d2-cbad8f5b8f7f",
        "cursor": {
          "ref": "34c23393-1336-4f5b-ab7d-64c066acd9ef",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f47a5df5-8b12-484e-9176-fa071f608bc0"
        },
        "item": {
          "id": "83ff8d43-9312-4601-95d2-cbad8f5b8f7f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d243323e-a991-4251-9ce0-1b08ae4dc608",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b2780613-d7d8-4383-896f-f05c59d25c64",
        "cursor": {
          "ref": "af3e1762-6aba-42a4-8783-398af9507cd3",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d889a33a-106c-4aaa-8308-e2430af9852f"
        },
        "item": {
          "id": "b2780613-d7d8-4383-896f-f05c59d25c64",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "71757378-f879-4f44-a725-cdb5f44cc9c7",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7de51f20-0478-44d9-82ed-82cb69471c59",
        "cursor": {
          "ref": "c840fc64-f6c8-4620-adf1-9c1e9ae7d887",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "96cf9b12-17ac-4456-9c52-01b82a16b80d"
        },
        "item": {
          "id": "7de51f20-0478-44d9-82ed-82cb69471c59",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "dca5aa85-f8e7-4e00-be7b-e89a8a253939",
          "status": "Created",
          "code": 201,
          "responseTime": 210,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "99ef2cf8-de0f-4612-8008-bbedd8bcdc9d",
        "cursor": {
          "ref": "6ff5b54f-c1e8-4e8f-b1ca-aa2d13d435a8",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "200c2ae1-d9ee-4506-b1b6-62ba9947cddd"
        },
        "item": {
          "id": "99ef2cf8-de0f-4612-8008-bbedd8bcdc9d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "fae60d0d-9bfd-462e-a405-2a6550351bcb",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "77effd7e-3f5b-4107-9efc-7606a179fb5f",
        "cursor": {
          "ref": "fd94f609-e8a3-41d6-9033-4cb77f929747",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8ac9bdab-9880-4665-9557-56332af4713f"
        },
        "item": {
          "id": "77effd7e-3f5b-4107-9efc-7606a179fb5f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fa92d679-b56d-4ecd-b754-ef0e8fee79f7",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "c94cda48-a851-4c3f-9f3f-2782a584b272",
        "cursor": {
          "ref": "0794d36d-bbc3-4439-817a-e9f3da978628",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f774fe2e-40a5-4b32-8cbe-c9b3f2ca48eb"
        },
        "item": {
          "id": "c94cda48-a851-4c3f-9f3f-2782a584b272",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7f395291-a00b-4d7e-80de-62f4620dd068",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "171fa77d-2575-47bc-8212-867938f555dc",
        "cursor": {
          "ref": "fe97a132-514b-48c4-a831-b6f45191ed5b",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4fc47d14-83c6-490a-9444-e023631abd8d"
        },
        "item": {
          "id": "171fa77d-2575-47bc-8212-867938f555dc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f70c7435-0204-41c7-aa0a-c1370d53dcc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80cd290-00aa-49b6-ab0e-d967636908a4",
        "cursor": {
          "ref": "61af2c0d-fb0d-43bb-8c8a-babab58c3736",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8eb2351e-bded-4e62-89e8-2a9c0ec8bc39"
        },
        "item": {
          "id": "c80cd290-00aa-49b6-ab0e-d967636908a4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "9ea60a9d-81de-4733-816a-b2d4493b85dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c02bf0-69da-4831-a11f-f6e0f7058d5b",
        "cursor": {
          "ref": "c4fbfba5-ed8a-421b-8090-7bbe40b1f2b3",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6e1e443e-5a4c-42a2-a2b9-772308043a5a"
        },
        "item": {
          "id": "48c02bf0-69da-4831-a11f-f6e0f7058d5b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d40cb7c3-d1a8-41e2-910c-5ba2cbacb18f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d418c09-7cbc-484c-aedc-c86acd2efaa4",
        "cursor": {
          "ref": "0934af01-5c95-4259-8d31-4e6ff7883ed1",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "198437ea-3291-44bd-981e-f7a7d3347fd6"
        },
        "item": {
          "id": "1d418c09-7cbc-484c-aedc-c86acd2efaa4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "13788a19-93b7-4fb9-973a-e426f9b77060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9011ba3e-5b48-4b20-b8fc-664b8ece0d4a",
        "cursor": {
          "ref": "3ef0a153-ba40-427e-a6e9-75e22202941c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f0580708-7f4e-4b68-961d-4ecf80629eb1"
        },
        "item": {
          "id": "9011ba3e-5b48-4b20-b8fc-664b8ece0d4a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c297b993-fd5d-4e28-81e8-ba0e7c2b30fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e92fc5-08c2-44a9-8860-2b750be8d3ab",
        "cursor": {
          "ref": "b9dd03a3-5207-4aec-922c-248867be0c69",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "51923d52-0393-4c87-9790-ee7d6b96f496"
        },
        "item": {
          "id": "06e92fc5-08c2-44a9-8860-2b750be8d3ab",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7f0afb4f-7211-40e7-96ac-1f674d2d4c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef36323-33c4-4130-981d-e94dbd611693",
        "cursor": {
          "ref": "694f9b74-288d-4fc0-a700-7cf5f65ba725",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "52698ce2-748c-4857-aaea-41ed5cc57603"
        },
        "item": {
          "id": "0ef36323-33c4-4130-981d-e94dbd611693",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6e265fcf-bfb6-44e3-9106-99dd56ae6c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3194aa9e-8262-45c0-a280-24335cf5c7ee",
        "cursor": {
          "ref": "8d7344f9-a051-4549-8f58-97bd1937e968",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "39ebcd32-4cd9-4bbf-a078-de03a75aefe3"
        },
        "item": {
          "id": "3194aa9e-8262-45c0-a280-24335cf5c7ee",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "64881fc6-7496-4e84-8e19-c4c6b457c74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001a1536-1725-47fd-9c15-c15d8041bd6d",
        "cursor": {
          "ref": "ee4e2609-befc-4daf-a26b-4f60dc2019a7",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "89707e0d-84f9-4ffc-bc8d-25eb9551772f"
        },
        "item": {
          "id": "001a1536-1725-47fd-9c15-c15d8041bd6d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "495187e8-b229-4b89-a036-95aded52a671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988c8e04-8781-472c-a9e4-8afea7205cd3",
        "cursor": {
          "ref": "739e66bd-ab46-4e58-8dc6-f94b2f7059e8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "10a83ede-95bc-498a-81f1-47dccf5381d3"
        },
        "item": {
          "id": "988c8e04-8781-472c-a9e4-8afea7205cd3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4c210813-0b8d-43f6-ad55-096c89fc8269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c89f40-866c-402f-8fb9-ce71646572d2",
        "cursor": {
          "ref": "ad64e473-7185-4a0d-a277-22fb7674e98c",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "914fa931-e142-4d2e-9908-f9041d25dba9"
        },
        "item": {
          "id": "d4c89f40-866c-402f-8fb9-ce71646572d2",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c5af3504-84e3-468c-9d50-214eb2a86183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f7b9c1-385f-43a6-a304-e7eed08d081a",
        "cursor": {
          "ref": "cef414db-d1dd-46c3-b8c5-56fd218768ee",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "99fe019a-e129-4dee-904d-6084f3f818ac"
        },
        "item": {
          "id": "01f7b9c1-385f-43a6-a304-e7eed08d081a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "52df487e-1145-47aa-b124-36d93bf33b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dba6d5a-e46c-4042-a756-12a659ec53de",
        "cursor": {
          "ref": "4f6984c7-1850-47a9-8ded-a47d274baef0",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4da70129-f82f-480c-bef8-07109715e0bb"
        },
        "item": {
          "id": "3dba6d5a-e46c-4042-a756-12a659ec53de",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "81882e59-0472-4a15-a2d4-a91eb8bceb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a72c58-42e6-4b69-93b8-c0da242e7046",
        "cursor": {
          "ref": "4832587f-7f7f-4652-9d11-0a7462fce7c3",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "57dc87f2-e530-4c2b-95e0-bdcea919b87f"
        },
        "item": {
          "id": "96a72c58-42e6-4b69-93b8-c0da242e7046",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "6e2c779a-c18c-4b36-9018-ae2a2cdae6ee",
          "status": "Created",
          "code": 201,
          "responseTime": 218,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "590f786b-ad14-4a97-9630-d2c8b203cfa3",
        "cursor": {
          "ref": "7e1b27be-b173-4c62-b032-4c9036c8738e",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4d6c9f61-4aa0-42ef-bf1d-f11bc4d243b0"
        },
        "item": {
          "id": "590f786b-ad14-4a97-9630-d2c8b203cfa3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f5b550ed-6fb3-4a5e-be98-b8aeb8cdae24",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "ebc2aa79-de03-472d-b485-26c479af16d2",
        "cursor": {
          "ref": "63070376-01bf-4d79-982b-f05eef178f84",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "82838648-b1a0-4648-82f4-beb8d2aa1e02"
        },
        "item": {
          "id": "ebc2aa79-de03-472d-b485-26c479af16d2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8badd42c-182a-4b07-82d3-7825119091ff",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5cf4117d-2728-4d08-8e3c-312785acf8e8",
        "cursor": {
          "ref": "425ee195-c832-455a-8158-522e1ef8fcc0",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f0803d54-cebf-4288-847b-10fbbd76be64"
        },
        "item": {
          "id": "5cf4117d-2728-4d08-8e3c-312785acf8e8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "135f757e-483f-47b0-881c-b17e540283df",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f1e65316-b682-4340-9f85-e7a6034681ad",
        "cursor": {
          "ref": "e72b039b-96a4-4cff-8ba0-1ea41a2874dc",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f9b5ad33-6b66-42d4-81da-90291222cefa"
        },
        "item": {
          "id": "f1e65316-b682-4340-9f85-e7a6034681ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "db24d776-cb8d-4666-9633-f549d6830d95",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1e065763-b521-4634-bd12-da538ccbe8af",
        "cursor": {
          "ref": "4be114d7-e33f-4863-9d83-b9d2aff3a5f0",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8044bdce-cee9-473a-a288-877eb531d0c3"
        },
        "item": {
          "id": "1e065763-b521-4634-bd12-da538ccbe8af",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "d517f92a-0008-4556-824a-c8f6598a6cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182aad02-b164-4f42-bd52-360777a48d16",
        "cursor": {
          "ref": "e02dfbf7-0523-4d36-bb50-11cd82896327",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5a602ae8-6bb7-407e-ae9d-b453d3a7f7a6"
        },
        "item": {
          "id": "182aad02-b164-4f42-bd52-360777a48d16",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a4597a71-390d-4dc9-b818-548a8a5cd9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d9602f-0d97-4ee6-8f49-8beff9661fa6",
        "cursor": {
          "ref": "f3a3d629-45da-4a0a-95d4-a4e9595bb3b2",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7ec30f04-9bee-4947-b9a2-a01b14cadce0"
        },
        "item": {
          "id": "57d9602f-0d97-4ee6-8f49-8beff9661fa6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "111f38e3-4b55-4324-98f5-9f3a6ba8ad60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88286ac8-047b-4560-aee0-43da4a57cfe5",
        "cursor": {
          "ref": "7bca6b52-13df-4fee-beae-d05489ba30c1",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "713b3fc7-2841-4af3-9086-dfe05c5016b9"
        },
        "item": {
          "id": "88286ac8-047b-4560-aee0-43da4a57cfe5",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f62c2dfd-84ef-4805-9a42-d3a2e605948a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c87753-cbbd-44e7-bb71-134c3300d60f",
        "cursor": {
          "ref": "97fb01eb-5892-4036-b469-535558b025f2",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8869ed13-fffc-438d-8ca2-416b0688fbc9"
        },
        "item": {
          "id": "34c87753-cbbd-44e7-bb71-134c3300d60f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a02bd2d7-7cd7-482a-bac1-e4c00bbacfe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448cbb79-c366-4e31-8e66-4e94df55ab39",
        "cursor": {
          "ref": "39e47b6b-c4e9-40a3-945d-e37de9155692",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1a575213-c561-4d9e-b55d-25532ddc9190"
        },
        "item": {
          "id": "448cbb79-c366-4e31-8e66-4e94df55ab39",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "36bd6e23-8405-4e55-8b67-cec52ba72c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc28c0d-bd00-483e-9a3f-e30256137d4d",
        "cursor": {
          "ref": "f36251bf-6520-46fb-b8dc-f711380fea40",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "18873022-c363-40fe-b6e7-0a7d8cce9026"
        },
        "item": {
          "id": "0fc28c0d-bd00-483e-9a3f-e30256137d4d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4d4b9f2b-b6da-4bc9-bcea-350981d28455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1652485-0ef5-4f86-9640-944d690e11c9",
        "cursor": {
          "ref": "a77f3252-3eeb-4ae5-9ae9-7a27cd071d41",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9460d015-b99f-4456-a295-e8cd7af1478f"
        },
        "item": {
          "id": "a1652485-0ef5-4f86-9640-944d690e11c9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fd2d654c-4f64-48f0-ae70-3071f596593c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801fa6e9-a5bc-48b8-b1f2-473943a69889",
        "cursor": {
          "ref": "9bbfd4cc-0726-4cf0-bf12-92090cef487c",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6363bac4-c837-48e9-952b-bf7dc9044eb3"
        },
        "item": {
          "id": "801fa6e9-a5bc-48b8-b1f2-473943a69889",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "75d1454b-49d3-4941-92a8-9a7195f4bec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f443a27-3906-40c9-996b-00ca193e902e",
        "cursor": {
          "ref": "505f913d-5d68-46fc-9f42-febde5769cb4",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "295e7de4-58ac-4bbe-98f6-f5f3b06d20bf"
        },
        "item": {
          "id": "5f443a27-3906-40c9-996b-00ca193e902e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5ac9a247-e1f2-410b-8414-f53ba0f0aa18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4a34a1-7315-4921-a4fe-fe5a249ac558",
        "cursor": {
          "ref": "3377d22e-6c94-4ae8-b8ee-e351dbdf11be",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fceffbda-6bf0-4eae-9011-bc2ee814b078"
        },
        "item": {
          "id": "fd4a34a1-7315-4921-a4fe-fe5a249ac558",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9f7d7c0d-d4c6-46f6-92dd-527c60b4f120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20fe3b5f-080d-4838-89c6-09c8e3bd6a57",
        "cursor": {
          "ref": "50a6fed7-ffdf-4e9f-aee5-219335df1eea",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7aee1527-87d0-4137-b522-8ea81f73eb1b"
        },
        "item": {
          "id": "20fe3b5f-080d-4838-89c6-09c8e3bd6a57",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a652eaca-e777-47aa-8b06-d6f7250d2c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10cb4cde-fb9e-4ad4-84de-f81869bdb6fc",
        "cursor": {
          "ref": "253a17cf-5022-440a-9114-163729112cf1",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bcfad009-3af3-4b34-8e53-090dea63fc47"
        },
        "item": {
          "id": "10cb4cde-fb9e-4ad4-84de-f81869bdb6fc",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c864f760-e945-458c-aa6c-03490aff88d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b61fd3e-b026-4078-8055-9985a2e8992e",
        "cursor": {
          "ref": "47522f89-2452-491b-b967-f5138d340ab9",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e3c0e71d-2859-486b-bf9b-c325b94b040b"
        },
        "item": {
          "id": "6b61fd3e-b026-4078-8055-9985a2e8992e",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a1f4a35e-ffe3-4329-8f61-568d63f84662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba389768-aaab-45dd-ab42-6b9c366d412a",
        "cursor": {
          "ref": "8aee8fd5-e0fe-4b65-9039-3a51d64a78d8",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "4db0df39-cdff-4516-9cde-27566bf7007b"
        },
        "item": {
          "id": "ba389768-aaab-45dd-ab42-6b9c366d412a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c23425db-c721-4813-a2d8-b935a7baeb32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf85364-822f-401b-98c4-03ae15981880",
        "cursor": {
          "ref": "99010c4c-7680-4d28-b927-433931518d73",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f069d9c8-09ed-47cf-bdbb-ad5fb3475228"
        },
        "item": {
          "id": "3bf85364-822f-401b-98c4-03ae15981880",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "10967c3e-4b8f-4fde-a84a-d9fa43fa210c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52830b2f-24bf-4724-a210-427137b8bc68",
        "cursor": {
          "ref": "3f149e3d-e1bb-421e-ab5d-53e1ef9b28d2",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "272db214-562a-4cb0-9c9d-897aeddc063f"
        },
        "item": {
          "id": "52830b2f-24bf-4724-a210-427137b8bc68",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ed292e24-b9d5-4eb9-b614-fae66d2491fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da76f43-0cd2-4991-b528-df20e4e4e7ae",
        "cursor": {
          "ref": "bcef7bab-8e6c-42b4-9df8-de26579b0cf2",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c0afdd80-ea30-4791-9b10-a0569f56ca72"
        },
        "item": {
          "id": "6da76f43-0cd2-4991-b528-df20e4e4e7ae",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bfc8148b-80cd-4b1f-9306-78242d77c62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9899ee99-00df-440f-9197-dce1a79b80ee",
        "cursor": {
          "ref": "22cb4bbb-6ad1-4e7e-b698-cf7c16b34081",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "853dc12b-874c-4074-b739-2f64f4eeba7b"
        },
        "item": {
          "id": "9899ee99-00df-440f-9197-dce1a79b80ee",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7f424b23-1793-42b3-9a18-68ebd90ab7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab04d4ae-fda2-4a14-9823-d46bc8264673",
        "cursor": {
          "ref": "3af2494b-4089-4592-a88a-6bcecbdb284e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "32a5dc23-3263-4102-b29e-ab5f374fe076"
        },
        "item": {
          "id": "ab04d4ae-fda2-4a14-9823-d46bc8264673",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5bf4b011-409e-4e4b-8f80-ba9006b60197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa13d4b4-e9b9-4d7f-bceb-7c073214235b",
        "cursor": {
          "ref": "ed3da477-5c6b-415a-9ce2-a4ef15794c25",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4f1d91eb-78df-4985-b458-6cc256d484a0"
        },
        "item": {
          "id": "aa13d4b4-e9b9-4d7f-bceb-7c073214235b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "444089df-4c8f-4d62-8934-7a6681ca9495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa062eec-72c9-4469-8ff0-97062a716416",
        "cursor": {
          "ref": "8aff91bf-c388-421f-8f70-9ea7039a502c",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "cf2d29e7-70dd-46d0-814f-cbb77ce68070"
        },
        "item": {
          "id": "fa062eec-72c9-4469-8ff0-97062a716416",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3b81320c-33ed-4fb6-96be-c7fe6b38eb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ab0ff9-ab53-4124-8fb8-e2ba33ee06e8",
        "cursor": {
          "ref": "715ff4f8-521d-4aea-8df8-1f98d782e190",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2a497fdb-d71d-4fea-8d83-0bfdab0c2fec"
        },
        "item": {
          "id": "d5ab0ff9-ab53-4124-8fb8-e2ba33ee06e8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "211a245a-7c34-4c5e-aff2-f4a7968b706b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5391d3c5-0756-4be9-a618-770946813064",
        "cursor": {
          "ref": "eb386e8c-ea80-40b2-99f6-3e79950785ba",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "40963488-c7fb-45fe-a1f0-2e362ba50a29"
        },
        "item": {
          "id": "5391d3c5-0756-4be9-a618-770946813064",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a2aa4c49-0f8d-4b26-bbc7-68c153efaef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e06884-2e2a-422b-ad52-f48735f78568",
        "cursor": {
          "ref": "cafb2ece-c1fb-43be-b50a-1f09c1debaa9",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2bd0b952-6a2b-4cdb-8784-dd7ee62926fc"
        },
        "item": {
          "id": "57e06884-2e2a-422b-ad52-f48735f78568",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3161a581-2146-487b-be67-347ecb52769e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa5a5e8a-282e-47d6-9b93-67110b294124",
        "cursor": {
          "ref": "f24330e0-4564-483b-b1c4-393d9d76de33",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e996472b-3a60-49c1-beaf-bf753f327fac"
        },
        "item": {
          "id": "aa5a5e8a-282e-47d6-9b93-67110b294124",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "59dee408-7937-432e-a94c-72e67076a6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ff2652-ff94-40e8-a65f-87ec0e53713e",
        "cursor": {
          "ref": "8aac5a40-a258-4e92-8285-1327b672f200",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f4c31d28-f61c-4b6f-a47c-5d46eedfe890"
        },
        "item": {
          "id": "80ff2652-ff94-40e8-a65f-87ec0e53713e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8ab334c5-d568-4159-99d5-6508732a52d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c0c0dd-7d37-4d19-bd39-e1feb43b9d3d",
        "cursor": {
          "ref": "c5a40196-3ce6-462c-aff0-c0e5b73decf1",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "8e9d9d75-cb44-4096-a0fb-58d3ac9e95ad"
        },
        "item": {
          "id": "74c0c0dd-7d37-4d19-bd39-e1feb43b9d3d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "980d4ef0-3dfa-4b08-b0b1-b32f70e0f1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e3bdd3e-603f-4218-8d43-1cf3584a50c3",
        "cursor": {
          "ref": "ae0df7b5-a29b-4355-adff-4b09139abcb3",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "28abc5bb-d102-40ff-a161-025ea48c77a4"
        },
        "item": {
          "id": "6e3bdd3e-603f-4218-8d43-1cf3584a50c3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "16e8e125-c88a-479f-b79a-7cc65786609d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6115e0-1c8f-4a8c-8f3f-f38adb41e2ec",
        "cursor": {
          "ref": "e5fc1b09-b336-45da-8e15-1244018cb8cd",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "f68207b8-2213-4b36-9eb8-34e61d96f6ec"
        },
        "item": {
          "id": "7a6115e0-1c8f-4a8c-8f3f-f38adb41e2ec",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8f3876a3-2710-4d2d-b52e-16d9f02cecc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1e48623-109e-4f54-a48a-c8d966aaf354",
        "cursor": {
          "ref": "c5ca16a7-a3df-4520-afef-7c93890c940f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c9a0fe60-332c-4b82-8935-63326ea5f325"
        },
        "item": {
          "id": "d1e48623-109e-4f54-a48a-c8d966aaf354",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "359f3d78-3a16-429e-a077-d238d5bc371b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dabc3c-4fe1-4892-b674-398aea16341a",
        "cursor": {
          "ref": "1c52c3d0-42ec-47cb-99d6-23e8592a3f70",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "167e7e51-0ede-465b-926f-1519f7528e0b"
        },
        "item": {
          "id": "e7dabc3c-4fe1-4892-b674-398aea16341a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f9b9a4b3-e818-451a-b48a-fcf21a5fc6a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e94265c-cc6a-4c0d-b148-51a4e3f4ed40",
        "cursor": {
          "ref": "1da732ae-71b6-422a-a6f1-15cf21ebba67",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f4a90deb-1b56-4735-99be-cdd19ac1b44b"
        },
        "item": {
          "id": "5e94265c-cc6a-4c0d-b148-51a4e3f4ed40",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "f691a22f-fe1a-48b4-866a-06d43194f4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "2c4c211b-4352-494f-be62-65502f34589d",
        "cursor": {
          "ref": "cf8491b4-9d41-4698-a179-20b2f671dd3e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "8cfc985c-a99b-4157-954e-b322b763b03e"
        },
        "item": {
          "id": "2c4c211b-4352-494f-be62-65502f34589d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b553ff9b-2846-4f90-b588-c961e33815c5",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c3a65c-ac30-4d8c-a56e-93aa1db29014",
        "cursor": {
          "ref": "7ce33d5b-a171-44ea-a615-2798703b64d1",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9aec3c93-2491-45b2-b24a-49d8be62390a"
        },
        "item": {
          "id": "01c3a65c-ac30-4d8c-a56e-93aa1db29014",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "3ef36120-2464-4ae8-aa0a-d0501f2b1b4e",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "718e6d7a-2e0c-4e4d-8d34-0a706b1dc370",
        "cursor": {
          "ref": "8b09fb6d-ff6f-456c-97e4-dfae2321ca6a",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ef695ed4-6db4-4451-8f8d-52272e29ef5c"
        },
        "item": {
          "id": "718e6d7a-2e0c-4e4d-8d34-0a706b1dc370",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ba56a62a-12af-4839-80ab-8b9e985ddc90",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1552f899-5057-4cf0-9632-140902151374",
        "cursor": {
          "ref": "18cc58a4-a4b4-408f-9743-b6fe36e56766",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "87927e6b-3cae-4218-9259-c21ffe0b875c"
        },
        "item": {
          "id": "1552f899-5057-4cf0-9632-140902151374",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bebbec9e-5ad0-47e8-a6d6-8756063eb20e",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac51c172-05cc-4ab8-a03a-63aed42e49c7",
        "cursor": {
          "ref": "b773ee2f-f7c8-433c-9af7-b20810f1b632",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c632eaf8-7ea3-4edd-86b9-c4ff55552c4b"
        },
        "item": {
          "id": "ac51c172-05cc-4ab8-a03a-63aed42e49c7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "099c768e-976d-4742-8b9b-f4bc36efacd7",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-30T00:34:36.205Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-30T00:34:36.205Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2f50e781-7b13-4760-af3c-c949de22cffc",
        "cursor": {
          "ref": "4c30a9f7-8d2e-48e7-852c-32d7c8244d15",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "50a0ad7a-60b7-453a-9f04-bad7da5688eb"
        },
        "item": {
          "id": "2f50e781-7b13-4760-af3c-c949de22cffc",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8ee883b0-859c-42fa-91e7-6355ea8fa054",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07513bc-e2a0-4907-9195-1ce9daf4218a",
        "cursor": {
          "ref": "2e0b1e84-686a-4ace-b2ca-a615255f9753",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "689b82c7-bbbc-4fc3-9a93-c3ca881b7a7f"
        },
        "item": {
          "id": "e07513bc-e2a0-4907-9195-1ce9daf4218a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "81bcc085-224a-4acf-8381-dd656b36889f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1f29f7-af3a-4d87-b832-195f4757bd42",
        "cursor": {
          "ref": "a9221ec2-51ed-4b47-960c-51381ea7ef67",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "aeee0298-850d-4321-bcca-ec122258887a"
        },
        "item": {
          "id": "bd1f29f7-af3a-4d87-b832-195f4757bd42",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "8dadfe40-43df-4779-b954-baaa0df50b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c830a23-b438-4e92-8ff9-8c2ca1a06e26",
        "cursor": {
          "ref": "1686a650-4c5e-427f-8c89-baffb69405ac",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5ba875d1-311f-4a58-b18a-9a88d8a72b25"
        },
        "item": {
          "id": "2c830a23-b438-4e92-8ff9-8c2ca1a06e26",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "887531fe-7f08-4732-a8a6-bef0d868260a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049e3141-46fd-4236-9379-1b34145f61bb",
        "cursor": {
          "ref": "a51b08ef-c084-4bc7-9a0c-dd31df4d3c7b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a113cc5a-718b-419d-a6bf-baddfcbcb327"
        },
        "item": {
          "id": "049e3141-46fd-4236-9379-1b34145f61bb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3817d22f-aafb-4639-b759-7ce35b14192d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "113fdf9d-d6a1-4be8-a3ef-9d91a576f0f3",
        "cursor": {
          "ref": "031bb1bc-ef66-4cfc-8abb-c7101b194181",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5c5ed06c-2066-4e91-8545-e664b9a4c398"
        },
        "item": {
          "id": "113fdf9d-d6a1-4be8-a3ef-9d91a576f0f3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8d746601-3871-435d-bff4-ae6fdd70e658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625a079a-0953-4e7c-90e8-2f994b02de08",
        "cursor": {
          "ref": "cfe0c75f-01b8-4238-a5d7-b1f104868238",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "63ce0906-c4fc-40d1-8cc7-c104c14eb96a"
        },
        "item": {
          "id": "625a079a-0953-4e7c-90e8-2f994b02de08",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "cd6bef29-cc63-4404-8c3d-57d81abf9862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc72976d-846d-4176-ac52-66f2ebd3f697",
        "cursor": {
          "ref": "416d0f45-2563-486e-a9be-043e86a155f2",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4143af0e-6eaf-4085-a26a-a8b0926b8ac6"
        },
        "item": {
          "id": "dc72976d-846d-4176-ac52-66f2ebd3f697",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2312ac04-9b75-4b7e-b0e6-f6318f6e7b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5a28e2-5469-450f-9eb5-f1241208b145",
        "cursor": {
          "ref": "86809d61-eb6c-4193-a823-49af26470d6c",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "93159721-f6a6-4248-ba5c-227733820b3b"
        },
        "item": {
          "id": "ca5a28e2-5469-450f-9eb5-f1241208b145",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "62f41d48-dfcf-43b8-9d04-55dd6d6d64b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a7bd75-7e7d-4dd3-8c26-7e10aa9e1921",
        "cursor": {
          "ref": "bb3cf1cf-4681-4507-a409-6cfd38222710",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "db2bef97-eaf9-4024-bd3c-e4e9a79f8eb6"
        },
        "item": {
          "id": "26a7bd75-7e7d-4dd3-8c26-7e10aa9e1921",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "11cacdb9-0fae-4839-b10d-0f8ca4aace19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d20eeb-647a-426a-bfce-db3bc3050733",
        "cursor": {
          "ref": "eb4ab33f-04bc-4644-8a11-ea32f9149a28",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ff23fe4e-42b9-4238-9d99-a294262c4718"
        },
        "item": {
          "id": "50d20eeb-647a-426a-bfce-db3bc3050733",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b85f3fc1-8619-472b-8729-82fd3325e563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908976cf-83e8-4f85-a713-5baf3acb7930",
        "cursor": {
          "ref": "5e28871d-ba64-462a-a46b-21cf25bd5209",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "59c99354-a470-4293-9332-a6350b98e3e0"
        },
        "item": {
          "id": "908976cf-83e8-4f85-a713-5baf3acb7930",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "42fa6cb5-1489-4ecd-a89f-202bd0442b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5f1310-4dc2-4af7-9929-1ba879af5de9",
        "cursor": {
          "ref": "bd8cc398-bd70-4a49-92eb-d7e64d54987d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "462a24ea-b344-4fd9-b584-c4f8372912ab"
        },
        "item": {
          "id": "3e5f1310-4dc2-4af7-9929-1ba879af5de9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "184f9afd-0f8f-4fcc-b6f8-b35a4d6e85ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ddb75c-beff-4ed6-be30-42a34d51765e",
        "cursor": {
          "ref": "74f5f876-6ae6-471e-9a2b-59c09495c662",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f6225621-b0db-4c33-8b6f-b51079372f63"
        },
        "item": {
          "id": "d2ddb75c-beff-4ed6-be30-42a34d51765e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b5bacf94-7421-44d6-ad9a-887269f1c4af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0b7243-1097-42f9-b99a-43bdcf28bd9c",
        "cursor": {
          "ref": "4b9f7f46-ee3f-4a2b-956b-1822708923b9",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0bed35d7-93d0-42e7-8387-8f4b6f426297"
        },
        "item": {
          "id": "4e0b7243-1097-42f9-b99a-43bdcf28bd9c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3d0a7ee6-1bd7-4ea2-a72f-97de078aabc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f87a3c-db7e-4e7b-a69b-a570b31ba4ec",
        "cursor": {
          "ref": "1c7f946e-440b-416f-af85-8672d31584fb",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d47ac9c1-8c52-44b0-be4b-7c559e3c3e27"
        },
        "item": {
          "id": "99f87a3c-db7e-4e7b-a69b-a570b31ba4ec",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fca4a2e0-8869-438a-9bb7-09ebee03bbb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3b46bd-779b-4f5a-9646-201bcdfd0ee0",
        "cursor": {
          "ref": "821b0efb-2265-4cbe-834c-cd03c2d52054",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b3c886c3-a51c-4f39-9673-a8064a87ef6b"
        },
        "item": {
          "id": "eb3b46bd-779b-4f5a-9646-201bcdfd0ee0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ea79a461-bcab-42db-81fd-81e9beb8de21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24e2e69-5dca-49e0-b9d2-15937cfde209",
        "cursor": {
          "ref": "aa3d04f1-d704-48d0-aada-9e9ba6ccbf9e",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bb941418-62b2-4a0f-a7c0-ade59de611fd"
        },
        "item": {
          "id": "d24e2e69-5dca-49e0-b9d2-15937cfde209",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "cb1e1cf0-4e09-41cf-9e7a-dbd9fb945c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468fe16c-7dae-4677-b41e-4689ccd92d85",
        "cursor": {
          "ref": "495bfd07-3b93-4ca7-b896-bf69bb5f1c22",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a04ffe9c-b7de-434b-8973-120bb80427e1"
        },
        "item": {
          "id": "468fe16c-7dae-4677-b41e-4689ccd92d85",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "bd0309ad-3ea1-435d-8165-119bab509f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe49549-7445-499f-8c57-d5e8ec8fccef",
        "cursor": {
          "ref": "d1edde3a-ee9f-4bb7-a3ae-64c720705b06",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a1acfc79-4be6-4644-a813-beec24637fa1"
        },
        "item": {
          "id": "0fe49549-7445-499f-8c57-d5e8ec8fccef",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6d4c88fb-3c08-450f-a155-566e7fd50fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1623bd-0ba7-49da-8f2e-c726d21eaedb",
        "cursor": {
          "ref": "c25db476-998f-4a82-a68d-d1db92e5c2ba",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0c002634-249c-44af-ba9f-17f4225d64a2"
        },
        "item": {
          "id": "df1623bd-0ba7-49da-8f2e-c726d21eaedb",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0585b520-e284-45f0-92f0-ad52435ab305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cf18dc-b29b-4867-8056-2318cb2cec5d",
        "cursor": {
          "ref": "0ae91ad7-f3cf-4e22-97b4-099ab0977f78",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "887aa7e0-6157-4940-af2f-8b4ed37de7fd"
        },
        "item": {
          "id": "70cf18dc-b29b-4867-8056-2318cb2cec5d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "86645af0-2036-4bf1-be7f-181ff6c94e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e437a0-f05d-40c3-91d3-95c3154cc7a5",
        "cursor": {
          "ref": "b554e908-6999-47b8-b290-8fbbf0ac1956",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1aab2d55-0835-4cd0-87c6-3b5041f8b289"
        },
        "item": {
          "id": "29e437a0-f05d-40c3-91d3-95c3154cc7a5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3068b310-a845-425e-90b9-632af405fa67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ebe70d-a9ad-4a59-b829-d3eef786f8a1",
        "cursor": {
          "ref": "179b7960-a723-461a-8235-78b7c22d281d",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "85c09eba-cca4-41ab-8805-211081a74c2c"
        },
        "item": {
          "id": "82ebe70d-a9ad-4a59-b829-d3eef786f8a1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4a2c1311-f50d-4bc5-898a-ebe5043765d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66196254-38a8-4e37-a86b-e16300ed98ae",
        "cursor": {
          "ref": "75aaf87c-6df0-4603-b69a-b0fb44c7a82b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fc692093-be72-47f7-bb58-9cb94d06938e"
        },
        "item": {
          "id": "66196254-38a8-4e37-a86b-e16300ed98ae",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3b4d7ff0-dedc-4c4d-b8db-b1f6d06c8ef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d591744f-b4a2-478e-ac73-836b632b48f2",
        "cursor": {
          "ref": "f0fdaef8-f15e-4c20-a46a-bd09a412ef96",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c30b4ee6-2634-418b-8245-398eeb590390"
        },
        "item": {
          "id": "d591744f-b4a2-478e-ac73-836b632b48f2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bc832109-70fb-484a-a7e5-07344266a9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d686dab-c0b2-457c-9e9a-49a96da6aacc",
        "cursor": {
          "ref": "08cd47e7-20df-4ae5-881a-88a28133b577",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "49c9fd6e-79c5-4e02-946d-89b46631cb37"
        },
        "item": {
          "id": "9d686dab-c0b2-457c-9e9a-49a96da6aacc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f7701fd5-168a-4296-8699-76ae81442a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8797d65a-876f-4980-9a30-7953c1cbfcdf",
        "cursor": {
          "ref": "d9a25561-10da-4088-beaa-0e2d39897726",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "da9771e9-0164-45be-9eb6-adfcef980625"
        },
        "item": {
          "id": "8797d65a-876f-4980-9a30-7953c1cbfcdf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7fb44992-829c-4e39-a241-fa17e434877e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ddf600-cb71-43b3-a13f-89b7d79730c0",
        "cursor": {
          "ref": "d05b597b-ab6e-4e67-b8f5-96b799abc471",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "3013b242-db68-400b-b0e9-6bc0aa0572a7"
        },
        "item": {
          "id": "86ddf600-cb71-43b3-a13f-89b7d79730c0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "922bcf43-880b-487a-8ef3-06aa844a4911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285582af-c64a-439c-b1c8-b68a39625967",
        "cursor": {
          "ref": "e5839d1f-2ee5-4d45-90de-5545a03574a0",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7b8a1970-272e-488c-ab5a-1e5dc5b5d72c"
        },
        "item": {
          "id": "285582af-c64a-439c-b1c8-b68a39625967",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "65b8e835-8af8-437f-9535-81c9ae970de6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec790f9e-a451-4399-bcfd-9baf9f04a84d",
        "cursor": {
          "ref": "f75aa2e5-0730-4494-92a4-aa6d765b6baf",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "376c07e7-c618-49a2-ac29-be92895326f9"
        },
        "item": {
          "id": "ec790f9e-a451-4399-bcfd-9baf9f04a84d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6e7931c1-c75e-4955-921b-6511e52c98a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb53154a-d619-4fa5-82ec-ad2410c6581c",
        "cursor": {
          "ref": "3fed6604-0cf2-4a65-8d4c-8f72f7b9172b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "03535c72-098f-4882-bf93-f4f6104ffebb"
        },
        "item": {
          "id": "eb53154a-d619-4fa5-82ec-ad2410c6581c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0b63bc9f-6d35-4a6c-a52b-678cf08d4e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97723741-72c8-4395-8c08-ba505045a33f",
        "cursor": {
          "ref": "693d3545-08d7-4870-b444-4377e7a01187",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7409dc1a-d6e4-4b1b-9aa4-bbee3fa0da58"
        },
        "item": {
          "id": "97723741-72c8-4395-8c08-ba505045a33f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3309a201-8697-43fe-b13a-b294a22c0c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3964b377-d703-4a65-a2e3-6a2793825206",
        "cursor": {
          "ref": "6152fabb-b1ab-499a-b13f-5f80fb76c80c",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2aed8fef-72b8-4b3d-85dc-d4678fe0b656"
        },
        "item": {
          "id": "3964b377-d703-4a65-a2e3-6a2793825206",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "45479e8d-e922-4c5e-9cc4-144deaf80949",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71422d70-0826-4b5b-9000-6e014c7556f3",
        "cursor": {
          "ref": "f61dbb05-4e05-49b7-a9ee-cc099cbadbde",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "27d72b91-863c-4135-82ce-c353af5b6909"
        },
        "item": {
          "id": "71422d70-0826-4b5b-9000-6e014c7556f3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "413d7e12-bb5f-4833-a496-62f885758187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd0c1513-9913-481a-aba9-49472681245e",
        "cursor": {
          "ref": "f4ad60dc-1857-4a41-a0e0-ebc9e63f9609",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a487b5f1-c601-44fd-b090-e7e5ba00a660"
        },
        "item": {
          "id": "bd0c1513-9913-481a-aba9-49472681245e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5ec0cd88-b357-4e28-ae14-68d806e9f056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731aa30a-0d1c-4111-b502-eee22fefbb4e",
        "cursor": {
          "ref": "ee6bfb99-b335-40e8-9540-a998c2980063",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a2a63011-c295-47e7-abd4-f9122f29a985"
        },
        "item": {
          "id": "731aa30a-0d1c-4111-b502-eee22fefbb4e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c2c5e552-d1ed-458c-a1c1-19ed358ef70d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20e35d2-d64d-4776-9f80-e09b31464cb0",
        "cursor": {
          "ref": "c2038468-358c-403c-be44-6a1dc7b90e26",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5e3b6e79-3870-46a0-bd27-87ac0d9ea3c5"
        },
        "item": {
          "id": "e20e35d2-d64d-4776-9f80-e09b31464cb0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "aa099166-1f38-47e6-b6e5-b5fb946a478e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251c47b4-77e2-401a-9008-8cc37c52b31b",
        "cursor": {
          "ref": "9af33db9-a4fe-4f80-b244-982a0a4c7a9a",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8ec6e3f4-47d2-4bfc-8d8c-4a15efd8c820"
        },
        "item": {
          "id": "251c47b4-77e2-401a-9008-8cc37c52b31b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "292570e7-3600-48fd-a5ae-d631f65a3991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf88d032-9490-40db-9c00-1ac7e9e3bb94",
        "cursor": {
          "ref": "85fa1ff3-7224-4dc2-b0a3-99811391c537",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1bee2dce-251a-406e-af18-4665df5e276f"
        },
        "item": {
          "id": "cf88d032-9490-40db-9c00-1ac7e9e3bb94",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9999c3be-a15c-4e55-b297-ceaaa1c33327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "640f3d06-35fb-479d-8cb3-d86bf2bff0e9",
        "cursor": {
          "ref": "b073c57a-5ae4-45d0-82cf-f3cde10fb89f",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9a421754-8258-4e6f-88b1-51d469deb35e"
        },
        "item": {
          "id": "640f3d06-35fb-479d-8cb3-d86bf2bff0e9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "da31d1c7-ed79-4b95-9519-864e0a1b3bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa81bfe5-6d54-461c-aecf-447d5898ca8a",
        "cursor": {
          "ref": "0fd2faaa-0ac5-4228-ad87-da6ae7eba6ef",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4b3cae54-49e3-4ef2-93e5-151ed9094591"
        },
        "item": {
          "id": "aa81bfe5-6d54-461c-aecf-447d5898ca8a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "aa2ce3a6-2811-49f2-8bd2-05ea4afe5211",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1534187f-65ef-4f40-b3ca-b1c0263be482",
        "cursor": {
          "ref": "8511aca6-c3c7-4200-933c-61da80241dcc",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "048c4ebc-a7f6-436e-922b-ed89ddd6a88f"
        },
        "item": {
          "id": "1534187f-65ef-4f40-b3ca-b1c0263be482",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a51ded15-b273-4e26-880d-e19d0552afb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "753bf396-d01f-422c-bd07-6f435e23767c",
        "cursor": {
          "ref": "140d0a69-1f3a-4dff-aa00-1ce07a4bb286",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "55fccc5f-0e8d-4033-abe4-5714f58f7129"
        },
        "item": {
          "id": "753bf396-d01f-422c-bd07-6f435e23767c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ae301472-6f8d-4f88-9e6e-a1b8c268c4fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a0d6e7-c7c3-4bb9-9b11-029fe49836a5",
        "cursor": {
          "ref": "aca7d6fb-9a28-497a-bcbb-41d7a29b1802",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9b32e7c9-7284-4f22-a9fb-b68195e9047d"
        },
        "item": {
          "id": "68a0d6e7-c7c3-4bb9-9b11-029fe49836a5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "50ad555b-06b8-4c4a-933e-87fc94f4314f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bf156b-4f0a-419e-aeed-41fd23bd4db0",
        "cursor": {
          "ref": "61acbf9c-f7a0-4ca0-b491-00d9d578c338",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "610724d0-654c-4342-bd06-ce28b67703cd"
        },
        "item": {
          "id": "e8bf156b-4f0a-419e-aeed-41fd23bd4db0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "adf66ff2-a501-4a4c-b1ec-8bfe2c215ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ea1697-c860-4e4c-9fe7-66388fa4394b",
        "cursor": {
          "ref": "c2b311b7-9e1e-4e19-a449-cbe35f601e20",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ab26aa5b-6174-43e7-be80-85c06e3f9e1d"
        },
        "item": {
          "id": "43ea1697-c860-4e4c-9fe7-66388fa4394b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1f270d9e-559c-4bb4-a51a-641249d1d782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf22c7be-f07c-4f2c-89c0-a184fb308c28",
        "cursor": {
          "ref": "b2cb784f-c000-4ac1-b7df-f97f231bb0b5",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "04876109-4117-4e83-a72c-bacd45605220"
        },
        "item": {
          "id": "cf22c7be-f07c-4f2c-89c0-a184fb308c28",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8143eeba-7c19-47a2-a3aa-339d66147cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73426160-feb8-4f78-8005-ea25925cacd8",
        "cursor": {
          "ref": "54945082-41f7-48cf-b4e1-670f520fcaf9",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "35da74f0-40f0-4b99-8a8d-67185d01dd46"
        },
        "item": {
          "id": "73426160-feb8-4f78-8005-ea25925cacd8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "703dc1d5-bb52-4fdb-932e-bc20d7184f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3965174d-fbf2-4ed6-8d29-60e8c1f291d7",
        "cursor": {
          "ref": "2ff1c78b-deb2-4395-b063-25d9092854de",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d33fb04e-54e9-4ed6-8dd1-75ba60b4a825"
        },
        "item": {
          "id": "3965174d-fbf2-4ed6-8d29-60e8c1f291d7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "64a87fd1-c97c-4297-8fb0-d21c470a6376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac90b63-d6b2-4d91-9948-725b107e2ed7",
        "cursor": {
          "ref": "d6e090ad-340e-4f6f-8a73-f6e2c2891723",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "7da618bf-e074-4506-b5a7-a448c327c38c"
        },
        "item": {
          "id": "6ac90b63-d6b2-4d91-9948-725b107e2ed7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b6c00b47-d39c-4af0-808d-ae997272d775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cc6bb6-0008-45b1-bf37-fadb1f68801c",
        "cursor": {
          "ref": "61c974bc-88a9-4ac5-978e-88387757932a",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "79569d4e-50ca-479b-b814-58ec1ae3d07b"
        },
        "item": {
          "id": "91cc6bb6-0008-45b1-bf37-fadb1f68801c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8ea5205a-a8d2-496f-af70-badf9d6d5b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7bddbe1-0f8a-4cfc-9d3f-7cdef6470fff",
        "cursor": {
          "ref": "f8f28dc5-18cb-4494-8db4-8be24f2d9450",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "24ba916a-06a5-4c9a-846f-024f73801142"
        },
        "item": {
          "id": "f7bddbe1-0f8a-4cfc-9d3f-7cdef6470fff",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e8fb65d3-992a-4bdd-ab0f-6238728f3fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdbce213-23ca-46f2-8d60-5ee6cb29e5ee",
        "cursor": {
          "ref": "3ee3132a-bdb2-48df-876f-21588a612f4e",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "6966f74d-020b-47cf-89c0-371c8e851ae8"
        },
        "item": {
          "id": "fdbce213-23ca-46f2-8d60-5ee6cb29e5ee",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "501a1732-5e43-4325-92ee-33c40562ea84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb7fab7-828c-4237-bc25-2aded4495335",
        "cursor": {
          "ref": "9ff77043-bf76-4ae5-8369-97f9a2598438",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "665eeb53-bf8d-4ac4-bec0-3d22ec51bc86"
        },
        "item": {
          "id": "4cb7fab7-828c-4237-bc25-2aded4495335",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "37bd20cb-fe56-4e51-8f79-f79394f6e01f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc10dea5-2d6c-4c08-aa8f-8d678a10ca22",
        "cursor": {
          "ref": "43383f78-0ebc-4ba2-b928-ec2432d0515a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "33017f18-51bb-43c6-9e34-438d58a3a885"
        },
        "item": {
          "id": "dc10dea5-2d6c-4c08-aa8f-8d678a10ca22",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2e77d006-854e-4b9f-9c9c-9219f09ea6d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c05cbf-ae3c-49b2-9f2a-c86bb9b5a25f",
        "cursor": {
          "ref": "4b24c87c-dfc9-40e1-8ece-6c3d5238cacd",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "23e34383-57dc-4e3f-b618-08e38395828a"
        },
        "item": {
          "id": "78c05cbf-ae3c-49b2-9f2a-c86bb9b5a25f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e30fa916-bbd6-4f13-8dfc-c3efd7a495fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb05c05b-2e29-4758-94b6-56b6fb0cfdd9",
        "cursor": {
          "ref": "8ee802c3-887a-4963-ae62-e4dba2efbf2d",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "567d0426-2877-4ef8-aab5-4899e7d11bcd"
        },
        "item": {
          "id": "cb05c05b-2e29-4758-94b6-56b6fb0cfdd9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6b86c749-dbef-4dcd-bf07-9f93d11110bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b0bf3e-aeef-4e59-8fed-f75412b45839",
        "cursor": {
          "ref": "2774ac9f-b794-400a-be9b-4c37e9dd9458",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "08ab4489-c9f4-4797-9c2b-242ec20bbd24"
        },
        "item": {
          "id": "12b0bf3e-aeef-4e59-8fed-f75412b45839",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7b2d3723-bbf1-4ade-9c14-ce5033a9e963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6458f770-6959-473e-b59e-9aaf1ad9667f",
        "cursor": {
          "ref": "95a63f13-ddc5-4a7a-9b3f-7fd7531fc154",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0de9b8a3-721e-4c77-aa07-4cbdd24af757"
        },
        "item": {
          "id": "6458f770-6959-473e-b59e-9aaf1ad9667f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "de21e696-b11e-4b3c-880f-2e553f07f8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa69089a-8e8a-4a08-bb4f-17da42facc49",
        "cursor": {
          "ref": "f13967c9-203f-41ef-a18a-33e37fc3c169",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "599ca6b2-d142-4722-9b47-1538f38ef3bb"
        },
        "item": {
          "id": "fa69089a-8e8a-4a08-bb4f-17da42facc49",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "500789a4-d0ef-478d-8c27-cd4bc788106e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "544207af-1866-4fa7-9580-f1e3d7e8e37e",
        "cursor": {
          "ref": "028bbbc8-3bd3-4d52-bfaf-1c5f17e1003e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "91d07173-e685-4399-adf5-38ef97e6d521"
        },
        "item": {
          "id": "544207af-1866-4fa7-9580-f1e3d7e8e37e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "389c4f48-c0ce-4386-bc6e-71182e1b8f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4dd155-1ce8-492f-86b5-825e7aa705d7",
        "cursor": {
          "ref": "26ba1c95-75a6-4271-a0b6-9865aa5a9d4c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "64794c0c-a87d-417f-bd35-54c3f514b419"
        },
        "item": {
          "id": "0b4dd155-1ce8-492f-86b5-825e7aa705d7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b096c9ac-523a-4035-8430-0f575602df7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1b20095-1009-4ebd-9be9-e94a621f160d",
        "cursor": {
          "ref": "ff4ecebd-1474-4b54-9ec9-cf33b72f3fb5",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2aae902b-5343-4eec-bfad-d55ca928362d"
        },
        "item": {
          "id": "c1b20095-1009-4ebd-9be9-e94a621f160d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1cc06f63-2250-470a-8ca9-5fdb05142b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87e92d1-b40a-4366-99f1-b6664bcf789b",
        "cursor": {
          "ref": "0228c250-5738-4fc3-bdde-ee3c404f22a7",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9223a7c2-3d40-483e-87a8-37899f76c092"
        },
        "item": {
          "id": "d87e92d1-b40a-4366-99f1-b6664bcf789b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0624d523-f5e0-47b9-8fbd-09ceff62e292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c64c80-7b72-4dbd-8e11-dd0e5cc52a1a",
        "cursor": {
          "ref": "3fe7882e-d049-4444-bf95-1b25032c2432",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "5e2e7394-3efc-4728-bb41-5c51a60b5aa4"
        },
        "item": {
          "id": "f5c64c80-7b72-4dbd-8e11-dd0e5cc52a1a",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "fc40525a-445a-45b1-82b6-78a6dcd90d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d8320b-2858-4e25-9d61-9c521f9e88dd",
        "cursor": {
          "ref": "ae27bf8d-f005-409c-a67c-461feb586e1a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "7c24c932-ae3c-43db-b00b-0f3ceb112023"
        },
        "item": {
          "id": "c8d8320b-2858-4e25-9d61-9c521f9e88dd",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d2e25cdd-49a6-4874-a89d-ed8101d4f3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab6bc65a-1659-4729-8922-ba79d1616baa",
        "cursor": {
          "ref": "6c9d3908-16d2-4b1b-99fb-93cda0a7c9de",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "e046881a-53ef-46ae-8d93-ab9be9550b2f"
        },
        "item": {
          "id": "ab6bc65a-1659-4729-8922-ba79d1616baa",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3ec2c870-bc08-4fe2-80c2-065c798f35cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af7c662-2388-4dd1-8d2e-11028b16e57e",
        "cursor": {
          "ref": "fd92e902-ad72-473e-9f1b-0cdd2038b278",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cc00c9bc-938b-4b54-a4ee-08ee19b37adc"
        },
        "item": {
          "id": "6af7c662-2388-4dd1-8d2e-11028b16e57e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "76b7b144-3985-48bd-b2fd-7197f5efde32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0ee37e-d55d-4a2c-9cf3-66d35d9e52a1",
        "cursor": {
          "ref": "a929228f-592d-41f6-8bb7-48359ce2045e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "02678bb6-e3ef-436e-ac32-de0bee398b80"
        },
        "item": {
          "id": "ae0ee37e-d55d-4a2c-9cf3-66d35d9e52a1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e0fc81ed-5f79-42d0-874d-309df8f98b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df1a142b-d02a-431e-bf3a-740f90339c95",
        "cursor": {
          "ref": "9583444b-dd86-45f4-b519-94d6b4b68744",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bb3bbb7f-f661-4859-8c6e-9d9aadd8d37b"
        },
        "item": {
          "id": "df1a142b-d02a-431e-bf3a-740f90339c95",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f7c868c1-b922-46f3-be3e-a99c77764348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a746bf7f-8d42-4cfc-84fa-f58e96c1f3d5",
        "cursor": {
          "ref": "ea7bf574-232c-4eee-bfcf-d4024d89395d",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "380d1884-6044-465f-bdd8-308385e4980d"
        },
        "item": {
          "id": "a746bf7f-8d42-4cfc-84fa-f58e96c1f3d5",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a9c55421-326c-4820-97aa-10ecc9b6f1b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b10d9a-4970-434a-b72e-8d2a107ef7ff",
        "cursor": {
          "ref": "d28121b0-670b-425f-959d-db39d739944f",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0baca64c-90e2-4d5c-b90a-15aaf43acd01"
        },
        "item": {
          "id": "c3b10d9a-4970-434a-b72e-8d2a107ef7ff",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "aeea851a-98ce-4422-9720-ae7f1f28bd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca58f63-1cb6-4f19-8c32-7f106e19dbf0",
        "cursor": {
          "ref": "61b5f036-febe-4abc-bbc6-18d5b242637f",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "79abf84f-fb66-4998-b143-6320cc25c353"
        },
        "item": {
          "id": "5ca58f63-1cb6-4f19-8c32-7f106e19dbf0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bb687f74-c0ae-4ed4-9e98-fda71f3701fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8456f8-0603-4df0-b734-3e73bd0a027d",
        "cursor": {
          "ref": "e79d3ef1-f3d3-45f1-a130-95b497644233",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "497db677-5180-4f20-94f9-f29413634afa"
        },
        "item": {
          "id": "4d8456f8-0603-4df0-b734-3e73bd0a027d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e5dc9320-aedb-4f25-b4a8-4e474e848690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbe3879-0d89-4821-aca2-d2ef3e9a2e81",
        "cursor": {
          "ref": "734068ed-ea8d-4a23-b12e-a92198f52a89",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "896bfa49-a1ea-4c63-b783-c3edb82fb528"
        },
        "item": {
          "id": "2bbe3879-0d89-4821-aca2-d2ef3e9a2e81",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "bd6c1c03-cd46-4c6b-80e2-380ba274145f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d086f1-cd67-4644-b0d4-9b74853e6f32",
        "cursor": {
          "ref": "5507ef4d-8e40-48cd-954c-3c9d54458e51",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dc8ae8db-3865-4c1d-bc2c-209f06a03f73"
        },
        "item": {
          "id": "d2d086f1-cd67-4644-b0d4-9b74853e6f32",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b815d3e6-5b17-492a-af5a-1ad673e1f085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db74518c-c58d-40c8-9d9f-b0a9cc5e52a6",
        "cursor": {
          "ref": "e50097a5-2e6a-4835-af7b-02911de8d4dd",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8b688e7a-8d3b-44b6-a839-e9125646803f"
        },
        "item": {
          "id": "db74518c-c58d-40c8-9d9f-b0a9cc5e52a6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d8bd53aa-7057-4016-8dda-37cbfd357fd2",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "34f0aa16-6747-4448-bcf2-79539e58f4cb",
        "cursor": {
          "ref": "4b7769e0-264d-49ea-a042-b410b5337d95",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b60f70e0-96dd-435a-bd8e-3bd36ad0ea13"
        },
        "item": {
          "id": "34f0aa16-6747-4448-bcf2-79539e58f4cb",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "11858007-fa9c-4706-9fe8-040a088dbd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9ee84f-43f7-4541-9904-dd7b09232f8e",
        "cursor": {
          "ref": "ab5f7f9d-cf17-492c-82b2-abdde11c1838",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0a62e0ac-4842-412f-aaae-7244578e6d2a"
        },
        "item": {
          "id": "bd9ee84f-43f7-4541-9904-dd7b09232f8e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "797a4683-5486-4f6b-802e-d0042fc7b508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f67669-539e-423d-a853-d71edf192774",
        "cursor": {
          "ref": "b08b777e-f512-4290-b22d-63c0f1af3d31",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "abc10855-b45f-4700-97e2-c29fba6b30df"
        },
        "item": {
          "id": "87f67669-539e-423d-a853-d71edf192774",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "16c85b73-7c75-4700-bd6b-d8379df32f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9283e668-2a02-4104-90b0-8ef440d219ab",
        "cursor": {
          "ref": "93dc26a9-0154-4ac5-a8a9-1f73113af7a9",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9334774d-37d4-4bcc-bb8d-fe77c0fdd403"
        },
        "item": {
          "id": "9283e668-2a02-4104-90b0-8ef440d219ab",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9b140c41-2c68-403c-8e67-92c5e522684f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e51fef8-33be-41c2-982e-8ea9a2d75698",
        "cursor": {
          "ref": "c76b0087-c578-4e10-aa87-7a646286b5ea",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "90a325a1-fad4-4471-828b-d64eaa1d5417"
        },
        "item": {
          "id": "6e51fef8-33be-41c2-982e-8ea9a2d75698",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "74630c55-f40e-4146-865b-c8ff45ecaf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "655a7c6a-6319-40e1-b3e6-88d74aa8c29c",
        "cursor": {
          "ref": "9f814487-e998-4e6a-b1bc-560a6502abe7",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fe064279-42c0-45ae-953d-64f206f167e3"
        },
        "item": {
          "id": "655a7c6a-6319-40e1-b3e6-88d74aa8c29c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "95e725a6-6a11-4585-bba4-b7a038e4d17a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5476700-b774-4ff4-b9c2-a23b46fef6ae",
        "cursor": {
          "ref": "111caccc-509b-4be5-b33d-1d07bfc971e6",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "df4f3cd1-f028-470e-b177-e71f3b252cd8"
        },
        "item": {
          "id": "f5476700-b774-4ff4-b9c2-a23b46fef6ae",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "5583a4b0-dc6d-4e1b-9217-7b8bcce31036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3272abab-9137-4af5-bb5c-cb7de2226523",
        "cursor": {
          "ref": "878369a4-8bef-4c03-b350-435f4fbe87b5",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "c687d83c-71b9-42ce-9a41-a6a679e17138"
        },
        "item": {
          "id": "3272abab-9137-4af5-bb5c-cb7de2226523",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "cdd27934-9e9f-46f7-a4ba-cbcb346504fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca32505-785a-40b4-a6f3-078f73cd5f42",
        "cursor": {
          "ref": "4b50864b-43d6-4fff-81fc-c1a5a952c967",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0f3a6d09-615a-4de7-b218-7b7932c5a993"
        },
        "item": {
          "id": "0ca32505-785a-40b4-a6f3-078f73cd5f42",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "83137cb0-3964-4a47-9b1a-ca718343cf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd12f11-551a-4793-89ca-40d8ae4881be",
        "cursor": {
          "ref": "a8bfbf77-beb9-4afd-baee-625e92694ce8",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3f349933-196a-42f7-9070-d1bf268a0a75"
        },
        "item": {
          "id": "5fd12f11-551a-4793-89ca-40d8ae4881be",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2ff78126-750f-40b5-b134-2990e87200c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbc6363-1c5e-41be-a35d-0b00d67f13b5",
        "cursor": {
          "ref": "ca48caf9-95b4-4dbd-b657-5a9d58d5d180",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6867dace-13bc-48f6-ad82-07dd306b69af"
        },
        "item": {
          "id": "ecbc6363-1c5e-41be-a35d-0b00d67f13b5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d894a38b-5a4e-460e-ba00-4e8768505a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be296223-9ab8-4d4c-9868-749fb926ae32",
        "cursor": {
          "ref": "61ab700b-e9ed-498f-87f1-cc8b82ffe041",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "037fb278-4f08-450e-beb5-79e472fd7956"
        },
        "item": {
          "id": "be296223-9ab8-4d4c-9868-749fb926ae32",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f3c5099f-e950-4016-95a0-b95727e955af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71930ba-7e5c-4c4b-bad7-4eecb2730029",
        "cursor": {
          "ref": "b264a1e4-7b33-44b9-9e84-7d671adb0d68",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "41e54dff-33a1-4b75-9f33-f89b473116f0"
        },
        "item": {
          "id": "d71930ba-7e5c-4c4b-bad7-4eecb2730029",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b7cf7243-2fbd-484a-8c30-1a70452c9495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a8059f-44eb-491e-8e57-ca421266c667",
        "cursor": {
          "ref": "6ceb16f9-b234-487c-bed2-de11f6d7f582",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "96da8029-2d0c-49b7-af0b-e9b2653813c4"
        },
        "item": {
          "id": "e9a8059f-44eb-491e-8e57-ca421266c667",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3790c82c-a36a-4ab1-960c-ae34ef5296d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5760749a-5e4d-4cd2-873e-c10ea62bdb2f",
        "cursor": {
          "ref": "cdf7b196-7ded-4560-9cd7-5c3907c3c0e1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "977758b9-e535-4032-9ca7-65aeb3528aa6"
        },
        "item": {
          "id": "5760749a-5e4d-4cd2-873e-c10ea62bdb2f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5e655c51-5019-44e5-9b9d-33f175604085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ff814d-8951-4df9-ad7a-48d35664c746",
        "cursor": {
          "ref": "e7a5df8e-8931-498f-9055-17cb9e8ab993",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ba2a7453-0eea-4736-8f52-864780e16a8b"
        },
        "item": {
          "id": "f1ff814d-8951-4df9-ad7a-48d35664c746",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "711d9eb0-5ebe-4f91-bf7e-145422ca305c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1deef193-fb95-4971-837c-6adce01da63c",
        "cursor": {
          "ref": "5fa0bbc2-1082-4781-a66a-799d55420049",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6552031c-6202-47ae-8e38-7a618c2a5406"
        },
        "item": {
          "id": "1deef193-fb95-4971-837c-6adce01da63c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9f7717b7-c6a7-41ea-bd6f-c9e01022b950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680adf58-004b-418d-8ccd-4f198b347290",
        "cursor": {
          "ref": "a42bbe66-a101-4eb2-b833-3d10c469f9bd",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "0b8e54d0-9362-4251-a8fb-1bdb018fc9c6"
        },
        "item": {
          "id": "680adf58-004b-418d-8ccd-4f198b347290",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fc95fdce-4f70-4577-90f3-c19b27645de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ced27d-9144-4170-adbd-5a2109395c55",
        "cursor": {
          "ref": "70598e41-e40a-4cf6-8252-ca23f31aff92",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "66309a21-cc71-4877-89b2-3e0b370a4e7f"
        },
        "item": {
          "id": "56ced27d-9144-4170-adbd-5a2109395c55",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "4b9bfcc9-7247-4dfd-b0c5-68423d0e1f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3cd120-f2f0-4df4-b125-87c352262bca",
        "cursor": {
          "ref": "662ba328-d0cd-4a6c-b629-f11ca0980d19",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9e694170-8084-401b-9793-95c2276bd0d4"
        },
        "item": {
          "id": "1c3cd120-f2f0-4df4-b125-87c352262bca",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "2108e591-389a-48cb-b83d-87fa4c8380fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa36f4f-eaa3-4f52-8411-566f89a9eea4",
        "cursor": {
          "ref": "0516c9ee-4461-409c-bd19-2519421a426b",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "6e277635-6c5a-47aa-a875-58fa268f83d0"
        },
        "item": {
          "id": "6aa36f4f-eaa3-4f52-8411-566f89a9eea4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "93976759-c958-4870-b207-9762df26b0f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ff379a-8836-4493-991d-765429334b91",
        "cursor": {
          "ref": "560360e4-9f2f-470c-85f9-f38464453108",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "13afa155-97df-4cde-8d97-6570a42cfc85"
        },
        "item": {
          "id": "c1ff379a-8836-4493-991d-765429334b91",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0ccd7ed1-fc80-4acd-bc39-132d63893a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67046a4-0bb4-4848-99fe-981ff0e318a4",
        "cursor": {
          "ref": "96fcf7ae-416d-4ab5-b3bd-affa617e33b0",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4781d231-242b-4563-a91b-d3980a3cb8ce"
        },
        "item": {
          "id": "f67046a4-0bb4-4848-99fe-981ff0e318a4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6c4df60d-c7c2-4e3a-8b9b-4faf9c803fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2543448-3e1a-4896-bcaa-24893c9e217c",
        "cursor": {
          "ref": "13a83c2f-7303-4919-a33a-69a8be4c2d29",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "bc076f40-f484-4198-b6db-143fa8656d1f"
        },
        "item": {
          "id": "b2543448-3e1a-4896-bcaa-24893c9e217c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "02a0ce40-fd4d-4d02-87a3-fcdc14f3909f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7d589a-59a1-420c-8382-4b74900845f7",
        "cursor": {
          "ref": "89d81915-f1f7-48d5-b9ea-85276e55c69a",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "493b8c60-248e-4e29-bf42-5e4195191bd3"
        },
        "item": {
          "id": "6a7d589a-59a1-420c-8382-4b74900845f7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a50971e2-eabc-4d40-b6e7-b8a0d440884e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e32aa1-e6d5-4bb4-83be-6fb457d736eb",
        "cursor": {
          "ref": "c84ed717-4b12-4bdf-8e30-1cd22574e73b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "55d2609c-efc6-4fd7-a169-3b5853f634d2"
        },
        "item": {
          "id": "e1e32aa1-e6d5-4bb4-83be-6fb457d736eb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "97348144-dd87-4b03-8d6e-a721e6e2fdfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e755277-4025-4cb2-a758-e6144c76d923",
        "cursor": {
          "ref": "b2a003d1-482a-400b-950a-0e6260ff2f5b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "deebdde4-027e-48ae-a3ce-2bd2e8c8d138"
        },
        "item": {
          "id": "9e755277-4025-4cb2-a758-e6144c76d923",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bc86351c-ceb6-491a-bb07-7f7609d2de7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ae39e9-1bba-41b5-ab6f-6e9fd9b6eba2",
        "cursor": {
          "ref": "724b5aca-ce7d-467d-9a4e-e2b3429f4c38",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "563e1bb5-2bae-41de-b266-466e557e2459"
        },
        "item": {
          "id": "c1ae39e9-1bba-41b5-ab6f-6e9fd9b6eba2",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f447b119-f83a-40b9-8dd0-76107fb85ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aec3846-801b-44c1-a094-e298114b33f9",
        "cursor": {
          "ref": "a2dbad0c-9b7b-43f3-a11d-70e7eef858dd",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7dad6f87-d289-4484-b0cd-2b7c9aa55e94"
        },
        "item": {
          "id": "2aec3846-801b-44c1-a094-e298114b33f9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "43306d8f-fa80-4472-97a4-b55fa070a245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd242f53-bb29-4a9b-b878-923f684d6599",
        "cursor": {
          "ref": "0e9886e8-90c0-455b-a903-ba97233b40a6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b4f0b50b-787d-4b19-8d14-05f1709b4155"
        },
        "item": {
          "id": "bd242f53-bb29-4a9b-b878-923f684d6599",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "65b74354-6d77-464a-a3a2-467602af7df7",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9121a552-a44b-47c1-b9aa-c287b07a8cf6",
        "cursor": {
          "ref": "2651d4c7-a667-404d-a8d0-2b5e279e6614",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "69642126-5d5c-4994-8155-050b6ec61db8"
        },
        "item": {
          "id": "9121a552-a44b-47c1-b9aa-c287b07a8cf6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "79fb1207-0b9a-4f41-994a-9a05921c27e6",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1022deab-e82c-4219-b1b9-bab5be82a888",
        "cursor": {
          "ref": "571a5ca0-06a0-4667-9df9-856a0919c501",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "3796f729-ba60-4d83-a4d5-6e5a18f5011d"
        },
        "item": {
          "id": "1022deab-e82c-4219-b1b9-bab5be82a888",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1497ba93-1ed0-4bde-a6d5-2deff4acb5a5",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2f16bf71-44ce-491e-8a24-702a3e82a8be",
        "cursor": {
          "ref": "5b234657-d8d4-4b56-bc11-d13a119a768d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e935b31b-3ae1-4dc4-b283-318dd116c5c6"
        },
        "item": {
          "id": "2f16bf71-44ce-491e-8a24-702a3e82a8be",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "69962071-a7ff-490d-b4f9-9ce565302fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d11507d-1276-4ad5-9867-a0871a7bd9be",
        "cursor": {
          "ref": "4893c43e-ef73-455c-be7d-2b4e38e7575d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2151c1dc-0c99-4e6e-8d8e-33bd3a3c4bad"
        },
        "item": {
          "id": "0d11507d-1276-4ad5-9867-a0871a7bd9be",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "dbd7ce64-df4f-416b-9e4b-4cdf8fa79331",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "a098a235-e414-4d7c-a2d5-1465b46440b4",
        "cursor": {
          "ref": "67f72c96-4925-4521-a525-f0d085727eb5",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "bd2556ed-08cc-4559-be2b-a28955427adf"
        },
        "item": {
          "id": "a098a235-e414-4d7c-a2d5-1465b46440b4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "eb737a79-1fe8-4955-b099-7297d7b0445d",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "6a8e03cf-1d16-4fe2-866c-d33ca427e887",
        "cursor": {
          "ref": "f401934b-3bfa-4f0b-a615-70b59bcc8ccd",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3644d296-3edd-4b70-bb68-703cd2682f43"
        },
        "item": {
          "id": "6a8e03cf-1d16-4fe2-866c-d33ca427e887",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8fbaaa8f-6115-4b83-bec0-825b67b21ed7",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "05d3576a-e94e-4625-8408-275b8f775b53",
        "cursor": {
          "ref": "6711488c-2e5b-461f-b6da-35aaf8fad8e5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4925c282-ea26-4b63-baea-c580e97f144a"
        },
        "item": {
          "id": "05d3576a-e94e-4625-8408-275b8f775b53",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7da87e57-1f80-467f-99ee-dd64980dc60f",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "753f1118-0b15-49d9-bb53-c04e5db5915a",
        "cursor": {
          "ref": "a0573583-1a92-4b15-8d42-89e49c3e64fa",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "fb916179-c917-4041-9cb0-aab228a8e150"
        },
        "item": {
          "id": "753f1118-0b15-49d9-bb53-c04e5db5915a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "dc4e7f3b-73f6-4796-8617-e5a5f1f35b12",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "7497a3ee-cd85-437d-96a2-8f5329b8299f",
        "cursor": {
          "ref": "f9c3c8ee-5155-45f1-a6ea-76ded8259391",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "3e2b6786-260f-44e5-908e-bdbf22dd45de"
        },
        "item": {
          "id": "7497a3ee-cd85-437d-96a2-8f5329b8299f",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "08b09dde-fac6-4fd1-a7e3-d8049477961f",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "7c161192-567c-499e-bbda-84afb78237bb",
        "cursor": {
          "ref": "16b6b9eb-8846-48b5-944a-0546d08df202",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "05c6618f-10bf-4450-805f-4292239879d3"
        },
        "item": {
          "id": "7c161192-567c-499e-bbda-84afb78237bb",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "78f4506b-881d-493f-aed5-3c6bbc57a345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb8017b-8d0c-4107-ae92-d9ce8aae6058",
        "cursor": {
          "ref": "2c399a53-c895-41f9-a8a6-62472f327699",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a6665e3e-e4aa-4d64-aac6-f2a6666ad307"
        },
        "item": {
          "id": "ebb8017b-8d0c-4107-ae92-d9ce8aae6058",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "746640df-046b-4841-a45d-a6c6085cfc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9aecae-8dca-4e6e-9053-5e5204cdd324",
        "cursor": {
          "ref": "0fbc3d7d-e94b-4acc-8eb5-7e203b5e512f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f3f0b37c-2770-4aa7-ac7d-f1ad894aa2ee"
        },
        "item": {
          "id": "1a9aecae-8dca-4e6e-9053-5e5204cdd324",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "608d2e1e-1ad9-49a2-8e19-eaf8c2476798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b507a92-044b-4316-83a6-14037ea4391a",
        "cursor": {
          "ref": "3f868ff0-a40b-4ba3-8b85-e1fc5a6dbdf7",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f9dfedd8-1b4a-4a6d-ac3e-4d8e743ca5eb"
        },
        "item": {
          "id": "7b507a92-044b-4316-83a6-14037ea4391a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e715d304-433f-44d6-88d7-32752ad4481c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efa2098-d85f-4bd7-96ea-5c46a9241277",
        "cursor": {
          "ref": "bf4fed3b-f414-4d0e-9a3f-8d28a3467fe1",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "56326f26-528e-43dc-8db9-ffcdccc4223c"
        },
        "item": {
          "id": "4efa2098-d85f-4bd7-96ea-5c46a9241277",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8124ceb7-27b7-424f-8bf7-52e645eb7c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48945a4d-529d-4143-9f7e-0d4147e3e70b",
        "cursor": {
          "ref": "4ca91346-49a8-449a-82b2-12a09eb85ab7",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "12066c29-24cc-4712-aa8a-272b680f61c8"
        },
        "item": {
          "id": "48945a4d-529d-4143-9f7e-0d4147e3e70b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "03e8be0f-ad83-48b8-b3f4-3decdb8f7bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4383e68-29d3-4e15-8474-bf782ef53f08",
        "cursor": {
          "ref": "c5472350-7f9c-4ad5-aa0a-d79f32169978",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4321265d-eb2d-45fb-9ee4-33d899e9e0f5"
        },
        "item": {
          "id": "d4383e68-29d3-4e15-8474-bf782ef53f08",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "010a6974-a3c2-4962-a711-c5b6f33b0fba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc615fe7-9436-4d02-b38b-1a85fdcf623a",
        "cursor": {
          "ref": "3b4dc981-57e8-4d26-b33b-d1d35af2e5d3",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b547717b-87cc-41bf-bb0c-13da69cfcca5"
        },
        "item": {
          "id": "dc615fe7-9436-4d02-b38b-1a85fdcf623a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "74a51746-b2c1-4610-b1e0-c084590c608f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb9a596-769d-48c1-b2e1-e2e0df105e42",
        "cursor": {
          "ref": "03972b2e-def9-4204-8c8d-77f8037e55e4",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d2f9947c-a7f7-4f98-b1d7-ece7ceb52b30"
        },
        "item": {
          "id": "3bb9a596-769d-48c1-b2e1-e2e0df105e42",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5deaf3d6-f5ee-4a20-b987-463ac322df0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6624a2e-c2f3-47e9-8904-70bd7679cdda",
        "cursor": {
          "ref": "74208180-2ca2-4a26-aede-6a753f23d3f5",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "76457a85-5a2d-485d-853b-3e40b24e88ec"
        },
        "item": {
          "id": "e6624a2e-c2f3-47e9-8904-70bd7679cdda",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "a9fa2a3a-2ccf-4c45-aefa-5b4fbb650e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5f2ffb-f317-4231-b621-a511a613fb2d",
        "cursor": {
          "ref": "da06d1ef-ddda-4e48-a68d-d2c0cfb4fcf6",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "db4f448d-8506-47ec-9386-61239782a9b4"
        },
        "item": {
          "id": "cc5f2ffb-f317-4231-b621-a511a613fb2d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9f5ae48b-cc9e-423d-906e-d7bd458ef1df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5815c49-043d-4a31-870c-e718f3c0b5e6",
        "cursor": {
          "ref": "052b4b29-89de-4296-9a93-fe0562c9d18e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1d75feed-bb2d-427f-8427-3e555dffd496"
        },
        "item": {
          "id": "c5815c49-043d-4a31-870c-e718f3c0b5e6",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c977c436-7919-41b7-b0a7-b51b748c50fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80333213-b3e2-4914-b210-dc33f9872957",
        "cursor": {
          "ref": "a4098346-2ddb-46da-b93f-eddac0312025",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3a7ecde4-e20f-48c8-8863-0baa1ef5d868"
        },
        "item": {
          "id": "80333213-b3e2-4914-b210-dc33f9872957",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "2b3b2a76-2c51-4adb-8bce-a8f9c8c5158b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c56ebff-48cf-4428-91ed-4ab99f67222d",
        "cursor": {
          "ref": "7abe28fe-724e-49a6-b5ba-ef5247c9e252",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "06bf7036-625d-4e4b-b150-843dc1bfa61b"
        },
        "item": {
          "id": "5c56ebff-48cf-4428-91ed-4ab99f67222d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f34f34c6-8c8b-4da3-b3c0-f540c92f82b9",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "6de0daf9-a287-4168-8529-1c5dde3a02f9",
        "cursor": {
          "ref": "31fb3827-6edc-45e2-8377-674a39920c20",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c7f0783e-44f3-4c8b-bfad-04505540c415"
        },
        "item": {
          "id": "6de0daf9-a287-4168-8529-1c5dde3a02f9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c647f41f-f7ec-4c71-9e6b-6d24a4992fa4",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e33b9762-c0ec-405e-a11a-f5cd60266f7e",
        "cursor": {
          "ref": "e2d80211-06ce-4153-9e5a-ab4ec13431f2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3e7f9c71-0fdb-4a39-ac3c-6d84f3cb910d"
        },
        "item": {
          "id": "e33b9762-c0ec-405e-a11a-f5cd60266f7e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "afcaa049-f535-49c4-9ed0-ceaf55fe7edf",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "1ac8565f-4c05-4d6c-9f06-88df21bf5077",
        "cursor": {
          "ref": "d4619c93-c07a-4b1a-8a05-6f8136b7f07e",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1fc9cba5-01ab-4997-8ef4-44267d911e26"
        },
        "item": {
          "id": "1ac8565f-4c05-4d6c-9f06-88df21bf5077",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "821126de-77c1-4427-978d-5f90d317f7dc",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "57fb7062-e50a-47bb-9f60-ea2fd8fafe8d",
        "cursor": {
          "ref": "ac398c20-66bc-49c6-90ee-d04028ae4af9",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a6ec80f8-f100-46d2-802b-273867e6e5f5"
        },
        "item": {
          "id": "57fb7062-e50a-47bb-9f60-ea2fd8fafe8d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "04945441-e827-4d71-a047-8374f3445cc1",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "fe30c935-857c-4d4e-8a97-819f3cebf3f6",
        "cursor": {
          "ref": "202587eb-a7a9-481d-86ac-48c79c14797d",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "18375909-7b0d-466b-a135-2d3e1c9def6d"
        },
        "item": {
          "id": "fe30c935-857c-4d4e-8a97-819f3cebf3f6",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "637e8fd1-fde7-4137-9714-96562facdac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a7283d-fe80-4f22-9d7a-e35b4b4d2adf",
        "cursor": {
          "ref": "02cd6d13-4bd2-4347-90ed-83397aa30818",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "097a7589-d81c-4a04-8fdd-928cae3db1da"
        },
        "item": {
          "id": "37a7283d-fe80-4f22-9d7a-e35b4b4d2adf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "904431b3-356b-45bc-913f-4d5e57ec2aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fc466e-b586-4edd-87e6-74a3fcf225f0",
        "cursor": {
          "ref": "7185d2a7-7d9c-4e5d-99fc-8daed48faa83",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "023e669a-fd47-46df-84d5-2ce84e4fa79e"
        },
        "item": {
          "id": "c7fc466e-b586-4edd-87e6-74a3fcf225f0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4d98d14a-141d-4daa-ac6a-7fb15d767a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f834fd-8387-45bc-ab4d-a27cd1ce7c64",
        "cursor": {
          "ref": "fd7ca10f-488a-46a0-b74b-f052ce2c9f2d",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "37db3027-64dc-476d-9bf1-c046d627cd1e"
        },
        "item": {
          "id": "50f834fd-8387-45bc-ab4d-a27cd1ce7c64",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "19e219d0-8386-4ae6-9f99-f53919e3dc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51fbdf87-c31c-43f2-9b88-f2c6ba092ca6",
        "cursor": {
          "ref": "6b1cbb06-570f-4b7d-8aa8-278bb325c7f0",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c6fde462-f973-41a9-a983-5a752cb83dc0"
        },
        "item": {
          "id": "51fbdf87-c31c-43f2-9b88-f2c6ba092ca6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c6b87211-a1a0-4edf-bb6b-eab3afe25399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6afdf7e-b088-4823-a9e4-d0ef592497a2",
        "cursor": {
          "ref": "18568565-af0e-466b-9768-db4a55663a26",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "58fa9705-69c0-461a-a0ff-38dcbab8c82e"
        },
        "item": {
          "id": "f6afdf7e-b088-4823-a9e4-d0ef592497a2",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bd259c89-8fc8-46f4-af1f-5ad35e485c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7014e2-17ec-4ad3-87fe-1c90921d110b",
        "cursor": {
          "ref": "18a722eb-a835-4729-a42f-cf14176c16c4",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0d8fe342-8e7a-4ee0-8a67-2150084b4ac0"
        },
        "item": {
          "id": "6d7014e2-17ec-4ad3-87fe-1c90921d110b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3d2f5905-1c17-4806-92a7-b01e404444bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed250d16-c3de-4a9a-907b-90f023e047be",
        "cursor": {
          "ref": "35b7229b-06af-4031-abd5-d822add40fa5",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1b1e314d-6ade-4b6a-8dd9-186da4dbbee0"
        },
        "item": {
          "id": "ed250d16-c3de-4a9a-907b-90f023e047be",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "35ddc524-d2b2-4c0f-871e-73cd15474789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7954d9-3346-41b0-8b7e-8bed5f6620df",
        "cursor": {
          "ref": "0e32409f-193d-4423-9266-2ee96c08579b",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "52883cb9-7ac4-454a-b8ca-03960abbc9b4"
        },
        "item": {
          "id": "ab7954d9-3346-41b0-8b7e-8bed5f6620df",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "aba7e462-fca3-4532-93a0-8c9839c8be88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf4cc7ce-431a-4b4b-9e0f-dcacd12f9f34",
        "cursor": {
          "ref": "71a503a5-6ca0-4231-a3c5-f0d497691fea",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d4d011b5-b5e8-408b-b2fc-14d50c303ea2"
        },
        "item": {
          "id": "cf4cc7ce-431a-4b4b-9e0f-dcacd12f9f34",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d8ba3ea6-c0cc-4b43-8080-97f183cb7749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d56d6e29-7c9b-491e-a3f2-f072c92709fd",
        "cursor": {
          "ref": "de2153e4-358c-4b0c-9e9e-60d74c85ff82",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "5f642a4a-c4b3-407d-80cb-175f56d4deee"
        },
        "item": {
          "id": "d56d6e29-7c9b-491e-a3f2-f072c92709fd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "542ee953-10ca-4794-9cc5-8050bc97186d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06365af7-dd6b-45df-9b27-2e6392140ee5",
        "cursor": {
          "ref": "fde62c3d-0b2d-4001-8319-f6f4165d7a73",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "2563566c-61d5-4af2-b26c-ed9b4cd66472"
        },
        "item": {
          "id": "06365af7-dd6b-45df-9b27-2e6392140ee5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c0fea41e-b6ba-4059-88d6-9270570b9bfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139aa4e7-d8f2-4aab-b0f9-729685c358e4",
        "cursor": {
          "ref": "80d06fe4-cc97-4aca-bf4e-decb8a7f1a05",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3832dca4-6e94-4806-bdcd-614d2dfa37e4"
        },
        "item": {
          "id": "139aa4e7-d8f2-4aab-b0f9-729685c358e4",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "14bdf32a-cdab-4bad-a2bc-83eb1b4fa893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1856fd-fe11-43d2-87bd-9a4c38dfa515",
        "cursor": {
          "ref": "26b60a30-d634-4163-aa1b-1382093c67bd",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "2274358f-2469-4fac-8c0f-7cf2b59df06f"
        },
        "item": {
          "id": "5e1856fd-fe11-43d2-87bd-9a4c38dfa515",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b9fe64f0-cb8c-4fc5-beb8-2b707c07ddaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7debc335-209a-438e-b799-0adace0f4dc9",
        "cursor": {
          "ref": "9fea98c3-3629-40c2-a0af-e863041b9f8f",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "281d5267-7614-4ecb-b584-0a0156a351d4"
        },
        "item": {
          "id": "7debc335-209a-438e-b799-0adace0f4dc9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "8c6f1d03-f425-440a-83c5-60126f1300d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79845855-54b6-4fff-bc48-8a03ef9b67d8",
        "cursor": {
          "ref": "c9580652-6ac3-401d-8fc8-264642c9ce09",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b34f5303-4a4e-43f2-850b-b90bd7a5ddcc"
        },
        "item": {
          "id": "79845855-54b6-4fff-bc48-8a03ef9b67d8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "58fbc9d1-e2d5-4788-98e0-75d672b960d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4c6c95-129d-446c-b0f7-84f4dcb46b8c",
        "cursor": {
          "ref": "3ff2eb51-e899-4fa8-97fe-9ad664991e91",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "ba3028dc-f794-43f4-842f-d5642645ae37"
        },
        "item": {
          "id": "9e4c6c95-129d-446c-b0f7-84f4dcb46b8c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "31193285-38be-44d6-b017-eef3621d61fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f0ac21-bd2c-4184-8f45-0128c12890ec",
        "cursor": {
          "ref": "2a03b3b6-c197-4297-9f1a-8fb7f37297b7",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "734cf678-a58d-4fe3-829a-e088c2f22812"
        },
        "item": {
          "id": "f8f0ac21-bd2c-4184-8f45-0128c12890ec",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d8fb0c42-b692-4e0d-b1df-ebe853589346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a91e6b3f-08f7-408e-b52d-0ff45323569b",
        "cursor": {
          "ref": "08f1c9e3-f63e-4006-aa5f-e8922d543f1a",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "88e44c73-810c-47f4-9c53-83b1056e8e65"
        },
        "item": {
          "id": "a91e6b3f-08f7-408e-b52d-0ff45323569b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "862e0b54-fb87-4cc6-b6cc-35bfd85df286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd0d29dc-60c2-4bfb-b9ce-70a79b00a1c4",
        "cursor": {
          "ref": "a12229a1-decc-4b4d-a173-3bc4176f627b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "7eb40dc1-3739-47e2-b6b5-829f4d5b1888"
        },
        "item": {
          "id": "cd0d29dc-60c2-4bfb-b9ce-70a79b00a1c4",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "33ecf3f2-bbfb-483d-b646-0b897f772d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e01111-7b5a-4bee-96f4-3c387e8e9d03",
        "cursor": {
          "ref": "2ea92e8c-9d71-42b4-ad2b-4f5b32b49a95",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a2db88e7-a9f1-4c44-89fb-9dd3806eeb40"
        },
        "item": {
          "id": "d0e01111-7b5a-4bee-96f4-3c387e8e9d03",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "97b58f08-e351-4d3e-bd06-715f4da40acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c055ba0-bee7-40b1-91eb-586b2d4cd481",
        "cursor": {
          "ref": "2b91c080-22c8-4fd5-a6d0-35c2e21e8ca9",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "25b7ddeb-2c36-47d8-85a4-1d207729ef60"
        },
        "item": {
          "id": "8c055ba0-bee7-40b1-91eb-586b2d4cd481",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ed37068f-33bb-4fcc-9722-aba085f2e161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d26593-8af9-43a0-bdff-50685395ef03",
        "cursor": {
          "ref": "c504ed6d-2a36-4911-84d0-55fb210d5385",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "bed5e3f8-8e68-41e6-8ed9-7bcd69d34dae"
        },
        "item": {
          "id": "66d26593-8af9-43a0-bdff-50685395ef03",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "fb63013c-1b30-4699-ad2c-0c29f765c3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3068f46b-6392-4d49-bae4-42cafd981c9b",
        "cursor": {
          "ref": "f6ec2260-42ec-45d4-a3cc-814570fd32f4",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "5d0307e0-9e04-48cb-a9c0-d1ae76713243"
        },
        "item": {
          "id": "3068f46b-6392-4d49-bae4-42cafd981c9b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "0a1e53a3-8f87-4986-bb0f-1e803e1448b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31f320c4-ee36-484d-a2ad-eff8e4ec97c1",
        "cursor": {
          "ref": "cf82dcb8-dc5f-474c-a989-24fd0af1c575",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "2e409a45-e746-4947-b6df-bf25bfe3c3c9"
        },
        "item": {
          "id": "31f320c4-ee36-484d-a2ad-eff8e4ec97c1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "de640155-680e-4ee1-85a9-5ed56d1f93e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aa45f5-6a90-4e14-a0fa-8ab515a56cf6",
        "cursor": {
          "ref": "c8a884a0-309f-4c54-ac9d-6ef5eca9e2da",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "42f711b6-7dba-453a-bc20-5b7f8a053eb4"
        },
        "item": {
          "id": "56aa45f5-6a90-4e14-a0fa-8ab515a56cf6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3f22865e-729c-41e6-a3f2-cc0f6a32f00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8ef9c4-6dac-411e-bdc5-5af2503a25af",
        "cursor": {
          "ref": "b2319882-1e94-43b8-8aff-1af1d9ad62e3",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fdd95714-3bba-4928-ba04-6928d848cfc7"
        },
        "item": {
          "id": "df8ef9c4-6dac-411e-bdc5-5af2503a25af",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "ce025249-b1fd-4a12-8306-4e6027667818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb88a8c-a1fa-4d52-a6a2-1dc300eedb4d",
        "cursor": {
          "ref": "285db82c-f5fb-4d3d-a6dc-b6b3fa65eb6f",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a8291750-1517-4a82-b91e-4050fcf81606"
        },
        "item": {
          "id": "ecb88a8c-a1fa-4d52-a6a2-1dc300eedb4d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6e8f60b5-5f40-4f88-b86f-a6f96ed3aa72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0539c019-575b-40a2-a3ec-e467ec19aa87",
        "cursor": {
          "ref": "d140e2e0-b99d-4a09-9f7d-f2f5cf6d3638",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "7ac961f9-4ce3-4322-b0b9-ad9d5cbf0f3f"
        },
        "item": {
          "id": "0539c019-575b-40a2-a3ec-e467ec19aa87",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "11009afd-ffe8-4b5e-8e3b-f3ad915eda72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07af7529-7906-4cf6-927b-8ef820af89ad",
        "cursor": {
          "ref": "5c37abe1-a5e6-4849-b613-1adb8d4d900e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "6e8a4ca1-3218-4826-b675-a3fe2d36940d"
        },
        "item": {
          "id": "07af7529-7906-4cf6-927b-8ef820af89ad",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "62057f28-a85a-445a-9767-3e8963f45a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edcafb6-2886-4f82-b4d6-af57fbf49a3b",
        "cursor": {
          "ref": "c587bff8-3436-4b63-ba2b-1461c2b7d14f",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "93bbfc70-0f39-42fb-8e5c-947ae61246e4"
        },
        "item": {
          "id": "4edcafb6-2886-4f82-b4d6-af57fbf49a3b",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d36dd6ee-4774-4333-854e-1bb65549d7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a4417e-76fe-4ad8-a985-c08219356a76",
        "cursor": {
          "ref": "3543630f-da8d-40d4-918e-81e97a932462",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "dde87804-0f0a-49c5-9f61-68f0f1495e44"
        },
        "item": {
          "id": "e2a4417e-76fe-4ad8-a985-c08219356a76",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1c0ba20d-38da-4f95-b673-ee95e23a5a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efcbc899-ad11-488f-8235-62e291c7b778",
        "cursor": {
          "ref": "018b9060-0ea5-4076-bdf6-f59648a4ab14",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "130b4c7d-27f6-440f-8548-86c942200aee"
        },
        "item": {
          "id": "efcbc899-ad11-488f-8235-62e291c7b778",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "064bd735-da17-4b3d-80fc-0a207cac77a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c56659-afae-4e03-9374-4b5de815f8ad",
        "cursor": {
          "ref": "6f6104e9-e6d4-498d-b50a-ca6b4918500f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d12d9d66-7c8b-450a-a15c-7092775d7421"
        },
        "item": {
          "id": "08c56659-afae-4e03-9374-4b5de815f8ad",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0bc77134-d3f9-44d9-b73c-6d05146c79b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28405c40-d6be-4af6-89d1-ee31d88492af",
        "cursor": {
          "ref": "f47b3f14-cc2e-4beb-a0f6-944a0b6fb14c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2ad5ca77-5f79-446f-aba8-54708da53397"
        },
        "item": {
          "id": "28405c40-d6be-4af6-89d1-ee31d88492af",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2090d364-0f87-4600-afe2-d46941a47110",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ecd367-e405-4f4b-8967-35d2f7d1638a",
        "cursor": {
          "ref": "60d7ede7-9f5d-413c-a62c-5b87e1c0fdc5",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "34addf7c-9c3e-45f2-9828-c666a55b7135"
        },
        "item": {
          "id": "c3ecd367-e405-4f4b-8967-35d2f7d1638a",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "eef66487-ddde-4ecc-ba11-36444e51770a",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "22abc6f0-34d1-455b-978b-695f32eb84d6",
        "cursor": {
          "ref": "fdee5e24-3dd2-4998-a44b-1226d8144c34",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "77ee75b1-201d-436d-97ad-f3ef387f79e2"
        },
        "item": {
          "id": "22abc6f0-34d1-455b-978b-695f32eb84d6",
          "name": "credentials_verify"
        },
        "response": {
          "id": "958d7e2a-7c3b-4688-9bb8-b806d514a33d",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4969d78-1adf-4e6f-b238-2b67157f8b39",
        "cursor": {
          "ref": "909cbcea-f968-4198-ad57-ff33662d2066",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "280dc4e2-c850-4f0b-b184-8a21a616649f"
        },
        "item": {
          "id": "b4969d78-1adf-4e6f-b238-2b67157f8b39",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "bfe2e72c-ff9f-4aea-a59b-1c3f9904dbb6",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdd85e2-390a-48bb-9b6a-ae0761d4b528",
        "cursor": {
          "ref": "ef567915-d095-4932-b26f-3e6b6d901364",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1030d82b-ec63-4a64-a40d-8438d4294db1"
        },
        "item": {
          "id": "0bdd85e2-390a-48bb-9b6a-ae0761d4b528",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d0927734-1b58-4069-9dae-2bdb92861d5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdd85e2-390a-48bb-9b6a-ae0761d4b528",
        "cursor": {
          "ref": "ef567915-d095-4932-b26f-3e6b6d901364",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "1030d82b-ec63-4a64-a40d-8438d4294db1"
        },
        "item": {
          "id": "0bdd85e2-390a-48bb-9b6a-ae0761d4b528",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d0927734-1b58-4069-9dae-2bdb92861d5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496b1b81-a0cd-4115-8b2a-be5974c78a1e",
        "cursor": {
          "ref": "eae759cc-1b08-4aa0-90c8-27700ead3746",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f2ffd2fe-442b-4231-acb5-7abe1c055705"
        },
        "item": {
          "id": "496b1b81-a0cd-4115-8b2a-be5974c78a1e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c2f58aff-27b9-40c7-80de-4317ac96037a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b68b5115-1886-4091-b05a-d0827ac7db4a",
        "cursor": {
          "ref": "4e42e99a-c3b5-431f-8c55-f079f9f2e65d",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f19fc449-3f89-45fe-8898-3b2fb16c2751"
        },
        "item": {
          "id": "b68b5115-1886-4091-b05a-d0827ac7db4a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "35a7ac9b-4cae-40df-adb1-8bd7111e2be7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}