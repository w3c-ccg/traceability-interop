{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9a94da20-1f6f-46b6-8652-9d5a53b89296",
        "name": "Clear Cache",
        "item": [
          {
            "id": "73c7c61f-1be7-4dbc-9bbb-fee893f99b35",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a4046497-6656-40ef-ad0b-6a090b30465d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0937f2b9-be60-4c33-9463-104ab0a9aad0"
                }
              }
            ]
          },
          {
            "id": "0c58f5e0-6446-4d2b-a9a2-713f3c387337",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e8f17f7f-30f8-4872-9504-5e2167f30cd7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ade2a4bb-d279-45a8-9967-071fba29354f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ca216677-7a29-4176-888d-e0c6557a0315",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "3ee421bc-5552-4f8d-aad9-14995f120e69",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8910966c-16b9-461b-8471-1b2c621cf7f0",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e070a8de-512c-422d-bb46-aad077a49015",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab637df2-401f-455e-95b7-c0868d36342f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a8af472c-329a-4129-bfeb-49ad4aa0942e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "05f1f5f6-82ab-4658-a167-aa3c87668817"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a5d40a3a-0c17-4302-ae01-4f48446aeaed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e8c477db-585b-4231-8d2c-4fb5e66054de"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d06a37f4-f042-46e2-a152-dc0cb55f7361",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7bfa8108-7574-4acd-9510-a26d1027cc2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bebfc1ac-8881-4e0f-80aa-008d83ceaf83",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f72f1b7-a78a-4508-a5b5-aabe8f101a59"
            }
          }
        ]
      },
      {
        "id": "fa3512ef-c518-4442-b6ee-429fa3a95bc5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bdb5b116-a595-4eb9-92aa-371113c144eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "031c5e26-8704-4c07-acc5-a898f8cbd201",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "049e4da4-aea9-482a-8c7e-444d13943e29",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9f85b5-843d-486a-8fcf-7138a5a5dc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e722ccc-990a-4b18-b2db-ca236278f977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0aa42fe-6266-470e-9c7c-241ae79c52a6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ec364d-326c-4021-8dcf-e9cbb277dbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60f13099-fa88-4e26-9839-83e7fd50f799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2e1308-1d2e-4d0a-9e96-f74e3b2f91a3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c29fd8-c391-4436-9d45-193ae2dac522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9064940d-7b55-48f1-9cda-d11348ef2649"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ba7a4818-705f-4b24-affd-c7fe85c7f502",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8b958e36-c689-4456-86cb-da20a36e6412",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "270b0dff-14cd-4d76-84a9-0608e50385bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d224995d-ebe6-4c35-998c-de3d9704a23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60cbe773-dffc-404e-85d8-c049715c2fa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1915391-d7a2-49a2-a4e7-08be144e4d24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2a04ab30-8bde-45a3-bbe0-864eb1e64ee1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "070e5f30-be55-470b-a523-71debeaf73c8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a367f8ed-43c7-42b2-b31c-dcbb3e462ad1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "aeaaa575-6c91-4613-9523-3bd949e92464"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f3f956b8-4392-4a0f-9dc4-b368b6b0a61f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "006bc5af-2b6b-4bb3-9b07-1e23833a0f7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df6405f5-e2bc-4524-a597-ea5676547467",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c7a92f01-9d79-44fb-b18b-7450ebb7f5a0"
            }
          }
        ]
      },
      {
        "id": "083f308e-2473-4469-a28f-e02fd2e17ab4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "50946b2e-65c8-4db7-a8c2-0f142a16d893",
            "name": "Negative Testing",
            "item": [
              {
                "id": "30539bc0-df16-4927-8492-0255d19c5ec1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cb767567-847b-4b6f-bf69-9b56f590e684",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b4e5da-ed70-4aec-ad9d-7559c8f57187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba35b8ca-db72-401e-b6e6-5255b9a1637c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3caf6bfe-ffc6-4048-9cba-cc6d49df22c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ce330b7-db9f-46b7-be82-51e01f8a796d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b2c3a34-5502-4dc1-8f8f-7a26ffc90cd9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27f6664-fd6a-4270-a179-329f1fa380af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c4ece1-8195-4266-bcb1-a7c1cc6e1835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb0a00f-d0bf-4500-9e24-120422fbb2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a70dfec-3238-41a8-9abc-fda71c2620fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b4d677-0a6f-482e-af73-90c34066e264",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6159b29f-54c3-4234-8e88-5e9766302802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754e63fe-4871-4b4b-9693-b905d2990b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac1c5040-915e-447c-96b2-923544717a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21dd163a-0842-42e0-8056-664b40633cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4ea2bf-22c4-4cb5-b7b1-6a1263f74f4b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1f4282-053c-40c0-8035-2a95d4954233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d0a1af-610f-412f-96c1-93e72c619a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cce1fe3-fd3a-4e1d-937b-8257a92f7acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eeba212b-416c-4c39-9c13-6fc16eebddc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c79b230-cb8e-4910-b06f-792c80146d11",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df094450-6af5-43cc-8718-9a5f4e4358fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca093ae3-5136-4490-8253-6cc7c73c0676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65c6b96-a1fc-4cd9-818b-2f1060f1be9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fe7eb2b-5a0a-4a62-8867-7732bf0fec96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb9c87d-878b-430b-bd39-09fa68277a71",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4284a2-6cb6-4e47-9a08-e42208955a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a0b04c-92f5-4045-80b5-b6b7a248c9f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e1bc0bd-b458-4366-bfad-b8732bd92a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11b3a18e-39b2-4f3f-920c-a9d0950e8232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1397535-ef69-4d70-8e7c-8ccab7780ae3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8c308d-02c4-4ddb-9853-d1830ee5cc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98c9fdb-8fee-40af-8ea6-b770d8cb019f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6338b9c-a900-4134-82d6-db439fbf1849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cee9563c-9ca9-444d-94f3-31ee900977a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81986bb4-0a0e-4b1c-baa1-2e7868aae803",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc961831-27f1-4bb2-9cb7-b25b992cb34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810212ef-2109-4e14-8501-2364c097b806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b649277-6d43-4bfe-aa94-d7b683b52090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d65fc37-43c0-4fec-ad4b-a34c338314bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41fd1fb-612e-4dae-86d7-591d49b5b73f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f8ddd1-6cd8-4760-8644-b992f6e5047f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1568f5e-1148-46b5-ba3e-a5491fd949fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d0891e-a3f5-4ca9-8853-2a42d2505ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d2e6b00-d067-489e-a20b-78935d567a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a0f5f16-28d2-48c4-8d8a-8a15dc47ff60",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3476069e-bb7b-423a-ab6a-d941a82cab5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c2176c-7711-4fb8-b3ad-092f29c5191b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d03adfc-3ff8-4eb1-a8cb-7efdf07a27c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f46481a-bc59-49fd-9899-1890505d1ee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "263ec9df-1afe-4f07-93e0-1fbe05049680",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ceb3d29-1b36-4fac-bd3e-3bdc5fd8afbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16ef99e-4a13-4d7f-93e2-8936d0a1bfd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d95eab-22b3-444a-a2d6-31762e9f267e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4d7adfe-c0da-43d1-8dbb-e74c0023ce6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e877f9cc-0414-4125-81e1-8a03d6a38200",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd91337-0717-4897-a7ed-9459495d81ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d7c1a4-066e-4ffd-8eb5-776338cc8783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6e8c50-ba0e-4b95-b2e1-6be7eaee4b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3a0c91d-345f-4825-871a-f3fba84c32d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1755440c-a9d5-4ce0-8467-50d4aec8350a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d1e3f7-581d-4c1f-9c58-d6b1267009bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916072e6-b18d-4dfb-8c17-2a2e0cd8cb60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9acf91-820e-4496-80e3-53367b01f494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c39ad84-2506-4717-a686-fab0477c673b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245af575-949b-4a25-96f5-37a6559af2c3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf3ee432-4d84-4da7-a6a9-2033fb3dd6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d827f7d-a184-4b20-bd7f-ba9f80331c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34541fe4-5d96-4034-816d-53137619ce37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f36e5b4-1557-4807-93a4-40450df61eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0977120d-fa03-47cf-b060-7c6b779eca06",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d11af80-4029-41e4-9bbc-e7789b64e68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c714db5f-4c51-44dc-8cfa-d53cc5380dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99dafc3-d4be-445c-901c-d3462a00868a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c39f9da-4d6d-4d25-a11f-6dc4c7b91854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0279cfb2-ef1f-48a3-afed-9d9b1f61a2ca",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c357db84-b84e-468e-8b55-f713850777cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62ce4fe8-250a-4532-b23b-0caccf9a0477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4a5f88-30ed-4a4c-bfe8-3ecb4b325861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f0b31b6-c51b-4df6-9035-ffa99918d43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e14b76-8b09-4797-a9ab-25122135c2b0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da453ccd-0d86-43de-8605-f7d574633479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a372b055-32bf-4c57-8d3a-fe514e69be7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e042ab-a5e3-463b-9bd6-ebc69ded25a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "42fd0bcb-c96b-41b9-82ac-34f1b9302310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f41c78-705d-4919-b902-c3008243e5c7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39422f44-b31e-40cf-b16c-92e5e320cde0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71f86cc-6195-4f2a-88f9-089d754a67b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4a67f8-d43e-42c7-a71d-eb5af2b84cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c62e478-84cd-49b8-aa5c-2e2a2c22d858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04da89cc-84d2-49b8-9396-2cb257199ded",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c456c4-dbaa-4750-97da-7dd5125f00ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e859deb1-e567-4e09-8098-41fbdf9031d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7201ca60-07d5-417e-9698-d2dcbf76f7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb18f08d-dbce-47bb-a558-82b74a3b1583"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6555af-cec7-40a7-840b-fb1b1a9c7886",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98a691c-c46f-4637-85b9-54759bf73c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0d7512-a2bc-4fcb-9f6a-72666abb6cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21e2682-9465-46ca-b44f-6c675c875ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf4f841-a350-4eec-9f4a-8d23802b458b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352400c4-c6a0-475e-8b2f-945d5c5b6279",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97e0c81-ca0c-4b1b-aa9c-12af285d329b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0c4b45-52e8-4a83-bd01-cb17954d6a15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd3a8f89-ff2e-4190-af87-7d596c0f696d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "155ea146-1804-4fd2-9011-18a96e9a3a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd943de9-6aaf-4a0a-b11b-8f2512c4c823",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fbd4cf-4dde-460e-9284-9844a769d847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f18adb-0d00-4a99-a935-34a476fc86c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7665a99-3340-43ed-b7c6-1fdd6a7be22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc8a6f3-d0f4-44d1-ab36-6f39c6045272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab49ae7-2b72-4d8c-b644-5a188b2d5a2b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4beee5fb-6f88-41b0-b591-4382e34db8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aed3740-8e01-4e04-a910-0d9b69740b46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c338a507-60de-4b00-a976-d502964cdf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1f959f36-0191-4efc-99af-8420f8978a64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1333df4-8b3a-4b12-bb06-ee5bc0aaa867",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08550de9-dceb-47f5-9752-b29365280e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58eea537-0865-4bc0-8337-6c7a875575cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97ac3d9-95c3-413d-91b0-f9738f90f7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c654c94c-900f-45f4-8c41-118fad038efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20053ae8-d7f4-4ec5-a2e1-214909f094d2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffd5850-818d-4dcf-9d19-b9bb49e59338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bead3ad-cc93-4a3b-8931-3a915a18994e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1924c85-a2bd-47bb-ab86-fbce5fec241a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7f7c5eb-a3fe-4d21-a7d9-bfdf2706c8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62862f8e-5fcb-41e5-92bf-afc4f338ec04",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c16bac-954e-43dd-a4ee-c66716d7deae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ebb26df-6c45-4629-bf90-3c53095660a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f12cc6a-41ca-4d5a-9158-199574531ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3618776-c0a0-4d3c-930e-cdb5a082405f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e70222a-c33f-4f2f-9c01-c6a53fac0fff",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba79386-098a-45f7-a512-5b47f498cad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a427b831-56de-4d58-88d7-56970499e183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0752c6bc-fc14-467b-9ec8-1e7f96dd2f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0eb2cd-6193-42f4-9652-c33bead5e43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43eb02f-76fe-48c2-9759-deadd6ebb668",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b3f272-682d-4264-951f-d0a7cc4c2774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208d79dc-216c-4e40-bbd6-8381b4662849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "507e1de7-343a-4b88-9f85-d38d6f5d7e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7762b490-7c07-4f97-941a-024fa5f0bdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcf7ccf-7625-4015-8c55-3fa71bd8a8ac",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47edb12-1e5a-4919-ba45-c95ade2761ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484dc668-c451-40d8-806b-b817d30cc016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0d4af6-4fda-47f6-a01c-20541b259629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "032f4098-bc56-44bd-868b-8b844e0952e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e09ea0a-a257-499f-a834-0217907a58de",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea94dddc-e784-4265-b4bc-33427b9050c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b86e7b37-23b9-4278-ae89-45226a4b2f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70504ec6-6c56-4f58-b9b3-d0627c5c6bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c05f9a72-b3cf-444f-9d6b-cef7b62ca1fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9028ba0a-5066-40cb-90fe-4600e1e4b8a5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f365cb4-5e33-43e8-b721-84f18774d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb3eeed-d6ef-4b02-8f0e-e8bda96d1b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9453c05e-250e-4f59-9583-2cc8ad807a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a314d671-a327-4b5c-af55-5a6c13f37981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b914966d-5751-4d90-8ba7-e8f89acf0c97",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6240682e-417f-4848-9afe-8c1821d2f88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e239338e-7a04-43c6-8a47-e642a9cbb573"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10056fbd-25e1-496e-8ccd-04d084e99af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0e2c47-2306-4083-b8b8-15da7bdda3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e7dc94f-b01b-4854-b946-9c759068d208",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c0fc04-fbc0-45ff-8727-d0d8d6230470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a26689fe-fc3f-4ebf-8439-3d321d816e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab0cd42-0fe9-4a35-84c2-82a7486736fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b9dad0-915b-4ba9-9071-6415b908c620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63aa4bb9-b713-46f9-8c02-0258443b2306",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2920fc2f-35fc-4cf4-aee6-da261cc45b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69677da-f0d7-4d90-8696-965d56f842d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7919638f-e797-4db1-9e9a-e2ef4ee59fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2ad8fbc-435f-484c-870f-20320ec25034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a87780fe-b0df-420b-99c6-c12a227e6ac1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e5bf62-6b5e-44eb-8952-6257275f63ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d761244c-05a6-47ea-a42e-f8d48e4471b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21bdeb8-21d7-409f-8511-b3f863adb7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6a915252-f140-41f4-99c3-3328b16cb2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2b86d8-32dc-4f82-b191-e4e60c042b4a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68977c24-a64b-4d00-a300-5a0e6f1aab24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f25ee27-223e-468e-8cf1-4daf22a51f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63e0a81-a15b-4837-afbe-5c5e8816f6de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93ea551b-24de-470f-a305-2f79fee45691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbe779b-026a-4ee7-ba22-f305c0990279",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d299a1-d1cc-4930-91a3-ca5d44b757d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5116e702-266e-479c-956f-cb9c57db6037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6109e713-e5ce-4a56-8e97-a152dc9bc978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2d3d99-8c93-4855-84be-87f935afa83a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44a630c-0aaa-4523-85f6-52d318523f97",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a25a841-e4f2-4e5b-aa02-01951fc1dd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9799b242-b3c7-4bc5-8478-127a737e0cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f000a816-7d42-4da0-a1f7-b727227f6ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "be9929e0-e0be-4909-bca6-c46283d23799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598143e4-dce5-491f-9bff-84bf3a7593e8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b376f329-b22c-4c30-bae9-2fc3b9788dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7271679-03fc-4fb5-8dec-af0de502a239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fdc627-be5c-4459-b153-d35b6fb5fbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1102650-a6ed-4da9-b755-462b3e19490d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70fd5869-13c5-4930-a661-0657532fcbb6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b67474f-78c5-4035-bf83-a1ed2a6556c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7739b02f-1e1e-4b3c-bcbb-39c55ba2245e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ec98f4-c77e-4b14-ae49-ae9fa939dfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5d4616-83ce-4056-80b7-959cf9db494f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0594af-ff97-4d09-ab95-22f9c87468ed",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c1e3af-0373-4148-92a8-5bae0f5dacb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5eca53-a23f-441c-bfb9-d9dd4dcb2d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb292bb9-01b4-45ef-8be8-b79ea84a893c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "49db599f-1012-4add-9389-c58d657489d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba2ebcd-74c2-4188-965b-05fe97278377",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59167d2-cdc0-4083-883d-68ef28dbcedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3e94267-c7b3-4da6-abe7-515d3a22ab34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0b3386-b995-457b-a6d9-5d55b82ab3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5da58ddc-9914-4962-a1fb-43f27cc53ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934d059a-3fd3-48cb-b8f2-ec1f1c630923",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a2e491-3278-417c-b365-596f4583005d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "534fd10a-74bd-48c4-ba46-fe2416344614"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c79f2e-9663-479b-b8b9-9de15aaecfac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee4f4a6-6240-485e-a699-5d81e7e6b85a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49016de1-7b36-4fdd-92d1-14b0a417a005",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205fd359-7d9b-4101-af89-7f6406454544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b5bbb42-d503-4fb1-b99d-beaf0c8756d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1ef612-ae10-416b-b7ee-80795883eda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c5ca79-3c0d-4e71-81d6-63b2d45dd425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be44df30-2ae4-47be-b9dc-d6643febc522",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ef8018-de8b-4dd4-a358-5ddc7dcb5635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d65f00f-04a8-4f4e-a90f-7c2c162d9526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35ed348-d461-4f07-a5bd-fc42f6c50acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf9ef8c2-0a88-4d80-9b06-ae419ca6e8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0ae66f-76f4-4090-99f2-8b227d7098cb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c9b3ef-3fc4-435c-a8ff-0cc0fc1ec861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c84bfa-efbf-4b25-9ed1-adb0de984872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22ffe89-ef43-40dd-b904-18ab57456b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e6bb18a-20f3-4d67-8a9a-de5d58c10821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b219fa9-6753-4d8a-81c4-8e7d1e220ecf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b772130-1377-4bbd-97ce-fb87d83687d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08dbb4a-5a78-45c7-97ef-d1892a4f5e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ac9e56d-5086-4e6d-9a59-b0ab4322b056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "37016da2-7953-4698-b297-3070346c989a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d1d085-5ebc-46fd-ab76-fd85c4d7b6b8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2dbdbde-c322-41dc-9da6-f598e7b8dc73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9758e20-4a94-4d64-a0aa-0f8deb4e37f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9421f7bb-0a5d-4448-b562-3ed5d78138f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e85d03ff-81b6-4a1b-b9d8-943226ef7104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8396e797-4038-4aaf-9f38-851fbaf4f3f9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae979f4-2ad9-49f7-a4a6-39f3527403c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611ea595-9a36-4048-865d-d10fe213e422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3500f7-833a-4368-a6db-cd58d228fe8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4561c71-d0c6-429a-a45a-de48ada5a833"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebbcc48-2469-4a3e-be21-aacada32b0a5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6733e1fb-6e68-426b-8f44-7b4a1e0a2dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de31cb86-bfc8-4fe1-9b91-7ab6b0ecb9ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6b073c-0160-4409-a584-3e491dbbd444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d77f463e-9341-4ae9-83fc-be00b7760a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36c2c7d-67e7-475b-b296-9f6aff51099d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b784c48-3ddb-4ef9-8f35-bfd643336a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e82db80-e443-43fd-8103-482010b2323b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "378536da-48a4-4aee-90eb-76b5abd4ad92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ace1564-a85b-4ed0-8617-2bdd7edb425a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17b9170-6103-4ce2-9f89-06579005bf89",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d50f8f-ef14-4131-975c-6ff17112fa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b66d18-8bf4-4b49-8647-bbbd22b9d658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa0cd57a-9a33-4966-9adb-1ca93bb67617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c50bba-d38e-45a1-b462-d363f602977a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c150f7db-286a-4598-b941-7c8c38e8082d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfaf5819-9773-44e6-a82a-83bb9f0a404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e5bb741-0a5a-4ac6-8188-6f47d2370692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f0a22f-4a92-477a-9e68-562f1adcfe1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eead1759-0a35-48b8-af69-5364bd10b12d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc6fb625-3b3b-4895-a517-5a8e1b9d9232",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f2e410-5ed2-4033-95f8-ec741685f2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f988983b-9158-4172-ba2f-5c65bb17dd1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07aa0879-d3cb-4628-891c-706df08d3d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4dfd63b8-4d18-405f-9297-8d01b1f15e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d412eb2-0f64-4835-bacf-6f7828fd9cea",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7639b041-fda1-46c0-b36e-7b1b4d2e4796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8bbe48c-1a54-4d72-9038-a0e7cf53cfb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca717f68-0524-4c59-9391-2d018a333867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81098b43-5639-4540-a229-0a0a6f4e0b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51f4fa5-00ea-4959-b788-916fd55674ab",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ac431ec-062e-491d-b6ce-20d33ba8d832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3f5550-3aa3-4bf3-9a80-0734bdabdf6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d36a326-daa1-4d6b-ba73-6d492364e6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "55d9fb7d-7528-428f-a405-bcaf5e0385e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48b9c8b-be80-492a-a85e-0a6447df867d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25d6908-f63d-4e7e-879d-8039fb1abe9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b92433-b1ca-48ce-ba93-ad277a8a4932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5155e34e-731d-48b3-86a7-521b9260f880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "aac65c75-71a2-437e-b332-12c4663f89e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7287811-8f25-4fd9-8074-ce78ed771052",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f521822d-786b-4d8e-a5de-33819ee7e8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b53132-a52e-4dc4-bba0-79b904e373b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2578b0a2-ab53-4f45-9aa3-486bee7017ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "74c5ecf4-c330-48b5-9334-651d8b70d222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c21254-8d47-45b8-a646-228175c7aaee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e89d8f0-8b6d-435d-9b7a-72706d62ed43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90b31ea2-bee4-4381-9f09-fe594314cf1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f6597e-89f2-42f7-859c-e74ec9531a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "033bb4b0-0706-4add-8719-187e4d0e49f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c978bf-a320-4f18-8509-5b5307ecb2fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5621758e-8269-4d33-8072-4f619e838c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a04f140-c542-4717-af07-bf54004c89cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673143a1-be1b-4232-bead-745ba306927d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9702a78-aa29-491e-b1e9-b1e4ce5e8906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f7f6ca-3c49-42eb-87c0-06935b52e17a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e0096f-afc3-4a03-82a2-b81c3f15d309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7ed5aeb-aa2e-49cd-b7a5-99cf11cf0f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78642ba9-7a39-4381-87e5-f59401401f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e20f0b29-5423-4501-9488-fd75306dc623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f465bec-cd5b-4517-ab05-8e98d4a2f527",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bd482a-2da8-4823-b545-710652ccdb2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f66250-6c7a-4be1-9d66-d27cb171375e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6998fcd2-9533-44b1-a15a-3a5d64596550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f10d6c8-aae0-485f-88b6-a4b21701c10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3216e72-6b62-4475-9225-556f70fdfeaa",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a45dd35-afd8-4528-b88e-842323ba9c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3134be-4842-4bd4-ae0b-47d7a4086312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7f12e6-c02f-4dbc-b162-717f11edf7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "433cee40-93bc-4ceb-b1f0-8a5b3887669e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05c5b03-5f46-41bd-8f87-a7f7f57c75f4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75bc2db-49dc-4e19-a4b4-c3119b7e8f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8e7dc4-79eb-412d-8d4c-674de10ec20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7810c6b3-47bd-4276-bf8c-11c538276ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d027a31f-f5ad-4351-8040-3e7ec30bfa50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e6d072-6423-4ec2-b8ac-ddbfbd2b03b6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e7665c-af50-466e-92f3-6f52b60e34f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fddcfcc4-5d2a-4e13-90d1-d01450a417f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfbe9c9f-e78c-4638-90a7-9134338a6b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e9e4b6b-799d-4508-8b0f-e0a0fec7a408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a56bac-f020-4386-9328-c2ab1318dbaa",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a585712-91f1-4281-8b36-6b59608e5a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f167ff-709f-465b-8326-1380b0959b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "435b72ac-489d-450a-9f77-f94c7e75803f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "459091b5-9702-4b87-b164-3d414a87d9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7accad46-54c3-4438-af5f-d66d15aa3194",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae524f6b-71a7-4217-9aae-c2b1efe9b289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d5a84cb-dc04-4a65-9734-adceeb6bed23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cbaa0e-bf2a-4f74-b893-9bd74634aec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "022c71c7-687d-4ced-9a3b-bd80599c7b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83525cc7-380d-405c-9422-3f07c8144d7d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b2d279-3fc2-462c-9bd9-80a041c812a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89207e7-55fd-41c4-8a76-797c9bc8305b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018b2cbb-d5fa-4f61-8477-68a5786c3fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "26163fcf-829c-4a52-b497-2bcd6a77ed27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe60fddb-fcba-4c00-b1c5-ae80a9dffdf3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb942835-c99a-4f32-b183-5d679a2e76e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44efb649-7630-4050-a1c6-dd8bb55e2577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "264ac655-1b38-4ed2-8eb1-6c053a907221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e65be77-a126-44ef-8ec7-46bd87f14db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7fe2e40-aef0-4118-8dc2-cf3be2536da1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40fbb5a-6d46-4441-a6ac-d530679f2655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9e61c0-c94a-4af9-a4da-4ddc6e5f0e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5efe20-e081-4c22-b3bd-8f1435d4c7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba0ea26-8079-41a0-bc56-6874d09436bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d29747-dafd-48c4-acd9-7ac2c895b93e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8397ac-de6f-4f5b-8013-167f5d172e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed329ac-c94f-4795-ad3c-b797e244af40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69809d0-d5e1-44dd-81c4-4e3efba688e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a958f8fd-d81c-4c23-a8ca-94745970ecab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a279b1-cb9b-4947-8b68-7d19864cf972",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed608aaa-ab65-4a68-8f80-ccdea550d6f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da12ed0-eee6-4275-aa2e-6aff0185124d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b749a5-88c6-4266-8197-7fc117c5da04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00e9c814-c26f-4629-a120-e2efa0861923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71cf5ab2-13f4-4d03-845a-5fac6a88c245",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d2a9e8-e3e3-49a7-a5de-e67bef6e4057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66e9924-882f-4f4e-9f8d-821a5c7aea76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d80a34c-6ed1-4afc-bdfc-ca83133269e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1831266-d5a3-4dd3-a22b-c0bdb84b205f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8296a0-3850-4237-8162-2841b26f5b5c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608fde07-4415-4597-97ca-d7aeb550c1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f72401-31da-4428-b504-b6c0d0180369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bd5bde-fa9c-4aea-9c36-c407cdd5745a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3808d2-7c75-4a89-b610-51fb094d47c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26469134-8b27-4814-8790-0ceea76bf7e8",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75518c3-9719-45d2-a7ad-52d7c55e3b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ecc68cc-0d37-410b-8876-ea58da1954f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04481f7-b5a6-4dfc-9827-53a1afa85a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6d55f1-93ec-4239-9aa2-e5bb0a931e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5ce9b4-41b5-4013-9b0c-2575eebe9650",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7703e999-5394-44bb-8723-6226707dbb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eda9165-937b-43f5-abcc-9d66a08b2b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6272543c-cd52-418b-ab56-dfb2cd22c596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df36bff2-764b-4a43-ba09-674b47b03e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7616a37e-e76b-472d-a538-4e4a5de57dad",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09da1056-fded-4c52-9a23-26339e9fe5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "128d64a7-9e11-4a87-b102-5f575e5cfa3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28fd7e6d-7367-4804-8cb6-4e19e9a3e927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df78872e-4eaa-41ab-8e3c-2c0ad4410a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60fe3e9-7691-4957-a207-dab1e76e13bb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16231baa-4eaa-4d09-8386-1ce58e41e6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2eb559-8e0e-4fb8-9ece-bfbd621b5da8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06005291-a540-4f55-98f5-15008a3f14d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a94765ca-3d9f-4e8a-990d-6ea1b6700ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9da7c9-7833-4140-a8fe-80b1b812dbb5",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de2653b-dd89-493b-a8b0-abc3448799e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8928be23-0656-4d2b-8171-4fe85bc03bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88194685-4bb6-4dbd-a9a7-fc0ef4a2d65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b050def-e6af-43fb-8264-78eff8de742e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe76f0db-619f-4488-9b69-a94394ce59ee",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ed4076-7060-470c-a272-efcbf1539897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbfc277e-cbd8-441f-9527-c7eb3e295c4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5832c770-eee7-4269-ad9f-ef0805c4687c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c8b94b9-d0e2-414c-b566-e51342ac0b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca56b38f-11f4-4ed8-81e4-875022fb4eb7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83025a1-df42-48f1-b08a-eaf45ca9fcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e698c5f-8e04-44bc-9881-c8cfc7043c62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74a1a55-7a3f-4b2c-81f7-ca555c9f39cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "24f77ba7-e25d-450c-9b5c-71f015e31c8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a15f80-b145-4491-bc65-98a47312676b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58079af5-8024-41e4-98a9-2293dfc18d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29353326-0ce5-415d-8b10-bdecac32fca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60a6947-c795-417d-a32e-37c85247448e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d11ed992-b413-400a-afc1-e901feee3927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37901cd1-5c64-4dfe-adae-48352ce31555",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4c7b51-2a62-498e-bbd4-e36cef0b1c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe32db8-6384-45d9-abd5-7020c77026f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa90521-324d-4de9-ac3b-59d7abcc2c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdef650a-e056-41cf-b5f1-3b9947083963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe6205a-ec2d-4bc0-8bec-db7e975143b8",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc90e43-d72f-4b2b-aab1-e6354589e5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24efd12a-5c90-40fd-8f95-c193c2f9fac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf46003-359e-4963-9eb7-954b8ed978f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e643d448-71f4-4517-8c5a-3cca77983c94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ca3fff-0429-419b-9b57-a4c56a9c2dfd",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5614bc01-68ef-4b98-aa4d-5a04c998b309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6b2b5d-f71b-45ba-8363-1c6e0080fdcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdc2f2e-6f2b-4d4d-958e-e01e49cba1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "64712eb8-a49c-4d8d-9670-2e13b78dbe79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a793d8e-a0ae-4902-b6fb-6c3287a8407d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b8a2cd-2b5c-49ef-87b1-d56cce981f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552cc1b3-a36a-4d8b-93dc-d4656ca29583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a75c46e-3a02-4d12-ae1a-c4cf45f2c741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac344fd6-fbda-4bff-8ae6-78c58d710b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c92702b-87c9-40fb-83ac-35892dacbc82",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae610dd-55c8-458c-a111-790f0a3341ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaac371d-11a8-40ff-b078-168b6bf53b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6984835-e90e-41d6-a2fe-ca89075d6c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "89e806f5-a900-4d6b-914e-04dec3a87d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b8ddfc5-e900-48c8-a0e5-f2ca184a2305",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d9a7ec2-0aa2-45e7-a8e1-ea1994e39ee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0baec24c-990b-48ba-b129-e5baff3fbaf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7e07e9b-a5ac-418c-b010-4ed8209fe3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "90823658-6e68-4351-b806-417c2618769a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "141ed473-5825-4c53-a51a-0f73cc0305f4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aaab70d-fe97-4b93-9bca-268fecb51bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261a8d80-c6c7-41ef-94d1-ecbd0e6e33db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7939ed8a-e394-4d9b-9b4e-3009a2982d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "efe07b0d-affd-44b7-8143-80eeadadd35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d948e600-91c7-448f-bfad-a686bc7823a8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970f4ed1-d35c-4850-8f00-8a5a92ddf564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdce9729-771c-48eb-a0b8-33facf2d9157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3daa801d-3cec-429e-a6c4-a24870946281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "012a5c5b-6482-45a4-9477-69bf04a19bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ff8fac-a455-4b66-b112-bc6fae2f9819",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00643603-0431-4f55-9a2f-fc5e9f74c159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9df372d-2caa-44bd-863b-2191f68fd166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2412578-213b-40e5-a78b-696ffa7f4670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2b8ab65-cb6d-43c6-8d6e-3ba10f078209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ed0f7a-8454-422a-80a3-1eb509fdefc8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c79d51-0df7-4c2c-a184-3f805814d5e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e4a8f14b-9503-4e66-8572-c08865c1f25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1f2bde3-f612-402a-870c-490ae1e647f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5bfe58f8-dba0-4e01-b1b1-e36f3fdd0043"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "296933c5-d065-4437-b032-48f445bb6d94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dac4871b-faf6-4e47-b00a-068fd5b2b4a3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745ac7af-87de-4716-ae61-27feb084cda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f2979cf-617d-445f-a186-c42879c97a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c212d3-9e10-4860-9ec9-242a3ed55075",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5895158e-e3dd-46b4-80f5-ee84da7c6cd4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1fae4be-3283-4587-a8c5-122b4738781e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e87a476-777e-486f-a1e9-cde35be9fd0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "576b9ee0-2f52-4391-8cc9-880d36ec5c84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98042f59-2b55-47bb-a9c5-fce0eef815ef"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f01e8729-b29c-425f-a31b-0ec169c1f3e0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bf1f714e-c89e-4ed0-9670-7d7ae5aaf7ad"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "12206114-e398-4161-9f36-9810afa150bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "34d4d5f4-153d-4ba5-a3e9-844262e07da0"
                }
              }
            ]
          },
          {
            "id": "15ee1b7f-b28f-46bb-8f8d-c9b97b6b0604",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1f753eee-f491-4d07-bee5-44f6a4f1dca1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "487b19f4-73fb-4e3e-b821-a860733c07ce",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c180c83d-6ce1-4f0b-99a5-e22c6aeec7b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5fd473ff-3aaf-43ba-9999-d4e9c641c10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54415680-4723-47ca-ab49-d486149b1427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f922e0-93e4-4945-a168-c69d5dc37a89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cfd880e4-e422-410b-b78f-1bc5b983fb29",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8b8566e-3b92-463c-b32d-f57d5eb81648",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1203af24-b299-4f02-93b1-21319ab6b8a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c861d0f0-f3e2-4fd8-b405-b28ace45076e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "138fcb21-7cd8-42ab-b8bd-bce392e22913"
                    }
                  }
                ]
              },
              {
                "id": "b6821343-4c7c-427d-a82d-8139707c33f9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1322bec8-2d21-4662-bfd8-0b1285a311b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c7340603-83b5-4523-a4b7-cf27995ab0fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "acbbaeb9-e36e-4b36-b25c-42ec507387ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c31ab4fa-e41c-46ee-bb6c-d7ee60280cd7"
                    }
                  }
                ]
              },
              {
                "id": "de131fcd-f4ab-4b1d-a9cd-25963fb89b2f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "064c0d20-c1d6-443b-8039-b84927add9f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "161908c2-d42a-4421-9dfc-b27c2d3ca811"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e421d5dd-978d-48a0-bd2e-fbefa83ae98a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b0bef9c6-5763-4ab3-a241-eeed3ec4b883"
                    }
                  }
                ]
              },
              {
                "id": "ef4ebc12-b293-4980-b0af-004193e368df",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8b6f58f-0c5a-4c93-97f4-c8b1d6cae0af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11d7952f-a4dc-4d1c-a020-be5ce681d8e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c58279c6-296f-4ccc-a272-3653c60c47e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "ed742626-fcd1-45d1-ace7-6ce96f197d94"
                    }
                  }
                ]
              },
              {
                "id": "adb98d5b-8a41-4a53-9baa-31b7d6f82668",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0da5535-9b82-42ad-8bac-32b12da5b273",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36cae2da-c336-4a87-85bc-428a9bc70d4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71b84716-3da1-4ca8-9cf0-0bf8dc0bdc14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "906b7fda-6f15-49c5-8db2-925b7f88fa87"
                    }
                  }
                ]
              },
              {
                "id": "c196f7e0-c013-489d-9c29-5b12d7c1ca36",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e911d9d2-cc79-43b4-9115-251aec66922c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8240e7f2-89bc-4b1c-b293-060db4a50c74"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c5b1e15-26c2-4f26-95fa-a85de349bd9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d26f057-fef5-4a3b-8d9e-a6d94bc245e5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e028abc1-a7d6-4c62-8f12-6771b3068263",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7f99e77-d321-410d-96c0-a3aeb23c6963"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "789f9c2f-12fa-409c-99d7-65cb224f8198",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb3f93cb-d194-4b60-8eb6-a6cc1282ebcf"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6c12fd2-fba2-4a18-bbd3-c45c3a243d5a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "860b55b0-464b-42df-a5c2-edbff00b53a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ccb6933c-3f01-474d-9bd6-192fb3a69ee5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d970f578-2190-44ff-b17a-649104dbd5d0"
            }
          }
        ]
      },
      {
        "id": "f7ce8ec6-b20d-4d7f-aae4-0581b3536087",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6aa19716-8305-4ebd-b466-4d2ea0b24f8a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9faf73ed-d92f-4d4f-8230-a8697c26522e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6b9308df-158a-4e78-bd03-5a824535a0ff",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44248a4b-4963-44f1-bc90-a970f9e16783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e93147c0-a3c9-4d06-a36c-7f25fa7f2038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db0d9b4-cc51-47aa-8967-9c4ca1e6225e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "08bcfc80-a15b-4401-b297-bd56e986b680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88390ae0-9444-4b82-b839-1ddcc6e289c0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdeba64-11e0-4f91-aaee-89be78e3fcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "152ead31-a322-44df-94b7-cd8076a97964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa9891f-16d0-4212-b15b-3ed714ecdf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db6766f3-7c33-46f3-9258-63538b5783a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fd9ed7-0dcd-4abf-8a1c-c9e8e1e2a71a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37613cd-7b66-4c17-8e79-a8d58931dfd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b0d1878-76f8-4e60-b4ea-1aec25177475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "942ec743-1b1e-4922-9304-afa8222f4802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3378ea0c-98a1-4f72-817e-6d6b2c880de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09d43af-4b84-41a0-aa60-fbace6949777",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b49890-0e93-4d2e-aa76-610652aed70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92934057-c354-4be6-89f2-47c80e7a832c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7ef8dc-fbc9-4d50-a8e1-6c5e8b686537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abc6e6b4-a6c5-4d3b-a4ba-f057c46903f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d219cb7-e8ee-4c5a-9816-2fa082bc2c72",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3451b1-c2f8-4035-863f-b1b064eb531f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "597a1b00-f5ae-4df3-9e6f-a8c95891f6a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a76c64c-043f-46a4-8b20-3979e86fb300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c92412d-c745-4629-bb8b-f1eedfe3fbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefa0453-01da-47d3-b67f-bda367835472",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a47aec-bae9-4874-b905-2d5ffe4ccd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f61332-7b1c-4a6a-8707-62a1ab8dff62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1851028c-dc5f-4647-b79b-5d36443df2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd3c001-6502-41e8-9eef-151558133a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "579fb3b3-9e21-4ea8-9367-06e551a29f26",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80fa18b3-a574-4263-a539-89ba68adb0f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f6d1c8-222d-421f-94c9-5ddceb4722be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a227850b-a02e-4736-a1ad-ad02d4531c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d27e1b00-9100-48b5-986a-4d9d5e5554c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c27b8c8-2438-4291-949e-2ada1df71a53",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "256bce9d-8dfb-42fc-857f-24d43600f041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58ca8387-c085-4312-9562-2b95f5f24540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1301056d-8d89-41b8-9463-fe82f943c422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84c8d7df-f55a-42f4-830a-aaf79b217c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babad42d-4957-48ac-a965-423bc2223177",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64c0f46-9cc9-412f-a16c-16dc17055f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c72f4f-93f1-44dd-8120-0411289533c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b0eb2f-708f-4499-9dda-8bf2cbcedc45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a66b0753-fa9f-4b78-9dff-13ddbb59b209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a0d7b7-3e94-456f-8272-a7b58ec08cb3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2534ba27-30e4-49e6-9fdd-baaecff2c42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a2952c-6d48-4e21-b32f-07a69ea8b5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b9cb01-ad14-44ae-9dda-46c409fc0768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59a84cbf-bdd9-4c57-8355-24dbf9999adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2f0b80-556c-4599-bc82-cf282ac8fa24",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "915ded5e-056b-4fb5-baaa-0a7f1f141e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6489d799-390f-428d-aebe-9b3ce406adb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58cb66b5-8131-4855-9da2-7a4b4d41a77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "18d44ee7-0a0e-4ebe-8acd-68499b605fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee5f71b-d3f3-4db5-9d51-f44a9961c92b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb85d406-9719-42a3-906c-1c2d001a0c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0088fc28-d8a6-4122-8a69-c0e6fa9b6b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814ba6f4-f18e-4de5-8997-429df63827e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2f2fab-d86d-47c9-8fae-e26c4f1d7cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63679e65-0ad5-495a-bce2-8ca7b69d2e82",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f67b26c-3835-4257-903e-24560d9f2ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2051228e-0351-4b8d-871c-f5004a895205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0786eb11-0fef-49b0-9264-35ff2c320803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "073fabda-46e2-4bf4-a949-00c8dc76a54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adba57f-8b0a-4a6d-acfc-d49d14c496ae",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa640769-d4ac-4f09-b4f5-e588b7a07110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b63ff3b3-762d-43e9-b8e9-639f8a15c009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3720dff4-0764-4458-9c90-3d4a2dee73b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5491375-8305-4818-860a-35584f306551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d06274-92ca-4826-87c7-a61aaf12f314",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "238006ec-9634-4640-a130-f03b7526a497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a36b66-deff-4794-ab80-5b178f369f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b531da6-5c97-40b8-8165-6ab148d7fac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1db77fc-9b21-4404-836c-d022b3007ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8d3a0a-60bd-4995-a476-ca938f66b025",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60dbebf-044e-4421-abf0-d6961abde40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "329cb8c8-a4b2-4da2-8418-d855a6a7b5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4f6260-a11e-44e9-a7aa-57efd68203c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "240bbf3f-cc44-40f3-a36e-85a15f1afea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25b4e37-f00b-4697-8997-e585d9b4380e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6be4dc8-de1e-4e6f-8005-f77757d54cd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df2fcb45-233f-401f-9368-dcdaafb5e367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690ba7cc-35cc-45ba-a735-d58cc1f396d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5fbb95c-ccb1-4998-ad46-c162b360b1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885ddaa3-2d9f-4ab3-bcba-cc3105469452",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9395c442-a6e7-48d2-acd6-34ba66eaf392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e57c9505-974d-49dc-902c-b56ea568c8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c4dae6-396f-4848-a230-922c38cda6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "78767bec-c763-47ff-bec2-29be6bbd459c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df44fec4-09df-4f36-a6a7-dc248452b658",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4bdd23-722a-4745-9ba0-5ba6bc67f3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa981ff-fdc0-463c-a962-e7310bf4bb23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f934eb2-c6e2-48f2-9e92-5c906d087069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e7e529a-49f4-4c97-a503-54a016773cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95892ff-a4f4-4d0c-be79-c09aa765fdcc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d030368-cbd0-41fe-a30f-d0cc6c22da30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54724d7-ce2f-4129-a40d-622b9332f21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4945f2-4fac-4c51-9b91-4833d4d2a8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a816d7f-f554-4110-8675-24bcfe32812b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0abdef0-43b3-4531-a5e1-ab36b8b4cd9c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f974d1ab-1c90-424e-8e67-a23ac3aaef8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3172e0eb-e653-4805-bc0b-d14763f86bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3921f0d-a3ab-42cc-855c-bd603201f1f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "475c8b64-cf89-4ba7-bbd0-789971d822f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc6a4df-fc74-42a2-be64-a852357e64bb",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb89694b-1b1f-4563-8c85-bef4938511e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8014d9bd-c8c7-4b5f-89b6-e3a676bfdccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90c2bc4-88c8-4562-b9fe-887778119ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daced4a2-a8a1-4225-9a50-46505693b2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252fb6c1-573f-4a3b-8ac2-9d020af235b9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4897c602-8652-45e6-8857-577278c21a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05bcbb21-78de-47cf-9149-5d2376249df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a60e71-c619-4301-866b-f6ebd955f0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a14672cc-b409-4e6d-96ef-debfa603557c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d35efd5-57ab-493c-9699-c68eef02f5ba",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7d05f7-0d5f-4f52-b681-477604de9693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0803acbf-af3f-4575-a87c-d141e6509112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3f5440-e096-477c-b6d0-5fe05bcba524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf102491-4158-448b-893a-b86b7d0933e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16f9f16-2863-4c6e-8ee5-98d872f49524",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b719227-e0f0-40d8-873d-36f2b78b0e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "522517be-4a56-4fc3-a702-54cc1ea1e45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfc20bd-e8c0-4cd4-9b48-0d386c4ac296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55e6f27a-06d9-4718-8484-ac60e32f21cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e005693b-39af-4c10-b9c8-f396dbe12371",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8637f0-e6e8-4c92-a733-19f295875e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c6f8578-af75-45fa-adb0-88195ec76e60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f273b5f-f56b-4466-819c-e4586b923cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c015511-eec7-4302-874f-4e51a4059879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6643b864-b3b6-4781-a39d-93ef8bb8f73b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb4cc7c-43cb-4a57-9cf1-3f25d5ff5c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc07ff9e-5bcf-4085-97bc-01d0fae627d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a13a67-709b-4565-860c-2927a08eea50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de3dfeda-cc80-49f9-9177-dd3f3183db14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc66f90-c27e-468c-bb36-0b8274523ecc",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d2c77c-5091-49f1-83d8-375cf7fab51f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a979b6d9-957a-41f8-924c-4b5d7c3c0c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b73ba6-a956-4507-93cd-8ea68e6b9844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c39dd51-e24e-4c48-86a2-21b4f7c0620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2fe6e7-76c2-44ec-b222-ed83438d57de",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab173bb-21c2-40fd-877e-d10f4620808b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54abfda4-cbaf-443e-8508-257a650cdcc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4adee10e-3328-4fd7-bbad-3bcb5b4466e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78798886-57ee-45b4-811b-85c8ea0245f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd53008d-c126-482b-ba6e-7871d9c63fcb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce950c9-236f-4e15-badd-7c5f368f5fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85952e22-49aa-4733-a4e1-d033df61aa06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6016332-56e3-4a5f-841b-84d12ef981cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf5bb486-0fe6-4a74-8c46-1325bdb0de91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30041ba8-e6ce-4301-8bf5-c0dd2849193b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a448b63d-9708-46bd-bced-d391e85e53ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97edd23-7eb7-4d57-9c90-d82898e621eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbe0921-85f0-4966-86fa-2206eae1dbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb67c1c-08a4-4b30-aeb2-7ff84426fcce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a1b076-3928-4f52-bbc5-674d05f213ad",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b063fc0-a941-45b5-b25f-acddbe8587f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fb63ebf-e727-46e8-bc12-867cd5d0ff4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed36c80-47fb-49ad-bf6b-99ef018228e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "646059e7-bd53-4274-8a61-41e3f545e3ba"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e4f80879-bfdb-4555-ab21-30c7ebd4e99a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "01ecd03b-3c02-4afa-822a-acce92f1739b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce4a6a80-906b-4266-8da0-f6931b6caceb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c722115b-a634-4b32-8e4e-a7bde0e78988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3cf43b2-b4a5-48dc-a57d-eb2861beb428",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11229e35-bbe9-40d3-8278-10a33f57ece4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5744868b-ef68-4bd9-9d19-a2bb0ad7e934",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf936362-7d0e-4f9a-8e93-e19137f5c6f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "708d10ff-e7a4-4f83-9cd4-40ee70d499af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04080623-e009-4e00-943a-9804d5992627"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e8febab6-067c-48d9-9c8d-dbdf901bb48e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f2fbf457-a8f1-40a5-a34f-1fd64cc5459d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f81aced9-f62d-422d-8fcb-b8aa491f37ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7ed3a19-ef4e-4989-a18d-99937e99cca3"
            }
          }
        ]
      },
      {
        "id": "65325ac0-dcd4-4fe1-9add-842f6d0c357a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "56409b0f-2ff6-46aa-a851-b5cade517de5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ce45603-eb9d-418d-b391-76ef0a94931a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "92ef98a9-4a97-459e-80de-41692339878a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d578cde-7a91-499e-bf83-b09a58b25bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15b76f51-a517-4e86-95cf-cd28bb241107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb60d44c-1064-41b1-8ae3-ade4e895c2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c230818-c272-49b4-bd81-03ed4a2d1e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f448e42-dbb5-47d5-ada5-31154fa97162",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad55ed6-0153-44b8-a1ef-50aeb68f2109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f481884-9450-4ccd-86fb-1faf567e9c07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303dd9ed-b7a7-4522-8625-5992e921bfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31a86cf5-2134-4cee-aa9d-ccafee128be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b85838-5c91-4674-90d7-425cfc546bb1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7a61f4-24f5-4ee8-9af7-4fb4d7bd3e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309d3a72-281e-404b-be0a-25080cf51d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b78f0d-d3a0-43ab-8df6-5dd1eb953562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a14321a-1ecd-4e23-914a-1126ad0d2aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4d5470-a3f0-4ac1-8ada-ce35816cef48",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b82a36-cf52-4b6e-a4c3-6ea0e2087f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2879d3e8-e332-44ff-94cf-65761f2fcc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0649de22-4fbf-4781-ba0c-3e88b8e6c894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd0666a3-7ed3-4399-9b51-bb2ae5e8d858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d998e99c-f497-4653-862b-730d68144176",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5cf43d-88a0-409f-9440-e1338061257a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7b3808a-8b1e-4c40-a5f4-f35daf981ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18a62e3-7735-48e4-ae40-9fd4174eb912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e448e723-c3bc-4b05-ae25-00d7f299e603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605d0b48-3126-4294-a21a-c5c3edf2ff6c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3009325-7be1-4420-a78f-c23df0d91966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3d073b-753a-473e-a4af-843c947de6bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff73f07-198a-46f5-80d7-88970fb5e202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4124ae2f-92ce-44b9-8f7a-0b78b8a48a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11258f4f-77d6-43e5-ba81-2fada90b23d4",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e6d303-866a-4582-9922-cc80258c6e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a14077ef-0baa-4af3-83bb-6d9416dfb915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d455af-92a9-4562-9c8f-cb94c89474f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "870556b6-32d3-4606-80b7-1daaa19c3d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fd81e93-eb94-4522-921d-cc66ec199f0d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db356a8-9991-4829-b59b-cd1147c83298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d9b26b9-c83b-4f25-9a5d-3403551c1e47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd885fb-9751-4a6e-9564-2be0a5e26d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab00d605-15a1-4275-8bba-d0f6ae786df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a34d530-9d3c-4c4b-8931-d34c92c994ed",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d021c1-ef71-449a-8483-abe00a59d92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b9ba377-2a11-45c9-a463-14ba4323cbf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade60abb-2943-4982-92cc-f2f9285a9aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "01ebe541-c50e-4cb1-8d77-1a97ecdf91f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f39d0a9-ccdd-4eb3-aa27-cd89bfd33474",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f53bb9-6158-442d-8c37-3024c6cfeb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32236f96-8439-43a6-9b2a-45dcb84bdc56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b91351d-9254-44a1-b2c7-44501784fab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1dbfca3-8ca7-428c-8c13-63a6f7dd6a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0cc4efc-7682-4423-af3e-3cdd80e17038",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a2be62-e275-4f70-b4b6-e4a0f6f84160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0aeebf2-5b8b-44cf-b270-a715eb0cf2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0540824c-fbcc-4350-b4a2-a176b90c015b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "88b3bdca-ee6b-40b4-b031-28af06c60770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdd4b3d-e75d-4042-a3a7-911c29f521d3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "864ef605-b9cc-4610-90eb-a9c6ad510a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15873e6c-9be0-49cb-aa54-51a5db296a5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560c85e2-c3de-4ad0-9b13-80712752a113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4d16fceb-ea87-4e2c-9c31-1431e88db716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ec02d6-a1f1-46db-8522-af399597bb30",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f322cd0-f2ce-41d3-939c-dc714f67ec1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d8744c-5e7c-4ad3-806e-f9d2bca6dd5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6769b1df-4e44-42c2-bdc6-161ebe5bf018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b117803b-a440-4064-86f1-ee3c015aaf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4c9f83-754c-4673-821e-6564d7fa8ce8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ef3a08-59d0-4e35-9387-a38c8ffc6cf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ff8491-36b9-43fd-b8d8-07458a654967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9302d0-2b56-4072-b4b3-30e6a7813cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7e8e45-8224-47b4-b286-d5f4e1da4d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b100d48d-a16d-49b9-8463-12a24e87b131",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c1e081-3326-4a49-9173-73bf607f07d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847afde5-0857-46e3-8cec-beae673d48bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc035d2-9c73-434f-802b-408276caca73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3aff3e-323d-4571-99b4-c6219254edcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ed0e15-28ae-4c66-81a5-6ac8f77657d1",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12fe741a-b962-4601-8585-1921b81dd6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab814190-8018-445d-8573-55d68018953c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabf1706-b772-4a3e-aac2-7538ca31de26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c80a2cd-387f-449b-bab3-267fad35fc73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe27bbc-ba8b-4363-91ef-b22c630fdd8c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccac312-dc5b-4ddd-9f08-b4056604225e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e8a247-2126-49a3-8603-ed4ad0668526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d048c5f2-2b15-4898-b156-eea4ca868e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "59d164a0-e766-45ac-b7c7-97d55786411d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed0828d-730f-4c77-984f-2b969cd422d7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a6c831-33a7-43ef-8579-c299532524d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a20ff0d0-134b-4ed8-92b2-26276dfcb707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df104ce4-cb05-42f9-84fb-a45a394598ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f0215c-8405-4d48-a0a2-209f15572f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca7ff68-19aa-48f3-809b-a5229112c77d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2284bee0-822b-4387-904d-1d0b80e6db7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a46ec4-09d3-4ec1-854b-221486ad89e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cc36a4-85ab-4ac7-9c94-a32865e14c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24102837-77fd-474f-afc5-a9a43ae990cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2288e6-ceec-46b0-b450-4c4d5c890742",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73350b3-5df0-4163-85f5-33e0f0e48b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5950928c-e602-4852-b7df-db3bebd15a63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc04c03-2495-4452-9e77-97b64e6cf1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf9db924-6ad1-4075-9176-ffb52f2dba54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ddfe04-471e-498f-819d-85b6e98e0400",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a215348e-dd06-4f2b-8b41-d50e69ecf284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d02699b-4c7f-4d12-ad1b-240f8f5ccd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b61e442-356d-45f9-b94d-edb4f700d6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aff50e45-7ef9-4d70-94c9-df1425ae3b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479836d4-937d-488e-bcef-11060ba2cd01",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67e4e53-925b-4863-a46a-15a85fea6896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d78526-b68a-45e1-bc6d-b5ba6243159b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75fd47ac-eef7-4d62-a7a0-c5ed78a39776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb2c93f-c27e-426f-b66e-796edf96d958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8d58dd-07be-4428-bf3f-f330e4be4c00",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3224c49f-6cd7-4901-8282-10be087373a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245f52e1-7423-4f21-ae72-62ccd25adfca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69a3604-c278-4a1b-b74a-76d3a00a24ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2c81b5-fd73-43c1-bfba-f42401010720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09111f27-b428-4757-be34-4db9b1d91d50",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7594d213-ff35-47fa-a68f-5ff5cba54559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c7173b2-e75f-4a7b-b134-696a1baa5e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171fa934-7ffd-4fe6-905b-451b3117acb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c21de19-ae5d-4635-afbc-fba7257bc9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b17552-4823-4bd3-8b0e-499422a88d43",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dc509f-f9c4-4954-b93c-2c06d17dc70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "890b02f8-bcda-4a72-8a92-29d14d88f938"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da74060-c50b-4e71-9f3b-c7fef0dbabc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25dc5c4b-d8d7-40ce-94cd-b8649ed16f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96986a7e-f157-4f98-8055-b1358bc32407",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edd215a-7b6f-4f3a-96a8-72213792feca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95fade6a-40eb-4c66-a754-d98abd7caa5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbd9c0f-bda7-40bc-8ad3-9567698cc219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a63ce1a-bc9c-40b0-8b35-e5ca6458ce19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f5cdd6-247d-4d1a-8641-1a188dab3d4c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15d5c1d-2146-42b2-aacf-2ab502b307a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604de016-1568-498d-81ef-3ba870966226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53936eac-d3be-4268-87e8-cefbd7d702b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ad482d2-61a8-45f4-bf12-ea1678dc4768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9bec6b-d9a0-41a7-83a5-8a3385d6d48a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc00572-e87f-4605-8442-14e15e37ddaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9b9d4d-a853-4fe0-be66-dfcb19147a8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec06aa35-223b-4c58-b643-65bf04092451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41a84fca-5e2b-4e01-b455-49ae4a8cb0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70800ba5-0225-4f16-ab09-81609096e65f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd5e813-782d-46ad-931d-3130f4882d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ff7e8a8-8a7d-4b23-bcc2-b84f254d6c34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93397a8c-9213-45f7-9555-991f3a405de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f3d3fb4-eedf-4a8a-874d-f68c0a1c11a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f44771-18fb-4414-a7cf-15a768058104",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7662c7c-e64f-4293-b60f-e5843e1bdd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b4c7151-d806-4476-8eed-ab018c3b9936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b7d5a2-6427-4588-be5b-05f7af86ac2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1734cb44-fb9b-4675-961c-3fc4b0a9bebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f5ccfc-4a2c-41fc-b623-88e9a0ffcdcf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21069b9-851a-405c-bb44-f9c90e0656b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595370d6-aa03-46b4-8927-7da6d25e7715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe7ffbf-71d8-4465-a9ce-8ec3ad0daace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "12155ae9-c755-4e04-8960-8be0d2ae2211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89506d37-9423-45bb-a807-6330ffe3563b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05ade90-7a26-4f85-881c-11d37b66d885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43faa396-77e0-4d46-9cf3-1e4503bea97e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d76a246-3b05-45a5-bebf-ea608fd9552d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5509c95-85f8-4929-90e1-b52c256a1e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a53326-7cf9-412d-a53f-dbcf1e008c73",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0906a84d-59f6-414c-9ca6-557e0d066ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da02064f-fee9-474a-98c8-5e2f1f0f954f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7ac743-b31a-4bd2-ad8e-71f19a58411d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85eb1c67-a566-4d3b-b242-db2e11e2b720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbc23f4-522c-4b99-a40a-f323e596cc6c",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62517e10-67bb-4c02-8440-3f761b1e0823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95700965-04a2-425a-bdc9-426c84f6876f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679fc718-5c8d-453f-b07e-1e9a30504ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7be9a1e2-ce8d-4fa1-8b3e-a591e3ac2a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9245f2b-3ee7-4364-8bf9-ce4a57d29993",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "940d7c10-b066-44ef-85d9-cffb8ed10142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "561a8818-c8d5-48a7-b8af-24ca66044ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7e860b-b669-4879-b9c5-1e6ecdec0301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3e3e63c-3542-4a82-ade3-580a9cdfce16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8bb110-9d09-4fd7-9517-c89415dd0742",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1eccd2c-d43b-4f74-ac3c-d54044cb5c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf70e8b-ed46-4529-874c-1f70f32f2a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d5bab0-9026-47bc-acfc-1e2dfd368c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5caff87-c100-45b0-87d1-0b88c971753c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62083b8-3265-4faa-9d80-ad458e341f25",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03a6db64-326a-47f4-951c-05333aba7719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd7947bb-9244-47cb-8c88-1764fcf179a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89961b8d-d802-4e82-b071-706d16dd5fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83edab36-7503-4e4b-afd8-682934780f6e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc8b8e0b-3bca-4bb9-a531-aaf436d5ddf1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e1005be-e6ed-47e1-bd06-b1b2de764c61",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b8d740-11b0-4a80-b0ba-bd55cdf191c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6539f5-bf16-4751-a50b-80b199e9d914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6001481a-33ff-4c53-b602-ebda1608ec70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f9acda2e-8eb6-4615-ab6e-bcc30ab5cb2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfe7fd87-0f73-45e8-acda-0510d90bcea1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22ccf06a-2deb-4e85-8c87-6c3e7fd47161"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fe3d70d-de9d-49b0-81ae-d98e23723832",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8aa9989-8d02-4829-a600-ad5f4b434528"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4c01907b-be17-4cca-9b3a-09b64ba0769b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d6998303-8a87-41bd-81d6-8dde25477b89"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "559e787b-d653-499e-b505-2552a1148ae8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7eb940c4-6e2b-4330-a50b-93f543ddc146"
            }
          }
        ]
      },
      {
        "id": "cd90f19a-46d0-49f4-b854-6ed50238d2ec",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cf250165-1cd5-4684-89bf-19104e41d806",
            "name": "Negative Testing",
            "item": [
              {
                "id": "004d450c-5a94-4de2-9ed1-15529c6f9e20",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "47b8a2a6-93a9-4780-b260-d59ff33e8252",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9bfc6e-e85b-4599-a033-bfd0d1e269a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff4f512-3757-4388-a3a9-d9a556e7f919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1435d6-3fc9-4b1e-8582-7757f89e9aeb",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff218e0-d7c1-4540-be11-1b83c27307de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0f2bec-2e5d-465f-9a49-99a9bffb35e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a862bfd8-79ce-4b1c-888d-302f7e9ac243",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4092b0ab-835c-47ab-87d4-748cbab3dc0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d10ed4c2-e26e-4af0-abb8-04bc478ca2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68b078f4-4496-4961-9422-530bd30a9570",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360df0e1-6806-4585-8af7-1dd34cd718d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "439c74d0-7869-4486-8e35-76b651598f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3131211-a880-4aa9-b3c0-36b6bbe51f57",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b4d374-557a-4e1f-9146-6cebc042385b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a33243-bfd2-4b37-99b1-b161c3ea23dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3df2e0-a923-48cc-a34b-c3fb21fad6dd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3087bb33-8988-4d1e-930e-3b2e565a7251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03c1aaa-c334-4776-98de-e730205d231e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0386d067-7efe-48d6-aef3-516286a7abd5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b141915d-3701-4549-ad73-b21fb3e25d0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63bad9c5-69eb-496d-99cd-290e016b1eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f6a527-1adc-4d8b-be39-21ab50e32557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "870f97f4-3c65-4b6e-a276-6e905716918d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81621503-996c-49a7-a9f2-ec1c8e4251fb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b385cc-0554-4d81-a515-15bc224d7c50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5abd388e-1ab3-4c83-ac0c-f748b26e8d33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1fc4e4-db09-47c0-a023-afd07c14b2b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e984e23e-34dd-4bad-b335-6e7cc031dc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca9b329-6ff7-42de-ac6f-1820b2d4c1ff",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f13b217-3594-44e1-97f7-49b4a433e1ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c3e7554-a090-4ee9-a546-9af0c6093407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ebd5b83-7bad-4a0d-9ecf-d3772556e41f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a492dccb-b47f-442e-b2fe-d43b771b629f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82155bc7-e023-4c13-abb7-00cfaccc8e37",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e3dbd02-5409-453e-a65e-db7ae3ec82e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c42d0ca8-2d37-4b0f-8ed6-9e3aaf50b6d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cc0a33-1bd3-415d-81a4-204a85f186b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81550775-4817-4503-9e62-249e67592599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d03eb1-a839-489b-bad0-6e8f3377c221",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4b50f2-0b4e-4f67-ba3d-51ac60dfb9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98dd3a97-06e5-4445-b992-767354e125f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fcdb71-b265-4ab1-b2e3-362930cdd5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83afcc52-cdee-46e6-9d3f-02c7476e8aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fc852b-5e3c-43b4-ad01-766daf6ab7ce",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c07833-92a4-4576-8e56-9c98f3b8f930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f79ca2ee-711a-41da-a013-eb0249837539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a25eb16-9685-4713-b84d-e40884374505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb17c7a-db99-49bc-8ba6-eb6748d6644b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7687c14-1bc7-4285-9b10-2b9b624ea1e6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09d04d0-e1c1-41c6-a7d8-69d96fd02996",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83a43136-1964-4608-a3d3-99a6a8112f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7fc37d-67c9-4d83-9059-6140dcd8ce74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290ee418-3c4b-43b6-8142-3a1627b9e054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec05daa9-4b51-499f-b131-7b8c9a4b6df5",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c342f167-aa53-455f-bf9c-8dbd1d5584b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f58402d-0505-46d7-a48f-3056bb109079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75262df2-113f-48f4-9dba-9a45bdbd4c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e5eb22d-c3cf-4a43-99f0-16e01db7d5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3943929-fe55-4366-bd4b-8daad362dc4c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57edcb18-c619-4c45-973c-01b0c3527d00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b125addc-4a49-4802-937a-f56657169e6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d40f62-9876-4f14-be1b-714076b7704d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c3ed7b-dc3f-48ce-879e-6d8b299bde28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4457d29f-61e9-45e9-b5db-88fc18cb9aa2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3013de2b-f9e2-4834-902a-aea4d79d2b89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daf95c68-fbfc-434e-8023-b028820d8673"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6996c651-1b80-4c18-9e08-3f0869791e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3e84a81-b3f5-404a-9458-71db769afc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187abb3e-621d-4596-8ad1-51aa4f285cb3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4682ee4-dce7-46ef-9319-ec7748bf8025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51e9602-5cb3-4f53-a8b9-d9c436cd4eae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a11093-895d-4944-b10e-e333c5727ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9ed3d5-9e3f-4fee-a2e1-e20305d008e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca1a589-0d1c-4dd5-9945-9cba0cbb6d67",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd40f247-4b2a-4258-a523-a81d596cccde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea54643-3c38-4f6f-b349-90d96d708ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e71c7987-5b0e-4855-823f-6bd1cf321007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9264d351-f1c2-4c95-bd9c-952ddcb80a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4e6a1f-d4d9-492c-a1f9-31815f51496d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1086beb-baef-47d6-b13a-a294c3a2c346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eba15faa-8963-4e46-babc-435177c7abff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "503b0dbc-36b6-4ad8-ae66-9bc16194e740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb6e421-3936-496e-a11b-22a449a81266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da83cd1e-93ab-46f2-8259-f0e57132e035",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32736deb-bc51-493b-8476-9344ce70cd63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079ab891-88c9-4572-8be6-f30c88db0a9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f699a5ab-55c1-4d9b-8d90-787c93464485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b18f40-17f5-4f8d-96ea-aad09d5d06ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cde68a3-2381-4450-81f5-eb61bfd80b5e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d344d4a-1b6f-4f84-8856-cbc667ca72eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f735809-311c-47dc-a43a-ffa4757e39a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41fb9495-282d-42a3-8777-a4134fe94330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fafee2de-4e34-470a-9ef8-f322fa004559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175b65ad-732a-4ed6-a92c-39b81ce4f6df",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f90b01-1c5f-4bc7-9417-64ad6029966e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05624cfc-b2ad-4e84-902a-b9e747de1557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3a97ac-2774-4e7d-b3d9-eba28f990e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d787e18-1c27-4a1f-a93b-3cd477655942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dace766-25da-4b08-8915-dc493a001752",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b0697c-de96-4b81-b90c-57d8f6762342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e07fe5-9f0d-4727-98b8-7ef7c1732429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16373e96-d5c9-4102-a2e6-cc78880fd359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ccbc326-24cc-4bb8-b69c-f8eda05260be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e8a7f5-9efd-4f4e-9ae3-33263d95dd16",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983ef9f1-c49a-4fb0-9112-7c74d226b1b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9927495f-2795-46b9-b6a9-082b6a5bd069"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7608ae57-c139-4893-9679-b9fd15993250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531c476b-031d-4b5c-b02c-38b0d0fb9c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392fa321-5b24-4c74-8256-a63242bd070a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0aef98-02f2-415a-9dd5-746de890650d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0321b05f-2e63-4fb7-9eef-867e665df746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcc584a-35bd-4e0c-a610-b68311b54e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97addd33-be30-4a93-92a4-99f37c184b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e044f6-49a0-43d9-af7a-7d664b0e95b0",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f805f1-abed-4ed4-8c6e-8275c54cceb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4137f1d9-6176-4a1b-8e80-f2ed6364eafe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56d213c2-3e1b-4431-9d6f-a49fe7d95b39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b336b661-849e-4932-b0fd-b2edcc4c8bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa1ce082-c46f-4650-a82e-67268957962f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec865010-0979-4171-9112-e1395c60a12a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "028a8435-61f0-4dd0-9f99-55528f3d4bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3bc7ff-62e7-465f-88a3-503ce2db47c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "457881a8-afd6-4cfd-90ba-e925ebafdb02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4380d0-a90f-4209-883f-d86ae6742935",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed30f46d-c199-4c40-a97c-de91b3992356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d24364-389d-4cd6-a2d5-f0a26f3e524a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f6ddf6-abf1-41b3-85a2-2b4b10561431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b80682e4-7be5-4cb9-93c4-81a4ad71437b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4acfc382-eb73-470d-99eb-6e4badf8525c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dde4d9-8eb9-492e-be11-8e1b34958f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "408517e7-216b-4c06-b6d6-e593247fc9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2ad406-e190-4506-b8ee-6862e291a97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a997d86-2fea-44f6-8d3a-dff2409d01f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb4ae25-8639-43ba-9b2e-87e8242c07b8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bf0a6e4-b0a5-4996-9206-e90a259e3079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eba07132-3ab9-4a14-90c0-22605c81fb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc36a8d-bdda-43de-9ca8-f941d85db69c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f2a9fc-baad-48b5-8a09-736647719682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a683d96-388d-496d-abe9-d62c10d4c606",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9dded9-77bd-4469-abf0-f4cfa6df9a4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "203ec116-5faa-4631-9ba3-78ddc2c25d8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ade2ea0-7c2b-465f-b9fe-62165223288c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381b4c8c-fa2f-463e-92a1-3859c5f49199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e8be3d-8d6d-4bb1-befe-7b021363ebb4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12db0fa1-af9d-4827-9976-c28242f8e1d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fa894b2-22b7-454a-ab59-14221a3ffd6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a162ed48-c9ef-4201-bbcb-ba3bab093fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ce0af3d-1a8a-4b68-a183-fb6e9ec658d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba287a2c-505d-4b5b-9e0f-935484f3bfd2",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06ff3c03-bbf8-497c-bea7-6a2ff61f69b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8706f72e-d14c-413d-b6ef-13c5885c6d9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89026e4-7ae4-407a-8356-7af2b84a16a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ada5bde-55d3-4015-bab3-3264b28b3cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25378ce-fffd-480e-a750-e9e221a4ebcc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a80f98-8aa1-497d-ae77-dd77471f7168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "973f4071-7c16-4f75-a884-f252e7722569"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de91293e-c747-427e-b06e-0aca129a9032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f20ad2-c6ac-4988-8892-964c277a7867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3b57a94-7e9a-4b09-8581-bdf72630312a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6c6fd4c-ddd2-4283-8c81-701f79c46099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26509481-17f3-4394-94c9-50ab166c2e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26be5c0e-c820-4d38-bf3f-73bf9457a213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e74f9ce-ca1e-4f39-9ed1-f7022fe7942c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859aa7a6-d193-4be3-9af2-684ca6d87b1d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c08baf-cf4d-4aa7-b7b5-6e39be915808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a9c3b1-2ce5-48c5-b3ac-2e0a04a6dde4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d95ae6-84be-48be-abde-fb2897d4041d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85895b31-f7f8-4a3f-bc1f-a382862224c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7138e78a-4e6c-4189-887d-f94842f7c029",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72324c2f-8ccb-4c92-a9f8-8a7d00f19313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fee8cd3-9c92-4e8d-a191-0560d02583c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b19173-db64-4ffb-8cd6-3b6b9becd86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62d8bac-d622-430a-91b8-2f0d25a4300e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c55aa83-925c-40b6-8ae1-df62996772e0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315f62c9-023d-4dd2-b66e-fecedf52540d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9035a975-5211-46b6-a6d0-a80a1246659b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b226096-5f38-44a6-929f-64372d464b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39998aa6-b985-4c5d-a5a5-78db4202869a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63f9a0a-7a78-4278-b97c-6ad119d9c0ea",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75ae295-01c6-45d9-b3e5-07385ec5385e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69730200-0cbe-46e3-b54b-9edd3704c824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f5435f-fbcc-4b38-9330-ac7900e098de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66a3f69-2cf2-4247-a0d3-f53d22afdfe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3d4436-90c5-4190-bd48-b24fd88793b5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f244dc11-5d48-44c6-a78e-c96b7aec602d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4533d3-b0c0-4692-afa6-00efca3619cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b42c090-ab72-4241-b3d8-e5e2645f7392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfba2fd7-aba4-40bf-afed-072bacbe4a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0ddff2-ff0a-4368-b527-f07563dbce73",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53515f5b-2e04-452f-a698-3e55c6159e23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1868c6-adf9-4d82-a053-86fdff0acaaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ae05fa-ef7a-40bf-acfb-51c855ec5c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e383737-dc26-45cd-92e7-981543cba019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f867a8-3637-4668-b3c0-5a70c2b8d661",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6f3f9a-6602-4036-bc57-b3c0ad146dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3db166d-c508-41d7-9149-34d584fe4ac2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "965986aa-de38-4791-8724-cbb83e2c0f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfa8831-0b17-45ec-82d8-6f3f018d8927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312c394b-3736-4c89-90b3-8b15d3dc0697",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60285c2-2a7c-4dad-a7b4-a4b3b300ff6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acbe415-4f0d-40ca-8096-020d51111017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c90cb6-2688-4264-8f33-01d9d1e22ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befdf6a7-0e34-49e1-bec9-f9bf565d0fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da37f91-d5c2-4f88-9f30-825be9317f4f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5962fc7d-e010-4e97-8e77-1488332ecb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e238653-f7b6-4369-9501-df2f029dfdbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eba1c5a-70d5-483f-8414-f212aad7a61c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c59c6e94-0909-4efb-94e6-232c7d49691a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbab454c-3f75-4e3d-961d-40bc151412c7",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75fc662-23e0-41e2-940c-075686015b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b3ff00-ec72-4c47-b05c-576bfd845392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "318463e9-d27a-40ce-8496-b917bdb87dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09404a59-9294-4e52-a30d-05ce224b5259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac02204-87e9-4602-a9d7-513fad571329",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bb96b1-bacc-434f-83bf-508b7290981d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a1b935-9104-4515-aeb3-bb0e921dceb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b76c80e-0259-4fed-b8bb-a10491c4bc52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17087ad9-4f4b-45a9-8da6-00ac9e1d2d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f45d49-d092-4839-ad29-e2e3920c1236",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3c0173-1614-48d3-8122-2dd3644d8789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c9ff963-e886-48dd-adc1-41dec6ebfc62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aef7eb6-403d-490e-82c9-74e7e3c9a664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55dceb95-0145-4cb4-97d6-c2f3bf86f4dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08312257-9c69-4a63-bc53-6dee59e3f383",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1529eed-2bc8-4a26-ac88-87b57a7e9b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82d4d0b1-41a4-450f-9c9e-255839ddb4d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53484b0c-86df-49a4-b19a-a8dbd77b0af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59a4bd3e-4b48-476d-b4c9-2785570cf023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff8492c-a4e6-4cc7-84a7-b8790c7f36ee",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3245fc1-eb37-40ec-b51e-0b97f302028b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2728581e-aec7-4e86-9fb4-0ae884edfcf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe97833c-c2e7-4330-8e38-d77964bbb32b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63554129-f0e8-472f-b89e-c59f6c6a0edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea80863-18d9-48da-986d-6f39bd497fcc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "081d0083-d0fa-4eaf-87f6-a0d4eecf06c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7418bfd4-7b6e-435d-be36-85bcca050012"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d9ae2b0-df87-4393-85f4-26a1073c16bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84c74eac-b23b-46e1-9928-8eb85dd61178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20a0d35-021b-4d82-a20f-6fe06e771104",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a09961-8374-4c25-9eb2-7cf3a0cb9977",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058a1598-cf66-4052-8514-204629b212dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4145b218-91b1-4b9f-a1f0-61c016698acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579131fd-dad8-4c5a-9346-b99da0ea15c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92676059-cdcf-4d8f-a463-1a54dc7da81d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b92c26-4a15-43eb-acbd-5cdb4ad8d932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28ffa434-3a4c-46ed-bb36-a9993087c1a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cd725c-5b5d-4303-ba82-52aee02e279d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d9cc77-eb89-4a63-93dd-426213dd918a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d5a9f1-de7e-44c1-831c-1d00a58d3f41",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce3bbe77-2366-47ae-a613-2c57b0117a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e311fe5a-04d5-49fd-8225-4a6414c1c6f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c701a8c-4a25-400f-87fe-18bad5b9341b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea821932-a8a5-43c4-8012-fe7401391ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79a5584-3213-4083-9d38-399984a3b31d",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f3130c5-1f11-43d9-b1f9-e0891823e42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a398434a-9730-4dfe-88db-7664edbb262c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb66436-7bd1-4eb9-a207-fb0834e04b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de825f7-8978-4e75-821f-3998c7e8a0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3ef86f-f953-48e5-9e79-6515d53fe911",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75010e4c-515a-405f-938d-5b87905a49c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d684af8b-f57b-4d37-9ccd-702d064fdb4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "730a1f59-5d5e-4ff3-8f74-406d6133e5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652cb659-a471-4400-8ef2-5a2e027223bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b9f0b5-da85-47d0-81d3-453f02a71c24",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d46c30-dcec-40c6-b1cb-e401e090e2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be16fee9-e3f1-42c5-adbf-b918b9f1d803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80a9289-6613-4d1a-bfcc-a8630446d43b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a50baaf-0c58-413f-a99d-cb989f97ad88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38424863-7ea3-4c3c-85b2-e88e088068e9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9572dec-7fa1-46dd-95a0-f36ff92c2ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e342b57-15e4-4569-9dfe-38803660461f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52952e8-a8fb-48ad-8566-7e7a1046b2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e13592c4-0d8f-417b-8c19-a3eec9a3dcc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cb3e68-6144-43f3-a2a6-4439dd5eed25",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b79e2b5-e868-494b-8b1e-2c4d5472e19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83e4a8c-8a8f-4a38-aa08-2cd34e40566a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941f3fea-ce7d-4acc-a4db-c2a0a7934f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efdd0b19-82dd-48f2-be5b-b225b02efc05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b2ffac-56fa-4dfb-9b79-f18a409d4144",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7e8e7b-0bdd-4e04-aff0-3a6cb00c618d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a7e6a1-b855-42a5-ae5c-963ae79b911b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d79b36c7-1074-44a8-925c-d502494e2c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad825b5-9188-41bb-9d8e-4ffc6272aea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3a3474-f823-47a8-8747-7cf1986014a1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ccfb49b-e3d9-4428-9163-803abd89bca0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f601e9-3cd4-4d6a-8a87-19c06494e2ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d385d838-effe-4246-bb30-0bf710c0ec62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f375d76-6068-4c0f-b16b-3739d36e9378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cca0932-e342-4ae0-b840-c748e98802d3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30ed51b-e376-4736-b071-0515e047eb34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40b2b621-5f3c-418f-992b-961ef3c29cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ecd3719-e917-4668-9c98-5fa16f079101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761a5783-7f8b-423f-aac3-55f22d5b81ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7efc769-d3fb-46c2-adad-28080cdf7b0e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1c3e827-0ba4-4137-8887-f798d0363165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcec3baa-950f-414a-b35b-f66a3b3145a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a812c3-8d9f-4b91-9840-3a46ba5bea35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c58f74-94f9-4bf9-998d-3ad64f6f6fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90866a3-5819-4517-8865-6d7bf668c967",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9eecf5-480d-4d18-92ec-12c026e156d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2477e4-aef5-470c-9ee4-4125a0d2e8ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9198955e-a1bc-465e-a386-0560ece09a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b88ed50-5963-41d7-bbb0-bde269e94bbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b0efa6a-8d84-42cb-a6bb-b1af6ec6f671",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48878058-1c93-46e2-afbf-b7f01756fc98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43fd4211-b0ac-437d-8b74-ffcce9998a29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35432de8-6145-4ed7-9fb2-ebc09ae2d71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be313304-dcd7-4790-b114-9aacfa5f50a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "720c04a2-5eb1-4780-91e2-f89d3586ddff",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dffb483-cdf1-4720-ae4e-f1ade018425d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9171de2c-1502-480a-832e-992a5ba17c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b1fdc0-9067-4a04-a5c4-f481adfe7311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4a1e09-eb2d-4c9a-91f6-a1135457b6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd517999-3943-4318-82f3-5ee0676fc02a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b7bd22-d289-4ee9-b353-db6ae7acb223",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e81bd1d5-db0c-4c02-825b-972f5e58d509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17494f2f-8a8f-45af-8ef8-9c35c7a5176b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b572cbb-a88f-4bf9-b0f4-7a86a030396a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3fa738-e40d-4fdb-92a0-86a68c3d0632",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687482c1-4da2-4b3e-8218-261b290a93b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab80d987-a632-4909-a37a-673669a73dac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c249e884-9f57-44d5-902b-57706b37c7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6309173-a567-4605-95eb-e907e899d5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8672e683-5601-4251-bfbf-851bb97921d8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190435f5-492e-4c99-90f5-9022bdaf1e1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bad133a7-fd2e-4839-9d8e-4e357a7d6bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f2f3e9-9443-4a7c-b889-e7145740064e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b460d8-0deb-4f02-af7f-c202bee49aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d7df5e-508e-4179-aec8-b1eb4ac33636",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e76137e-905a-41d7-bafa-b676d52011d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "326bba30-568e-49d5-9486-f500b72fea0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30d7a47-5f43-4f63-b699-05c1a09d2d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f9e2a9-bd13-4077-ab4d-b0598e3e0a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "979bfd96-ad0d-46b9-b0e6-83e398b69db0",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d1c7b8-243e-4869-a384-a268bac571e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d35a8b-d43b-49cd-ae87-0d0bc9717843"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a79996c0-a48f-4879-9ade-cfec926f3c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbd22d30-6744-4a2b-91d0-9c3e0f45fc11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83676661-a89e-46c9-9024-5b8d57a27a2d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed83d4d-b0fc-4274-9f0b-68a36fc82914",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a66a30e-9cb1-43a2-8c22-d693c0eec5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5cd0a9f-fd45-4a0a-a05c-8f776553ac2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5ad28d-c2f8-46c3-994b-c8fd705c9a6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0d0afe-6e85-45e5-b7c5-c1f3c681f96b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "517b8d68-e3c3-4f78-b80e-9fb83c55d551",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eee80030-08f5-4071-ba89-2f4836220c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5725b953-8e20-4697-8d42-2e0424bf5ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbb7777b-a4ee-4c7b-b0ee-d8a72d527711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e326e7eb-d18c-490c-a4c6-a59fb576b223",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d778869-d444-4f02-b5f0-0ef89403cebf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d94939f4-4f64-4b33-a24d-4d0727a1f0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f3dc38-026f-469f-8fe7-6a6da060d334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b657f0b-6ba1-46ee-a40f-d974061b134b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f0149ae-21bb-4f5b-bbd1-589a42e51181",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a66eae6-01a8-4352-9e44-62a20c558175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8eea1782-ba98-4b08-84b7-cf4ee5efeea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf72fb3c-024b-468d-b944-479bdf941cbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8938a838-c39a-427b-ab30-33f7e2242f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801ad8b7-477c-4273-b62c-63ca7e4b6d3f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1a39d9f-3d9d-450b-b581-265cde709d6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c927ea25-e201-4ce2-8383-f8adfafe3dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8dec86-455a-4101-a8e9-36fcfa5572e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f13647-ce28-4a20-b2ae-e7f16d95343b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305d9cd7-9f2e-41f4-a3dc-61960f1874fd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6af121-d990-441f-97bc-02b4534afc6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5b9fd63-ef20-4d34-8ea8-ef5ab4e9b9f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e77899-70d9-4af4-b002-3f4a57545cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f7d50c9-ceef-4257-9b5a-b4b38a92c8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee40599-c28d-4b06-b1ee-c2b4f642bff8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a249cd2-6fd2-451e-b6f8-c4ed5596363d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab7bc91b-50f9-4cbb-92bd-aa567cc8019d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc00d636-3233-40ed-bad2-359ae6910af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c9da19-c0a6-49a4-a9ca-5290c157ca5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80aa29d-01ea-48ca-9a21-06365179938f",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd95183d-c7b1-427e-9425-76c61ed9e868",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "400709e4-ebae-4735-a15a-18d3533cb76f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0965c6-21f9-4f95-83a5-339f44a555e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd30effb-cbea-40d4-b84d-d37a23bfe97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c75e44-852c-4175-949c-677b2b292533",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d2737a3-05f1-4faf-885b-abbdbed24e0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f889a3-82f1-41d3-9149-dc26f8336511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3302a0c5-8814-4e83-9909-ed39de499131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be5ec92-ba95-4532-9d4a-9941cb738b5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84ea1bab-418f-4131-8129-52a6b8ccf668",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fdffc74-a673-41fc-b980-01dec20df660",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e520ade-7812-4c8d-8d2f-ba2eec902487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed138a9-52e2-4c06-a1ce-1c6810b1318b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f24910-54c3-4204-944c-bc220497df69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7e4831-ef89-4fdf-a1e1-bacc8ac1a2f9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff8f7691-4ece-4095-9757-f18c8ca20efa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e66dac5-bc9c-4b94-9933-84cddc0afc4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12823351-b237-4ff8-9951-7a43aaa325c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84def1bd-5fe9-49f9-a405-e7d284c00840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108854f7-37ba-4456-b85e-fcad757a2463",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1af3b4-e564-48e2-93e5-68d85e210f34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea81ed2f-7e29-4a17-8775-d7c71978c90e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfe98e2-4f56-4e7c-b949-522866e9d249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25295be3-7108-45fc-96f0-67dc0089affe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb24ecf-4149-4744-bd3e-8470c08d2007",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3080d18f-f532-48c3-9c5a-a272f2cbdd7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eae5c14-81b0-4e5c-a980-0d9fa3544c1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b523699d-a838-49df-9390-9a3647edf506",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871f3198-a616-4fd9-8b10-5570c1a301f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7605bbc2-ef85-4702-862a-bea74a6748c7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73223b59-9002-42d1-aca5-a07912b3ce2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "917ad141-6d9c-419f-95f9-df8cf5222a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00a73780-3863-4f93-8510-60c8ba545584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9192e9f-1ecd-4f18-b468-90fcf89a90a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dc76b4-1064-4fe5-8d02-0bda59cb45d2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f722a321-b16b-42b8-8743-a105a1bf0d80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdd953b1-c600-4a49-91bb-6362c9089cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f5577c-2e68-47f5-9919-49c57a1eb975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39c18687-7ca2-450e-9080-08fb250245af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "450400bd-f8bb-4797-9f91-f12516c87b38",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aad5584-25a5-43c3-954b-1ebb09e8c934",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b34aebdf-c2ec-40cf-892c-7af777e60482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba42ec7-b0bb-43cc-98a2-cec617550bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45db8619-9cd8-48a8-96ec-91b7349af86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4346488-9574-48a0-843e-6aa9fa677a3b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867494cb-924e-4aaf-82f2-590689a74570",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a26faa7a-91cc-4020-a02e-db5607b950aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b056eda-f2a5-4094-a02c-7ea3ca914efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "297be6db-fe14-4927-a4e4-7e955600fc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9fc8df-b76f-4671-933e-90534fa1c4e2",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bf957f-1a0c-4778-ba38-2b7b16adfd1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f8edca5-92ae-4183-b3f8-3629f07d201c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af46672-2cce-43ca-9d06-466136dc1661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba374ac1-47c7-4c28-a977-a25c770a7c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ba862b-38a2-47dc-bcbf-51c672bc27fe",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79608359-6439-4d78-9458-694cce0f2f52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca92a021-a061-4cc0-97b0-223e7dad38fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c484aa5-8a66-4e9e-ba68-f6e894f694d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f201aa5-0248-4b27-b96d-023ce7970159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c70bd84-eb80-4225-8aa5-80b8c9c85f47",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8625d1-3e94-46bd-abef-fc540cd98923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee752b9-3fb3-4c4e-9307-87ee19abb24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b644698-6815-4324-aab9-02bb88aa78e5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "882ac3c9-fb4e-46cb-92bd-ee8d9404eff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb7842c-d812-4813-86f8-b0e9b602ad65",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aec4882-f06a-477c-858d-a81db1fc8df1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d194a24e-cf29-4d7a-9892-a3b96befcd6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edde3ca2-0532-4f99-a3a0-22254f2d250c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a4121c5-b704-40ce-aed9-be2f6723b3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274eefdd-4d61-4b71-b383-126a999a0074",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e74dcb-6088-4596-a73b-fe009da7800c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab62441b-4b22-4f83-8b6a-2d76588e251a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644e6170-adec-4799-8066-4b5d03efe132",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "140f5b6c-057a-4869-9646-5c3621900b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb930ba6-ce80-4173-b4a9-4ae807daacf0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d208ee-79fd-484f-8f33-c7f6a495d39d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69a91015-6e1b-4cbe-8a00-96156ba94ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd607699-0d09-4804-a0d9-5d74c81b90c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966b3c60-9944-418e-96cf-8f021ca05ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c15c00-0d67-4fcb-badc-edc5a1a2ee47",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2608fc13-bbee-48bd-a69d-5742088a16ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88a812de-50d2-49b2-a6f0-107cfd593007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be7fac9-04a6-4168-81ab-283ae1913c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7fd4cd6-a16f-4b2e-a13b-be7d2d8a591f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a74f1fe-b9f7-4cc8-9aa2-0d60699984b4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6aaea6-15f7-4a73-9bc8-0c15525aa055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb9f862a-d1da-43e7-b1b6-3fb2ba1ac54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb57d29-d240-4da4-b5cc-e72f54f4669e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "949ee819-98d0-440d-a838-902846174021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053d2bc9-b0fb-43f0-b673-485aaa4d1572",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603673f4-ddb7-4137-b279-7c90ca912ac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd9e77b3-15d1-4186-bfa2-4b4c1dfbf64b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f615361c-a23d-423c-a016-2f87fa035d6b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c60165-90bd-4c6b-abd2-9881baf2d404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce21e15-9d2c-4574-ba73-c6c55fc13bd7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b381976-0898-47f4-8d3c-1de2048fafe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb9adaec-2611-44f6-a9ca-0e2c33681762"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2650275b-3351-4446-9b6c-9b45ea621daa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6a6ec0-891b-469c-b28b-37fe2369009b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36b4db33-9bf7-4753-b42a-5f9fdc31c449",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20aaabb6-1eae-4148-8f5e-c116e16d0ba2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1eb15706-3740-4520-ba95-a5d94dc16a48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "11db4b5e-6a61-42e1-9834-4b8c02b8c7b2"
                    }
                  }
                ]
              },
              {
                "id": "e7e606e0-8c0f-4775-bf07-69430a20a8fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f79b9a0-f700-492b-949b-49915a543856",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "781ee047-1b98-4e9c-babc-0c867c048b59",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "114d3e5e-f357-46b2-9a5c-851363ce2901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd67430-18df-49db-822d-fb00a6c64ad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3cecd9c-219f-4443-bc52-4892110d080a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c4ae633a-c3ee-4333-b054-141975659de0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bd35ec6-ea37-4eed-a21b-ced6f3173226"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ffd0673-5728-4007-8b01-de6ef6268b5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fceea7bb-a146-4d6c-a1c8-33ac14f815d0"
                    }
                  }
                ]
              },
              {
                "id": "46f8127f-adc6-4264-85f1-96f16df1fd88",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "830bd06f-5f4f-4c31-8e81-08a6eb563041",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "442c9b67-1567-422d-83d9-e6140e06631f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "88ad1f43-d43b-485f-a0d8-832bd73b152a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454cda65-a8f0-46b9-b708-61c1970ff59f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d55cbd-b28f-4c86-a6c2-47be4a920faf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c6877653-9e35-424b-8370-e4c42fe2967e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a92bbaba-04e3-445d-8bd9-1e1f09506c61",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f07024ce-1320-4ee9-afd0-3a28eaee4a12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d49e6154-f88f-4c66-8e49-d64b1bfd8f77"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b73297d3-24a6-409b-9593-2a5542384294",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60a6fba6-abdd-4e02-bf67-e85c01abeab4"
                    }
                  }
                ]
              },
              {
                "id": "fead9def-6d96-4b75-80eb-257458011e01",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3559ffeb-257e-4664-89ff-f296af87f6f7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "76b8b471-3402-49f3-b8f7-87c8f04c59c4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a87f373f-d7fd-4eb5-bd0d-8ae909953842",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e49294d5-948f-4f6a-9af7-1ca7310a9bfa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3de839d9-e227-4a49-8d64-abaab3b5bbc9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "04823cc6-f26c-4c08-a1f8-7a3d82f90598"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c49eb757-0840-4a70-8e6f-8d88c633bac8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6702f1ba-4e41-4886-b29f-a312ce4d13f8"
            }
          }
        ]
      },
      {
        "id": "b5a4927b-a45a-4120-ac40-661fbb3d722e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f3bfc2f4-8799-4dad-a0db-119ef8853960",
            "name": "Negative Testing",
            "item": [
              {
                "id": "07144102-9438-4ca9-9285-f4906a6e3521",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "66b141a3-ee40-43ef-863c-466e2e5725be",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c56d8c-14ff-49d5-9b41-f2053857e82c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3a369047-5609-46ee-9b9d-f387d709ca6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b0f25e-8469-4b0d-a9df-fe52a2326e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67a68951-247d-457b-8b06-4fd2216a5eb7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aba08bf3-bc8a-438b-942c-cada5125bba7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b12813c-fcdc-4d79-8b9f-772cead5bb86"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06a7e372-c2c1-4b1f-907b-e33515151766",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64a5d042-59da-488d-887a-338fd6947849"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a2e3db6-51a8-4c59-88fe-a46ecd2c95de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1fd9e823-6a34-476d-a0ec-ffd538592147"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2213806-2101-4c4e-baf4-ffcc30624892",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d93cad3-9b06-4a2b-a5cd-937c3187fe50"
            }
          }
        ]
      },
      {
        "id": "c5afd409-df58-451b-996d-85a1e9117fc4",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "029f9540-fe80-4d68-b3a4-28977ffef22c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "119b080e-fd4b-4fc8-8986-6bea451faf91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "72afc612-f788-419d-89c8-d6ca02596b2d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdc079e-36e6-4559-97d9-0345a673f402",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0afc3994-2f56-4333-80d8-50d1b5407a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c574349e-2028-4b5a-8306-086033d5f610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b910e89-95a4-4f55-9004-85482d34020e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "169127d1-8bca-4d4b-8e95-a4c3ef7cee22",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "069e5f65-c2b7-43ce-85fa-6b9ef7549ccb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18187d05-7dd2-4041-b5bc-640062512539",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "681edcd3-c382-49ba-9eaf-03afe9d7f9bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66e296b4-fe00-4764-ab4b-6a2e807c8b07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b6f6a44-cdcf-44ff-ac17-39de63d6ac5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42a4abfc-c746-45c0-bb16-4353f6bf3dcc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e277941d-a982-4fea-8cba-4a7670e9b612"
            }
          }
        ]
      },
      {
        "id": "e33fcea0-3645-478e-9388-76eaf71c5ee5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e53e412a-d998-4dca-a93d-2d435d82fcf2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f273f3b3-e355-4b2b-a1ad-fac72d04aafe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "321bc30a-1797-4bc1-b9f5-be78d610685d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aca58d3-9846-4472-8bd9-3aa6cfb88579",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a8bc4e2-a53c-4fb3-92d8-2268bd577974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7b99c7-22f8-43f7-8240-57095684d088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42e9a529-9eaf-425a-965b-858b2e32087a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "73d52ac6-cd19-4a90-a998-a3257b23528b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "588ecd48-e7eb-4b66-ae40-439aaea4af32"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "761fbeb5-b761-4873-a959-d97c470008c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13161ee9-6313-4a82-9669-8e704a7d1f75"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f4ba3319-e299-471a-b2d2-50c64467206d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fb194642-3999-4cfe-b5c3-292e773f6fdd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81b449c5-7edc-440e-9f4c-9640dd035bb2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5fa487fe-67de-4de2-a46d-751f8668edc2"
            }
          }
        ]
      },
      {
        "id": "64988644-6b5e-478a-ad90-bc4a24329caf",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8275150-61af-430c-8aa3-abf55951a300",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "846e9abb-c066-4396-a3a1-6c6726462387",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "94d3898a-3b80-4917-aa1d-ce0f494470ce",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c79bfb94-d4d4-45e5-a26c-597256b3db8f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a592ebb-47b9-4bb9-9f33-fb2f24346fab",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 101.06315789473686,
      "responseMin": 21,
      "responseMax": 539,
      "responseSd": 72.12510727062826,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1700613438820,
      "completed": 1700613476957
    },
    "executions": [
      {
        "id": "73c7c61f-1be7-4dbc-9bbb-fee893f99b35",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e9ae58a3-d28d-4a1f-a5e7-3f55c9c5d9fb",
          "httpRequestId": "65927254-e971-4802-a505-df7831563e39"
        },
        "item": {
          "id": "73c7c61f-1be7-4dbc-9bbb-fee893f99b35",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b830668a-b0d2-4b0e-8861-508b146c31f0",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 0
        }
      },
      {
        "id": "0c58f5e0-6446-4d2b-a9a2-713f3c387337",
        "cursor": {
          "ref": "2db375ad-680b-4a57-87c0-9e57fa5cdd83",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cb46d8dc-6500-44ca-bd03-f13211e64475"
        },
        "item": {
          "id": "0c58f5e0-6446-4d2b-a9a2-713f3c387337",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d778fc2a-f353-4f8a-b9d5-98932b068b48",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "8910966c-16b9-461b-8471-1b2c621cf7f0",
        "cursor": {
          "ref": "b5cc3afe-4e0d-48a7-b67a-0e16ae8412d4",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b692a23c-3e93-4a75-8c0c-2029fe13eaf0"
        },
        "item": {
          "id": "8910966c-16b9-461b-8471-1b2c621cf7f0",
          "name": "did_json"
        },
        "response": {
          "id": "ff5ce523-e16c-4df1-8d8e-2f6c8dbc2bb1",
          "status": "OK",
          "code": 200,
          "responseTime": 405,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049e4da4-aea9-482a-8c7e-444d13943e29",
        "cursor": {
          "ref": "fbc531d5-81d1-488a-be3e-755d0180902d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e74e530-e214-40e0-8603-0bbc348ad776"
        },
        "item": {
          "id": "049e4da4-aea9-482a-8c7e-444d13943e29",
          "name": "did:invalid"
        },
        "response": {
          "id": "d62451f3-aa73-4e6c-b58d-9007c99c44c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049e4da4-aea9-482a-8c7e-444d13943e29",
        "cursor": {
          "ref": "fbc531d5-81d1-488a-be3e-755d0180902d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e74e530-e214-40e0-8603-0bbc348ad776"
        },
        "item": {
          "id": "049e4da4-aea9-482a-8c7e-444d13943e29",
          "name": "did:invalid"
        },
        "response": {
          "id": "d62451f3-aa73-4e6c-b58d-9007c99c44c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 349,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0aa42fe-6266-470e-9c7c-241ae79c52a6",
        "cursor": {
          "ref": "04b8472b-4aee-4c39-94c5-81efbe2ef908",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ec08c4ae-97d8-4357-8271-38a2fdc9f394"
        },
        "item": {
          "id": "d0aa42fe-6266-470e-9c7c-241ae79c52a6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "57818d26-5bc4-4cb4-bd3f-785a64f71cc5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 137,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2e1308-1d2e-4d0a-9e96-f74e3b2f91a3",
        "cursor": {
          "ref": "3be2a791-69b4-4c76-bd89-df55dca3560b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b1b273ce-7449-4716-a44d-320bd8a8c3fb"
        },
        "item": {
          "id": "da2e1308-1d2e-4d0a-9e96-f74e3b2f91a3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c47c1998-a216-43f2-98da-1a12098e9732",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b958e36-c689-4456-86cb-da20a36e6412",
        "cursor": {
          "ref": "3872f3d2-d4b8-4a4c-9aa3-77808830676a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "570b24d3-b6bc-428e-b9ae-2fa25176dc0c"
        },
        "item": {
          "id": "8b958e36-c689-4456-86cb-da20a36e6412",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "fe21df70-a119-4efb-ac3c-7e3f454b43b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070e5f30-be55-470b-a523-71debeaf73c8",
        "cursor": {
          "ref": "82c2a46f-2132-467b-b2d1-f2b284a2d825",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a7c04993-bb16-43c6-a2ae-721150256a0d"
        },
        "item": {
          "id": "070e5f30-be55-470b-a523-71debeaf73c8",
          "name": "identifiers"
        },
        "response": {
          "id": "4d72c7e9-6951-4149-9fae-e10bd6cafbb5",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb767567-847b-4b6f-bf69-9b56f590e684",
        "cursor": {
          "ref": "8b0c5fc4-bf08-4b24-8c63-c50ea9193188",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "fa12af5e-5855-4478-b283-ab8306152e93"
        },
        "item": {
          "id": "cb767567-847b-4b6f-bf69-9b56f590e684",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "814d6216-e04d-47d1-894b-af9532611d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2c3a34-5502-4dc1-8f8f-7a26ffc90cd9",
        "cursor": {
          "ref": "ae839707-8356-4be4-b01d-28815530c846",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "66a05199-b030-48b2-9509-4ca641eae246"
        },
        "item": {
          "id": "1b2c3a34-5502-4dc1-8f8f-7a26ffc90cd9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "632ff128-1f60-43c4-9981-c59d0e8514a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b4d677-0a6f-482e-af73-90c34066e264",
        "cursor": {
          "ref": "5179e09a-b1b7-4f26-8c84-0f4b6f0130e0",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "fa8ad31c-7e79-46d4-ae39-3554729d7de0"
        },
        "item": {
          "id": "a3b4d677-0a6f-482e-af73-90c34066e264",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d153b040-fa89-40a2-81fe-d01430f3dffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4ea2bf-22c4-4cb5-b7b1-6a1263f74f4b",
        "cursor": {
          "ref": "d5cbc6c5-233f-4842-aeea-6ba119b55106",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "01297fb8-1787-445f-a38a-4a6b880a85fc"
        },
        "item": {
          "id": "da4ea2bf-22c4-4cb5-b7b1-6a1263f74f4b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "29c923be-66f3-4601-8c0b-f937469d326d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c79b230-cb8e-4910-b06f-792c80146d11",
        "cursor": {
          "ref": "c90c52f5-f5e7-405c-a7bf-6e8bdd39cd72",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "978ac4c2-587c-4da8-919d-78945d2ed93a"
        },
        "item": {
          "id": "6c79b230-cb8e-4910-b06f-792c80146d11",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "46c26ca3-4c97-49da-85bf-8c88ce73e004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb9c87d-878b-430b-bd39-09fa68277a71",
        "cursor": {
          "ref": "5b26b911-ed0c-4820-b698-8c299ef95dd0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "7fc6174a-dabb-4462-883c-c26f7ff7a958"
        },
        "item": {
          "id": "6cb9c87d-878b-430b-bd39-09fa68277a71",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7fa03bfd-8a22-41d3-aea3-9e4c16546f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1397535-ef69-4d70-8e7c-8ccab7780ae3",
        "cursor": {
          "ref": "21bf49b0-ba30-4cff-ac1c-7f1477bdd7c9",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f08fdbdf-4fcf-44b4-acd4-8ce79ab59a33"
        },
        "item": {
          "id": "d1397535-ef69-4d70-8e7c-8ccab7780ae3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b3b6e8a9-1d85-4e29-8b02-ddf8859e0175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81986bb4-0a0e-4b1c-baa1-2e7868aae803",
        "cursor": {
          "ref": "1c692cf7-6f05-4d92-9280-86df3b372ae2",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d4cd76ab-69ba-47a7-8feb-556f550096cc"
        },
        "item": {
          "id": "81986bb4-0a0e-4b1c-baa1-2e7868aae803",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "da92229e-37b2-4a97-99a0-7339825084e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41fd1fb-612e-4dae-86d7-591d49b5b73f",
        "cursor": {
          "ref": "315580ce-0279-42b0-b8ff-6d95f8b6e0cd",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0feaf014-6057-429a-a875-7c454e7a8d45"
        },
        "item": {
          "id": "d41fd1fb-612e-4dae-86d7-591d49b5b73f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3f9f5192-6157-47a6-8456-c93d3b68d752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a0f5f16-28d2-48c4-8d8a-8a15dc47ff60",
        "cursor": {
          "ref": "06929f2a-5321-4d8a-b8a6-92863e8447ef",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a0fe6af9-84e7-483a-855e-7e63673bd0ad"
        },
        "item": {
          "id": "3a0f5f16-28d2-48c4-8d8a-8a15dc47ff60",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6494051d-a363-4114-99d9-eee3d81704a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "263ec9df-1afe-4f07-93e0-1fbe05049680",
        "cursor": {
          "ref": "a1e7b073-9aac-4583-a34b-7774109918c5",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "0a0bdb85-b7dc-4dd2-bd25-b8bf8a704f9d"
        },
        "item": {
          "id": "263ec9df-1afe-4f07-93e0-1fbe05049680",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "c290f1ce-67c6-45f6-a1da-6feb991848c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e877f9cc-0414-4125-81e1-8a03d6a38200",
        "cursor": {
          "ref": "5b06e319-2935-4033-9a7a-23bfec3b69e2",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dbf4d5d3-e8a3-47df-8cbb-b6c94bc47420"
        },
        "item": {
          "id": "e877f9cc-0414-4125-81e1-8a03d6a38200",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "04809a60-23c7-4867-bc83-a8f7837d4725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1755440c-a9d5-4ce0-8467-50d4aec8350a",
        "cursor": {
          "ref": "a37f1f0e-1da2-4766-a164-5a9d1bddaf2f",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6d6e9448-2c68-4781-a4e9-ad3ee19ae027"
        },
        "item": {
          "id": "1755440c-a9d5-4ce0-8467-50d4aec8350a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a1125eb1-f4e3-407c-8b7a-e3a0127abcbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245af575-949b-4a25-96f5-37a6559af2c3",
        "cursor": {
          "ref": "737cc8fb-3ec6-48bd-abe0-2810d908185b",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9f00955d-15c5-4f11-99bb-2ca9028d2825"
        },
        "item": {
          "id": "245af575-949b-4a25-96f5-37a6559af2c3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "53b0ed18-109c-4f84-ac33-de235484b40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0977120d-fa03-47cf-b060-7c6b779eca06",
        "cursor": {
          "ref": "08b8aa87-e431-4fe8-8521-08e1ad3541fd",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "55c42f24-95ab-4b3e-97f4-e3d748ee7290"
        },
        "item": {
          "id": "0977120d-fa03-47cf-b060-7c6b779eca06",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "48d4623a-c486-4768-b754-5c07ca862e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0279cfb2-ef1f-48a3-afed-9d9b1f61a2ca",
        "cursor": {
          "ref": "5c2ba8c0-1769-4767-b1a6-5b591b2344e6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1f220bcb-6581-400b-a03e-f13c9e13d9e9"
        },
        "item": {
          "id": "0279cfb2-ef1f-48a3-afed-9d9b1f61a2ca",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "73de5449-99b3-4a30-9675-364aa781f8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e14b76-8b09-4797-a9ab-25122135c2b0",
        "cursor": {
          "ref": "2ca7fdef-001d-41c0-ae10-ab23b6d57307",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "b33590a6-681b-46c5-80b2-d07eaf444663"
        },
        "item": {
          "id": "e1e14b76-8b09-4797-a9ab-25122135c2b0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5e8391c5-ce4d-49c5-b03f-36c4882227be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f41c78-705d-4919-b902-c3008243e5c7",
        "cursor": {
          "ref": "0e8eeaff-a23f-4287-b1b4-9f9da5b0f0dd",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "26adc31b-dc54-4b77-9ffe-c81fa747c947"
        },
        "item": {
          "id": "c1f41c78-705d-4919-b902-c3008243e5c7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a4e9749c-6360-40ea-bb75-ac15881bb3ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04da89cc-84d2-49b8-9396-2cb257199ded",
        "cursor": {
          "ref": "19f4d4f5-b467-47f9-a2a8-4401cb2b4f7a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "063ac315-12bb-4acb-bdab-33578eca0f93"
        },
        "item": {
          "id": "04da89cc-84d2-49b8-9396-2cb257199ded",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b8f47b26-b82a-46b8-b007-763c1fa05386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6555af-cec7-40a7-840b-fb1b1a9c7886",
        "cursor": {
          "ref": "ddd156b6-48d8-412b-8442-21a3b98b3a80",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "52cdc9b3-de67-4ce1-8453-297d8bf8e457"
        },
        "item": {
          "id": "0c6555af-cec7-40a7-840b-fb1b1a9c7886",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "92f01779-bc42-44d7-b584-f3b9199d1798",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352400c4-c6a0-475e-8b2f-945d5c5b6279",
        "cursor": {
          "ref": "3a450ebb-1070-44d0-9310-e4978c33151a",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8a8b1451-f15d-48d9-ac2e-d159eff2c5c8"
        },
        "item": {
          "id": "352400c4-c6a0-475e-8b2f-945d5c5b6279",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bcfee1d0-fe62-4364-9096-b473e58142ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd943de9-6aaf-4a0a-b11b-8f2512c4c823",
        "cursor": {
          "ref": "64edcd2e-8661-4b65-bc94-80c092d78b75",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "cb93c26e-7c25-47ca-ab92-1a1bd14b79d6"
        },
        "item": {
          "id": "fd943de9-6aaf-4a0a-b11b-8f2512c4c823",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "27129383-e70f-48b6-a93c-62b591ddce22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab49ae7-2b72-4d8c-b644-5a188b2d5a2b",
        "cursor": {
          "ref": "a393c08c-63a5-4542-845e-a33bb7684f80",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b99c4188-f328-4139-ae69-dd48253ae230"
        },
        "item": {
          "id": "4ab49ae7-2b72-4d8c-b644-5a188b2d5a2b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a5968ccb-3114-461c-96f3-cd7090799996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1333df4-8b3a-4b12-bb06-ee5bc0aaa867",
        "cursor": {
          "ref": "be34d198-589b-48b8-a963-4b7c77f2e1ad",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3331ae1e-c2ff-4cf3-9f53-1b4d41e62e00"
        },
        "item": {
          "id": "b1333df4-8b3a-4b12-bb06-ee5bc0aaa867",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a10f3b23-4951-4c77-a25e-8d0e29cd113d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20053ae8-d7f4-4ec5-a2e1-214909f094d2",
        "cursor": {
          "ref": "6a8c9557-0b3a-4930-b543-d205bcd7223f",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "31845d28-2d75-4542-a6e3-950721081a74"
        },
        "item": {
          "id": "20053ae8-d7f4-4ec5-a2e1-214909f094d2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0501451a-3d80-4ea1-b05d-92d520052d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62862f8e-5fcb-41e5-92bf-afc4f338ec04",
        "cursor": {
          "ref": "065dc7c4-b53e-4de8-8765-1a7d41a1b621",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d88a2948-93c8-49d9-ba8d-ba6446b80e1e"
        },
        "item": {
          "id": "62862f8e-5fcb-41e5-92bf-afc4f338ec04",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "77ccc8c7-e272-486c-a215-f3baa9245fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e70222a-c33f-4f2f-9c01-c6a53fac0fff",
        "cursor": {
          "ref": "45261346-6f71-4c86-9d22-7c3c5720307b",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bbab023a-056b-4dba-b106-39d1191b0835"
        },
        "item": {
          "id": "8e70222a-c33f-4f2f-9c01-c6a53fac0fff",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ac9cc48e-8cf1-4686-8906-8bcc4a54c0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43eb02f-76fe-48c2-9759-deadd6ebb668",
        "cursor": {
          "ref": "1d6c871f-7c6d-4d8a-affd-ef05491df3c8",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5eb4c2f5-53eb-48a3-b97c-75e6aec23fed"
        },
        "item": {
          "id": "b43eb02f-76fe-48c2-9759-deadd6ebb668",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0209c43a-27c1-4abc-8f32-3d28c8ab102a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcf7ccf-7625-4015-8c55-3fa71bd8a8ac",
        "cursor": {
          "ref": "eb6423a4-4067-4365-bd4f-e56ecb92421e",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "67c5e1fe-a6f9-4546-8323-2e269e1d0495"
        },
        "item": {
          "id": "bdcf7ccf-7625-4015-8c55-3fa71bd8a8ac",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0507384a-b5cf-4328-a102-cb10390d5cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e09ea0a-a257-499f-a834-0217907a58de",
        "cursor": {
          "ref": "412b3bc5-c69d-4c0b-b18b-dd5345073de6",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "cc31fe00-e4a3-4ffb-8ac7-485c80903a16"
        },
        "item": {
          "id": "3e09ea0a-a257-499f-a834-0217907a58de",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "09305fca-3ff1-49fa-b2ad-731d874fb6ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9028ba0a-5066-40cb-90fe-4600e1e4b8a5",
        "cursor": {
          "ref": "39e699b5-be47-4550-8e62-97f68512283c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a133a8eb-8b1a-4eb0-ade7-08fcada1cf60"
        },
        "item": {
          "id": "9028ba0a-5066-40cb-90fe-4600e1e4b8a5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c856da64-21a4-48ad-8247-9a42e720be63",
          "status": "Created",
          "code": 201,
          "responseTime": 539,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b914966d-5751-4d90-8ba7-e8f89acf0c97",
        "cursor": {
          "ref": "371f11e5-6a13-4592-96f0-dbf1218d01c3",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ed560009-2e0e-4c1c-8a49-13efb96e526d"
        },
        "item": {
          "id": "b914966d-5751-4d90-8ba7-e8f89acf0c97",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8014907a-4e3c-4a99-b72d-17cc8895f71e",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4e7dc94f-b01b-4854-b946-9c759068d208",
        "cursor": {
          "ref": "25dc0db2-19a0-468a-aac7-b165d853947c",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "93659e79-70fa-430c-a0a1-6575cdfbcadc"
        },
        "item": {
          "id": "4e7dc94f-b01b-4854-b946-9c759068d208",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0127c957-5ea6-4385-9955-0a018b45fa92",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "63aa4bb9-b713-46f9-8c02-0258443b2306",
        "cursor": {
          "ref": "3d31822b-efc0-44e1-838a-0f76459fa673",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9b80427b-7196-4060-b5b0-c8ed7209a584"
        },
        "item": {
          "id": "63aa4bb9-b713-46f9-8c02-0258443b2306",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ac5fb358-8892-4105-a24f-af3528db3aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a87780fe-b0df-420b-99c6-c12a227e6ac1",
        "cursor": {
          "ref": "b66690dd-0ec4-4554-b2c3-17566710064a",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b3bb9ebd-f6f3-4f42-a41e-267ff1241dc8"
        },
        "item": {
          "id": "a87780fe-b0df-420b-99c6-c12a227e6ac1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fe8fc4da-d5c8-4e8b-83f2-8ae104e5a891",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7a2b86d8-32dc-4f82-b191-e4e60c042b4a",
        "cursor": {
          "ref": "f8a28a99-1de5-4f0e-be03-9f9c4c231c58",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e6550b35-39e1-4b0f-832a-231e27e10718"
        },
        "item": {
          "id": "7a2b86d8-32dc-4f82-b191-e4e60c042b4a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d435f6c0-37c9-4758-9742-62f8c3126243",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "dfbe779b-026a-4ee7-ba22-f305c0990279",
        "cursor": {
          "ref": "2606c54e-3dd4-4b39-be64-c1dc0375bbe7",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "98d57958-e6ab-4b3a-af67-73e2de5ddaf3"
        },
        "item": {
          "id": "dfbe779b-026a-4ee7-ba22-f305c0990279",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d0491192-ee8a-476f-9017-746ccc87ffbd",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a44a630c-0aaa-4523-85f6-52d318523f97",
        "cursor": {
          "ref": "b80f3f79-5eec-4888-9486-e5d27317df5d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3b956476-19e6-4daa-ba9f-8e25ad43e111"
        },
        "item": {
          "id": "a44a630c-0aaa-4523-85f6-52d318523f97",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9b52c5bb-3612-45e6-a7dd-40305e7e80cb",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "598143e4-dce5-491f-9bff-84bf3a7593e8",
        "cursor": {
          "ref": "ce907694-516d-4f7a-8e7c-bb95e563b813",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "302a3459-042a-4b50-ba67-952290f779f0"
        },
        "item": {
          "id": "598143e4-dce5-491f-9bff-84bf3a7593e8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d82ce30d-93cc-48c3-a204-287fbebc3be7",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "70fd5869-13c5-4930-a661-0657532fcbb6",
        "cursor": {
          "ref": "ebd284ab-6d68-4370-a4e8-379e80049aab",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ef8f2d67-31b5-4c80-92f1-4a1abde71a59"
        },
        "item": {
          "id": "70fd5869-13c5-4930-a661-0657532fcbb6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6f0aae00-385e-4296-8f85-97958c9d588f",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5b0594af-ff97-4d09-ab95-22f9c87468ed",
        "cursor": {
          "ref": "844aa86e-d900-4d36-a0c4-b67d6f1028a1",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "8adcb0ac-aa91-49f5-b1ff-be9d6db05cc0"
        },
        "item": {
          "id": "5b0594af-ff97-4d09-ab95-22f9c87468ed",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f39ef514-d011-4ba0-9f31-cec63405697c",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7ba2ebcd-74c2-4188-965b-05fe97278377",
        "cursor": {
          "ref": "a33e6c10-c6fe-4ea4-832c-2c16adc6c42c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "d7ea6ded-e65e-4a5b-a1e1-748eb08a25aa"
        },
        "item": {
          "id": "7ba2ebcd-74c2-4188-965b-05fe97278377",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a388f20f-0b5e-4012-a685-e9d1f3639814",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "934d059a-3fd3-48cb-b8f2-ec1f1c630923",
        "cursor": {
          "ref": "5a0dad55-6550-40e3-8046-ed5a4aa8839c",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dc2a570f-b7ce-428f-af6c-90e77ea18ec4"
        },
        "item": {
          "id": "934d059a-3fd3-48cb-b8f2-ec1f1c630923",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "5e49b0f9-b2d1-4b28-ad44-bcb255838e9f",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "49016de1-7b36-4fdd-92d1-14b0a417a005",
        "cursor": {
          "ref": "391a9e81-dadd-4fe3-814b-e8f5382e61c6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c4e17208-56bd-443b-bed6-5c0fdb251169"
        },
        "item": {
          "id": "49016de1-7b36-4fdd-92d1-14b0a417a005",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3c328907-29a4-4185-84c9-bd2c96ab265b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be44df30-2ae4-47be-b9dc-d6643febc522",
        "cursor": {
          "ref": "e0fab3a6-e72c-4b9c-b24e-d3663da3ffda",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ca486c3c-4929-4dce-843d-e92f67e36ef6"
        },
        "item": {
          "id": "be44df30-2ae4-47be-b9dc-d6643febc522",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "37bce868-7436-480e-a4bb-27e4f890719e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0ae66f-76f4-4090-99f2-8b227d7098cb",
        "cursor": {
          "ref": "9bb55a08-622c-440b-b13a-892e658aa2b8",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "42375bb6-ded3-4583-b102-6d291aea9104"
        },
        "item": {
          "id": "bb0ae66f-76f4-4090-99f2-8b227d7098cb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c380c7e2-9cb3-4f9a-8922-10994f702c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b219fa9-6753-4d8a-81c4-8e7d1e220ecf",
        "cursor": {
          "ref": "c30a635e-7ee3-4f06-98de-611b29007464",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5dbf2cb9-50b5-439f-b593-323c0ea088dc"
        },
        "item": {
          "id": "4b219fa9-6753-4d8a-81c4-8e7d1e220ecf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1fcf051f-f682-4e9a-8d10-c5e137217fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d1d085-5ebc-46fd-ab76-fd85c4d7b6b8",
        "cursor": {
          "ref": "517c3e9c-4ed1-454e-a0d4-19dfbc7f4983",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3cffdf66-d50e-4c23-bc1f-dd5812e8530c"
        },
        "item": {
          "id": "77d1d085-5ebc-46fd-ab76-fd85c4d7b6b8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7908c7dc-181b-4d9c-9f26-9b78b3441454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8396e797-4038-4aaf-9f38-851fbaf4f3f9",
        "cursor": {
          "ref": "053430c7-4883-4531-a201-c97fef17f21f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "db93842f-62f9-43e2-8ba1-a3743c34cd1a"
        },
        "item": {
          "id": "8396e797-4038-4aaf-9f38-851fbaf4f3f9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "71590023-6c3b-4925-870e-e34bbe24eee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebbcc48-2469-4a3e-be21-aacada32b0a5",
        "cursor": {
          "ref": "1e24e25b-ded1-4f35-95d4-442831b73c80",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9e07ca10-5095-4aaa-9112-70a101245ba4"
        },
        "item": {
          "id": "5ebbcc48-2469-4a3e-be21-aacada32b0a5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d5827406-086f-47bd-a775-32994154488d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36c2c7d-67e7-475b-b296-9f6aff51099d",
        "cursor": {
          "ref": "91f2b839-aeef-486a-94f7-180ba45b8e3d",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3d7f2928-335d-4ff1-b917-1cce485d6b81"
        },
        "item": {
          "id": "a36c2c7d-67e7-475b-b296-9f6aff51099d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c7f7c0c2-db2f-4089-8159-13c2f9aab3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17b9170-6103-4ce2-9f89-06579005bf89",
        "cursor": {
          "ref": "64eff667-a65b-4e84-9ae6-aabae2cd56e6",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8d59b71e-5be0-4b73-9dab-fc3eb33547e7"
        },
        "item": {
          "id": "d17b9170-6103-4ce2-9f89-06579005bf89",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b99e3b03-6147-403e-89b4-bbed4255e3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c150f7db-286a-4598-b941-7c8c38e8082d",
        "cursor": {
          "ref": "0292b279-510c-479a-805c-f64c2b8af4e5",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "abd38933-0120-451c-9d42-1a0438731a75"
        },
        "item": {
          "id": "c150f7db-286a-4598-b941-7c8c38e8082d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "47f55184-e07c-4cec-9438-37ab932d688f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc6fb625-3b3b-4895-a517-5a8e1b9d9232",
        "cursor": {
          "ref": "3161e75f-7ad9-4c85-9917-fad89aa6a116",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1edf7595-e25e-4d2a-9911-f34a12fbc025"
        },
        "item": {
          "id": "cc6fb625-3b3b-4895-a517-5a8e1b9d9232",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f2a59bd5-3f65-457f-9311-c0b4fc9894e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d412eb2-0f64-4835-bacf-6f7828fd9cea",
        "cursor": {
          "ref": "f352343c-2d34-4cb7-a7f6-d48f5cee069b",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "55f7649e-9ea9-4402-bccc-d1e660142b65"
        },
        "item": {
          "id": "2d412eb2-0f64-4835-bacf-6f7828fd9cea",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ac0304a2-39ed-4022-b2cd-4e9a4f251445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51f4fa5-00ea-4959-b788-916fd55674ab",
        "cursor": {
          "ref": "b78e806e-63ea-4573-84a7-9690caf0b35d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "68637122-1e93-499c-bc2a-e0d9d0f40a87"
        },
        "item": {
          "id": "f51f4fa5-00ea-4959-b788-916fd55674ab",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ce318485-4b12-468d-88a1-f848407349f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48b9c8b-be80-492a-a85e-0a6447df867d",
        "cursor": {
          "ref": "de68b7bf-50b1-4916-b626-56835c1396ad",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "aed27989-e1f9-427c-952b-719e0aa8a81c"
        },
        "item": {
          "id": "b48b9c8b-be80-492a-a85e-0a6447df867d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5ef938da-e32d-43c5-940f-30f7759a5fce",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f7287811-8f25-4fd9-8074-ce78ed771052",
        "cursor": {
          "ref": "73887007-1ae7-433f-86b0-9d81180f1c3d",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "17a6e56a-59d9-4995-aee5-71b7e14a85a7"
        },
        "item": {
          "id": "f7287811-8f25-4fd9-8074-ce78ed771052",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0e55066a-ee43-4aeb-bcc2-8f4ec2258950",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "88c21254-8d47-45b8-a646-228175c7aaee",
        "cursor": {
          "ref": "c11f15f7-7d1f-44df-a9c3-11dfd81992d8",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "aa13afbe-662c-438c-8333-09e3f4f1b55e"
        },
        "item": {
          "id": "88c21254-8d47-45b8-a646-228175c7aaee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e3416e10-07fd-4fcf-84fe-ecc47ccda1ce",
          "status": "Created",
          "code": 201,
          "responseTime": 411,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "89c978bf-a320-4f18-8509-5b5307ecb2fd",
        "cursor": {
          "ref": "058e9b49-d9d8-4747-81cb-3c548ccd3125",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7880b727-d88b-48e7-8b1b-847c3912a91a"
        },
        "item": {
          "id": "89c978bf-a320-4f18-8509-5b5307ecb2fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1b197164-6090-434f-a78b-3c4b71a0fc8d",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d0f7f6ca-3c49-42eb-87c0-06935b52e17a",
        "cursor": {
          "ref": "c83a77b9-a8b4-4281-91cf-dca67d658be4",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "02a3c738-15e2-45d3-a982-3b2a644b35e0"
        },
        "item": {
          "id": "d0f7f6ca-3c49-42eb-87c0-06935b52e17a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b49a3008-b858-41ee-b397-911f89f77320",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5f465bec-cd5b-4517-ab05-8e98d4a2f527",
        "cursor": {
          "ref": "9cc1dc4c-d117-461f-99f7-1f96d9484aec",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "dd62e59a-2920-48c0-855a-f501e43150bd"
        },
        "item": {
          "id": "5f465bec-cd5b-4517-ab05-8e98d4a2f527",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8e5eb10f-78ac-4f6d-8230-22fabf776ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3216e72-6b62-4475-9225-556f70fdfeaa",
        "cursor": {
          "ref": "9b74c4cd-372f-4d60-8ecc-8312af11ceeb",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a6c68f0c-bbf2-42ac-b046-c2d2e1660a5c"
        },
        "item": {
          "id": "d3216e72-6b62-4475-9225-556f70fdfeaa",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7333b289-a550-4158-a241-195020b028d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05c5b03-5f46-41bd-8f87-a7f7f57c75f4",
        "cursor": {
          "ref": "6266809b-4b8e-4676-9897-4c1a28810940",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2d65e98a-0882-44a6-932c-bc1b8f4b87fb"
        },
        "item": {
          "id": "d05c5b03-5f46-41bd-8f87-a7f7f57c75f4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "35ad0e01-3c2d-42fd-9ee7-053d8a24ae03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e6d072-6423-4ec2-b8ac-ddbfbd2b03b6",
        "cursor": {
          "ref": "982a747a-eb53-4674-bc6f-28d5d45fd30d",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0b7b9b32-8822-4500-a434-4a6e60eb3d2e"
        },
        "item": {
          "id": "08e6d072-6423-4ec2-b8ac-ddbfbd2b03b6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d3d47656-2dec-4158-bfc7-2bc4a83cae2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a56bac-f020-4386-9328-c2ab1318dbaa",
        "cursor": {
          "ref": "ee94841a-e238-4440-a2fa-39de57256fdf",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a330b58b-1913-460d-81cb-d3e0b0db7ad6"
        },
        "item": {
          "id": "97a56bac-f020-4386-9328-c2ab1318dbaa",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ddafe99d-b7ba-42cf-a47e-0e969f36524e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7accad46-54c3-4438-af5f-d66d15aa3194",
        "cursor": {
          "ref": "7562c637-d178-401f-959d-d85ae243d9e9",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "427f253f-5220-4dd5-9cc5-def7f005d302"
        },
        "item": {
          "id": "7accad46-54c3-4438-af5f-d66d15aa3194",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "6469bc2c-dbff-40f9-9a8d-16c7a8e3e1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83525cc7-380d-405c-9422-3f07c8144d7d",
        "cursor": {
          "ref": "5be00992-1f28-4df6-a683-58277ff06c89",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6c45d995-39be-408b-94b3-312d4e6911cf"
        },
        "item": {
          "id": "83525cc7-380d-405c-9422-3f07c8144d7d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3b4b4805-d3c4-46ac-9cdb-5da89602e075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe60fddb-fcba-4c00-b1c5-ae80a9dffdf3",
        "cursor": {
          "ref": "a3fb0120-d4cb-413c-9d6b-6b7d3ee50f58",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "74671c99-c539-4795-b9d0-77fddd06aea5"
        },
        "item": {
          "id": "fe60fddb-fcba-4c00-b1c5-ae80a9dffdf3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "1170ad1e-f670-4c3f-97ce-3eea68d4beb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7fe2e40-aef0-4118-8dc2-cf3be2536da1",
        "cursor": {
          "ref": "80656b19-9005-4d8a-a5f2-6fe17f58b3b9",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "68fb97b0-f88b-4c92-910d-5d017ffef134"
        },
        "item": {
          "id": "c7fe2e40-aef0-4118-8dc2-cf3be2536da1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "14a1e28f-ae09-4ad4-8656-d50aa48faeca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d29747-dafd-48c4-acd9-7ac2c895b93e",
        "cursor": {
          "ref": "4fc8a60a-226b-45c0-b22c-21a97ae89d01",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "18ea0ff1-6736-471b-9562-b397f5fd614b"
        },
        "item": {
          "id": "01d29747-dafd-48c4-acd9-7ac2c895b93e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "07f9b908-b6bf-4fd3-8f75-c58d51f9aa1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a279b1-cb9b-4947-8b68-7d19864cf972",
        "cursor": {
          "ref": "f9d6ffb4-aab0-4576-9daa-8084338a0351",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4d909a44-6d9f-496f-a574-a5f5a8b662ca"
        },
        "item": {
          "id": "a7a279b1-cb9b-4947-8b68-7d19864cf972",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "dad768ba-6030-4058-a3cf-eb240065b2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71cf5ab2-13f4-4d03-845a-5fac6a88c245",
        "cursor": {
          "ref": "9f0a363f-2c8d-4036-b10c-90f4a34ab5c9",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3dee3742-aac4-4e8d-baf9-104a49439209"
        },
        "item": {
          "id": "71cf5ab2-13f4-4d03-845a-5fac6a88c245",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2447802f-f177-43cb-b077-617d6e7b3146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8296a0-3850-4237-8162-2841b26f5b5c",
        "cursor": {
          "ref": "e4b24425-28c2-4984-a45b-cb70903818e2",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1235d325-938a-4b37-a2af-4249892828b8"
        },
        "item": {
          "id": "2b8296a0-3850-4237-8162-2841b26f5b5c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4dfabace-cdcd-442f-bb2a-901af0cbfe36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26469134-8b27-4814-8790-0ceea76bf7e8",
        "cursor": {
          "ref": "476ce25c-ef94-4b9b-a66d-475f178aa2b3",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "e7dab793-4290-4576-9445-e7be6e7b4bc6"
        },
        "item": {
          "id": "26469134-8b27-4814-8790-0ceea76bf7e8",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "774002e4-3290-4d31-9a78-da00543c2d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5ce9b4-41b5-4013-9b0c-2575eebe9650",
        "cursor": {
          "ref": "4bac04f9-6663-45a3-a673-884316b2b70b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ee767305-c35b-47f1-8183-a43ccc7d060e"
        },
        "item": {
          "id": "fb5ce9b4-41b5-4013-9b0c-2575eebe9650",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a87c1ed5-01ad-4318-9817-175de6e1d16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7616a37e-e76b-472d-a538-4e4a5de57dad",
        "cursor": {
          "ref": "5b17a8ba-5c23-4606-9a4c-ee581afb9ad7",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d4cee2ab-24f1-468e-9a8f-1c04a5edbfa8"
        },
        "item": {
          "id": "7616a37e-e76b-472d-a538-4e4a5de57dad",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "dc78928d-23be-4195-b096-906fd64170b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60fe3e9-7691-4957-a207-dab1e76e13bb",
        "cursor": {
          "ref": "01367740-fb8c-44e4-be8b-e259e0b11bd3",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "daff9cf1-616c-406b-9e18-45b0f7a68ff4"
        },
        "item": {
          "id": "c60fe3e9-7691-4957-a207-dab1e76e13bb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9628ffec-a37b-4df7-bc3c-38c7287cd175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9da7c9-7833-4140-a8fe-80b1b812dbb5",
        "cursor": {
          "ref": "1e42886f-3376-4a90-a1c7-9e67504d7e26",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c7bc4d6f-62c9-44c4-a48f-784bdd4041a0"
        },
        "item": {
          "id": "3f9da7c9-7833-4140-a8fe-80b1b812dbb5",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "327c8e53-6fe7-4a71-831b-6851cf494b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe76f0db-619f-4488-9b69-a94394ce59ee",
        "cursor": {
          "ref": "7ab1a3b1-d043-45a6-88a6-ae2c00f246cb",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a0135aed-3a51-4856-a6d2-2aac364f9b94"
        },
        "item": {
          "id": "fe76f0db-619f-4488-9b69-a94394ce59ee",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "57e70216-e22c-40a0-a1f7-2872bae12a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca56b38f-11f4-4ed8-81e4-875022fb4eb7",
        "cursor": {
          "ref": "9c6f3035-09c4-413e-b9e5-791fb94b6255",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "3957d997-67f6-4a2b-9352-cd3ebabdf426"
        },
        "item": {
          "id": "ca56b38f-11f4-4ed8-81e4-875022fb4eb7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e16301a1-1c80-420c-ba47-f606a38b1113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a15f80-b145-4491-bc65-98a47312676b",
        "cursor": {
          "ref": "72d1e807-284c-4b00-9e52-a7f97a14efc9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0254dd58-11a8-4390-9104-671ad6301512"
        },
        "item": {
          "id": "a7a15f80-b145-4491-bc65-98a47312676b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c303ece6-6369-40f2-a5a9-63fba0e7db9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37901cd1-5c64-4dfe-adae-48352ce31555",
        "cursor": {
          "ref": "fd0a621f-730a-4d30-ac7c-aca963618407",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fe86d0e7-1df8-4500-bedf-121a151468af"
        },
        "item": {
          "id": "37901cd1-5c64-4dfe-adae-48352ce31555",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c75f52a3-abe1-4ea3-9b9d-971fd6d861c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe6205a-ec2d-4bc0-8bec-db7e975143b8",
        "cursor": {
          "ref": "40818664-dd0a-4d81-9009-38d3227e0829",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b2780882-af1d-4452-acdc-0d21647bd875"
        },
        "item": {
          "id": "bfe6205a-ec2d-4bc0-8bec-db7e975143b8",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6654f3a4-9efb-47db-98f1-f3623f947518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ca3fff-0429-419b-9b57-a4c56a9c2dfd",
        "cursor": {
          "ref": "99712f38-f1bc-4872-b073-5d4df32bac33",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fe1a3fbd-1ec5-4da8-b5bc-92951adb592f"
        },
        "item": {
          "id": "88ca3fff-0429-419b-9b57-a4c56a9c2dfd",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "85767eda-8436-44fa-948d-1feaa90d013b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a793d8e-a0ae-4902-b6fb-6c3287a8407d",
        "cursor": {
          "ref": "1f0ba76f-1d98-45e1-857f-61d8feb5a870",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "21c59bcf-ae06-4a9f-9e71-7152bbd7f3e5"
        },
        "item": {
          "id": "8a793d8e-a0ae-4902-b6fb-6c3287a8407d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "152ede0b-369a-4432-ab28-8c6b03a645e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c92702b-87c9-40fb-83ac-35892dacbc82",
        "cursor": {
          "ref": "2726c7f9-db74-47eb-8a10-b9362ed302da",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e65bb102-424a-4896-a082-9d1d600fc653"
        },
        "item": {
          "id": "8c92702b-87c9-40fb-83ac-35892dacbc82",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3991706c-c325-4c6d-ac02-4b748c132957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b8ddfc5-e900-48c8-a0e5-f2ca184a2305",
        "cursor": {
          "ref": "455f4d1c-b23a-4061-8121-63c3b8d257c4",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "373910bb-9daa-455e-8505-7981dbabd427"
        },
        "item": {
          "id": "6b8ddfc5-e900-48c8-a0e5-f2ca184a2305",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "57ea5166-e428-4793-bc63-cf81ce41a10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141ed473-5825-4c53-a51a-0f73cc0305f4",
        "cursor": {
          "ref": "255d4727-a819-4cea-87d9-eeb60fc409f0",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b5283c41-82f1-4c1e-990e-7cc2fbb1b170"
        },
        "item": {
          "id": "141ed473-5825-4c53-a51a-0f73cc0305f4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3a9e4d86-aae4-4fda-b1e5-2477e96d30f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d948e600-91c7-448f-bfad-a686bc7823a8",
        "cursor": {
          "ref": "e6146932-f835-44d8-8f0e-b43d3907a620",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4052df0c-6a1b-4a05-89f9-646ea21c3a71"
        },
        "item": {
          "id": "d948e600-91c7-448f-bfad-a686bc7823a8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "065682da-554b-42cc-ba8c-6d1d5ea04825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ff8fac-a455-4b66-b112-bc6fae2f9819",
        "cursor": {
          "ref": "a22fdad0-7e6f-4135-8bca-55ffdb098a3c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9d56c637-8ba1-4c4b-a0ed-912aa4aa3553"
        },
        "item": {
          "id": "66ff8fac-a455-4b66-b112-bc6fae2f9819",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4d5b4af3-3ada-47b8-a34b-0c87dce1a877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ed0f7a-8454-422a-80a3-1eb509fdefc8",
        "cursor": {
          "ref": "10e1ea87-c1c3-489e-9ffa-8c9c9a3f21a4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7a3b78fb-569c-412c-a721-b18230936210"
        },
        "item": {
          "id": "02ed0f7a-8454-422a-80a3-1eb509fdefc8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ed0edc16-b6cf-4c97-9e62-2bcabbb3d298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac4871b-faf6-4e47-b00a-068fd5b2b4a3",
        "cursor": {
          "ref": "02d83b93-654d-41e2-ad64-35a9e30babf8",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "7556dff6-5229-44cb-9257-0fc876fd104b"
        },
        "item": {
          "id": "dac4871b-faf6-4e47-b00a-068fd5b2b4a3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "83a0a529-2052-4bdc-a72b-e0c50ed7d705",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487b19f4-73fb-4e3e-b821-a860733c07ce",
        "cursor": {
          "ref": "21dc28e1-dfb4-44cb-bb62-47659223e456",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f6dff9e6-23d3-4e87-b4e7-7b0998e49387"
        },
        "item": {
          "id": "487b19f4-73fb-4e3e-b821-a860733c07ce",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "12cb496d-2c15-4542-94f6-a5202329ae6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cfd880e4-e422-410b-b78f-1bc5b983fb29",
        "cursor": {
          "ref": "99fb6ffc-95e9-491e-a2e0-23fea261ae55",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6839eb02-30de-4431-a687-9c2abfed5757"
        },
        "item": {
          "id": "cfd880e4-e422-410b-b78f-1bc5b983fb29",
          "name": "credentials_issue"
        },
        "response": {
          "id": "721e1e6f-8e4f-4fca-bf28-d42539ce5c24",
          "status": "Created",
          "code": 201,
          "responseTime": 523,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6821343-4c7c-427d-a82d-8139707c33f9",
        "cursor": {
          "ref": "c7e6fb17-b31d-4aea-b40f-8606c7ec3163",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8e4099e3-0bb3-4eeb-9195-c952a3593446"
        },
        "item": {
          "id": "b6821343-4c7c-427d-a82d-8139707c33f9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f90b683c-882d-4529-a7a8-b1befb8c0439",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "de131fcd-f4ab-4b1d-a9cd-25963fb89b2f",
        "cursor": {
          "ref": "9837f561-e1b3-4d0f-9724-b75fee540679",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a1b1c5af-6790-45d5-b695-83e071ac12ec"
        },
        "item": {
          "id": "de131fcd-f4ab-4b1d-a9cd-25963fb89b2f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "418f660d-0311-4bc4-80b6-3883081a8058",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4ebc12-b293-4980-b0af-004193e368df",
        "cursor": {
          "ref": "d1728901-ed1d-4991-b1f7-49415277f9f7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d0d13982-dbf8-4203-8e1f-5dde91d4dc39"
        },
        "item": {
          "id": "ef4ebc12-b293-4980-b0af-004193e368df",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "33ca7a2a-7ff1-4507-986a-57269ccc341e",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb98d5b-8a41-4a53-9baa-31b7d6f82668",
        "cursor": {
          "ref": "12359df8-517a-4a9f-8f15-acdcbb251a9d",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "e40f12a0-6ffa-4022-8d74-f6217751f2bd"
        },
        "item": {
          "id": "adb98d5b-8a41-4a53-9baa-31b7d6f82668",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "323c61ca-3c9b-447d-bbde-f4f33ae7e6e2",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-22T00:37:36.535Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-22T00:37:36.535Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c196f7e0-c013-489d-9c29-5b12d7c1ca36",
        "cursor": {
          "ref": "2b6cb9e5-7906-4bc0-9d49-b25cd085cade",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c8bc36d8-2ea0-4b98-8573-7af0ee3b9292"
        },
        "item": {
          "id": "c196f7e0-c013-489d-9c29-5b12d7c1ca36",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8389c72b-b16e-4a53-b143-5d82ca4ed127",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9308df-158a-4e78-bd03-5a824535a0ff",
        "cursor": {
          "ref": "ac5d0eae-6fb8-47a5-83ab-a92df7e09622",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9c2a1a82-1ca1-4682-a89f-c505db8de334"
        },
        "item": {
          "id": "6b9308df-158a-4e78-bd03-5a824535a0ff",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d76ec1f9-d863-40c4-a20e-c806a0970b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88390ae0-9444-4b82-b839-1ddcc6e289c0",
        "cursor": {
          "ref": "cd63ba3b-9a68-447b-813c-c34971bf3199",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c5850fcd-f1f6-4483-a780-70a2786c0665"
        },
        "item": {
          "id": "88390ae0-9444-4b82-b839-1ddcc6e289c0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9bf11fff-9767-4509-a901-befd6ce9657e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fd9ed7-0dcd-4abf-8a1c-c9e8e1e2a71a",
        "cursor": {
          "ref": "0f9dc181-5601-492f-bf32-b2f8c5dadb20",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e01b3b0f-da02-4be7-b886-5864366dffe9"
        },
        "item": {
          "id": "77fd9ed7-0dcd-4abf-8a1c-c9e8e1e2a71a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c05f0583-5bb1-4762-861e-ea527ad0929e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09d43af-4b84-41a0-aa60-fbace6949777",
        "cursor": {
          "ref": "d44130fe-4864-4b66-b057-6de8412670ff",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a905ee85-408c-4e2d-b0a5-99d67f02a032"
        },
        "item": {
          "id": "b09d43af-4b84-41a0-aa60-fbace6949777",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ff04e251-a6fd-45b4-9910-0ba40b57d73e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d219cb7-e8ee-4c5a-9816-2fa082bc2c72",
        "cursor": {
          "ref": "b94ee869-f4f9-4619-a616-b5a37eaf4f97",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7dd80af2-d8fe-493d-9a5c-342adfb4cbeb"
        },
        "item": {
          "id": "0d219cb7-e8ee-4c5a-9816-2fa082bc2c72",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5ac11030-907e-48a3-9109-849ecf5a2f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cefa0453-01da-47d3-b67f-bda367835472",
        "cursor": {
          "ref": "106c9dd5-6254-4c09-984a-80c142a6715e",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "23266228-70f3-45bf-abd5-7e2d9c11adc2"
        },
        "item": {
          "id": "cefa0453-01da-47d3-b67f-bda367835472",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d734d04c-6de1-4825-b212-03bc387ae835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "579fb3b3-9e21-4ea8-9367-06e551a29f26",
        "cursor": {
          "ref": "67f17751-0781-4c94-a485-3dae5e867349",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9a282549-bb45-492e-bfc5-ff9d21efeebb"
        },
        "item": {
          "id": "579fb3b3-9e21-4ea8-9367-06e551a29f26",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fc936683-fb9b-41e5-80e3-92c3bf65aeec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c27b8c8-2438-4291-949e-2ada1df71a53",
        "cursor": {
          "ref": "7b715a7d-9630-4ef8-9b39-6c3fe1b7261c",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "acdc1cd2-8e17-4fbb-b677-9203de3b3b1f"
        },
        "item": {
          "id": "1c27b8c8-2438-4291-949e-2ada1df71a53",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "daf4b780-d110-4c6a-8643-8b38081f94a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babad42d-4957-48ac-a965-423bc2223177",
        "cursor": {
          "ref": "61f5b675-a7b3-4251-bd2f-f71c32c944d4",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d32510de-0170-4d63-8719-1cbbbb8e7ac5"
        },
        "item": {
          "id": "babad42d-4957-48ac-a965-423bc2223177",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1fd40ce0-a2af-4cdf-971b-386c6d189a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a0d7b7-3e94-456f-8272-a7b58ec08cb3",
        "cursor": {
          "ref": "cafcf2b5-1820-4583-9395-5ca518896681",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "22a6d970-5289-4689-a540-5abde8a11610"
        },
        "item": {
          "id": "82a0d7b7-3e94-456f-8272-a7b58ec08cb3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "726b4c62-f257-4c83-a198-c95d2b003351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2f0b80-556c-4599-bc82-cf282ac8fa24",
        "cursor": {
          "ref": "cb63d46f-d4e3-40cf-8c03-6578469c436e",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "edf2d34b-4d38-431c-b7c0-1df9308f4b0f"
        },
        "item": {
          "id": "fa2f0b80-556c-4599-bc82-cf282ac8fa24",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "750fa566-42a1-4e2b-bf3c-aa2bc084137f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee5f71b-d3f3-4db5-9d51-f44a9961c92b",
        "cursor": {
          "ref": "59da3010-2637-4b8b-8519-92afb9614309",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ab158448-ba8f-4283-ab90-dcae75b559d0"
        },
        "item": {
          "id": "1ee5f71b-d3f3-4db5-9d51-f44a9961c92b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "72eb0a0b-da9c-416d-868b-277c38318e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63679e65-0ad5-495a-bce2-8ca7b69d2e82",
        "cursor": {
          "ref": "32b159d9-dc50-4660-a402-da6e94d20671",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f101e355-ef95-4e7e-816a-ac79d37bed68"
        },
        "item": {
          "id": "63679e65-0ad5-495a-bce2-8ca7b69d2e82",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "f4e80327-8528-4ff4-8ec6-cf3106c22e7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adba57f-8b0a-4a6d-acfc-d49d14c496ae",
        "cursor": {
          "ref": "9fdb32f5-d235-4613-8260-f282b8071f89",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ecc79c1d-d9a3-4702-ac14-9c6c8b9db51c"
        },
        "item": {
          "id": "2adba57f-8b0a-4a6d-acfc-d49d14c496ae",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "accc88eb-ec3c-46b7-a16c-2c575e304048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d06274-92ca-4826-87c7-a61aaf12f314",
        "cursor": {
          "ref": "f12410a5-8184-4818-bbf5-fa872f8453fe",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "182b85fe-936d-4fb6-84d6-400ae46a0863"
        },
        "item": {
          "id": "57d06274-92ca-4826-87c7-a61aaf12f314",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9f859cda-24de-4dd4-bb70-396989eb6ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e8d3a0a-60bd-4995-a476-ca938f66b025",
        "cursor": {
          "ref": "f8636a44-afdb-4991-a026-24e4538b2238",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5007feaf-1261-48a6-8341-a03ca642f764"
        },
        "item": {
          "id": "3e8d3a0a-60bd-4995-a476-ca938f66b025",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bcecaaec-785a-4953-8c1c-f46dca510ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25b4e37-f00b-4697-8997-e585d9b4380e",
        "cursor": {
          "ref": "6ef99b52-db4d-40d1-8b00-8188b5004754",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5c103e7f-3748-416a-bb79-3e9aff2d5aee"
        },
        "item": {
          "id": "c25b4e37-f00b-4697-8997-e585d9b4380e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "08bee2be-22dd-4b7c-be93-6fde86d16133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885ddaa3-2d9f-4ab3-bcba-cc3105469452",
        "cursor": {
          "ref": "6d51f95b-863d-413e-9855-e44e1a75aa01",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "66acab3d-041b-495b-bc64-8376c83d13bf"
        },
        "item": {
          "id": "885ddaa3-2d9f-4ab3-bcba-cc3105469452",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fbede3aa-2789-4bfd-b5da-fddf5b5e49db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df44fec4-09df-4f36-a6a7-dc248452b658",
        "cursor": {
          "ref": "5f08b585-8ae6-4e71-b08d-7fcbaddf885d",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2785b9f2-af6e-41c9-877e-1cf4abdcf20b"
        },
        "item": {
          "id": "df44fec4-09df-4f36-a6a7-dc248452b658",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "29c3a246-c6e9-4ee5-b86e-7abe72d71de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b95892ff-a4f4-4d0c-be79-c09aa765fdcc",
        "cursor": {
          "ref": "786ab78a-ad25-4adf-af89-14dbda4127b7",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "610d45c7-f779-457b-9026-c277bb8698c4"
        },
        "item": {
          "id": "b95892ff-a4f4-4d0c-be79-c09aa765fdcc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "0eab32f5-6d44-41cc-b2ec-ca416fb88d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0abdef0-43b3-4531-a5e1-ab36b8b4cd9c",
        "cursor": {
          "ref": "06624ed8-44d5-4cb6-a7e5-710832e9d7ed",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "aa76a571-5be0-4412-a721-f8e440d691c5"
        },
        "item": {
          "id": "d0abdef0-43b3-4531-a5e1-ab36b8b4cd9c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1358d984-4ca4-4278-ae9a-aad78e010bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc6a4df-fc74-42a2-be64-a852357e64bb",
        "cursor": {
          "ref": "83ffa59f-4a25-4043-93ce-cc40aeebaad3",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "de8cddd3-b3a3-4e3c-84ee-340a277c788c"
        },
        "item": {
          "id": "4bc6a4df-fc74-42a2-be64-a852357e64bb",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f09a4f7a-8da2-48a5-a2fa-f03c0e43f352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252fb6c1-573f-4a3b-8ac2-9d020af235b9",
        "cursor": {
          "ref": "e8f9273c-79e9-4ee1-92d3-21e5cfb98303",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4e736d88-8fa3-4478-ad52-990d3ba96b35"
        },
        "item": {
          "id": "252fb6c1-573f-4a3b-8ac2-9d020af235b9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "443077a3-6b7b-4d89-a5ad-7dce22371c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d35efd5-57ab-493c-9699-c68eef02f5ba",
        "cursor": {
          "ref": "4bcc563f-d0c4-4dd2-8b2c-d0a0cc879790",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4e126b95-f250-4093-8900-0410f05f522f"
        },
        "item": {
          "id": "4d35efd5-57ab-493c-9699-c68eef02f5ba",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5ea84fa9-e3c3-43c7-ab61-eeb2ff33ef01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16f9f16-2863-4c6e-8ee5-98d872f49524",
        "cursor": {
          "ref": "33be082b-11f0-4333-a4fe-b90b527ee1e1",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b862db8e-86b8-4496-9348-6d6eb9864124"
        },
        "item": {
          "id": "a16f9f16-2863-4c6e-8ee5-98d872f49524",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f394c3be-f75f-4a06-be1d-87cf1b385da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e005693b-39af-4c10-b9c8-f396dbe12371",
        "cursor": {
          "ref": "b1be62e8-dfcf-49ca-9bff-7394c8c954fe",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1d1bd96a-d5bb-40b6-a2ab-610a885e57b2"
        },
        "item": {
          "id": "e005693b-39af-4c10-b9c8-f396dbe12371",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "120aa614-4eed-41ae-8b04-70da3d046d7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6643b864-b3b6-4781-a39d-93ef8bb8f73b",
        "cursor": {
          "ref": "6b6f01ab-bc17-4216-94ad-d043f7e17108",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4d7e4e29-8182-44c4-9a7b-e2d6e0029112"
        },
        "item": {
          "id": "6643b864-b3b6-4781-a39d-93ef8bb8f73b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "20c14301-f816-4d09-b845-e7871e4412c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc66f90-c27e-468c-bb36-0b8274523ecc",
        "cursor": {
          "ref": "68bc4588-5775-4a97-91e5-9380ea43dbe0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "fcbaee0e-506c-4365-a2f0-49f7b775c2a7"
        },
        "item": {
          "id": "8fc66f90-c27e-468c-bb36-0b8274523ecc",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "75889d67-86b4-4be2-a027-4a4412512e07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2fe6e7-76c2-44ec-b222-ed83438d57de",
        "cursor": {
          "ref": "516a7be5-2eee-4361-9cc6-5e7d9b86ed02",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e541f562-6559-497e-9c5c-301a1f8fb3d8"
        },
        "item": {
          "id": "af2fe6e7-76c2-44ec-b222-ed83438d57de",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dda2f003-e418-40ea-b995-a2f98373b773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd53008d-c126-482b-ba6e-7871d9c63fcb",
        "cursor": {
          "ref": "5b92e496-6385-4445-9b8d-b95b1ef54290",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "11b607a0-1c2d-47ea-a894-a58f357abea1"
        },
        "item": {
          "id": "bd53008d-c126-482b-ba6e-7871d9c63fcb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "90e838ff-56b8-47a4-82d6-3ae2667bc762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30041ba8-e6ce-4301-8bf5-c0dd2849193b",
        "cursor": {
          "ref": "b310d488-02f1-4553-8483-e48a8da9915c",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a42f73a5-2d0a-4f16-baa5-28a2292fdbc0"
        },
        "item": {
          "id": "30041ba8-e6ce-4301-8bf5-c0dd2849193b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "66847982-3c5f-4359-86c8-7a1a67686da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a1b076-3928-4f52-bbc5-674d05f213ad",
        "cursor": {
          "ref": "cd0011aa-562d-4a7e-96b9-3acaefa84fb7",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0b58a1f3-ae10-406d-95a5-58261b903362"
        },
        "item": {
          "id": "a8a1b076-3928-4f52-bbc5-674d05f213ad",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f9699e90-0cde-4039-8c9e-6395d78829ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ecd03b-3c02-4afa-822a-acce92f1739b",
        "cursor": {
          "ref": "fc7848b9-35b6-4853-ab6f-e397d5104b4b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "2877f6b2-1ef2-4f79-a33f-28f6e1c438b5"
        },
        "item": {
          "id": "01ecd03b-3c02-4afa-822a-acce92f1739b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7f076bd8-5b3f-488d-8437-448e1e9c92d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ef98a9-4a97-459e-80de-41692339878a",
        "cursor": {
          "ref": "62a2b149-b8f9-48ab-9329-cafe81611769",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "67c30880-8d10-40a7-b10e-4e217f083b6a"
        },
        "item": {
          "id": "92ef98a9-4a97-459e-80de-41692339878a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "15ddac68-33a1-4799-88b3-d5f6199586bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f448e42-dbb5-47d5-ada5-31154fa97162",
        "cursor": {
          "ref": "53f62b72-e2ec-4f8f-8fee-5f684b54f382",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "5e6c810e-0879-49c4-966d-efe5ea584468"
        },
        "item": {
          "id": "7f448e42-dbb5-47d5-ada5-31154fa97162",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b481c5dc-407f-461e-bf0a-afb317b7ef8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b85838-5c91-4674-90d7-425cfc546bb1",
        "cursor": {
          "ref": "c3f50d2e-7c6e-44db-9612-abbf0d5c6cd9",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "284df880-f48c-497d-a5e1-37d4cd5f27d0"
        },
        "item": {
          "id": "52b85838-5c91-4674-90d7-425cfc546bb1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "39ef2b0c-96fb-4607-8a35-99739f61fb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4d5470-a3f0-4ac1-8ada-ce35816cef48",
        "cursor": {
          "ref": "9032df88-0ac5-47ff-9ab1-dda445b480f6",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "963cd428-224b-4082-82cb-3d221b4091b3"
        },
        "item": {
          "id": "8d4d5470-a3f0-4ac1-8ada-ce35816cef48",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6f6282ee-ac0b-4269-9a81-7ab019d0d207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d998e99c-f497-4653-862b-730d68144176",
        "cursor": {
          "ref": "53ac05c5-b3db-46b9-a8af-00c059773d03",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2519b05a-e159-4b57-a856-5b65cce07b98"
        },
        "item": {
          "id": "d998e99c-f497-4653-862b-730d68144176",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d672c86d-42da-4eda-b317-a1b57afe0dd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605d0b48-3126-4294-a21a-c5c3edf2ff6c",
        "cursor": {
          "ref": "44d67412-a97a-4217-85b4-1b0be99d31c3",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "93bfb40a-f7b4-4e1b-a97e-a08c68fb5d31"
        },
        "item": {
          "id": "605d0b48-3126-4294-a21a-c5c3edf2ff6c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e9bf749d-546d-442a-acd4-32ff3a283fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11258f4f-77d6-43e5-ba81-2fada90b23d4",
        "cursor": {
          "ref": "7b5e16ab-b0db-455a-8cda-469c726d85f0",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3b652a34-d4c1-4585-8825-5d054b9277a5"
        },
        "item": {
          "id": "11258f4f-77d6-43e5-ba81-2fada90b23d4",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dbf559f8-1f1e-4f41-b95e-2472f5033e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fd81e93-eb94-4522-921d-cc66ec199f0d",
        "cursor": {
          "ref": "543946aa-a485-4f63-b646-f49aa46ad715",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "4014ab64-e770-42d1-a0de-2ad5a820d26d"
        },
        "item": {
          "id": "3fd81e93-eb94-4522-921d-cc66ec199f0d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4d59d6a8-fddb-4cdb-b868-0f6bb56443d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a34d530-9d3c-4c4b-8931-d34c92c994ed",
        "cursor": {
          "ref": "501ae612-589f-4320-bc2c-67f706ea0dda",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "80c09544-57b5-46ea-bad6-c06cccda7623"
        },
        "item": {
          "id": "5a34d530-9d3c-4c4b-8931-d34c92c994ed",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8389a005-5ae2-4c0c-b992-bd18ab4072e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f39d0a9-ccdd-4eb3-aa27-cd89bfd33474",
        "cursor": {
          "ref": "87d56ce5-65b9-4fdf-971b-7bcba77b9c14",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e9c55c12-4ba0-48bf-887a-6815a95b599c"
        },
        "item": {
          "id": "0f39d0a9-ccdd-4eb3-aa27-cd89bfd33474",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3bc68b82-e1a6-420e-90d0-a25dbac74a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0cc4efc-7682-4423-af3e-3cdd80e17038",
        "cursor": {
          "ref": "6ed3dc2c-406c-4c7d-842b-b3a49a401f94",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "09cd0129-0206-44eb-b35d-32e3c42cb1ab"
        },
        "item": {
          "id": "f0cc4efc-7682-4423-af3e-3cdd80e17038",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5128d5e3-374c-4c8d-8cd7-08c378c5877f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdd4b3d-e75d-4042-a3a7-911c29f521d3",
        "cursor": {
          "ref": "2b06db9f-dbff-4fd1-abf0-02ea237b6a9f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4182e4ac-6cc9-4762-85d9-c06bef25bcce"
        },
        "item": {
          "id": "5fdd4b3d-e75d-4042-a3a7-911c29f521d3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6ac667e2-f808-480d-b439-50e494ea4edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ec02d6-a1f1-46db-8522-af399597bb30",
        "cursor": {
          "ref": "d18bb421-d56a-49cb-a975-65f54d7402d6",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f773f979-c021-493c-a99b-489b2c01cb75"
        },
        "item": {
          "id": "05ec02d6-a1f1-46db-8522-af399597bb30",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a15fccf8-e94a-4c58-b989-18ef1a8ab43b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4c9f83-754c-4673-821e-6564d7fa8ce8",
        "cursor": {
          "ref": "eacb1f5f-9acf-4959-8366-cd330e8f8b61",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "251f647a-f421-42e0-9439-88331bcdbfaf"
        },
        "item": {
          "id": "3e4c9f83-754c-4673-821e-6564d7fa8ce8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "66f1c342-8dc3-4a52-9b5c-4b4ea1fd3112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b100d48d-a16d-49b9-8463-12a24e87b131",
        "cursor": {
          "ref": "27dcfa32-97ac-460d-9820-9a85d5af6b57",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e075ef9e-2747-45be-a45e-4366d12332db"
        },
        "item": {
          "id": "b100d48d-a16d-49b9-8463-12a24e87b131",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7a37c661-4633-4f49-92e5-17706bc1798d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ed0e15-28ae-4c66-81a5-6ac8f77657d1",
        "cursor": {
          "ref": "4f948d55-fe0c-4b40-b31a-28f72607a9d3",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9c8cab25-fa39-4f8f-8135-77aba8a6acb4"
        },
        "item": {
          "id": "a1ed0e15-28ae-4c66-81a5-6ac8f77657d1",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "12173c15-4647-42ab-b54b-1a51d620b6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fe27bbc-ba8b-4363-91ef-b22c630fdd8c",
        "cursor": {
          "ref": "284bb995-e14e-47d7-8d3c-6e301c46362a",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "16e0ecaa-f684-45b9-8cb2-778fb9787c2a"
        },
        "item": {
          "id": "9fe27bbc-ba8b-4363-91ef-b22c630fdd8c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "aec985e6-e32b-4c51-afcd-b3ecdc7f4a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed0828d-730f-4c77-984f-2b969cd422d7",
        "cursor": {
          "ref": "2b26f80d-3aef-448f-a87e-da4ee25a49c5",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e3d68f33-1814-4334-b954-6e216968923b"
        },
        "item": {
          "id": "eed0828d-730f-4c77-984f-2b969cd422d7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "fdb18948-b799-458d-ab8c-55f2de1d7584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca7ff68-19aa-48f3-809b-a5229112c77d",
        "cursor": {
          "ref": "c3691610-3b76-4ad5-ab09-433ee88feffd",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "71e1f798-5771-4193-b5d0-c9fb64189833"
        },
        "item": {
          "id": "bca7ff68-19aa-48f3-809b-a5229112c77d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d0e55b38-575c-40e0-8921-271842e23fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2288e6-ceec-46b0-b450-4c4d5c890742",
        "cursor": {
          "ref": "d1218c04-d7a1-416e-aa91-c688e3b93ebe",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a5fe0f5d-fc35-4036-9029-285d3a35f680"
        },
        "item": {
          "id": "8d2288e6-ceec-46b0-b450-4c4d5c890742",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "873e8f1d-569e-49b9-b35e-5b5f843bc4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ddfe04-471e-498f-819d-85b6e98e0400",
        "cursor": {
          "ref": "ade7ba71-25f6-4c7f-b371-fb0d4d199339",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d0262cbe-3de2-4824-a827-bbabfc43a492"
        },
        "item": {
          "id": "c1ddfe04-471e-498f-819d-85b6e98e0400",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "06a97224-a1cb-42ec-861b-c4bb298ec074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479836d4-937d-488e-bcef-11060ba2cd01",
        "cursor": {
          "ref": "03b5972f-c2fd-49c3-b332-8e9c04cc6482",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f84a56d3-5f58-4046-9078-f6ca89feb5f9"
        },
        "item": {
          "id": "479836d4-937d-488e-bcef-11060ba2cd01",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "36e0ab59-550c-4002-bfb3-39a94858fda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8d58dd-07be-4428-bf3f-f330e4be4c00",
        "cursor": {
          "ref": "774c98e4-5a07-49a5-8d2f-dc6aaa99ea37",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "03201afc-e6c2-42bc-93fb-174501b6ebe8"
        },
        "item": {
          "id": "ca8d58dd-07be-4428-bf3f-f330e4be4c00",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c2f837d3-88e8-469d-8b73-c8184393a96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09111f27-b428-4757-be34-4db9b1d91d50",
        "cursor": {
          "ref": "f906f86c-2c23-4f5a-a4e3-5d1ae8df5069",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8cb1b379-a30a-4548-8158-96188d2edfb9"
        },
        "item": {
          "id": "09111f27-b428-4757-be34-4db9b1d91d50",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "10a45c56-0d06-4381-9a1a-aaf3f320e0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b17552-4823-4bd3-8b0e-499422a88d43",
        "cursor": {
          "ref": "3af6fd88-cc5f-4fb4-9bb0-583958c70c8a",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9f16626e-b6de-4699-a0f4-10c46c0b406d"
        },
        "item": {
          "id": "21b17552-4823-4bd3-8b0e-499422a88d43",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "71565145-7926-495e-a2d2-2170c20fa880",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96986a7e-f157-4f98-8055-b1358bc32407",
        "cursor": {
          "ref": "20ceeac1-8c5a-404f-9c2b-7e1ae7f868ec",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ca50b67a-e0a2-4d30-a4bd-656b5deabc32"
        },
        "item": {
          "id": "96986a7e-f157-4f98-8055-b1358bc32407",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "713763f6-3941-4c2f-971f-a76c8d33a321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f5cdd6-247d-4d1a-8641-1a188dab3d4c",
        "cursor": {
          "ref": "c25f5203-a690-4548-abe4-9fff3047ec31",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e298f5cd-b6e7-4044-b13e-8ff90050dc39"
        },
        "item": {
          "id": "73f5cdd6-247d-4d1a-8641-1a188dab3d4c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3c45c5b5-466a-428d-b16f-940546ac6360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9bec6b-d9a0-41a7-83a5-8a3385d6d48a",
        "cursor": {
          "ref": "1d7f14f3-3db5-447a-ad94-ed87beca64cb",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "26c93764-7ad7-41b4-82ba-2a3d2496860e"
        },
        "item": {
          "id": "ea9bec6b-d9a0-41a7-83a5-8a3385d6d48a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d00f7706-4e43-4db8-ae08-556f5621b769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70800ba5-0225-4f16-ab09-81609096e65f",
        "cursor": {
          "ref": "835ced45-611a-4809-a88f-3feb41615acd",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e62015c1-cd1f-4bcc-93d5-597add262847"
        },
        "item": {
          "id": "70800ba5-0225-4f16-ab09-81609096e65f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4bff5417-017b-486b-8401-054a187de970",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f44771-18fb-4414-a7cf-15a768058104",
        "cursor": {
          "ref": "60f906d0-54e8-4301-801e-94321b0b6b00",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "33b26ced-8dc3-45a8-9f77-6ef938d5d060"
        },
        "item": {
          "id": "b1f44771-18fb-4414-a7cf-15a768058104",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f759c1ef-c2e3-4439-9fdd-adf9f219b6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f5ccfc-4a2c-41fc-b623-88e9a0ffcdcf",
        "cursor": {
          "ref": "3733f0f5-5b90-4e50-97f7-4c0b0e84e1b5",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2e5c64f3-7e3b-4aa3-bf27-e41d365d6f89"
        },
        "item": {
          "id": "62f5ccfc-4a2c-41fc-b623-88e9a0ffcdcf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "774bc8a8-7b13-4e9e-9c8d-727361f445f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89506d37-9423-45bb-a807-6330ffe3563b",
        "cursor": {
          "ref": "276917cf-92bb-4628-8295-3fd034ef06f4",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "fb729153-90c1-42cb-8c5d-0fa0953e07ee"
        },
        "item": {
          "id": "89506d37-9423-45bb-a807-6330ffe3563b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ecae5de9-2c54-44c5-bee1-519aef03eaed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a53326-7cf9-412d-a53f-dbcf1e008c73",
        "cursor": {
          "ref": "1bd37112-1f76-4b97-ba90-d5d7831d859c",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c6e8d5fd-6b19-46b3-9745-e5ab59caf526"
        },
        "item": {
          "id": "24a53326-7cf9-412d-a53f-dbcf1e008c73",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "e8e8bdaf-b3a7-4e8d-9a86-de56fec082fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbc23f4-522c-4b99-a40a-f323e596cc6c",
        "cursor": {
          "ref": "89c6952d-5a22-4e2a-a802-63dcd8701303",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fb645ee8-90eb-4b3e-804b-1d5e75bfda52"
        },
        "item": {
          "id": "7bbc23f4-522c-4b99-a40a-f323e596cc6c",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "340f87c1-77ae-42d8-a605-17c36563f224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9245f2b-3ee7-4364-8bf9-ce4a57d29993",
        "cursor": {
          "ref": "8f63c75e-857b-428d-83a6-fd5fab5171d6",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cdb4d665-53da-467b-a748-feb0e43cfcc7"
        },
        "item": {
          "id": "d9245f2b-3ee7-4364-8bf9-ce4a57d29993",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "1ee7df36-ae04-455a-b1c9-ad97e7f28522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8bb110-9d09-4fd7-9517-c89415dd0742",
        "cursor": {
          "ref": "3e3f3e3d-546d-42a1-b433-70a1f7bb15dc",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "78381496-eb77-4cea-900f-6137c18a973d"
        },
        "item": {
          "id": "ec8bb110-9d09-4fd7-9517-c89415dd0742",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "855fbaf1-9c19-4dea-8916-26a961fcf63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62083b8-3265-4faa-9d80-ad458e341f25",
        "cursor": {
          "ref": "3831f0a2-006f-4f39-828f-2548fd79937f",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9804951d-828b-4812-a4bd-0dc042d00169"
        },
        "item": {
          "id": "c62083b8-3265-4faa-9d80-ad458e341f25",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1d976a17-675c-42de-8ef4-dcb1f1c4881c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1005be-e6ed-47e1-bd06-b1b2de764c61",
        "cursor": {
          "ref": "b92ccda2-a201-458b-8174-73b8616b3705",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e4fbc8d2-b92d-468c-abe5-851a775ce3a7"
        },
        "item": {
          "id": "4e1005be-e6ed-47e1-bd06-b1b2de764c61",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ba8bd281-0dea-458c-9507-1bbbcc0b8101",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b8a2a6-93a9-4780-b260-d59ff33e8252",
        "cursor": {
          "ref": "e498a27a-8b7f-4c56-a6e2-b930664e3955",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c733f832-0cec-4523-9606-a4cafe64bfd5"
        },
        "item": {
          "id": "47b8a2a6-93a9-4780-b260-d59ff33e8252",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7a1935a6-08ad-43ae-8ff7-646ba1426e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1435d6-3fc9-4b1e-8582-7757f89e9aeb",
        "cursor": {
          "ref": "c0242e2a-17ef-4a36-9fd7-a4d73379c0ab",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d9777a24-7cc7-4154-874f-5bb9b64310c7"
        },
        "item": {
          "id": "4f1435d6-3fc9-4b1e-8582-7757f89e9aeb",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "b82a3bd8-754c-4baf-ab0d-e81a90f6eb98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a862bfd8-79ce-4b1c-888d-302f7e9ac243",
        "cursor": {
          "ref": "93b328ab-0dbc-4889-b26c-618fc4bb6fca",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a4eb528b-ec38-45d2-b559-553ae8844051"
        },
        "item": {
          "id": "a862bfd8-79ce-4b1c-888d-302f7e9ac243",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f915a04e-49bd-4302-a84d-efd6adf0d9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68b078f4-4496-4961-9422-530bd30a9570",
        "cursor": {
          "ref": "2e2269da-e693-403d-a243-8912f46bb612",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7b2298da-e96e-4cf0-a06e-7d998353fef3"
        },
        "item": {
          "id": "68b078f4-4496-4961-9422-530bd30a9570",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c4b844a6-8b16-45a6-8442-95a44d25dc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3131211-a880-4aa9-b3c0-36b6bbe51f57",
        "cursor": {
          "ref": "22d0d4a0-c5ae-485a-ac12-01353ccfe4e5",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cc0c23bc-6036-4706-bff0-283eb08966f9"
        },
        "item": {
          "id": "f3131211-a880-4aa9-b3c0-36b6bbe51f57",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b07f9ddc-07db-4e8a-86dc-01707dbdd93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3df2e0-a923-48cc-a34b-c3fb21fad6dd",
        "cursor": {
          "ref": "54dd55ae-763d-4311-bf04-038cbf8c2e53",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "334165e7-5066-41cb-8628-c43f2168cf66"
        },
        "item": {
          "id": "4c3df2e0-a923-48cc-a34b-c3fb21fad6dd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "aa670699-6dbf-41b9-952f-cc83e574d27d",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0386d067-7efe-48d6-aef3-516286a7abd5",
        "cursor": {
          "ref": "37763c5c-f990-4eed-b425-708beb9afddc",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "954d8e36-210c-44f1-8826-06d2b5b0b88e"
        },
        "item": {
          "id": "0386d067-7efe-48d6-aef3-516286a7abd5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6951c715-962b-48fb-8349-2fdcca6c43c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81621503-996c-49a7-a9f2-ec1c8e4251fb",
        "cursor": {
          "ref": "355d43f0-d354-4b8a-8d68-cc24ede9ef58",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "fd04a232-9bf1-4c99-8eb6-1696084b407f"
        },
        "item": {
          "id": "81621503-996c-49a7-a9f2-ec1c8e4251fb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "feaf71f5-a9af-475e-8299-b23f1e8f4530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca9b329-6ff7-42de-ac6f-1820b2d4c1ff",
        "cursor": {
          "ref": "28cf4866-1f00-4b05-9465-54ead04d0b47",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a32f76a2-a5b2-4315-a44a-9109f7e7f8c5"
        },
        "item": {
          "id": "7ca9b329-6ff7-42de-ac6f-1820b2d4c1ff",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "f8dc7c19-8287-4d96-9595-4f506a501439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82155bc7-e023-4c13-abb7-00cfaccc8e37",
        "cursor": {
          "ref": "ef0b3256-1b66-47e1-8cc2-b111e44540e9",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0ca6d6ba-c4fd-4a28-888c-68c119983698"
        },
        "item": {
          "id": "82155bc7-e023-4c13-abb7-00cfaccc8e37",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ed3524c1-41b1-4bb5-883f-1ad39f67b06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d03eb1-a839-489b-bad0-6e8f3377c221",
        "cursor": {
          "ref": "32386c81-db53-4f6e-8813-243853132df2",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bfb4e923-1f71-4760-a3a1-fb2de7d18574"
        },
        "item": {
          "id": "f6d03eb1-a839-489b-bad0-6e8f3377c221",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "39082783-d606-41a4-8dea-fa654caee2f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fc852b-5e3c-43b4-ad01-766daf6ab7ce",
        "cursor": {
          "ref": "7a01b7f2-1394-475a-87f7-28e3aba734fa",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c6196907-bd76-4b33-b4f3-7777025fb1de"
        },
        "item": {
          "id": "00fc852b-5e3c-43b4-ad01-766daf6ab7ce",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0e4d3ac5-950a-4a97-ad4d-5fcff1aafc62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7687c14-1bc7-4285-9b10-2b9b624ea1e6",
        "cursor": {
          "ref": "bb541b91-0406-4ac6-bb6c-e5800fa88347",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "30f2e331-a919-4649-b3d7-ac3762b13398"
        },
        "item": {
          "id": "d7687c14-1bc7-4285-9b10-2b9b624ea1e6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "030b537d-0f2d-4e81-98d0-377805cf594c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec05daa9-4b51-499f-b131-7b8c9a4b6df5",
        "cursor": {
          "ref": "40371366-f235-4d8c-9576-0a67eb9fe688",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8ea0d6bb-733a-4b53-b1ff-c8edcf42c261"
        },
        "item": {
          "id": "ec05daa9-4b51-499f-b131-7b8c9a4b6df5",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "62886714-e945-4e2d-8c72-99140a59c359",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3943929-fe55-4366-bd4b-8daad362dc4c",
        "cursor": {
          "ref": "92eac907-8c71-45dc-bf2e-65b9fad32486",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3a58bd4d-77ab-4945-b5ca-caa9a71622d2"
        },
        "item": {
          "id": "e3943929-fe55-4366-bd4b-8daad362dc4c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "65b2a8eb-fe01-4f6d-ab22-64c376a2c1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4457d29f-61e9-45e9-b5db-88fc18cb9aa2",
        "cursor": {
          "ref": "dd6d931c-cf76-4b37-ad16-6af5f6e740ec",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e0ad6f16-b5e4-440b-b729-5cb8a787da14"
        },
        "item": {
          "id": "4457d29f-61e9-45e9-b5db-88fc18cb9aa2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "264a8ffe-b8ac-4dde-955d-7b104bb46a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187abb3e-621d-4596-8ad1-51aa4f285cb3",
        "cursor": {
          "ref": "8f913d2c-0ef6-4b46-b052-f85599e40c82",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "836e84bc-a570-427f-9b62-503f27b25410"
        },
        "item": {
          "id": "187abb3e-621d-4596-8ad1-51aa4f285cb3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "28aa4283-1d0d-4fa2-978e-c34e23fda051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca1a589-0d1c-4dd5-9945-9cba0cbb6d67",
        "cursor": {
          "ref": "433ab27b-981e-431d-9f78-dc783c029176",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4081d692-f30a-49c5-9b98-886e67e642af"
        },
        "item": {
          "id": "5ca1a589-0d1c-4dd5-9945-9cba0cbb6d67",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "120cab6d-18fb-41d7-ab04-7d339bd04926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4e6a1f-d4d9-492c-a1f9-31815f51496d",
        "cursor": {
          "ref": "a2ed401e-132b-4e9a-a186-1ec2fb200405",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "50f7b133-56d1-42bb-9612-e3ade15bef8b"
        },
        "item": {
          "id": "5b4e6a1f-d4d9-492c-a1f9-31815f51496d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b23c28f6-df20-44d5-8691-3bdb26dfe69e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da83cd1e-93ab-46f2-8259-f0e57132e035",
        "cursor": {
          "ref": "3199a878-82ee-4e2d-9dec-23130fe56ad7",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0c7d75be-4533-443d-8c0a-4e92ca68f0e1"
        },
        "item": {
          "id": "da83cd1e-93ab-46f2-8259-f0e57132e035",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "0b326115-2ee0-4e60-ae46-28080ffbab85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cde68a3-2381-4450-81f5-eb61bfd80b5e",
        "cursor": {
          "ref": "953c1623-6e96-4a94-a559-82f71afae0e7",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8d6b4672-7670-4b07-928f-39543b9d3a83"
        },
        "item": {
          "id": "2cde68a3-2381-4450-81f5-eb61bfd80b5e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "21c7616c-58cb-4376-89d2-ff5c4afed931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175b65ad-732a-4ed6-a92c-39b81ce4f6df",
        "cursor": {
          "ref": "5ef7b49c-4316-4f1b-bead-7644d01e7fab",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "327c1456-cd77-48a9-bf87-8dddeebaa0a3"
        },
        "item": {
          "id": "175b65ad-732a-4ed6-a92c-39b81ce4f6df",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "28dbe633-1bc6-4edb-b067-474f37f0d557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dace766-25da-4b08-8915-dc493a001752",
        "cursor": {
          "ref": "ec470407-7bff-4cf2-9f07-a58649d47128",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ee57cb45-f6a9-4532-be0b-39ca90acf48f"
        },
        "item": {
          "id": "5dace766-25da-4b08-8915-dc493a001752",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5d0ded0f-2dfa-4a45-aea1-c046e67fdb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e8a7f5-9efd-4f4e-9ae3-33263d95dd16",
        "cursor": {
          "ref": "4f21daad-e140-4e83-b1a4-a95a8da64150",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "446c6b18-b617-4cb1-a293-a8a90eb29a8c"
        },
        "item": {
          "id": "65e8a7f5-9efd-4f4e-9ae3-33263d95dd16",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "16e9fa77-1b62-41e9-b991-63fa9719c003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392fa321-5b24-4c74-8256-a63242bd070a",
        "cursor": {
          "ref": "f5a70d17-9b0a-4472-a991-f1f6f858bb54",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c330feb6-3900-45c4-8f0b-4937355d4c31"
        },
        "item": {
          "id": "392fa321-5b24-4c74-8256-a63242bd070a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7234392b-d8c3-49c0-baf0-5c3e6a60b0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e044f6-49a0-43d9-af7a-7d664b0e95b0",
        "cursor": {
          "ref": "f3df2680-cb8f-46ec-9891-ead70de31191",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "48997df0-fc68-43fa-81a2-6359a1e979ca"
        },
        "item": {
          "id": "79e044f6-49a0-43d9-af7a-7d664b0e95b0",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cac9afeb-006a-4028-88d3-8b27267ce40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa1ce082-c46f-4650-a82e-67268957962f",
        "cursor": {
          "ref": "06bccb22-1daf-4276-8bc6-52748def6f6f",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "86afddc8-3570-404a-a405-9919edffff11"
        },
        "item": {
          "id": "fa1ce082-c46f-4650-a82e-67268957962f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f96e9afa-9e4c-4157-a4fd-ff7746bb7592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4380d0-a90f-4209-883f-d86ae6742935",
        "cursor": {
          "ref": "ef048f56-a834-4437-9703-e25e283be7e3",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7aea1107-d849-4b85-8467-aff3a003375f"
        },
        "item": {
          "id": "1a4380d0-a90f-4209-883f-d86ae6742935",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "e776ff46-ed64-48fc-88ed-141025affc66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4acfc382-eb73-470d-99eb-6e4badf8525c",
        "cursor": {
          "ref": "9f773c15-d8b7-4436-809c-082ac85d1cee",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "dd23df19-f115-4126-95b4-43abe85fc285"
        },
        "item": {
          "id": "4acfc382-eb73-470d-99eb-6e4badf8525c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e0a801bd-d3fc-4252-be81-fb9c6b31f996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb4ae25-8639-43ba-9b2e-87e8242c07b8",
        "cursor": {
          "ref": "384acaf6-1ab9-470b-b745-959c5d6dca5c",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "43be3de8-40c1-4a32-8df8-d2d003cc09de"
        },
        "item": {
          "id": "6cb4ae25-8639-43ba-9b2e-87e8242c07b8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5d3cd681-62c5-458e-97b7-7a248c03ce0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a683d96-388d-496d-abe9-d62c10d4c606",
        "cursor": {
          "ref": "0085f4e1-cb09-488d-9a0e-3d2929df3575",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7b043f53-3f5e-4e03-be64-fc3ad06fb5d2"
        },
        "item": {
          "id": "4a683d96-388d-496d-abe9-d62c10d4c606",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5b781cf9-bd51-4a2e-9d61-43cd45c4b8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e8be3d-8d6d-4bb1-befe-7b021363ebb4",
        "cursor": {
          "ref": "933740e3-8563-46ba-84d5-cc890cf78895",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b085e9f3-f8bb-4e4e-b30f-011d3b1f6d99"
        },
        "item": {
          "id": "d0e8be3d-8d6d-4bb1-befe-7b021363ebb4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "81f88327-30e0-4827-b759-b79878f2330f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba287a2c-505d-4b5b-9e0f-935484f3bfd2",
        "cursor": {
          "ref": "626efca6-8b13-4f1a-a9e8-aa762a4ec18e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "539c2448-3396-4aa2-9b50-711cf15bb4f0"
        },
        "item": {
          "id": "ba287a2c-505d-4b5b-9e0f-935484f3bfd2",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d2ef89f6-71d4-4927-bbcc-db695924b3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25378ce-fffd-480e-a750-e9e221a4ebcc",
        "cursor": {
          "ref": "86e41981-dc43-44e8-9a57-0d4a00540521",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c1ccf885-adb7-4bd4-a9c8-f1313f55584d"
        },
        "item": {
          "id": "e25378ce-fffd-480e-a750-e9e221a4ebcc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f1ff9748-277d-4530-8aed-6cff26df0c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3b57a94-7e9a-4b09-8581-bdf72630312a",
        "cursor": {
          "ref": "400e981d-68ef-4205-9b4a-227dcda5c6f5",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "509d0a84-0172-43d2-90d8-a7cb8a80106a"
        },
        "item": {
          "id": "b3b57a94-7e9a-4b09-8581-bdf72630312a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5f2677fb-9a03-405b-b8dd-d8d955801b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859aa7a6-d193-4be3-9af2-684ca6d87b1d",
        "cursor": {
          "ref": "dd5fa397-9704-479a-ae09-8d2d0beb2094",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5a3e34e2-2ebb-48d9-a6d4-f656b9ea544a"
        },
        "item": {
          "id": "859aa7a6-d193-4be3-9af2-684ca6d87b1d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7929ca14-bdd3-47bb-a2b5-a2c9161e49dc",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7138e78a-4e6c-4189-887d-f94842f7c029",
        "cursor": {
          "ref": "5eb5404b-f4ca-458e-945d-c5bf2627df71",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2919aeb1-c877-4826-baa0-b3020d5a1a00"
        },
        "item": {
          "id": "7138e78a-4e6c-4189-887d-f94842f7c029",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7a687ba7-c32f-4669-952f-bbd97c3e765a",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "7c55aa83-925c-40b6-8ae1-df62996772e0",
        "cursor": {
          "ref": "cb2cb587-ed30-4618-ab6f-db1f3bb99296",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4f072415-2431-40ea-9d9d-c1aebcc78b3d"
        },
        "item": {
          "id": "7c55aa83-925c-40b6-8ae1-df62996772e0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "795090c2-dab0-4c1a-9234-cca39a9df231",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "d63f9a0a-7a78-4278-b97c-6ad119d9c0ea",
        "cursor": {
          "ref": "dbcf35f5-0bd5-449e-84da-53ee047671c1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "569efec8-6fdd-4225-89c6-51512153cc12"
        },
        "item": {
          "id": "d63f9a0a-7a78-4278-b97c-6ad119d9c0ea",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e859c6c8-2d77-4014-82b9-c843feb2dc9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3d4436-90c5-4190-bd48-b24fd88793b5",
        "cursor": {
          "ref": "2bf6cfeb-cd45-4423-9730-e3138dc8a708",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3ed1cf33-0352-4a2b-9010-f0ce60a966dd"
        },
        "item": {
          "id": "0c3d4436-90c5-4190-bd48-b24fd88793b5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "3e386163-855a-4ce6-b340-8f2afd36610e",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ec0ddff2-ff0a-4368-b527-f07563dbce73",
        "cursor": {
          "ref": "3a3c0d6d-0e8e-4ca0-9b54-a023abaf7a34",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1651f95e-3e4a-47a5-b296-fd3848bd439a"
        },
        "item": {
          "id": "ec0ddff2-ff0a-4368-b527-f07563dbce73",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e1a283f8-d7b6-4a44-a268-6534ce9fa8c2",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "49f867a8-3637-4668-b3c0-5a70c2b8d661",
        "cursor": {
          "ref": "57d4fd52-66bd-4912-9ff8-2ba84c1d9bf6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "629c36a0-aea7-40fb-baef-29f7096b1c85"
        },
        "item": {
          "id": "49f867a8-3637-4668-b3c0-5a70c2b8d661",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "628b633f-d192-4067-9a37-af914a7a5db7",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "312c394b-3736-4c89-90b3-8b15d3dc0697",
        "cursor": {
          "ref": "25f16076-97d0-475d-8db3-afadad3e18f6",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0097ca5c-3b00-4bc3-a1cf-96e46a82447f"
        },
        "item": {
          "id": "312c394b-3736-4c89-90b3-8b15d3dc0697",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bf46715c-1ae9-4717-b732-e3a702e5ad36",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0da37f91-d5c2-4f88-9f30-825be9317f4f",
        "cursor": {
          "ref": "e2f6e36a-af35-4971-9a35-d2f408f4cc38",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f636b103-c05f-4a76-9461-c8bafdf42aae"
        },
        "item": {
          "id": "0da37f91-d5c2-4f88-9f30-825be9317f4f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c6f17099-676a-457d-822a-c909e17c3fef",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "bbab454c-3f75-4e3d-961d-40bc151412c7",
        "cursor": {
          "ref": "1d622955-9718-45aa-8742-5d0a62526d65",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a8d987d7-448a-41ae-be19-f3e4c437fbc6"
        },
        "item": {
          "id": "bbab454c-3f75-4e3d-961d-40bc151412c7",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e8246aac-9531-400e-9c73-0e1e4a19f8aa",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2ac02204-87e9-4602-a9d7-513fad571329",
        "cursor": {
          "ref": "fd028a14-ea13-4be3-a15a-c96d2bfd12a6",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ee731a5a-4c0b-483b-9369-832e4d68f746"
        },
        "item": {
          "id": "2ac02204-87e9-4602-a9d7-513fad571329",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "feb39bf0-cbc8-46bc-90a9-909f2d6e9525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f45d49-d092-4839-ad29-e2e3920c1236",
        "cursor": {
          "ref": "1b79abf7-8486-461c-bc3e-bd25c68d6023",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "952f0fb2-0c6a-4016-b776-c4034d273441"
        },
        "item": {
          "id": "d5f45d49-d092-4839-ad29-e2e3920c1236",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0e7598b3-7d03-4a68-9f26-5401eb1f1547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08312257-9c69-4a63-bc53-6dee59e3f383",
        "cursor": {
          "ref": "d924eeb0-8394-4da7-adad-d55b86e67d3a",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4a7640c7-1841-40da-bf08-c886ccf5bae1"
        },
        "item": {
          "id": "08312257-9c69-4a63-bc53-6dee59e3f383",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a437f333-faa8-4c14-91a2-1a8015b16606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff8492c-a4e6-4cc7-84a7-b8790c7f36ee",
        "cursor": {
          "ref": "3497c117-8c03-4831-873b-dbd0ad9731b3",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "abaef62e-9a41-40df-837b-c854301efe76"
        },
        "item": {
          "id": "cff8492c-a4e6-4cc7-84a7-b8790c7f36ee",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c0c4271b-3a0f-42a5-ae1f-6d432a9375e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea80863-18d9-48da-986d-6f39bd497fcc",
        "cursor": {
          "ref": "5d780ebb-d86f-4172-85f7-f254dfd7b47b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b47193ba-58c8-4030-a892-616afb8d2f2c"
        },
        "item": {
          "id": "0ea80863-18d9-48da-986d-6f39bd497fcc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "949421dd-4fb4-46bd-a65f-c8af929e713f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20a0d35-021b-4d82-a20f-6fe06e771104",
        "cursor": {
          "ref": "53667b69-3bf3-4311-af64-e4648eda1800",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "05133472-41f0-4d37-a011-4a498b3f0d51"
        },
        "item": {
          "id": "d20a0d35-021b-4d82-a20f-6fe06e771104",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "80bb7f91-3f38-404f-8e28-607ea328ea80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92676059-cdcf-4d8f-a463-1a54dc7da81d",
        "cursor": {
          "ref": "b95ee653-9478-467a-9a91-c28e8df27378",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6267dfb2-7967-4860-8b57-ea453544cf93"
        },
        "item": {
          "id": "92676059-cdcf-4d8f-a463-1a54dc7da81d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "7203d056-9436-4e66-86b1-abf0fad2d4f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d5a9f1-de7e-44c1-831c-1d00a58d3f41",
        "cursor": {
          "ref": "7ce5df8e-bfa5-4302-b451-0d629d019ab7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "bd0b5a38-0505-4f7a-8ea6-93f6a6bc57c3"
        },
        "item": {
          "id": "07d5a9f1-de7e-44c1-831c-1d00a58d3f41",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "918e8e04-180a-40b9-951a-5433c5d516fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79a5584-3213-4083-9d38-399984a3b31d",
        "cursor": {
          "ref": "d8d38816-bad8-4b7e-be98-20d29f48f015",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9f11f496-3ad8-4ad3-848f-8fe8d9ad4abf"
        },
        "item": {
          "id": "a79a5584-3213-4083-9d38-399984a3b31d",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b630f493-2d40-416a-bfdb-0c43a93e6684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3ef86f-f953-48e5-9e79-6515d53fe911",
        "cursor": {
          "ref": "1e325b35-0606-4e77-8c72-cc3aa62afe00",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d935ce32-b4c5-4bc1-9689-d5b61e4c064d"
        },
        "item": {
          "id": "be3ef86f-f953-48e5-9e79-6515d53fe911",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "ff648e4b-69ef-4c4d-b96a-d7b399efbb47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b9f0b5-da85-47d0-81d3-453f02a71c24",
        "cursor": {
          "ref": "4f0a2cf1-24e7-4ce7-bd9d-5ce54005ac7c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b81d66c9-cc90-43cf-a99e-66b268ac43ae"
        },
        "item": {
          "id": "a3b9f0b5-da85-47d0-81d3-453f02a71c24",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2a56f1a0-38f9-4675-92e0-292c7e41609b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38424863-7ea3-4c3c-85b2-e88e088068e9",
        "cursor": {
          "ref": "687ed604-e5ce-4e66-9314-3ef7d24c9761",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b15e7c92-5cb1-488e-8f43-24efa195fb31"
        },
        "item": {
          "id": "38424863-7ea3-4c3c-85b2-e88e088068e9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "ec82dfd2-6013-4dd3-99e8-6dd69bd1b476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44cb3e68-6144-43f3-a2a6-4439dd5eed25",
        "cursor": {
          "ref": "e540754a-e163-4193-b5e8-d201caddafb9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f7f1590a-1657-4cb5-9275-9ae9f85bb42b"
        },
        "item": {
          "id": "44cb3e68-6144-43f3-a2a6-4439dd5eed25",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0b94f88d-f99e-450c-b4b1-a1a1a7ee1d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b2ffac-56fa-4dfb-9b79-f18a409d4144",
        "cursor": {
          "ref": "ba6d5c86-fa53-491a-8ebc-99b5c943feda",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8cca9775-f87f-43d8-82d2-93028c211041"
        },
        "item": {
          "id": "e7b2ffac-56fa-4dfb-9b79-f18a409d4144",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c970aacd-0578-442d-913c-f68425d6aba0",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7c3a3474-f823-47a8-8747-7cf1986014a1",
        "cursor": {
          "ref": "3d1fa529-3025-413a-bc80-6832e7aaa483",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "5dea246e-268a-4136-afaf-def782e6e905"
        },
        "item": {
          "id": "7c3a3474-f823-47a8-8747-7cf1986014a1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3b644957-f0d1-448c-898a-aa8dbcc40746",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "3cca0932-e342-4ae0-b840-c748e98802d3",
        "cursor": {
          "ref": "c240866c-767e-48be-8109-5688cb836edc",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cc3114ae-315e-44cd-8539-86dfc77b8c9f"
        },
        "item": {
          "id": "3cca0932-e342-4ae0-b840-c748e98802d3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "295aa2a2-b4e9-4a59-be97-1d128c137488",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d7efc769-d3fb-46c2-adad-28080cdf7b0e",
        "cursor": {
          "ref": "5eab2fb7-67bc-44a0-bd30-d98a53e734eb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bd1769fd-8103-468d-802f-c50317696684"
        },
        "item": {
          "id": "d7efc769-d3fb-46c2-adad-28080cdf7b0e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "137c0caa-4021-4c40-a115-085da6569702",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d90866a3-5819-4517-8865-6d7bf668c967",
        "cursor": {
          "ref": "665a4431-ea93-4b64-9265-dac868c024cc",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "05e330f4-2518-4588-a4a6-ebc2e0086797"
        },
        "item": {
          "id": "d90866a3-5819-4517-8865-6d7bf668c967",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bf41cd49-b983-43ce-8529-faa647845e6a",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "2b0efa6a-8d84-42cb-a6bb-b1af6ec6f671",
        "cursor": {
          "ref": "f4d9ffc1-d1c6-4f3c-b814-709e8f00ad2e",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "383510f3-601f-4468-afa1-78ae4f662e1f"
        },
        "item": {
          "id": "2b0efa6a-8d84-42cb-a6bb-b1af6ec6f671",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "08c00504-4586-472b-af1e-d2c3a5e0c61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "720c04a2-5eb1-4780-91e2-f89d3586ddff",
        "cursor": {
          "ref": "9df4386e-e16b-4fc7-adbd-0ccfd8c43d72",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e6bbcc88-f095-4a3c-b258-3200a715d795"
        },
        "item": {
          "id": "720c04a2-5eb1-4780-91e2-f89d3586ddff",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "614804d0-948a-4889-9ef8-bfb21b41e1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd517999-3943-4318-82f3-5ee0676fc02a",
        "cursor": {
          "ref": "0361f63f-fe9c-49c8-b724-840c9890e71b",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6db2d243-1be4-418d-b067-f1a922c17437"
        },
        "item": {
          "id": "fd517999-3943-4318-82f3-5ee0676fc02a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "389ce2a3-5592-4832-af0b-c7edfb89501c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3fa738-e40d-4fdb-92a0-86a68c3d0632",
        "cursor": {
          "ref": "9ebae14d-e740-4754-9d8f-95f2969e5a62",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ea37e2c4-532c-4258-9127-61433c010ef9"
        },
        "item": {
          "id": "fc3fa738-e40d-4fdb-92a0-86a68c3d0632",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "727dc107-77b1-4f3b-afa0-429001ecf969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8672e683-5601-4251-bfbf-851bb97921d8",
        "cursor": {
          "ref": "9808f8dc-a596-4639-a7f6-7a36dd3c47d7",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "2d33e878-0c6b-42ab-819f-c62d906610b1"
        },
        "item": {
          "id": "8672e683-5601-4251-bfbf-851bb97921d8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "17b2cb1b-ad3d-435e-9670-182957b3be3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d7df5e-508e-4179-aec8-b1eb4ac33636",
        "cursor": {
          "ref": "ea0f6967-3970-47f2-8edf-be95d155f386",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "1eb7c9b6-f705-4bcd-8882-7698b135fc3c"
        },
        "item": {
          "id": "30d7df5e-508e-4179-aec8-b1eb4ac33636",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9a7348f3-35a4-461c-a48b-5df22a7a1e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "979bfd96-ad0d-46b9-b0e6-83e398b69db0",
        "cursor": {
          "ref": "d2309986-b325-472a-81b9-ae1f31303b5e",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "89585934-aa48-44bb-8dee-5a35d6d792b3"
        },
        "item": {
          "id": "979bfd96-ad0d-46b9-b0e6-83e398b69db0",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "843c6323-5c59-4dc4-81a6-439cfb3256e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83676661-a89e-46c9-9024-5b8d57a27a2d",
        "cursor": {
          "ref": "3e688a95-fed7-4ab3-ac25-8389ed6e9cd4",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "01ac980a-36fc-4673-9a77-916d70495a30"
        },
        "item": {
          "id": "83676661-a89e-46c9-9024-5b8d57a27a2d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "81292c67-a10c-4869-b94b-234aee4a56d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0d0afe-6e85-45e5-b7c5-c1f3c681f96b",
        "cursor": {
          "ref": "df85e163-2691-4f1c-b5ce-b408066f6602",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5ad36c65-d1af-49cd-8f29-4468ac938e70"
        },
        "item": {
          "id": "de0d0afe-6e85-45e5-b7c5-c1f3c681f96b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "f724c788-610d-470b-a37a-c7fe4d364b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e326e7eb-d18c-490c-a4c6-a59fb576b223",
        "cursor": {
          "ref": "06b869c2-8620-494c-87dc-7c4b2358f408",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e463aa66-1571-415a-aeda-8dc7712230e4"
        },
        "item": {
          "id": "e326e7eb-d18c-490c-a4c6-a59fb576b223",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "26314299-edb2-4123-8cb0-8ec11bdcbefe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f0149ae-21bb-4f5b-bbd1-589a42e51181",
        "cursor": {
          "ref": "2c60b399-b400-4c0e-b02b-a454af2761e1",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "9ddc749b-2c2a-41ad-87f1-9f2dca0e6e22"
        },
        "item": {
          "id": "7f0149ae-21bb-4f5b-bbd1-589a42e51181",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e76581f7-db1b-4a41-a10d-8df870541ee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801ad8b7-477c-4273-b62c-63ca7e4b6d3f",
        "cursor": {
          "ref": "36d3c17a-9a4e-42c5-b993-5dc03b63c755",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d825cb7e-9355-46b6-b7e7-223f95c32c80"
        },
        "item": {
          "id": "801ad8b7-477c-4273-b62c-63ca7e4b6d3f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e043b940-6959-476c-ac2a-d5a3c5ea4faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305d9cd7-9f2e-41f4-a3dc-61960f1874fd",
        "cursor": {
          "ref": "07ba3576-9882-4f2e-b3d1-735ffb4cec9e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "17b92bc5-4a10-4914-a791-fcb1dfd9c26d"
        },
        "item": {
          "id": "305d9cd7-9f2e-41f4-a3dc-61960f1874fd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "fb7a57e1-3dfe-4880-80c5-ff37935e04c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee40599-c28d-4b06-b1ee-c2b4f642bff8",
        "cursor": {
          "ref": "6a6ecb1e-e8ca-48e4-a16f-8f302de1e011",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8ddbceff-dab4-4a07-800d-de1d25cf4e97"
        },
        "item": {
          "id": "1ee40599-c28d-4b06-b1ee-c2b4f642bff8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "008a55e8-14b4-4f1e-b803-b2d57f3f6b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80aa29d-01ea-48ca-9a21-06365179938f",
        "cursor": {
          "ref": "9b11be33-f0c0-41be-bee9-ad9eddf3239d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "51371d44-577e-4ad2-b76c-2c1db759a926"
        },
        "item": {
          "id": "e80aa29d-01ea-48ca-9a21-06365179938f",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5531ccfb-77c6-4359-b98e-7e11806dcb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c75e44-852c-4175-949c-677b2b292533",
        "cursor": {
          "ref": "efc7680e-84a6-4e79-b09c-2e9b4413f2e7",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "394ff5b6-777b-4fb2-9b40-8115906dc02e"
        },
        "item": {
          "id": "10c75e44-852c-4175-949c-677b2b292533",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b674c0e9-6079-447b-b3b7-1aac28b0d47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84ea1bab-418f-4131-8129-52a6b8ccf668",
        "cursor": {
          "ref": "fe9b1b82-3932-4194-8665-635e133a69e1",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "21e4fc2f-2272-490b-838b-a930cee2b8ba"
        },
        "item": {
          "id": "84ea1bab-418f-4131-8129-52a6b8ccf668",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7ac13b19-7b37-4883-8e6c-188054c06da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7e4831-ef89-4fdf-a1e1-bacc8ac1a2f9",
        "cursor": {
          "ref": "b8984b5d-6be2-426a-9554-cc8df5e854ac",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "26ebe0c1-aa9b-420d-b8fa-b3c017c064bf"
        },
        "item": {
          "id": "4a7e4831-ef89-4fdf-a1e1-bacc8ac1a2f9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "16d8d216-9126-4bcf-aef8-3d74a477843a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108854f7-37ba-4456-b85e-fcad757a2463",
        "cursor": {
          "ref": "74bf9ebc-8786-4d42-9701-0ff1e183da93",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "253c3e74-0ec0-43cf-adf2-4c4375b07000"
        },
        "item": {
          "id": "108854f7-37ba-4456-b85e-fcad757a2463",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2cf42cfb-9df4-497e-8a70-33855e61a234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb24ecf-4149-4744-bd3e-8470c08d2007",
        "cursor": {
          "ref": "598d79a4-d6f8-4d5e-b0b4-57ec1e87d46f",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "2393e948-5019-4e21-9c97-b89f9fb1eba9"
        },
        "item": {
          "id": "ccb24ecf-4149-4744-bd3e-8470c08d2007",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "88ddc2f9-c0a0-4e25-a350-34fe254a4583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7605bbc2-ef85-4702-862a-bea74a6748c7",
        "cursor": {
          "ref": "1e04ff6d-dfc6-48cb-bc07-49098cee4af6",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c605e43f-9c43-4376-9c1c-7e9a21d48ed1"
        },
        "item": {
          "id": "7605bbc2-ef85-4702-862a-bea74a6748c7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "76015e0b-bcb7-4324-9cb1-72bd5928ed96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23dc76b4-1064-4fe5-8d02-0bda59cb45d2",
        "cursor": {
          "ref": "0b4353ab-de99-41e0-a8bb-0766e0aca038",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "740b2f44-0dab-4afb-86cb-6828af7e17ca"
        },
        "item": {
          "id": "23dc76b4-1064-4fe5-8d02-0bda59cb45d2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a467794b-28c7-4674-96f8-a91291d40edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "450400bd-f8bb-4797-9f91-f12516c87b38",
        "cursor": {
          "ref": "e18f1dd8-0786-41fb-9385-380698eb3797",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "d1cff8fe-129c-4433-b5a1-27a29b07c81d"
        },
        "item": {
          "id": "450400bd-f8bb-4797-9f91-f12516c87b38",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9859e074-61ea-419c-b5e3-da3276578354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4346488-9574-48a0-843e-6aa9fa677a3b",
        "cursor": {
          "ref": "5544e419-d538-4f02-82b3-0f11f5d1cc1f",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "20147da5-0748-4c8a-8671-f852b763d841"
        },
        "item": {
          "id": "d4346488-9574-48a0-843e-6aa9fa677a3b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "99fe335f-c171-4003-96a8-5be4ab17bdaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9fc8df-b76f-4671-933e-90534fa1c4e2",
        "cursor": {
          "ref": "1043487e-daaf-46e3-9e5e-3f26c6ed6f1b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "390830d9-8994-40a7-b8a7-32fd15b15041"
        },
        "item": {
          "id": "fa9fc8df-b76f-4671-933e-90534fa1c4e2",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a1701a05-9f66-40f3-aa84-bdaca5f916eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ba862b-38a2-47dc-bcbf-51c672bc27fe",
        "cursor": {
          "ref": "4d0b330d-c650-4874-b7d9-cfea280d0b3b",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "0a24d321-6fcc-4d6c-8898-f6db0578aef4"
        },
        "item": {
          "id": "52ba862b-38a2-47dc-bcbf-51c672bc27fe",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0b1cdd22-5558-425e-af78-6913a423cf98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c70bd84-eb80-4225-8aa5-80b8c9c85f47",
        "cursor": {
          "ref": "6b81f375-552b-4083-92ff-2798116e06e6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c4e9c033-aee6-4c10-8865-2798479f741d"
        },
        "item": {
          "id": "4c70bd84-eb80-4225-8aa5-80b8c9c85f47",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "091dcbff-ed8c-4e3c-b785-d71de2676387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb7842c-d812-4813-86f8-b0e9b602ad65",
        "cursor": {
          "ref": "be696aec-d5db-4c37-be23-d28835c0ef21",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "52155ce5-3da0-4d1c-97ec-51a0b5792023"
        },
        "item": {
          "id": "9bb7842c-d812-4813-86f8-b0e9b602ad65",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "93d8b030-8bed-428a-b99d-ef6309cd5b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274eefdd-4d61-4b71-b383-126a999a0074",
        "cursor": {
          "ref": "2bebae62-efa9-4593-84df-a8f80a11534b",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "17c48724-572d-480e-a0f3-03e0eb8e7815"
        },
        "item": {
          "id": "274eefdd-4d61-4b71-b383-126a999a0074",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8c22708b-ed32-4159-a8c4-5a06ca404aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb930ba6-ce80-4173-b4a9-4ae807daacf0",
        "cursor": {
          "ref": "798f17eb-37cf-4b99-b3b5-784715e0e9b2",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "d1f95568-90af-489a-b61a-033d65d5004c"
        },
        "item": {
          "id": "bb930ba6-ce80-4173-b4a9-4ae807daacf0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "33183032-4a14-4ecd-ae32-a6d927880b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c15c00-0d67-4fcb-badc-edc5a1a2ee47",
        "cursor": {
          "ref": "991e0ae3-d115-4621-b17a-95fe528bcddc",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "40cd145a-43a9-421f-a1dc-42226b3ccab6"
        },
        "item": {
          "id": "66c15c00-0d67-4fcb-badc-edc5a1a2ee47",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8c9389c4-a08b-4823-a390-0505f38326cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a74f1fe-b9f7-4cc8-9aa2-0d60699984b4",
        "cursor": {
          "ref": "9611fb06-6f7d-4afe-a048-16911c608d70",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "cf24fb1c-3e1b-422a-8a9d-f3d82e6651d1"
        },
        "item": {
          "id": "0a74f1fe-b9f7-4cc8-9aa2-0d60699984b4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c36984d7-70c2-48ea-ae64-75c6e8d77084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053d2bc9-b0fb-43f0-b673-485aaa4d1572",
        "cursor": {
          "ref": "d41b0697-799e-4007-9812-aaf085b9ff43",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0e4b91a8-a793-4969-bf8c-152abd8d8075"
        },
        "item": {
          "id": "053d2bc9-b0fb-43f0-b673-485aaa4d1572",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "eec55d0c-e2d2-4b54-ad78-72d8de5df7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce21e15-9d2c-4574-ba73-c6c55fc13bd7",
        "cursor": {
          "ref": "95de345e-ef1d-4c5a-9ca6-18123789114e",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ac5f75b9-1c9a-448f-bcbf-5eaec122cd14"
        },
        "item": {
          "id": "cce21e15-9d2c-4574-ba73-c6c55fc13bd7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "17f97a5c-d248-4772-97f1-d670fe211926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f79b9a0-f700-492b-949b-49915a543856",
        "cursor": {
          "ref": "55ec417f-c7b3-4032-8f36-c8a2d6aa91ef",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4adf5bac-3d26-4be4-a21b-11a258df0bc6"
        },
        "item": {
          "id": "0f79b9a0-f700-492b-949b-49915a543856",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "fb4bda7f-66d1-48c6-a331-065a62a73e7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "830bd06f-5f4f-4c31-8e81-08a6eb563041",
        "cursor": {
          "ref": "4521417c-93e6-4f7a-962e-ef1aa7ec1a71",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "639a7914-5a30-4c34-8817-3561612844c8"
        },
        "item": {
          "id": "830bd06f-5f4f-4c31-8e81-08a6eb563041",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "646f8dcd-3924-47c1-a0be-0fa161e6d4dc",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a92bbaba-04e3-445d-8bd9-1e1f09506c61",
        "cursor": {
          "ref": "3c9d2777-c449-47f1-b7ad-6c5734403bdb",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b24d56d9-16d0-4029-b522-15513708eb4b"
        },
        "item": {
          "id": "a92bbaba-04e3-445d-8bd9-1e1f09506c61",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b04554cf-5155-4445-9170-37430810b939",
          "status": "OK",
          "code": 200,
          "responseTime": 333,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fead9def-6d96-4b75-80eb-257458011e01",
        "cursor": {
          "ref": "03b2d5ed-8510-4e2f-9a62-bd14070acb5e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a3b35521-7656-4935-8dbc-ba673d61f142"
        },
        "item": {
          "id": "fead9def-6d96-4b75-80eb-257458011e01",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "938bba43-a120-4c46-a83d-b8decb944761",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b141a3-ee40-43ef-863c-466e2e5725be",
        "cursor": {
          "ref": "e90ee590-8dd9-421e-96a3-5fd746014b6e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3d1959a8-24f6-4e3a-9c62-3e5a75f99df1"
        },
        "item": {
          "id": "66b141a3-ee40-43ef-863c-466e2e5725be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0af9ee9f-29b7-4f7f-a3e5-aa1ee1ed3868",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b141a3-ee40-43ef-863c-466e2e5725be",
        "cursor": {
          "ref": "e90ee590-8dd9-421e-96a3-5fd746014b6e",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3d1959a8-24f6-4e3a-9c62-3e5a75f99df1"
        },
        "item": {
          "id": "66b141a3-ee40-43ef-863c-466e2e5725be",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0af9ee9f-29b7-4f7f-a3e5-aa1ee1ed3868",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72afc612-f788-419d-89c8-d6ca02596b2d",
        "cursor": {
          "ref": "426dc66a-9fb8-45ba-a924-04989b6c4290",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "75d3dd42-0188-4caa-a167-03a0cf8d5a28"
        },
        "item": {
          "id": "72afc612-f788-419d-89c8-d6ca02596b2d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "acea069c-d792-4b04-9a9e-f0a60c306d86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321bc30a-1797-4bc1-b9f5-be78d610685d",
        "cursor": {
          "ref": "0f9818eb-a198-422e-8d83-51f61f733dd8",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "63edc9eb-453c-4a2f-bbec-37a59e95fb19"
        },
        "item": {
          "id": "321bc30a-1797-4bc1-b9f5-be78d610685d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "021530e2-ea7f-4ef6-9398-ed0cc34acfbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}