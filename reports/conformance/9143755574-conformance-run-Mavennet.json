{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "d31fbb7e-e450-4edd-9af2-f7abe89d5017",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e221bc8e-f522-4a58-9248-a73054a768e3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c53a97ff-854c-4d93-8dc8-10404684c970",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7604cf33-8d94-49d5-ad8e-45a4bb7edde8"
                }
              }
            ]
          },
          {
            "id": "6fc3d39a-f4f4-47b8-b5b7-bd02de4db7f0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "76c6f903-4b53-4704-b240-0b17c8edc0e5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9e5f008b-947b-4112-a7f4-391b42d754f7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "691aff14-4334-4546-ac35-abd9ec6d29e0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "21b9be75-9340-4bc0-846c-2f4999cb3306",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4d2fcd5a-2cab-4df4-8506-b95f95bc2e04",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8557e7d8-57be-45f1-bde1-e5298b17ae58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb643ebc-b97e-4509-ad78-69a167fb8bad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e1e91aa1-ac76-4ff8-a577-7cc288126026",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a4898687-f985-4d9d-835d-056db2433c27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "20daabc1-3292-4c56-959c-b6f5049620c4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31462a4f-a908-46a1-9541-fb70d2c20923"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "20133b45-ec23-4765-a534-ae2ac165b616",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4998479f-5e7c-4a58-86ca-7f90dbfb4fdc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d35d690b-01a7-49c2-aaac-acf52b410899",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51feeddd-83fc-4ac4-a05e-881a95593bba"
            }
          }
        ]
      },
      {
        "id": "5645036b-6359-4b10-b390-7dc157291eab",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a099f439-0ed5-443c-a81c-a4e46885e73c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72a0e03e-7fd6-4943-b8a5-6101148c1dbc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "326e1623-63f5-4132-bd7a-811b5c37a956",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98486a69-2f12-46a2-a913-25ec7e988e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4d1ee2b6-ade5-496d-9019-4a77086c75da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2c1096-7a4f-420c-ae3a-182e7523e6b8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8462b7-2ca3-45d8-8d6d-fe280ef804d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0dbd3c2-e204-4f18-853c-e11d4e0b0b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f063b85d-a9d1-47ea-8749-906b40ff21ea",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbc5e34-6d55-4fe2-8f7b-aeb3d2468be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6975ef28-332d-4d79-bdf3-05718cbbe956"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2d9bde3f-8cd7-47e1-8f1d-0fd23e19f918",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9045b281-cfdc-43fe-b5c5-905d3e1a6e59",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82597d2-6043-4ac0-889b-c74b19b802cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8b2e86c-880c-43cc-8b56-f018e8df055c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68dbd960-4c76-487b-9eb9-fbf916fdc575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29afdb22-6529-4271-8716-2a8500554601"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4f9aebde-6833-4e7f-9248-b2f1dfcdbddd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1317633-1fed-4085-960d-cccce72aa7c2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1e6e1be-ab4c-49b4-aa9a-485515b51c67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4403a13f-0d8a-46dc-9bf5-47118d8820d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8769b5f-83c4-49cd-b11a-e6dc4e507315",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5dcec16a-2339-49a8-8b23-a5575986e56e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d487dc1-0203-48b1-ad52-c47dd95756a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "07163ffa-db0d-4418-88a1-d232882fe4b7"
            }
          }
        ]
      },
      {
        "id": "1710e70c-5299-41ac-824b-1690031416a8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "33d48a27-d7f8-4b57-898a-268721edba49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "633144e6-2afc-49e4-87c8-911054544a53",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4ed86404-48ea-4907-9f09-fc20f34b00fe",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec22781-ff34-49c5-b60f-c20d65bbc29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528ffccc-4dea-4de3-9f77-2652ba12029b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "906e5af8-2876-4101-ab1e-7bb60ae5ad08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1aebc1aa-f22d-49f4-87bb-10d5f80cb753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85161bf-ac7d-4061-bfb3-0ff1260d490e",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f78bef-9256-4f99-b246-544f375cae22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d1a067-ff91-4778-8786-682fdeef787f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a87e934-b6c3-4675-a18b-9193990e8f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75cd3ccb-3a80-43f2-98b4-308b911efaf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f17eae6-02ce-4a22-8a21-eb6b7e08721e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "266f6eb6-88d5-4523-8f7d-eb06f90605e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b51164db-9d37-4996-b4a8-b90877631045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80ff212-cbb7-4ece-acf5-bbbd3f8cec30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "700382e9-ff63-439e-9533-cde36d517491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d8cd83b-3c91-4328-8544-5a375ac575f2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee219d7d-710e-4ae1-9f61-eff09050ab3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480fbf16-cfe2-482c-a748-cdc8991240e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64ffb5e-4faa-4b20-9fda-9604e3b5b852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a101cb6-3e29-4e1c-9daa-9438b2ef1baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e63add-f334-47c8-a20e-e7bebe97a8b5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9874e0-1ffd-4d25-880c-0379bec5adbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b531cf-d1d9-4a92-b4c5-72e8d8e7ab74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f2d688-8de7-4fff-8e71-90b634929faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c859e74d-b887-4b0d-b74c-a14c615afe3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9317dd71-45d3-49b8-a867-9ded6cf97ae7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9010d1e-f966-425d-8494-506489ffc16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e1a622b-5221-4e73-8b61-975986ee95be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd47a512-27f2-4c87-b907-4631448a2435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78ed71ea-a2a3-452b-96e6-2b7ac9020748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cb4380-f221-4338-b65e-1ab510b26922",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab6dca7-7c34-438f-9ec5-6cad8603fcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9fc641d-c3f5-4ad8-8f5c-94580b7d17ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6db6dfc-88d0-43ba-955a-50f42a4a1a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da57f3c8-779a-4349-b656-dd27496b7336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f131a4-7415-49d1-a25f-b5c55d65e136",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b36c57-f06e-4a7b-b077-0ed8e28bdd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f52f7089-6eff-432c-8044-fa6fe61db5e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09678407-7d7e-4946-b143-5c00028fe82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f08549d-784c-49fc-8d9c-0c78a56945a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e771b3-8e8b-4fb1-9a48-c3d16230b883",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977f3c9e-18e0-4361-b8f8-8abb6dce7442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6578c693-ccfa-466c-a30b-921ebb4f0710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a83b639-058b-4b13-8477-e7394752e16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7164e82d-e060-40c0-9f9e-77fc1cb5cdc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2e900a-9bc3-4560-806c-abb552666eae",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e5ad77-03f3-4050-9eb3-add454af73d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6bfdddd-7fea-4904-b85e-152d246f02e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa37c1ea-4d40-4d47-b8d0-c4480938764e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "119d8e40-c8e3-4cc6-85de-7678872cd0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e0c2a1-c47c-4b88-b3c2-c6fa3b2d5b19",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b1865f-c048-48e9-95b4-805fa5bb2fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a165ba19-96ed-4c41-bd0d-7d4137e11f2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33f55e0-a439-4d8f-8338-1fa62b1b9076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bef97367-60ff-41dc-8b84-cef3c76b2d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa440a0-6665-4fd3-8ca8-33f38a2a3e06",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4e1d81-6f08-4184-880a-9087d00ae48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c75274b-7c40-4285-909d-7b61192be183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480a103b-6083-4f08-82d1-24ce96d39113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9f39db1-8e7d-4630-a95b-25ed1526a350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f36ac1a8-3e65-45ed-8f8c-5332453c7e5f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c2a389e-6e2d-4d73-a550-a15bf50c858b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5129c73b-32d6-48f0-818b-f0b316c16c56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f931296-90a5-4426-a12b-1fd30f341b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4ae8ecf-a6b9-401d-868e-446b6cb01cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16be7cca-8c6b-4b0d-b227-cc9126e5af15",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23fc9bb4-384e-4db7-a827-850d2d83f9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80142967-a5c5-4b0e-b14f-74c198198e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b908d2-082c-4a59-abf7-2acd3bf0d767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b93a489d-1a6f-42e8-aace-4d167b036c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded78b09-87b5-442b-91ba-0aa9de4f96a0",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5e9863-d644-40e9-9c90-6506ff5ab5fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecadc0d-94c7-41a1-96e5-a68752fbbc74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3727f203-e09d-4a56-9c33-3eee6c2d9aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e10164c0-52c5-45bb-9129-1328ecd9d10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2f01c0-8c2d-4029-a258-8aa5e1032a17",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86198e08-96d8-418c-b356-5ae4fe678119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3c7fa9-e1aa-4f8c-8631-bbd0800e8649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6436fc8-8fcb-4606-913e-c61d629772b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee387ab2-ac5a-47c1-bc77-eb3c26b757c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c46f2a36-6c23-4879-a9fb-7458d33b91c3",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b59c92-887a-4d09-90ff-e0df0b21c3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce339890-d81a-4013-9d07-679f27b47289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e4d7ec-74f7-4ebf-a256-dd85ae6e96b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26d0f223-8ac3-46c7-b8c0-1c6ea727a91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e421102b-8c63-4f5e-a56e-f9aa9d07e965",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb37246-911a-4767-85be-207d0cfc2f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd241cc-82f3-49cd-bde9-7686dfeabfb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc24e62-4f54-446a-be8a-aee3ef4f2f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e645815-2a62-46fd-8f70-6fa38ec21fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8c57bd-1534-4aa7-a2b0-93c5e0740ebc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc8e393-f212-4c52-bc78-f1f0dc458150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88552706-3682-431a-9694-1a6a8df8176f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca7af23-8c7e-47a2-84fc-d777312fe000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "310fee98-a765-41ea-92ee-204c73b37428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1474f35-af39-46e4-ba05-2e0b050eaa7b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d4dccb-4d84-4574-886e-d85ce1530b9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e0a742-0f05-4822-9125-ab9e3bfa4836"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da47291-9033-4dba-b65c-c26ab698bc2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b174c5f2-f767-432e-b52c-b2c5c06c7c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561d45f2-e711-405d-9846-8870362cbbb2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f614b9a-4ee3-47dd-8416-51f4156da287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca35084-df99-45d0-ba13-3eaf89a4d7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398d720a-f095-4799-acd6-8de8efbb77be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "561e93cb-0bbf-4021-af4d-e3d3c8d12725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "777d04d0-7629-44c7-afc4-58f89bb555bb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0a64b9-cfc7-450f-aafa-65ac9749e4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae038bd4-69c9-4480-8c17-fa782e3e54d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa0b40b-0ac1-4e27-b33b-778323f6189b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2484a4e9-d0df-418d-a4b2-3864b5c31cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bc14d9-b7a5-436a-8d1d-a9492aa7f1b4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8060d478-6858-4207-9ffe-10dbf9421480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d7601e5-6566-46db-a1fb-acd41a4f4fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbf2371-22cb-451e-a9ec-6564088b129e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a23407d1-590e-4067-9fc0-8b08b3770a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baeae498-56e2-433e-a490-b0a82efb3920",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45317683-d8c6-4d21-9bcc-a8e81dc186f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61595174-b990-4daa-af65-e6dcd16e9bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39ce7058-710e-4bfe-98cb-bf631005975c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "75444a92-893f-453b-b873-45ee3fbc1579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3cdf1a-1cdb-4acb-88fa-b0cc4e1f55c3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b875ba13-5943-4651-9ff9-6c296fabde21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859b410a-9da2-4f6a-8174-58cb85d10cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b0e834-e782-4f83-86e4-7ba5a35c4ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cec7a579-0333-4665-8a37-568efd990300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0b700d-03cf-46ae-a015-7f7d30112f21",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd5b93b-8d4d-4623-aa05-92c438a276e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31ef0676-779e-4df8-afb3-27729e3ccf86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719dcfa9-8334-419d-8aad-1546b094b68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "56dc2404-518b-4ad2-be62-421b99c73442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb41211-4368-4df2-8d34-9f8c478b6dfe",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75699f35-764d-4bd3-a90e-7ae241344497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3120854e-7124-49b3-9e8e-b19fdeae4e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd235daf-d32b-472a-9dab-529abf23b81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8bce39-9765-4b5d-ba55-1964b8ab4f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddfbf25f-28b3-4d12-b7d1-d6cc07cf1180",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3e4747-f549-4408-a669-5227c89fbcdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d151a4f2-9a4c-4514-a5c1-54d756ac8a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12512cb8-dad1-46e9-8b5d-dcb177e4aef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0410311d-ee95-4683-88b1-d82bed7ec1e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9555c7-4737-4cf8-a7a1-f3452b3b75a7",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776247b7-39c5-4e5b-acbc-9a96c59c572d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9350383f-aa4c-43ee-ae63-cda0dfc63ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e94710e-df10-4ab6-a2e3-c86991b815b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c51e443c-bcbe-4b93-bdfa-714795917e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "786ba6af-30d3-4d71-b36c-bcd422e0f542",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e79b64-a7fe-4951-b1ae-b82a666f6af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977425c4-cf5b-4360-8bbf-93c31e963589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb977d2-5642-4261-8aa5-22c099191664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "65c1da77-d14b-424b-80ce-881328152a95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf09b43-0050-4345-a79b-38e48e278006",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cba321-8531-45b9-9861-f5a1d43b773c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b617779a-ae13-4569-affa-1acbb4dc7322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825c045b-f65e-4996-abae-b0655bc7c643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b28e6cf6-de1a-45cd-9573-7a4f8554e10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea2f0d8-4d6a-43f3-9b5b-db92c5e0ec87",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "319800cb-75b8-4b9c-81b7-907c58cd73c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3d61d0-3212-437c-a50d-c44546e32491"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f0579a-6ca0-4deb-bb15-1129478e69df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f61fce16-c688-4579-9c84-f567eccb9dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdae8303-96f2-4504-aae9-f215d315cf53",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfcd44a-220c-486b-bc58-fa0e55a99f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f98c54-ee0b-4441-bae3-742b45dbb3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c8d069-fab6-4f48-9a61-3a960be0f62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa00bd96-c1c8-477c-afd4-625565c2fbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae35cfd2-0e7f-4d59-bfad-528beadcb9c2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f068338-f08a-4e15-9beb-eb53e3c9bd34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72e9f72-b06c-488c-95d3-79658c597952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e25f2a3-8b23-4d99-ba31-cbec8fada2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ff915e1-9072-442a-803e-9b31bd38d04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1967d8c-1401-455d-97e5-216cf43b0fe4",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e316243-d08e-4ea7-90ab-6f827609e68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5091959f-bebf-4726-8170-31651e0e0210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7317ca4e-ea28-4d7f-b127-1d69d4bb3c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffcd455-6a69-43a4-bfcf-d58240f9e8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521323f2-97ce-4cb0-9760-6cf61ec4c18f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e161728-0ef3-49b4-91ce-9f550b068cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65c7210d-a9f2-4790-a6f8-b1aabcf2ace8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7a2bcd6-ca1b-4667-92cc-a94d4e30ffd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ca3cad3-f1f3-4388-9115-b8199d879434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7829f2ab-f661-4a19-8c86-ee659a87ad57",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a372b4-e888-43a8-83e6-0f2c01ee3e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ca8fdc-f699-4da4-9b0e-52ebd0413aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf8479b-0d07-43c6-9cd0-264534f0b5b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6873b59c-914c-4440-b688-ac84fee87892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f61ea8-ea24-4a8f-836c-f13d0a8da52b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c07a782-25e6-47bf-a230-4f7550c2e543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcae0eac-9b92-4f31-b4a3-6e2627157266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d569945-3fe1-40b0-8831-5ca341b42cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e538c0a0-96e9-44f9-9a17-ecf429c22b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ac93f5-55f3-4aa9-abf2-371dcafc34b2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151e02cb-8e7b-4544-b1e3-e29cc0dd2b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1460d959-a84d-4439-8123-3d81379bad4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ac0531-21cd-419d-aca3-b1477d08cbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "528be995-2a4e-4927-94c1-07821c7fd8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c755657d-2a4d-493d-a9e5-bbceee2bc55d",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38295663-44e0-4341-b718-a6c335a4733d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee03c39-1b40-4442-bb41-0fcd8bde0da3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b414b2-5a7b-431e-b55c-81e58ac75de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebcaec7-5b64-4fa3-ac90-d9ac34c9fd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5226cbf-855d-47ce-952c-99dcb10dbb38",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "175a7dcd-b6e1-4f36-8068-24f0da25ac55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ab9220-4449-4192-a12f-c9def2a3dae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5989886-ff98-443a-b50b-bc81d64942bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ff49e2f-2aa3-4559-a99a-de52dcca4f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f626f20-a60a-4cc1-84d8-ce4233bc5e4c",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1e3a89-07e1-455a-b415-0af50f1aeca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38df971-f5b2-4910-8c1e-e05a2954ff71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383713ab-238d-487f-9c55-4ff43d179c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8e80fe56-0667-4845-8b30-fca401c5a989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b213755f-f7a1-41b8-a6dc-9b9900747501",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e40e0d91-bfd8-4b4a-b1e3-4e2cdba1bce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34102199-e720-4bbe-bc6f-16ad704f57bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297a7382-35e5-440c-9370-148cf2114f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "037bc500-e792-4682-8887-a17a174662d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a2b7bbe-4bdd-4ff9-8673-b13f555d75e2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b158ce4-97bf-4eae-a553-4a7ca44ca711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97972f3-50f6-4b62-9480-a5c05939935c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fd41f5-d7bd-4b0c-8c88-54c4ecc1ccca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "689b2e18-86aa-4a5f-9a35-f56de0a84b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef91e4b3-2ef9-4722-8644-ffa4fd5d20ef",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e622782-d8e0-4228-b390-7c64daed5c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69706584-5e6e-43f8-9c02-24a4eff5884e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048636bf-9e4a-4e1e-8219-143e16f99aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "696b46d3-a8c0-4539-9e16-342ddcbf7f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bf707f-1f8c-4ff8-baa2-934102aa62b5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d46b9b-4e56-4649-9206-981d14cc5cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c5e679-5ba0-46d8-bd79-04c5f647db40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c551ea2-0a0c-4ad1-9c0e-03dfd0ecd975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "894343cf-a828-41b0-b956-1d3768dfe9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ea21b8-ff5c-4072-ade6-f76a7e767c36",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42104bd0-fc92-45d9-90d4-c110de8ef481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da30030-e56f-47c7-a05b-32d67a20885a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8a0fb8-bba9-4399-a0f9-df887aeb1d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df80d099-b515-4d1a-a2e3-0e2a0dec99ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb51f227-387a-42c2-851b-7d489e97b7db",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62d4898-8487-4c47-9856-5c36c6853c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f225490d-224e-4474-94b7-0c46fc075050"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203a2bdf-3a64-49e2-95a3-8767d2709d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "27a16c4d-c064-4a05-8ae8-edbc63a0c470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1713feb0-3d1b-48e2-8ac7-6d91de7806ce",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c5fa783-4911-4933-912d-daed145daf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9d69b46-0d90-4978-bded-b7e27f2099dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e777462-6f54-459d-bc16-b8239dd09460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd72821-d5f2-449a-9a29-5fe25e9f412f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fccc89-d66a-4b38-88eb-4bb1f06c1450",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f19449-15ee-467e-b670-5aa7bc4aa823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58179454-8624-4863-bbd7-2052b0d87e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e828e6-3c78-4644-8129-19bb366ff5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b291d57a-2179-40d1-8707-2eea800a0ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405681a8-4bd0-4927-8255-be4993a7fb1e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ab3979-6bbd-4b27-b2dd-417dad0ea316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c48bd6d8-a026-4f82-b3ba-b7ef483e50b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d165d14-2d5d-413e-bce6-63a0dc43b6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "30fc317c-63dd-4537-b549-af267a1683fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824a8647-a08b-4203-9faf-3f43f02864eb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa0b168-12ef-4ad0-9396-0cefe94b20ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e177836b-373e-492a-83a6-434de8d031a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afab7d5-912c-4282-bcfc-36730d3f3d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2688b003-55aa-414c-9d5d-233d1c2fb4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23225caa-808c-46c4-af52-14c36b0df127",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb267a2-09a8-4d41-b407-82ea4976f828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31adbf6b-ded6-4cd8-887e-dac549f8bc6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a60a3a-d7f6-4f61-ae3d-3cd7dfb1ee6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b59fc1c-1d7b-43db-917d-4fdffaf7fdd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b121ce1-0fa1-4d94-8c26-61f6db8e56f0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c094049-80c4-4710-9884-927b43a4820e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45599894-c145-4e7c-ae16-7e96a1a74cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1bbc77-cc54-4124-bd46-55a926c8ab59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "92df7b92-0d74-49ee-b8d2-887f1e3b129a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563bdd81-1763-4d09-a732-67e3e4f4c013",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76ba444-8045-4b3e-9a11-da796444a1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e284187d-d3aa-480f-b0a6-94ddfff4513e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d10d0f41-9e5e-4751-b84d-5f66914969c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1d33e4c-7b83-40ea-84aa-a6910071c10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927f0367-43fc-4b32-980c-e6a6e4924c3d",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8abe6a-067e-489d-b791-840cb63573f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcae38a3-60e9-457d-bce4-57bac787abd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad514c87-a398-41e4-9e40-a18088f1fb5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c608cbae-3d0d-4e70-95f2-1d6607ee331a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff807fe1-aff2-4570-b3e2-f2d0474eb5c5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "378f1996-0d74-4b0d-83a3-087985070182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faac4f5a-2d64-4e67-bb23-f7c3526b8a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8570d5a2-e52d-4a67-a9a1-9d25f35bc760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "da705461-8984-4585-b5ae-f47e3ab7b81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f2a6e3-b638-4c70-8643-f4b295fec5de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd963d48-14d4-4162-8586-c61ef6c36c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c33278f-305d-487f-8222-6e95e25bacc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b1e01c-d2e1-4b7c-9c64-b2ba74e1653d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e122459-675f-4371-b6cb-83ae5f2cf95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccc9ff2-8840-414d-858a-569d17fa1278",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e97847-94bd-4d0b-9a22-6a4a694ea960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd26e7ec-9999-4c1e-a3d2-56f9490357c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b86d64-c27f-4e1d-9911-5043e29112a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ede8fe08-3587-409d-bba5-d93978c32182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896fda8f-d9ff-4e7f-bee8-01c2eb4bc712",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a91fc5-74c3-43ee-9eff-d0ede2f5145c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c23da7-2f4c-4221-ad08-95eb70549cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9053dccd-9c56-4367-867b-6f0aa339b77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f427dee-b784-4786-862a-089c60b1f5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50417ffe-7ff9-4997-9e42-36e269ddcc39",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4bd40a-1683-4f42-9824-796b91954340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e09532-828e-4de8-bdad-ae0624d82d55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6636650-9bfb-4493-9099-6423e96a8a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb3e720d-e7c0-4233-b0b9-0728712e08f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6d6ad1-3a10-4799-bbcb-49a9feee8266",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20f948b-0458-4e44-8588-df1dce82e246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad145b6e-7d53-4fae-941e-5ced83631a7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b28ec27-437e-4024-8181-ff767e2461d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c6881d-f3ea-4e6f-b488-a34c04b41502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5662d33d-e5d7-4133-9c7c-48cc6fcf21a7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1df5f6b-97ac-4316-824b-6ed77d5d6677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79203587-aa8f-49ee-a864-0f0fdab65fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab67d35-5420-4038-a6fb-b0e4c6b8136d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d152519-175e-4708-8f72-4cc37a37db3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17b96f1-2693-4797-a2bf-fbf49a5733f5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e625a39c-4070-4cf5-a395-907529c9eef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32ca59bc-089b-4787-89db-08cac5da25b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae246c9e-4644-4ab6-b4e6-5fdd85c5587c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aec1663-516e-4cd5-96ff-3cb20ea1ef9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ad4413a-e858-4647-b5c8-562d21054113",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce6f519-7901-4f26-8fd1-9e284e355c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf8de3b-78d9-4d90-844a-f5ae796d61e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771f8ca8-fa96-4581-9217-8f2c07dff3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dec81aa7-c64f-463e-98b3-a76f8c42f8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f465454-20e6-44f8-9eb3-8e018df2a894",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dc5319-a7b7-41df-80e3-a49d58260eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb4e677-8dc0-4bbb-9963-2abded185a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c209f93b-d184-40b0-abe8-df26654fc334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53c3caaa-dd9e-4801-a459-f3d4f0f5fd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3478b8a-dff6-4d58-b22f-1774f4282080",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2148d792-8ba3-4247-a9b2-84db03dae917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07815a5d-02af-47ed-95c9-9c474473ce7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1228d81b-cf6a-4ade-904e-fbd963bb4173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8dfe2755-2ef8-45d8-9cb8-a7c027b5a87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e35b9ab-f29c-4cbb-8937-b2f5b2c0dd6f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92cef1ab-16cf-4fca-9c02-f18c47b4bdef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe402f25-a235-4a25-92f0-9b765ed085bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9da787e-a4c2-4157-abdd-d74949f8de15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bd64755-9b31-4b75-9ce9-11c2a89f7260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659b8fc3-89f4-4025-9158-86b6c86d2c13",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5012e172-d287-49df-b34f-cdeef02812cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ab43fa-a880-42e2-920c-b24c168e16cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e799ce-039f-4c7d-a927-5c5814a8ba57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4384d7e9-6478-4bed-ad26-bbb89154f568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4d196d-7022-4740-819b-0b3fd724ceb1",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4316e87-b5cb-4fb8-a25f-212d3130b03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8de907-bd74-447f-b2ae-f6f26df724d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc04543a-d2d6-46ef-aa64-98aa58a88576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d569e04-e0b5-4d23-9521-24ba977e0449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f445f0f4-bafa-45f8-be4d-436c91bc0ce2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca68c024-79b4-48ab-93cc-dd0bf83e39b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9393f639-a05c-43ed-904c-dd45ee1aad2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ddbb47-19ea-4517-bf51-bb64d3749ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e47d75-6f9f-4b27-b360-716c0821b497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a644b3-344a-4527-aca0-6ce37791769c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "841df9a5-d288-40ec-ae49-d97324fdf2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "692b61ce-1076-4be5-a18a-b1676285f8ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6d7864-1c5e-487f-b33e-404793db95b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1e6327e-a21c-448c-9f0c-7c9dd1997be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d30abe5-08fd-4255-baeb-fe5ff05a99b2",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc21b9ad-80df-41e6-9ade-93736f313c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "884eb798-a9e2-4a16-86e7-801ded626a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b8a9ad-89c2-4a32-be48-577cb2716488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb672d60-43b7-4cdf-87d1-1b78dc49291c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d2057f-efd6-4c36-9adf-0a99d5dcc02d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09accde-b96b-4666-a3d1-b5d91bc34631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f70e87d-0f29-4bc9-9d50-0684fb3a9987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037c79a5-e73e-4b1e-9f5e-020cebf28724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "52b5b7f6-e8bd-401f-90bf-64e3c06dca13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d570c4-2daa-4ddd-8607-7ca224342380",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a0bf903-ce5e-43a4-b674-8aff6e664582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c32e919-e0f4-426b-9972-b1ee9826e86d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8b43a4-dfce-4d56-8248-e0d41528feaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5151da50-e632-4ecd-bdce-0b47e690cf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3660b6d5-e8e9-4673-91f2-abd4cf7e973c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438e142d-1da2-48bc-95e0-2ace2ea17a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "555502f7-2413-4a6c-824b-257642c585f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fddf1fdb-5ee0-4b88-b62a-2eb59ee67962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf3b064-7888-4d7a-8ab2-80d75a275e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4902109-43af-4e67-94a4-b266d67f2a81",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f827613a-24c4-4080-8441-d525cec8274e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc7b29e-e9fb-433c-8780-9d439b2cb451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0985627-f938-4eb4-8199-25d806acc1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbea73f7-1ab7-4e53-b7a8-2e7a85d0b479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe54622-b891-41c6-b3ab-daffa57fb6cf",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be92a2b3-dd39-410c-b83c-91be16b5de64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9401ad4-198d-4426-9a52-efa33935e895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3925a490-97c7-4904-93fe-b685fe1f10e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "552c1f53-b44e-4476-b41e-ea3cd9bb248c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a98eda0-e9fe-4321-b82a-38c0383323d0",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6759a0fb-b8c1-42c9-99eb-4f3c90053923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef4ee5d-b657-4e5a-8fec-4391fe24e25f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76afddef-0a20-4d81-8cc7-ea547aebe2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b03128f3-f898-48e2-8c00-efcdf0971fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87195cee-95ab-4a80-b375-23e6b829a537",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54faf50e-b1d0-4129-8208-d2b00c6d8fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5015b913-2342-4286-a654-e7321068527c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce998567-8250-4431-8632-51b8158834f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3508259a-d97d-4e27-ae8c-2364ea891ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9064c2-d8c1-4d0a-ba09-f6bd1fa160c7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc68ffa-ccae-4562-8827-3de41d45ffff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f51c56-df54-4c80-af87-afb8b8ba4b70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca5ace8-158e-484c-8c56-3e910ed0bc13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f657ecfa-3e9a-4f96-af96-4dcf089a1fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a9332f-4b4e-462d-b7f9-e85a4c5bb5a6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2d3d46-827c-4635-bbda-1d845113f875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1e77e55-64b1-48d7-a536-777c7437b801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca86f64-b3ca-46f2-8cbc-c8d705b6cfff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "acd00b4c-7f5f-474c-bf8d-91f01b86993b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03621d39-f21a-41c0-8d95-9d0eefe59182",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88b3b3b-aba5-44e8-b48b-859205de2b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2497f223-62b8-41a1-a991-833d1620e626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6053430d-dd99-4699-990e-185a90d6ea15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49eb01d6-13f6-4f6e-814b-cce1c7b43c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797406f8-da48-409e-9a6e-0d7f9ff946f3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a8a3ec-0ec7-4c8c-8950-9adfd7250ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a68a8b3-6148-4981-af96-962ee7a04fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fea46aa-41aa-4781-b494-144189c8af47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34f1b8a1-983a-4774-9439-1ddf1f1ad1a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168f024c-f546-4a79-a5e6-73016468c79f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de86ee52-f7bc-4930-84d5-eea19c9a1aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f171bbc-4c0c-4d39-be38-8cb564dd8af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7caab1ac-a15b-4881-ae24-24c80245ed52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4fd59a6-de28-476b-8052-901bcc734978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d5ae378-eb56-4cdc-8dbe-a5767c0118d1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05267c6d-9625-4535-8e59-280a73c7ad5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a16ce7b-394f-459c-91c9-21066ca31f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a1eceb-a689-4723-8275-cd31166d7994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "554d592f-78a3-478a-ab46-57b0a0a71b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e942b89-4124-4156-8d57-c8ebc06260d0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd2ddb7-5fba-47af-b946-ee12e1dc2019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97306590-a525-4b6d-b239-47031e475b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b4dd2e-ac31-43ad-90e0-18aaa9e6f69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fea0d44-bed6-4615-82ad-1bf8fd21b733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5824e4af-a06e-41ba-959a-fe5ab3354767",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4725dec3-082e-4f9f-bf83-1d64315bc4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15de5695-1b3b-49dd-b93b-dceb9552fdd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5a807d-00a3-4109-81b3-b7d1356d2242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "293d5d3e-e4e7-466d-9027-8069f2365f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5528ef0d-5647-400c-90fb-9d9b2c08f08f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0deaf7cb-43f5-4e6f-bf5d-1e659df74f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46a90777-660f-406c-a06f-a95634f54b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf5037c-cb7b-4d59-a268-03dd174ad192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "43bb0597-36f3-452c-a552-45df01f11f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce30e670-6d79-41be-9c44-23208f3d1563",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e119d494-8c52-41dd-ad7a-fff2a8a9b9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff11d02-3359-43ee-96f6-81a158103671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3102a323-302e-4d54-adb3-866cd87dc7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "00cd99c2-bfcb-43a2-8356-8ccc1f7e9e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e60b1841-f121-4a64-9dbb-a79b5d4fb206",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4bfbc0-0a4e-463c-9ad2-d3dc0af714da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9576fcae-4b2a-4412-9725-fb58172f19bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5b0f6f-3a0e-4c76-a219-bc78ebaa8598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7209fb80-0fde-4151-8952-cfe439e1df19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71165a41-9f7b-49d1-b0de-2b8f59685ed4",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605e3054-e4fb-4272-80ad-19b6a1ff7b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "34517afd-243c-4149-af8a-aae9ffab6a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631d542a-88ff-4f8b-bc15-1fd2c284a4b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "db7e5e8e-92a3-47ee-a2a7-b2369c67bf43"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "31e24e6f-42ef-42eb-91bc-30bae07d3dab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25b33dda-741a-4b14-940d-f53fb7946ee9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38133d4a-8c58-4076-8589-db2f2136e6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50cf7da1-b9f6-4ca4-8fb7-9f4af4a670df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b46c858-64f6-42f7-8221-80e92a757ec4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ded4c8b-b881-428b-9362-3936ecc6fa3e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e498b37a-7792-4934-a791-356236410ca2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a42a71f5-1060-40b5-9905-b5d3c51b44f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b02f48d-2d04-456d-bda2-79906c2a72a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ad7151d-04e4-4246-8f3f-a049690a43e8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "98dbe64a-ff25-4b70-801d-6158b5e7fe0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca88d692-6698-4f61-80bc-0cb449f2d251"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "43020e03-febb-4d2c-9a1c-3f2d08200972",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1bd57ddc-c3be-4e1a-9ef3-aaa51f1ad68a"
                }
              }
            ]
          },
          {
            "id": "3bea98cb-dbb2-4bfb-9acd-3c748ebb3889",
            "name": "Positive Testing",
            "item": [
              {
                "id": "04ffd16c-a691-41f4-b262-f0567ab2a8e4",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "bc3e5b5c-6d5e-4b5c-8318-66432f3fa805",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d936d1-bd64-4c70-9a1d-b76093ccfead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "71317ed1-36f6-4abd-acd9-0346304ce7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aeacfe2-7fb9-458e-a68a-31b60a7d489f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1b372d-c562-4b8a-88df-630ab736e4ef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "395b17bd-3688-4a29-aee3-3bc0a69f62b8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78b80685-4d96-4c8b-8953-ac01a39edc86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91e62cc7-d3c9-4df5-9a9b-7017289606b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64c0f52f-895f-4394-8b95-12c031f0edf6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2bf2878b-e634-4bcd-9ae5-542ef1055dc5"
                    }
                  }
                ]
              },
              {
                "id": "0fcd7e36-e7f6-485b-ae60-927535d8d02c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "011b9397-11b7-4c31-bcc5-f75f757b4352",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8cd10f9a-fbe5-47f2-821c-be0a27274a89"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "566f7aa9-ab9a-455f-b226-61f57a6de26c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe23d9ba-c9ad-41e0-aa6f-7112fa97c1d0"
                    }
                  }
                ]
              },
              {
                "id": "d4d66ef3-88d4-4b9f-8b36-843ec885a7c5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9225dd29-4dfd-4cd7-931e-0d584797594d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cbe8d4f-0bf7-471c-8dae-17ec44090f80"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd7d9cf7-2fa1-4f90-9e08-4dee6a9199b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e69e8f9e-8f68-4dff-a87d-890c0f64325e"
                    }
                  }
                ]
              },
              {
                "id": "6c554d93-8a2f-4e7a-b384-8fa632a81562",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0d53794-f712-40c6-b942-2f971a8eb9b4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6d5749c1-66ad-44ad-8860-5fe861389dfd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "018e5b83-d84f-489d-8772-4982c160bcfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1a8f5615-f69f-4e86-add2-a5c1f2a126fa"
                    }
                  }
                ]
              },
              {
                "id": "c496fdb2-61d0-4fa7-b06f-15dd05ee66a1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "722adbc3-9b3c-4ed5-9b70-c8cd5eef6992",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2bc65814-8210-46ed-b8a9-9ff0eaf44142"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88569a3f-4c43-40e3-bcd2-971595d05659",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e7ef9ae2-cd24-4e16-bee9-6309387eb2b0"
                    }
                  }
                ]
              },
              {
                "id": "b2f7387b-71aa-41da-bf97-465de211b97d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1fb745c7-1459-48a4-88fb-b03690da1d98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "536b8c33-bc7b-4c4a-b981-45dc08be65a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75893453-c41e-47df-9b56-cb917123b9ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f847fe5-3a4b-4a96-9f72-5f3fbf679881"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09ee8c24-43c5-4e29-bace-bc4e2a024498",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68452cd3-41aa-4cf9-9ef5-86a19e2f18d4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e9d2a3d3-7ce5-421e-9be1-e7d2cf5ec716",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8b33a9e-5d81-4cf9-97ef-198e886ba1e5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "16cadce0-8d65-460d-81b1-26c3fc2549be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "87588eda-c10e-4121-bd8f-22089bd3bc19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18ab114e-3e8d-4e0e-8980-3488e63e60b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ccce27b-2fde-4d6c-9f10-4f39ad1ed95a"
            }
          }
        ]
      },
      {
        "id": "60252422-42cc-422e-bf04-f752014e7bd5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a2393a7f-da76-483f-9d78-a49183cb917b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d01826a2-77ba-41d9-a2e7-b2af61718fe0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7edbdc19-ff14-4380-a397-b165dbe621ec",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a398905-8a99-4917-883d-377fcb6be954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eee7760-6f12-4440-8362-b9e3ac888d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53bc4e03-a86b-45ad-8294-003eacd8f058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a679a70-98b5-4a74-9480-0945daf81b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d169d405-2f83-43b3-98c0-99b0c8d0a1e9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7e4635-f424-4f83-8c13-3f63a2cf0c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06194915-1492-4471-a9eb-df35158597be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1262e2-d44d-4af7-8cb1-86a15a0207ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2965900a-ee9f-4bfc-95ae-56c13016c60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce58e0e-de19-42f3-bc0c-c5200d127140",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "153d0044-a547-461d-9b3a-578d3c05443e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c334b91-0a13-4796-b13d-0b6e107fea7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171b41c6-715f-4840-8c7a-61305f26c587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d312c40d-30fb-48da-be49-cb16f830b62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbd0e8ef-15c9-4584-925b-955e672befbe",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b19e45-0e1e-497d-bae7-3cb6fe19a412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8c62a8-cc5a-4dc7-a313-8ef64744f3ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c94198-1506-40ca-a7c0-f1906178f686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81e1eb1c-0e14-47e7-b41d-6e06cc6332df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d19c36-14e0-4c51-99ab-14ca0cf73cbe",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edd4f659-c07e-4676-ab17-3a5b4f564e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f17757b-077c-4c3b-989f-a11ea8b36020"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86eff380-ef9b-4b27-b713-97bb1e83a55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a850bddb-7f7f-49ba-a033-47c48a5c7b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0159aa50-2905-42b8-a2cb-deab284b9205",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd0d3fc-0ed2-4ad6-bc32-b34ed13e6328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3bd399-7488-4d2f-bba4-0a206c3ed222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c15d113f-2c52-412e-85aa-a91ad13bd558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6adef24a-c48c-4a1a-96f0-328a5cf38d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aeb74c3-014d-41f2-a92f-5bf77b2719c9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d09437-c988-4589-bfc1-88730b59ba7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b943e08-c7c2-43b9-bd0d-cc6f9578db8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e9a527-c6cf-4b98-a830-5518bf89cbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "702a1721-aa7c-4b73-b234-841658126018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607c16e0-7ed5-4591-a77f-610092de2b70",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "925a7edc-7d1e-45d2-83ce-eec47465c8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b99d23-2525-4998-aff6-a48db3c33531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4eca5dd-eca9-4a77-869b-468411c5e469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5019de40-a251-4458-866e-b3a573696a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19b90e1-7cf2-4cc7-b65c-64b890b2ed75",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07242260-61af-42ea-a9d9-2b446ac9aa67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00dc8d55-1dc2-49b9-a59d-0edcf288c068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2efabf-e33a-4fd2-bcbf-de47c5acb09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da1576cd-9b4b-4a01-9be4-45bc95a074ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e409a5a-1ba1-4f25-988a-b8d798d27a89",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "871ab90c-4244-4e6a-8f7d-1cc06a2f6cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cd2f51-c1d0-473a-97cf-bc3f9eb8aec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6259d938-5844-400f-82b4-9c95f204b74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d983fe0-a46b-408e-b6f4-76e282d8302a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c22fc5-486d-4878-b0e3-4846fcf55687",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f96dd92b-8716-4b66-b369-8d7d91e1df5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ee480e4-4193-4da6-92e3-e852f50e0d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da44a3fb-eea5-43cc-8b65-ba7c8485d0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c79768f5-e92c-437e-a10e-6aef8a9294bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14ab414-65cd-4178-867a-35c0f940071f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a1ec21-1a0b-4fa8-aead-e083667fd8cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d43030d-5d0d-43c0-9001-2ef29c59bd02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d26e6a-bed3-4f10-ba6c-3914b8859a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "69c589e2-e2b9-4b4b-b229-5ae7cb42c71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9bbe3b-e9e1-4e39-aa54-fc7209c0845b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "169d2963-ceb0-4f29-ba2b-83ba0dfee760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cb99a2e-09ad-4b0e-966a-ac738e1190ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c8ca0c-a321-414e-af53-aba2578be0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ccff017-4034-405a-8c41-5fd6e946a39b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65d30767-73f4-4937-b6c5-35513b245fe1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad24dbe7-965c-4ba9-8c23-415195e4ee8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4198060c-80df-45ef-9fa2-11e46e0dd2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc2c3df-7fc8-4742-8bc5-74552fb2cb12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "de67c92d-5ad6-4aec-ae8d-ee5f9f99e99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51bfe7c-dfd9-4c71-a8f2-769ee3ee5c95",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3930689-4891-447b-9188-c5cf095cf725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08187ebd-8e27-456b-a31f-5b7a7582ba1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d1bc8b-e359-4edc-ab5b-44308ac4ccc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a59e9335-4eb2-4b20-991e-e9efb1495f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd0be92-7195-4c3e-92f8-9701216cdc45",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e4a73b-9cd4-4d7e-8c16-241e4ab689ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c1a2bb-0f5b-4513-a107-67b94a233426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9bd195-6e88-4b11-850f-de1b3b308204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd95472-e956-4d67-afa6-c4d3f1f7feca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff64710-1f62-4b36-a88b-406d1ee1cdc9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1541ce27-3815-4bd4-9df1-3fafcf61e562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af746e14-40e2-4c2f-90ec-dfca1ba4b611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99709db-fe65-417b-bd56-73a523263e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "495a09e1-4988-4e78-987f-b42266e6bc28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411b169c-da21-4b69-92ee-f9ccee2a9b54",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e7d53e-ea1f-450c-8551-b37b5c3cfad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca199ca7-7db0-43da-b567-d019d6be7c50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e964384f-68e5-46dc-ad1a-2bf4a3d36760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb87a1e-6623-4851-9560-b598470a154e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560e5b5d-01e7-43f0-bc79-957f8b91f3f6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdea7d0-befd-49ca-854f-e178d9a22c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c4cee0-adde-4971-a774-f564d38aef08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2496dc66-7cde-44c7-9d38-c311e2db17c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5a6b9a-e72a-4e2c-b4b5-3129deb0731c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810c0f78-4ad7-41dd-9c3a-d57a85649016",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68eed04f-63cc-4473-b10d-39628806e38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "873c098c-08fd-4729-969c-dd9a1b061239"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3161a9a-b0eb-4e4f-babe-b991f76bbf12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "994b8ce4-3fe6-434f-bd61-5020aec2b949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae3d81ee-de66-42a2-a2e0-674328cdc189",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142a9e93-2edc-44da-ae1e-c5efb4c682fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c22bdbd-e786-487e-9d7d-c0e6d8985d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcb35cf-0028-4b46-bd13-975fc6be61cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c682b5d-8993-4c09-ae8e-4856a9c54ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5dc7f41-a221-44fa-b4ca-70f45d7a5550",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d12668-34a6-4574-bde9-ff7d0d2d254b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86218713-e9e1-49fa-999e-292f0f0290a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40314bc-d251-4ea1-95c0-8d0e4d452774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "218b7bda-efe4-45b7-bb22-4d112b5081d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8472a68f-cfe5-4e7d-b0fd-5fc78c40487a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad4e1f4-24f7-4cd7-9ac7-af25826ef6f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cb938d-f061-4ca9-98da-a79ddbfefb98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e270f074-9c61-4aa8-bcd0-3246efa0e32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bccc229a-bd81-4114-be3c-f15cef7c02ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd92ae34-2890-4608-a9d7-b3efc17b37f2",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26d46f8-fcfd-48e2-8391-b520f36e3742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a8bb96-6b01-4f0a-ab08-b02567a91178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d3d8a91-a465-46a6-8d72-00aad2e4fc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd28adbc-1f8e-46fe-ab1c-54e053a9a6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12d0d8f-6430-4f4c-bfc0-953ec88a50b8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4511c94d-a8fa-45b8-a562-f780edffacd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66747269-3d4b-47d9-8a72-d48c3e390d9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9071b14-1f85-4788-b394-44cc14598ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83cdf797-c741-4623-ac2a-99aa7c3e7d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a854fb51-d85f-4fe1-9b16-2020839fd980",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aa5e97-6397-4815-b9fc-5e6f5220ca0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37f03e2-053d-4328-b080-0db771496157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65df43d-bfcc-48b0-80af-04e22bf1dc10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c86453-826a-4d39-bbd0-cb37a3a4fe4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc7693c5-7716-421b-8aa0-25ae728784e1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8180c48-b4e6-4a4c-9fb8-bf9d6586d564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688b3dd4-3467-407e-abcd-c98edfd14d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ac8c86-f518-41cd-b5c1-57de333e87bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7db4a74a-2f28-4b2e-9539-927ab6982e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33564ec-8735-4a7c-8aea-0f6898a10af0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ebd4b8-d29b-436f-86f6-08e2aa79cc5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5270be6e-054a-45fc-90c3-c56333c15e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52dcc391-c4be-48e6-b791-e12166f7cd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d232d752-ccb3-4d6d-b245-dbbe5925f27f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c58f38-6a5c-41a3-94d4-48018dceec55",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08aeeb30-c804-490f-aed8-ae5bafb60b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da0ecf3-6b20-4b34-8049-b93ca5bc907f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163f70d7-6898-466e-9ad1-0b3666319c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5cda4b5-818d-42e0-9f30-75a5b8472664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0887e0-a6e7-4f41-bcee-bebf4a42becd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b3423a-d3e5-4935-ac60-8f850ab61f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "907eaf60-e2b9-4bc3-b143-830100b146d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b93203-cfaf-4add-b032-a35dbb8ff766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1d62c7-9e84-4ce7-9ecc-f848f69e3d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a29ea5-2a0a-474d-878e-382cabd5f69d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2265f7-73ef-4aff-88c1-a38435e8bb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c91be2b-3735-430d-8cd9-7ae781e9ea27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "380ef43e-8058-41d9-8e40-afa10d3532cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4edaeec3-ac07-4ad9-8f06-5c75c1bbef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4571a4-bd8d-47e4-a8d6-c248f45f4486",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ad92829-27b2-4b3b-96a2-8fae3c184081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c56b92a-c530-480b-a520-aea03e7e97c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5123b8-8c8d-4697-a49c-2fc377768041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eb1fba9-4d46-4c32-824c-c673ee09c96c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c7d74c-b916-4863-84cd-1454a387f84a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbde0c6-7082-4ebf-a6cd-7f82d901dd63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfa0a02-4245-44d4-972a-16c98580ce02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f719e83-e53f-48de-85f6-d4b04da8de89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "645eef1f-b113-4175-acee-2f80221262d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b7ddf0-f3b9-444c-bb22-78d15341568e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3077f43-ce94-488f-b297-76891f438080",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48ed158-12a0-48b3-a9fa-cdd5bbb3fcbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5781b56a-601d-4642-925c-a665accdb4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52750807-d335-4e64-b08d-b02c7fb286ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832c1d7a-3f0e-4571-8af3-6089bb8440bd",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600b6aae-cbb5-4350-bd98-f8f62c7da4bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023ac4d9-43b7-406e-a856-86b85204dbc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e76df8-3c21-4dc1-ad34-0ccefbc7fb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8269e1d5-7fb3-408a-993f-8687cb875e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "037aad0d-4635-4816-87ee-f57d69172c3e",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd05cde2-b36b-48d7-aa4b-b16a70e84c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3051bc77-a775-4b76-a9ad-a116b84caead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96521b7d-c866-4cb2-a69b-7b5968258cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acb7ab42-3f7b-471b-8c47-be2945a2385f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55831d50-f6c9-4747-a91b-7bb936143264",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a8f6e2-dbde-43f2-8ca6-5a97de7df6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed0f2df-3505-4ac4-a93a-57d7f3423508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12655d0-7c48-40d3-841b-7f6f59509831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87e7dd65-e5fb-40e8-9d39-5e9e7eabc56b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1620b281-669e-4e23-83e0-63fd61ae5a36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a7faad59-f03f-4ce2-bb31-07e6ed2c31c8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c891f6a3-e67e-45e0-b43f-f7f17454cf1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "49663e30-aeba-4a20-b076-c56b5f2006d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfe5cfc-a559-4eda-a0bb-a1d6cbd42ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c29510e-bce0-4983-858f-90d9aa6ad82a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "876f9c45-7ced-47c6-9dcb-2ff8eec60bdc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9a27e6c-fd2a-4c3a-b0c5-afb748750919"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dc7a13f-8fd0-4123-b30a-8869a60262a2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f8043cd-bf87-487d-8340-50c7b84e2d5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "086fc978-c093-40fd-9b0a-927ad8e7d77b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c4d2f4ef-f2a4-4ba7-ba45-8afc1e7be248"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a51253e-23b2-4c28-bd11-81479c28811e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "524a18a7-cca6-4a2a-be12-ab817f2b20bb"
            }
          }
        ]
      },
      {
        "id": "96a0f018-3428-4222-a9f4-8f6e920636c3",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2df5fe29-db29-4e0f-9031-f296b35ac136",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97f0ab2b-da3b-46ba-b419-4479d84d1925",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "760e52c6-bab5-4aae-b0d5-e1609cab2fb9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ecc8273-f7bb-42ea-acda-5e59c6b56075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acb4820-bf7b-4ac6-b9c6-465853634e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651b9679-88af-47bc-b64a-0a5aff6a84f3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bff285-d02d-4a2d-bf54-0331a1973820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970fead0-41f8-4293-a9fb-5caba7e66e87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6772bd16-76ff-4edb-892c-369972651e22",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4421a29e-ca1e-432c-9e92-6fb2b8cbc25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9da602f8-58e9-44b9-8f8e-c7d8e23813fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded8060c-10e7-4a82-b89c-afdd29822ff3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5959f52-a34d-43b1-ac04-5ca90d3fe8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58172a06-3643-4f3e-b92f-cb1e6049728c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c49406-9344-4e9b-a044-f1eff2512cdc",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7698b451-ea27-4ba8-b21c-55532d5ffece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8daec5ae-1ee6-42c0-b081-2dea841c0420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098c2ac0-6417-48a2-9e4a-933724adee91",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a528cc-cdcd-43dd-83cd-94471a1fca9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5bd1404-fb3a-4275-80b2-14f1185cbe89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1ce92c-c428-401b-ac0c-6881bd5f1571",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3780bb0-a6ed-43e9-b6d4-7bf2f9af777f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c5f3b5-5a48-45c9-83d9-2aa424856223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de1462d-9563-4e22-bb52-bb6f340bef3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a151ee-ea2c-41c3-a039-bc492ad03eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99cefc85-fc88-4d02-9ae0-6cc35a21e291",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067a748c-d72a-4e5b-b327-96d1f6a0a8d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6831f139-34ac-43a3-ba57-f89f865a136a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "997e3c14-2a77-473b-8c1c-c22c97886e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565e85f9-2253-493a-962e-3c4841ca69a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d097a9c-8851-4a28-81a5-05964da2461e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558336d3-f2cd-4b71-ac92-ec093ca5b775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aaefcdf-425c-4bb5-b87a-f1dbed547c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5111b3-08d1-4061-8590-77203d6f985b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbbf0e2e-034a-472e-9c4e-50fd8c71d1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bd1b2b9-6ce1-4421-8e0c-f8d396bb3faf",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7061de-9564-405e-b002-06ebae34aa83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc9c4dbf-73f9-4841-9c2f-9d8be100ce20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a72484-90e9-454e-bc76-dbeb14e8eb7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba51c130-6dd5-4a64-aff1-4d9570a20355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c85c364-78cb-4627-8da6-c8248312d3b8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6ae34a-0899-401a-a32b-e81cc2d425d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b36fb14-db1c-444d-953c-e300e6be124b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe31c1e3-068e-4bee-b119-2fef26623ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01a51ac-1ad6-4704-b817-cc64eb5ee5d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cbd29cf-15f8-431b-a388-6b9018f2fce2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bbdec7-fe7e-4b14-8b6c-951a18091b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f51c2c7-c2c4-4d96-8be7-f4324b866d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1854c4df-e382-4523-8174-6d4a8b1e750f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312e0074-fdbb-4aeb-a824-827e4a3bd2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39eccbee-2c04-4411-b6e1-0d51df807d84",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3feaac1-46e8-4267-befb-aaeb86c69024",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ced72bcd-46b3-474e-a661-c0ec1065ff6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e7f886-2ea3-4620-9ffe-84602f5d6b22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3d67de-4ecf-4a82-b2a1-726c0a3c096d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a8fb46-8d68-42a4-8fe7-18dadad17a68",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148bc8a1-8a05-4830-865b-ca8b0bdde20e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c7136bc-3fee-4048-b676-e4179a11a1bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6705a1a5-2ea6-4ae1-8609-00c012553709",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0a8c3f-c540-4d20-84ed-d492e028695b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d133db5-3ed3-49f7-8be0-c655f2408f19",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4427c1f-9488-41f5-9869-b872e490763e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ef5f7a-2042-423a-9725-b0bfdb5b035b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff3c7b2-3833-4d4b-8304-221b6b81ccaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0383001d-8f4a-42b3-becb-fc42f758ad6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc52204-84ac-48b9-b11d-8d142e090ef5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341ba9e1-4571-43ba-8db9-e4f054a85d69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49cc7830-7aeb-446b-8e96-d7df8342137e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7708603-a08c-4dd2-bf70-05072497ee4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f9a01d-3c85-45c1-a716-d294c035e32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f969197c-d879-459f-af77-129060a8d0ca",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33cdfa6-5e81-40af-93fc-9bca8b09a13c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1ab85b-6bc1-4704-ad42-34f07590088d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c410b5c-56a7-41b2-a57f-1b5358ac6f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9446d42a-9c6f-47d0-a5e5-7fc4d7708bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5bd142d-caa8-468f-a3ef-06595497d23c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c29fd2-bed3-4ffd-b7e3-7548868bdc6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad5054c-3aae-4fe8-9497-4753702f62e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea357216-5406-4127-81d4-ae978b19dc4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0dc85b-4142-4184-8937-1c6a49cf3b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9816ec14-69c9-4409-81a7-f78a9bba3db5",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd99cb2-b0d6-4536-9d5d-cd1baaf2b2ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb1e5cf-7d4f-4b53-ba33-26f40a796ff0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e11bf90-1181-4dbd-8615-7dcefe7062e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62626a39-3d04-4a55-8f76-30b3f633fae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c63b083-a756-4a5c-bfce-b7f7f3b81133",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de52ee6f-eb1a-445f-8daf-b11571e23a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e712114b-77f2-4da7-a0f8-4a3802c00a85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8149b3-cec0-43d1-899c-e907a2ae544f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cf963ee-97b4-4736-b2a1-42f14719d181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6acbc1d-4d69-4c68-84cf-4a9a47c9a2ed",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d184a61-b0c5-4bba-a8f4-797af4c71234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc923b5f-fbe3-4e23-b7cb-0cfd230dc647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f8ece0-6d6e-492e-a078-10ca47bff290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec629ee-25a7-47c4-985a-e1c32b9a0fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a825712-5ca2-4e0a-b8a9-f35a42c1c996",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cca99ef-ec40-459b-8725-dbac76b36ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3676fc5-f1a3-4aeb-8c6e-e574eb0df15a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ee7a8e-7d49-4f17-8b09-b7cc9e095661",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06da1a47-4d62-4ae5-86b0-694ed4709730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457207ec-3bc3-4cad-acaa-d93ce91c59b9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18081e08-47ce-49dc-896b-6cd467552ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb9d957-f0e5-4d20-a14f-9a3a3a97d182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "157aa1a3-7452-48fb-a7f8-4dbbcfd791cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b5e653-d075-4afc-9b4e-564ad606c0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb70384f-d5c6-4b17-837b-973cfbdc52c4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73e1bf5-e3d8-4acb-9c8b-ea68dceafb52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ab4f863-5b4f-47b4-9303-06582e4b6f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0329ec-5d6d-488e-9cff-a5dd76b4f440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f403dddc-9d9d-4424-a5a9-0f49ffc5572f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08fc7bb1-13a0-4c8d-8bda-4fbbb6605f82",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c013917e-22a1-43ab-82f1-ec1515432621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93f75cc6-c91f-4ad3-9139-a214ace56d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adb09f1-a00b-4e99-bfd0-5fd6dfebc27f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00318f4-07f3-47c5-b86b-4b79fe8a8dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8db66f8-eeb3-4b50-853c-8cb0f36aed4e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16372cba-7c24-445c-a1a6-0f1888dc3137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04471b8-368f-4dd6-892f-678531ce7d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c281dae2-5ee6-4c71-96f8-5fef623c241d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c654b2f-e304-4f58-9d30-1cf6d19ff9a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b24d498-200e-43af-ae36-9f6e00176e8f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4274b77a-744d-4881-a56b-c5f6ed89b7ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cc045e6-4771-4c76-b6c8-359364cbc4cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b229b34a-f4fd-43f5-93a1-4029830307e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c9d246b-395b-4b56-8ca8-5aec3f8c2139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392e61b5-9522-42b6-89ee-b4d614b94ea4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c9e0715-dc2c-43e8-a660-d553c76da031",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3980a54e-07e1-4c16-ab4b-b808ce5321e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64377176-3eea-46d8-b420-4a766794e37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1bf68b-07ce-4b65-8fc0-51a9f2a8af21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3671f508-db02-4e11-a961-dd90eff4e6a7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129d50ca-fe60-4f57-9eb1-a2432c72dfa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ede41a-e350-4dbd-9d24-4419bc0da1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b030028c-5713-47b1-a284-501bd6d68f00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f273e245-e5e3-42a1-85d6-7378bac6dd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd44ae39-7dba-4695-b977-24366dabb6a7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3569042b-4ea7-4211-9549-8e10fdf9ef15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68e5855c-24ed-4139-9e97-3191ffa6b1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3c8db9-b1e0-4706-873a-082b3544c236",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b58e99a-0968-4471-a4e0-c5942ff46113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7de56515-73c1-4f85-bf0e-e09f876e981f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b07226-7351-4bfe-8bca-1c2107eeacc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9282f8e1-22cb-4ec2-a6aa-464977dfe603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fb37ee-bf07-4a3e-b9cb-0801bc64a92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e371b2-e4f8-4379-bc68-59ce9a0ef868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18495af-b898-4262-964a-f915963373e6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0420dd99-210a-47f9-aa83-66a635deccb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207e69a5-22e1-4224-817a-73b163a9e664"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d6389d-9543-4cef-9f35-a7cf263ed7b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0f61af-4efe-4d32-9894-b215868e88f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297d3c9b-6c08-42cc-81a7-d57fdf5c03ff",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2152e21f-fa92-40e8-bad6-6f8fb94bdeb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87bd6a28-95c7-4767-838c-5fe117d15a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396ce5cb-e901-42d2-ace3-1174e3cfeea5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "852e04fd-533a-404c-aac3-c896260d9901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7178c1d1-42e3-409a-bb0e-ea4131718ecf",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9cc92a6-57e0-495e-8565-6f6286ebbbe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3a542f5-708b-46bc-9ce9-c5984cf55f28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c65e5b-306b-4192-a794-2fa46bfe7507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e0889ba-3cf9-49cb-b3b4-3f3af625cfc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a0b3a2-a00e-430e-9995-691706eef799",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b377faa-2732-4360-919f-6eb370f4cd20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c6da2d-7ad9-4321-a7f0-f20528d2044b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "258a1ba1-32cc-4dc7-9373-1c55fde80dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47a34047-b278-49f2-8d0b-6514682982d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19baec5e-406c-4f5c-980c-3c5a05aeb5c2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de3f6321-fc75-495e-acb2-473a6cf8f1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3c732e3-7a05-4ff8-bf24-e0e33fc2986e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64acf551-b7e0-480e-8fd2-c707c4c0a3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750df994-0213-4ddc-a51b-7a3eb15d69ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f456c000-da00-4c0d-8d02-bdf8731c9dc1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b2e98b-3cc5-40e5-a8d1-d798454a40a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdfd8f7-9caa-43f8-b2bf-88d8dade74cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98066909-3dca-468f-932a-53a1bffcd3a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44206581-800b-4e0a-894e-af6d21927b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e61a80-e7b5-4b31-ada3-2b5db57a9f42",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef4dd04-893c-4fdd-9f91-b2d23d2327c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa8b886-2128-4699-af19-635c6a67935a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e782328-fe87-451c-9784-88df3d44111a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06c9fc8-4aa6-4dda-bbe6-1bad841b7c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c15a31-80d9-4bb7-922a-9400547d1718",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de0cea8-7012-45bc-b77b-1f617811997f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ac0ebc-2256-4321-900f-1df2427199df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84899629-c71d-4457-9aee-46158f4abeb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095d0195-295b-4d6f-811c-3dd01d223fa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a0cf5d-265f-427b-bd5c-d16d31699a60",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bb3133-da67-4e82-904e-39e497474c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba06ee36-ae4b-4ff5-a374-117b4d35c438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "837c5813-8e08-4c91-a855-d59c6e929771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df81326-8b01-4caf-bb46-77365ff7a24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c87d8af-2116-4c55-b542-cdc2fb0fdfdb",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b865ed-92b8-4683-a219-3c550e4827fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca90765-668a-4e99-9bb6-ffad84fb9021"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e59c929-2911-4711-9be8-14604dcb140d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735513a4-2ef3-4fd7-9d16-5c8f064ea373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7694f25b-1e34-4fa1-9741-4a39d45355fe",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3a60d0-11bf-4e01-a249-39da77b5d906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39224458-d6d9-4ea6-ab11-600cf3d5898c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5a8ced-fa00-4b1f-826b-9b6826f79f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0922bdc-bf64-4a6e-ab9d-e20d253fb655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463f96cf-c78d-475c-912b-6fbef897976a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439a45ab-529c-4256-bde4-17f850f6e18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99c0cf4d-9795-4d3d-b33f-cca53d69b907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "642518b6-8a3a-463d-b2cd-eff3fcd5a710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2c7c0cd-14be-4d44-9e24-0744e8136346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa40114-36ee-4618-8b35-d3b392097658",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d74b81-ff90-4487-b777-109c352f441e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92d81d4-a12f-4e5a-9c9c-ed8594ab8213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddec3e56-4e8d-4dd4-a968-7ed82bd81474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef44a22-dec4-4958-9758-c188cd4ca81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "647976dd-f89d-4578-b614-a2e4aeb42206",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543d8b03-a6f7-4c65-b7d8-840bc933ae44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "205d4b29-9485-4bf2-bae7-7e8fd6af20fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be83aa0c-3752-4a70-ae1b-c6018bfabfe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "177b1132-e964-45fe-a31a-b29cd2d601bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df66572-6ed4-4bdf-9216-64633824cd30",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148b6849-7eba-46a4-ada5-103a8a84c60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e84d8e-58c9-4f77-8d5f-bc05810e5b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76ca02be-d741-4472-85d8-1e3e6acc583f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c90d8044-25f3-47a3-8828-5d3b673707b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68850a5-3b7f-4126-b228-156dce9e6c5c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f219c28-50e0-4713-b57c-5d970c3fe7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0fef12-03e4-48c3-ab95-47b4c49cc041"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0809ad24-3e06-46ee-957b-c78d439bb21f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dd8a8ce-2ed9-4363-a860-2cfd44a9a53f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256233e4-b872-4833-a2f9-cd439def9f7b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f5a369-f6ef-4d76-8250-ca94a1c76ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1561ab99-c99b-46c4-b0f9-50be80f26827"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd062f3-c2f8-4fa1-9427-d285af22eb07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09db4e7a-d076-458c-ba7d-b2e80d452b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62547256-581f-4bfb-b16c-b25f3c1019a0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d59c20c7-0952-4a20-a6a3-c2a141d2066e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba8ce518-957b-41d6-a664-67c8796df8e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6a78a5-127d-48ff-a34c-4a64a996781f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae90f02-39d0-47b3-ab74-64712044ce7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3cda6e-a91d-46db-a0bd-47c294a3f9e8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcf4917-1524-48a5-99b6-e9925d3b94e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c56a36-bc17-4ebe-900d-442f6c6ab4f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5068fe7f-ef9f-43eb-b842-b862e95b7b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794262d4-0c60-4d69-8b69-a244e83f3255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59a3c3fe-ffe2-4c8e-86c9-636527bd0b65",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0814ec30-fb58-4169-9b2f-e168210774bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea3c78a-8c7b-4ee2-be40-927dbc4eabc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78e54e9-8b7e-4e94-a643-d200090ff74e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90145a3b-58f5-4934-828e-454a6ccec1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623dc713-226e-4572-9f14-53f8e6a11a77",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f18c4a-43ec-4df2-8041-14af2161357a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bacaadb0-cc98-4ced-bdf0-71a26c99d373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d67f757e-a1fb-4bd3-b3e9-177b749fde83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c005e8-e7e4-4731-9591-1fe8d3dcfcd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825a2f24-662a-4aca-9b4f-f3ca2f5fe441",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231dea84-746d-42eb-b120-2dd05ef91ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ccb4a17-42b7-49d4-ab9f-bea3c1f16f5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1a4d8d-63e6-4332-ab74-7a4549a1c2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318f7769-9afd-48fa-8a89-5d9289e69925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b540d40-c71b-4281-86e8-58c43527b214",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8c733a-cdff-4495-b63c-43c1cf688820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08501699-9a4a-45ce-bd74-263ec8eb5a93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbeab644-c993-460e-9109-325b24890f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5431e24f-6b14-4e82-9a8e-36bacd942c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44e166d-9900-401c-8665-4792fc5bbf77",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8823a6c7-09cc-4338-8b5a-192fda5c3a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897d13c3-d3d5-4e16-9df5-7fd020f670ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6ee51f-05fb-4a37-bf24-5f26b97e3199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81ff9261-4950-4742-966f-f0944866d6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71899bc4-5c3c-4b30-a290-13a38326501c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34db8a37-5637-4bba-ae37-a9a08a04317a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6114a328-5447-4e62-a82d-2d8f39ada23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d15c2e-3c45-4046-90eb-aaba7e68753d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77abeb92-978c-4026-ba92-a99e610c6810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486eeb89-f884-46ed-a194-a53b28a7dc5d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badaf8ac-ffef-49c7-8d84-2b5cb5dbc80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8603b6-616a-45f3-9568-46bc968028ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6739a1b-13a5-4697-9912-d88385b07883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f5798e-7951-4d7d-b89a-df4e6397d985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56311740-672b-4933-8ca5-b3bb83819221",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd604ee-8040-4377-9bb5-e7dc11fd6214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f9ffc7-dc0b-4176-8dac-f1f56b5ba871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3825ce4-de7a-4e93-af15-78d1a4947708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2efd37cf-2c4e-491a-b919-895736e563ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbec961c-dda0-4ea4-9ffc-8472641ccd5d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e475f067-896f-4211-99df-f72085cb96d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b464f270-9c79-4e71-bf10-27ecc22ed11e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7a976a-22d8-4c0b-a240-69db8fc9872b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6df3e37-5059-4e3b-9f84-78b09ce92fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06bfbda-a7fe-4f61-b753-4400531b2e59",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d86ef76-e5d9-4a4c-8b9f-fccbbba4122d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407c88b9-1535-472b-9bd7-f7b47f434807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb04ce8-2d74-480d-804c-57c46f3e3e8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa04c2f4-7f00-4eb7-8609-840ac5b285a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f50dcd7a-d145-4c83-b72a-fc08a94f3526",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a82467-20bd-4432-a316-3849a857e15c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "976f8a03-c268-4b5f-b075-14a22f393efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d91960-36d1-4c1a-9566-f6bc1e89ea63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b912ea6-9b7e-45c9-a02b-14a922c447cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d631333e-f7f3-432d-8ba3-cf068c08e09d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1fd904-5e25-425f-bea9-4ecf5722e3b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bdcd33-a3ec-4c67-82ea-8371cc382efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e406b370-a904-4331-8000-31831484a9c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a040b8c-5f65-41d0-9f86-5e07253d62a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad943445-cfa0-415d-af7a-9716fb9d5b24",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ec2f3d-1585-4a10-a15f-e5f744ad12bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14447178-c48a-46d0-9eae-63e621bde8d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e17d7bb-b5f7-4da8-887d-1c927ddf0cc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0aaac3-263e-4e95-9618-2f104365e311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0f5e09-e81f-4305-ac30-c23b497f9b22",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244fd458-508c-4825-b826-c65fcaaf437e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1fa39c9-2f88-4171-9a85-4ba1825eb9d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f83b49-f042-47c9-98b4-39d2329dacce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1cd164-a570-4e55-a350-d5f8a4cff11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed658ed9-d914-4774-9bf4-180ef8a030de",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e03204-b77f-47e9-bdbc-6235f0355cb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "098079f5-1e1a-4efd-9698-b400c91621d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "339997a1-5161-445a-9799-f65a8e83bad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6209d8f8-bc1a-47f5-87d9-f35997080aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3ec00e-2329-4a2d-9e18-da45339d37ee",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37aa10b8-94cc-4bb1-8d4a-24ded280a23f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a91ed08-6875-449e-8a2a-939910d3ff3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9313b190-c5eb-4dde-9ab5-78ad86dd3cac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d77db5-8a22-4fc9-b3a6-98775988fa7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf4c6e8-036a-4eec-83fc-c23d289db8ee",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe0ea5c8-a651-4e9b-932e-90384240efff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59fa2b86-c1cb-4119-bd73-a8df5785174d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4032eb-4f96-44ce-bda5-0f50d5893064",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad3a3a9-484f-4073-84ee-f9ddbedaa924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdfb5d2-efcb-4b91-83c2-cfe6e71ead43",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544eda44-d1d1-49c6-b141-19155e217efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74cc5149-2e99-45f7-a7d2-405e5e4379a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a473d7-9842-45a0-8db8-000b2d224ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ccd25f-2856-469b-b613-8df902b11574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ba757e-469e-4c59-b0d5-a916ebdc24e5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c832f4b5-baf0-4e0e-b330-0cc8bd3dadf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "785f98d5-a3a5-4267-8f78-26c15fd44e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1e6fa0-2ba1-4187-b9c6-f09a5efcb0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ccd7ab-9b11-410a-9d6d-c51356f3f1ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c367ecd8-0184-43d3-88a9-5e716fe53beb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc84a90-f16a-4617-922a-98ff702b6035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd27fe1b-1f43-4ea0-8873-bb429881f0b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f79032d-256f-403e-b14a-4ecae1bae987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98970e14-5cb5-410f-a31e-dcd399a042db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711e4415-65ba-4331-b262-5b4f023615d4",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c5f55c-78b5-4c37-9c29-0c36445d50d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4df8aa1f-4fac-4394-b9a5-370f15d67b56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd09bbe-86a1-40f0-bc19-c491ce188d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1b82e6e-15a4-4a75-ab4a-eeecf402c3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f4ca4b-85ff-4ace-8eea-a9b420849412",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f9e1e1-ffe5-48f9-b6a6-ab24d2d61be8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "716f8873-e84f-49d7-a02c-33b8fc4f0bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd65a675-8f93-458d-871b-615fca9a2548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77805d6-5d65-4254-be7e-f51dbba930e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fd348f-d1ad-4e33-8921-33b2d0e76a91",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff16501-c995-4c8e-bc64-44e98c18c1e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3752bd6-34ad-403f-82d2-06fbd6bd7f6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2562bbee-eddd-4989-a864-d012d45b8310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682ddf3d-8f98-4646-870b-ea86b7db6b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36750e70-97f3-4fb2-95e1-336c7806f713",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8afabe53-ea5b-47e7-91ee-373ddfca2bed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c5d0f7e-8e6a-408e-8efb-45cac8d2d109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91093a89-96a0-488b-8a5e-7e9a03a9990a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5624d4bf-0da0-417b-89c6-a25075249207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96035421-85f4-4137-acf9-0d200817a619",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbef93f3-f2f3-448a-b73f-36fc9222e0c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c52b46c3-1cd2-47b5-a645-67c6a6b01638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e368af-4c0b-4c68-9539-545d3e88b435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af4d0883-bdfd-4206-93cb-e16c2609aa99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "765b9f06-e20a-4c5f-8382-5a819e063452",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bb5071-c413-4dd5-aea9-c3c7fde41525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee008de3-c148-4175-9244-37321962e0ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a9df145-ec99-41ed-8dce-3a98aeb09366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677315f3-a22c-4350-90e8-835c5e71122a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f05a7d-22ca-4864-ade5-a7a1052ffc8d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c54a4f9-3db4-4e9e-a21e-0e6434ed4cd4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3cfc450-96a6-417c-982d-1f4860e42ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5aa6c9-79ad-47df-9671-34af1cccf19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86902d0a-09fe-4233-848a-9ca68360121c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa292d65-8f45-4032-aa88-826e31ed7f27",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124a0f45-0f27-4acb-89e1-61b68b2f3035",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4748e7ae-2523-4fd4-881d-07a8db60615b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dc33be-2500-43b4-bebc-28acd89a884f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3db0c5d-bd5c-4cb7-ad98-04bc849cbdda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae83c21-6935-436e-81ac-2d72cab8a471",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af680154-83f0-4eee-b3f5-ffabb09523e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "490951f2-3608-4e35-bb4b-b52295ce5122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c6d8cc-656c-4798-87cc-ab7542b8f0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d52cde6-64af-44b1-80b2-c5eaafd02f14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10b2d13-3245-45d8-be62-0eaf556e05c3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929744f0-7b79-4216-ba78-85e0bdb4465d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34e65521-a266-49dd-b32d-45bd977d63a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e956977-52d8-4fe5-a881-eb254308f1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ff4034-e833-42aa-a36d-f7ac826a870b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48cee0e-4207-46b5-9e0d-08912aef9039",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fa140f-248a-4891-b68f-8791d6f5c347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e162cbb3-7318-4689-877d-6781164b8509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3286b097-70e4-48fa-9480-2a06aafbf99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0d00d24-909d-4c1e-8d52-c012611c1486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9be32f-3dd4-4d4b-be25-3ce8c982d974",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d082cc9-374d-4ceb-a761-828718b5ca81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc149f62-8ae3-4a1b-b5e8-6cfe4d199d16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17b2000-c919-4ace-9fe8-cd324ccea7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68aac1c-7832-40c4-b0f7-738010b94e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d0d51e-7228-4a9e-b770-7c196adeecfd",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73ddd1b-3357-44a6-94ca-73b41bd1a305",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57dff3c4-1677-4ba4-9af1-44325732d7fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e23be0e-cfe2-4fa8-af83-94094782bad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc430004-d608-4b96-a00e-1cc35bbb48ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb359093-0d42-42f2-a7a4-d111f45381cf",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c10963f4-88bd-496b-89b8-30aabdc162a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d15eb5f-62f5-42d3-a138-a76547ad1ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da9aed88-421b-41c1-84c4-a8ac64b6aad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84eaed53-386d-4d4f-ab59-8a5ccfb823ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5663f4ec-842c-4c2f-a4fc-6df8aa8ae985",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57417e04-a12f-40a2-8c15-722c657be533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7a0dd97-1cd4-4a3d-b14a-30677481e35c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adce18b1-f081-4976-944c-3e0b88d31757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a846b211-46a5-4128-8e80-146ff1070bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c30906-41cc-44bb-87ac-819159bb4c06",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae49425e-c0a5-491e-987d-deb57a8ca7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3910ff0-1a8e-4eae-9cb4-3133f8577c8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b41fe3-f7d6-4fa1-82f0-2913d2522ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b43a0c5a-b75e-4275-a901-c603f3a70735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27868db-0a3c-4bfb-89e1-4a8f64b1ebad",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81835ac0-97d3-4eb0-bc05-0b6f167f39ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b20d201-18b8-4d6f-b500-bf669c198905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794d49ed-0d16-4133-a4f1-c3d93ad03316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a23554-a8f7-4dee-be41-7534d3578f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0fcfd7e-9d2d-49b3-9037-77e45a6bdade",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48e6f7a-7b65-4188-8908-f92fde482006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90de6aea-bd7b-4889-999d-8605fe562828"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3db339c-24fa-42c6-b589-1c02226473dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcbd8ab-0f3f-4de8-85eb-d1b7e3fd5559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba98128-7e8e-40ac-9d12-9758c59811e0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44204616-19ad-45be-9846-5b3eb861cfea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "688e76b3-e5b4-4eb6-a4e2-f3126f1dbf92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2607dc8-69f0-4231-810e-bac39d200f0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb642a1-c7bc-42d9-b21f-578c8e193b9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8381cb6-0e1c-4150-b4c2-e31003718141",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed385f6e-17df-4936-91fe-a12cda9bcbd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7bfba9d-e033-44b0-b8ef-d2137aafa110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69db20e2-1adf-4ab3-a806-9475b1e6cf3b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f0e5f0-08f0-4d60-880e-f91129836383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af4f9b4-f9e4-40ec-931f-32cc9c5a5c8f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aacd7bf-5b07-40bf-87f1-0d70efde506c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aacc8a60-f224-477a-a482-6f5289118075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a4cff9-4cd4-459d-89f6-7efedd955845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d3724c5-9d8e-43f0-86e8-f1c6d8eed58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46db2b59-672d-46ab-954b-3b3038cd90cf",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03702df-1d0a-4a04-86e8-6727252230e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c436264-2f65-4279-9e9f-86895a972591"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6a93bf-1b9a-45d0-afc3-8f921b88b639",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee319191-0480-41da-b2f8-59507da1638c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbff14ea-9d62-488a-b293-e059cc7338a4",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e35982-1796-445d-b411-74eeb082c16a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a95c4b8e-c757-4c0d-b8cc-fc6947d0f6d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b54fe4-4177-46fe-b7d6-5024b66aa30c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcc3868-eb9e-447c-9a65-5383d9b25ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cab416e-71c3-45f9-8d9b-e7868bf55b7a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a0db72-7f3a-489e-aea5-d7d0cbdd0e95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20211553-d37d-4ec9-ade8-413a330cd0be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060b6491-9866-42d4-a056-5ab006b5b9e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7b12f5-041f-4ef8-a651-eb4e66ed380f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcfc86fa-5e77-4164-bc5d-9530e01e706a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bc4cbe-6f7f-4ccb-94ab-cc5f7815d24a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8648f3d1-fd00-4939-9b89-25c3fcf8284b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce7110e-c264-418c-bf29-033e5857acc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "977965db-2318-4bbb-8418-589e0e1f5ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50477da8-668b-4977-b269-2e7a5bcbc14c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861c9ef0-9ba4-4548-9655-a62052533dda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a6c574e-6595-42db-b5ef-350bd84c5b83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8264a17-39f2-4202-a848-a492b68bb7b1",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e1356f-8ba3-4c25-94ad-d5bd86cb5ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd38fcc-c53b-4b5c-a585-1cd571a23cb1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fc86f6-7d05-4c35-9819-badce3044201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c063fd5-85b6-48bb-a28d-5ecb0c17b896"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65281605-43d8-4ccd-9289-265ea3f80d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0beaa4e-bee7-4641-be30-9abc007a7155"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69a5db09-cff5-4bc7-83d4-aaa7707aa8b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78906a87-360d-489f-bc42-4dec4847df07"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "235a3787-73f5-4999-8ee5-f08d08ea0059",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2485d38-1c17-4c8b-b6a3-b60c302908ac"
                    }
                  }
                ]
              },
              {
                "id": "bdefc4a4-55f0-472b-b049-4c65a5d68180",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "85ad6c21-32cd-4b79-8f7d-b32db6cb66f4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571dc865-5722-4079-9739-9a4a95517a5f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b59d3644-9867-42e7-89da-7c497250c353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5325d56-4c9f-4033-a45d-0b64e5fa8ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "97a354c7-744a-4fce-be02-d11fa9a5c761"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a3ccfbe9-59e0-4f07-99c5-7d4e49aa2f8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61012157-8d78-403f-a811-38792022401b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "76daf6dd-5c46-4aab-accb-ec5a79785705",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af68b906-8c48-44c6-8980-27da677f3640"
                    }
                  }
                ]
              },
              {
                "id": "c142ef1d-0bee-4dea-a5d2-7d2684ac4f52",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "4227e6a1-de81-4e58-ba86-03801b5edfcc",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40ed6d3d-2f4b-4502-9abb-311576e8cedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "aa0f0012-59cb-47b3-b30c-7970c199a4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee17dd9a-0ff7-440f-8e74-011c575f7095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0321380c-7299-4d39-83cc-66dbd7b78423"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ebd53b5f-74cd-468b-b37d-3c086adf87d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "845d4cfc-5888-40fe-95ed-3c6c867f925e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eec442df-0b33-43c7-858a-3ac1f5035b8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7274fe1d-d9d6-4073-a30c-b8835aa8e821"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e1d1ea08-e9cf-4322-96fa-15f5d64d4cb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b880ec92-9ca9-408c-ae00-e97bd8f6cd4a"
                    }
                  }
                ]
              },
              {
                "id": "d7a4e123-3d45-438c-9608-b0592fa3b869",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37969fb2-c3ef-4808-b46c-4ddce618baff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0ce5e41e-0d1a-4ab5-a12a-29be064bd969"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f311afd-09e9-43ce-bced-73dc998a13a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a554d835-68b5-4b84-b6aa-25fa81cbce74"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb7a3f95-38a5-4601-87a9-4ac329362ebe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6c8a2f57-a032-45ac-a557-3c4eb2a14a2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59b3b957-bf0c-4c27-8ae8-bf11456e052c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "64cab348-5236-4737-a364-fac0463c4469"
            }
          }
        ]
      },
      {
        "id": "bd8b4575-fb6b-4142-8444-92bd0fa7cc86",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a94e2ef7-dc7b-4593-a1da-a98c5f968fea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a3d09f36-461b-47af-80ba-4c646c1b5e43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dea5fb17-989f-49f6-92ff-a3e7dc78ace5",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feefcbee-1bfa-4eb5-be1d-cfa3edab7602",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5d595b87-dc0e-4dc3-b61c-f943963d8e27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf790a2-c107-4414-a1e8-3ece1d12aff1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a22a371f-8fc2-4335-a153-75ab6eb269bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de637b06-5300-4b8b-b4fd-c49e4c878ddd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d62126b-185b-4ff3-b15c-c558cbb49bce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "648f1514-4e16-4951-9cc2-4973dfdda650",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54786ff7-d35e-49d0-8bb2-87388719d6d0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e454d7da-b736-4e10-b1be-5e0618d04b36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f03582e6-3b73-45e2-858b-497e1b111f61"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "abe13354-9bc0-4b2c-83ce-2dde59e4cd1e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1b863a1-e3ad-4d99-9c1c-3740caee6f30"
            }
          }
        ]
      },
      {
        "id": "4b8ad70a-5c52-4f90-8ab7-11a0324a3b31",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "49ee5bda-2bca-432e-b25a-10cadde5b919",
            "name": "Negative Testing",
            "item": [
              {
                "id": "455cd720-996e-49af-a676-35c34a08404f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bced7676-eeff-4123-bcd9-25df567b2e09",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20fd089-7287-4ba6-a320-66fa2b187114",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f165737c-8709-42ad-b1ea-7135f70bad64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24611f5-6e37-48a8-8f47-b62aa65439f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8e647e5-6ca2-4df1-b28c-65ca554b2389"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4eb7d142-2c2c-4ab7-8a2d-742cc917458d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfd0da23-4d76-4d99-9ba3-e93ba34c5a9e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1a848c8-ec99-4bf1-be98-d1885ac4710e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e68c507-a0d9-4f93-9f30-ed1a35c150e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "504a7e37-5c06-4490-b7e8-90d94fe602d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8971c68e-5f9b-4046-949b-0ff799fdb551"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb6bec26-5958-480e-8354-8a3c6447e303",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ce978b9-04c0-4fbe-9c37-8acd18a56770"
            }
          }
        ]
      },
      {
        "id": "343e8559-554d-4848-943e-5f0d31f9da4d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f4d2bb1f-c0e8-4a96-a50a-cead7d08807e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c5fa98b-7bcc-4309-84c7-419a73492769",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "efb3f1f3-edaa-4e8e-8956-784afd9fc2b9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc4fff8-1bdb-4a56-af1a-edd55808818e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "969c025f-d997-4376-9fcc-ed4c3e8bd5ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776a40aa-a7b1-4a77-962d-2f62cdc5bd3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f4f7f66-4d12-45d2-94a5-db5d4a284c45"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef38f58e-27e2-4ff6-a082-47d2ac4add2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8b95b66-7fec-4709-94d7-0d7ffa282fe9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9d86c0f-5f48-43cb-a96b-067cf196bd89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfa464f8-abe2-462f-bb8b-3fc16497e1fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd289135-0191-4252-ad22-42ff18c6b1b9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "56dcc6c4-6b03-43a0-ba21-859a0d58a444"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf2e8ea4-ced0-449a-bffc-78ba39129573",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bfcc0f64-2116-4abf-8e1c-1ea66c7add46"
            }
          }
        ]
      },
      {
        "id": "419307cd-795b-4803-9b20-a4cdfcdf4eec",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0beb55e0-e3bf-4d8d-a8ef-3a4a2fc30b17",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38bdddb7-438c-4d1d-a28e-7770d688911a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "54fb6e84-fdaa-4607-9395-e2a78d2c5151",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8a945d0-6c95-4ad5-89db-764c89585c34",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54811328-a0b1-4a39-8201-a93b3f53509a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.04365079365078,
      "responseMin": 9,
      "responseMax": 595,
      "responseSd": 73.4525146208897,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716079187216,
      "completed": 1716079210268
    },
    "executions": [
      {
        "id": "e221bc8e-f522-4a58-9248-a73054a768e3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c28b84c7-3ee6-4628-b704-2f984948a727",
          "httpRequestId": "30cbd761-8633-45d9-a494-76567fe299db"
        },
        "item": {
          "id": "e221bc8e-f522-4a58-9248-a73054a768e3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "32688f1d-2ef7-404c-8b3d-cfb358bfd0e4",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 0
        }
      },
      {
        "id": "6fc3d39a-f4f4-47b8-b5b7-bd02de4db7f0",
        "cursor": {
          "ref": "eae7d086-fa14-4f72-8220-d3a58f61ea96",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2054a616-8292-4216-89d6-29fcfbaef924"
        },
        "item": {
          "id": "6fc3d39a-f4f4-47b8-b5b7-bd02de4db7f0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d0485166-de87-4346-9690-883dc7f42d51",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "4d2fcd5a-2cab-4df4-8506-b95f95bc2e04",
        "cursor": {
          "ref": "3dab81ba-0e7c-4cce-935b-a5314ad1638c",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9ef1f40b-76be-43e5-ba86-e781e4399322"
        },
        "item": {
          "id": "4d2fcd5a-2cab-4df4-8506-b95f95bc2e04",
          "name": "did_json"
        },
        "response": {
          "id": "a9f3d90a-b0e4-42ec-b4f2-f1ba17af287b",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326e1623-63f5-4132-bd7a-811b5c37a956",
        "cursor": {
          "ref": "7fffbe9e-9a99-41f3-a505-2b2f9907d0fb",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "74a72ca1-c300-4c84-81f3-b9ba148d8c29"
        },
        "item": {
          "id": "326e1623-63f5-4132-bd7a-811b5c37a956",
          "name": "did:invalid"
        },
        "response": {
          "id": "ceb07c17-5f78-47b5-8ee9-286eff94fad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326e1623-63f5-4132-bd7a-811b5c37a956",
        "cursor": {
          "ref": "7fffbe9e-9a99-41f3-a505-2b2f9907d0fb",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "74a72ca1-c300-4c84-81f3-b9ba148d8c29"
        },
        "item": {
          "id": "326e1623-63f5-4132-bd7a-811b5c37a956",
          "name": "did:invalid"
        },
        "response": {
          "id": "ceb07c17-5f78-47b5-8ee9-286eff94fad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2c1096-7a4f-420c-ae3a-182e7523e6b8",
        "cursor": {
          "ref": "d0263356-d606-414a-821a-26ea2be9507b",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bb0469b5-29dc-40cd-a4ae-c63eec8b45a1"
        },
        "item": {
          "id": "1d2c1096-7a4f-420c-ae3a-182e7523e6b8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9361847c-df5f-4884-ad3c-4a1c126c4304",
          "status": "Not Found",
          "code": 404,
          "responseTime": 137,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f063b85d-a9d1-47ea-8749-906b40ff21ea",
        "cursor": {
          "ref": "cc88c58f-3ff9-4cc0-81ca-9ec65a1e83c0",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "945ff4ae-4bda-4c5f-8f98-ff62725fac74"
        },
        "item": {
          "id": "f063b85d-a9d1-47ea-8749-906b40ff21ea",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0d743db6-df3e-4575-afbe-f7368981df8a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9045b281-cfdc-43fe-b5c5-905d3e1a6e59",
        "cursor": {
          "ref": "9edb5a42-eb80-4d6d-a185-833d233fc733",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e6a8fd16-9811-4962-8e74-3d919a159cef"
        },
        "item": {
          "id": "9045b281-cfdc-43fe-b5c5-905d3e1a6e59",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7047630d-f804-43e7-865a-a2a4b902213c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1317633-1fed-4085-960d-cccce72aa7c2",
        "cursor": {
          "ref": "750d3c79-71fe-4fa7-9021-9b8d1299488b",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "fc41b651-b125-4a14-90e1-60da01269a3b"
        },
        "item": {
          "id": "b1317633-1fed-4085-960d-cccce72aa7c2",
          "name": "identifiers"
        },
        "response": {
          "id": "0d7617aa-d32e-40b4-86f4-7bac18e7aeeb",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed86404-48ea-4907-9f09-fc20f34b00fe",
        "cursor": {
          "ref": "2a1fb73e-cd99-4143-b7a0-8b66a2d4ec81",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "280dd233-ddea-4dfd-b681-3013020a76fa"
        },
        "item": {
          "id": "4ed86404-48ea-4907-9f09-fc20f34b00fe",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9fad2994-61a5-48a3-a157-c292697c7e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85161bf-ac7d-4061-bfb3-0ff1260d490e",
        "cursor": {
          "ref": "e81fb7df-6a34-4ab8-8ce2-0c6be2dea061",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e418edd7-554e-41e1-87c6-ab43d0118dc4"
        },
        "item": {
          "id": "d85161bf-ac7d-4061-bfb3-0ff1260d490e",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5f822d9b-d66e-4ca3-b9cc-ecc8df2916df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f17eae6-02ce-4a22-8a21-eb6b7e08721e",
        "cursor": {
          "ref": "d4c8284f-b765-4ac8-8aba-5dea64cb8742",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7676c145-a2ef-43a3-831c-95fceb03ee36"
        },
        "item": {
          "id": "3f17eae6-02ce-4a22-8a21-eb6b7e08721e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9b929c56-c454-491b-83b9-1d8025d02d7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d8cd83b-3c91-4328-8544-5a375ac575f2",
        "cursor": {
          "ref": "162c4d00-38b2-4ac3-ae64-b2d9d75c4f9f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7d5f4f2e-7e56-4a28-be24-b861cefadd92"
        },
        "item": {
          "id": "7d8cd83b-3c91-4328-8544-5a375ac575f2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e5099209-80d6-4e7f-8e6a-de1d9731b51e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e63add-f334-47c8-a20e-e7bebe97a8b5",
        "cursor": {
          "ref": "8677db1d-87ed-449a-ac2a-ba07ff9b3324",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "dc0e1b10-8937-493d-8b61-af77207f2b92"
        },
        "item": {
          "id": "31e63add-f334-47c8-a20e-e7bebe97a8b5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "34275042-6e3f-43cc-8b9e-aed57aacf224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9317dd71-45d3-49b8-a867-9ded6cf97ae7",
        "cursor": {
          "ref": "2de4774c-848f-4954-b799-43fae244f0b8",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "736a29d3-2c8b-4fa7-a159-bf3884691a42"
        },
        "item": {
          "id": "9317dd71-45d3-49b8-a867-9ded6cf97ae7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "96530f8a-a442-4283-9410-0b05485f6fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cb4380-f221-4338-b65e-1ab510b26922",
        "cursor": {
          "ref": "98431ffb-7f4c-4ad0-a95f-758c2a51a55d",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3b784dfe-6a2f-4dbf-85a5-a06cac8f0a90"
        },
        "item": {
          "id": "93cb4380-f221-4338-b65e-1ab510b26922",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "58ca3385-24f7-4321-afa0-e2de2f7b3000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f131a4-7415-49d1-a25f-b5c55d65e136",
        "cursor": {
          "ref": "25195d58-4bd3-4672-b10b-4d0a6121ec8e",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fd391ee1-5242-4bd7-9bce-4a0b23dbbc45"
        },
        "item": {
          "id": "f8f131a4-7415-49d1-a25f-b5c55d65e136",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0bd9b2f7-076b-46d9-b04f-08a06740f744",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e771b3-8e8b-4fb1-9a48-c3d16230b883",
        "cursor": {
          "ref": "0058a4ec-e73e-4b4e-b551-4991ab159758",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f5a835d6-c058-4c4f-828b-4ffec0c260c0"
        },
        "item": {
          "id": "61e771b3-8e8b-4fb1-9a48-c3d16230b883",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e7c273a0-6742-4a1c-bc2a-e13f96c37397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2e900a-9bc3-4560-806c-abb552666eae",
        "cursor": {
          "ref": "799d3aaf-c439-4db8-a1ac-ea2ee1abc07f",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9ee8722d-e130-40d0-a91f-3eac2fe7d4f6"
        },
        "item": {
          "id": "db2e900a-9bc3-4560-806c-abb552666eae",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "89dab91e-c50f-4633-bf9b-3bd667e1f887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e0c2a1-c47c-4b88-b3c2-c6fa3b2d5b19",
        "cursor": {
          "ref": "78a8cdac-4ac6-4062-80d2-0e5611d62600",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "eb25dede-184b-451a-9309-3b32daf1e516"
        },
        "item": {
          "id": "54e0c2a1-c47c-4b88-b3c2-c6fa3b2d5b19",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9a66453e-b9ab-47c0-92ed-8fe875adeee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa440a0-6665-4fd3-8ca8-33f38a2a3e06",
        "cursor": {
          "ref": "d7a71b4c-1186-4572-83df-079fdca6578c",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cf0d4b77-2a5d-46db-a81f-4128e92ed709"
        },
        "item": {
          "id": "efa440a0-6665-4fd3-8ca8-33f38a2a3e06",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "de8d0f12-b7f3-48fa-a4c9-097f5d5a6154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f36ac1a8-3e65-45ed-8f8c-5332453c7e5f",
        "cursor": {
          "ref": "f9276d64-7b86-4c19-a3c6-750d86d66670",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "824462ef-679a-4b0c-b46b-6d4cc86126fb"
        },
        "item": {
          "id": "f36ac1a8-3e65-45ed-8f8c-5332453c7e5f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "145d456f-52cf-4abd-b36d-77caa2bc2c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16be7cca-8c6b-4b0d-b227-cc9126e5af15",
        "cursor": {
          "ref": "d1578122-7380-4cd0-ba76-68af11e913d5",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ebb35d84-9a07-4d7b-babc-a9230489acb4"
        },
        "item": {
          "id": "16be7cca-8c6b-4b0d-b227-cc9126e5af15",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cd78c302-4919-4f6f-b42e-5497e18adf50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded78b09-87b5-442b-91ba-0aa9de4f96a0",
        "cursor": {
          "ref": "36d0e628-1a7b-48fd-8f06-9cb2cdf3e5e7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "47b1a5e5-96b0-42aa-b1c3-793475666441"
        },
        "item": {
          "id": "ded78b09-87b5-442b-91ba-0aa9de4f96a0",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ea4ed786-642f-4e6b-b4ca-76251f0b08b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2f01c0-8c2d-4029-a258-8aa5e1032a17",
        "cursor": {
          "ref": "ae141ac9-183c-417f-b20d-f641d34dc190",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f9b504e8-9e89-4e28-93d1-d28fe3972a74"
        },
        "item": {
          "id": "0e2f01c0-8c2d-4029-a258-8aa5e1032a17",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d2d2d260-f89a-41f3-a8ce-b8d39eedbdf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c46f2a36-6c23-4879-a9fb-7458d33b91c3",
        "cursor": {
          "ref": "305a4c39-0b1b-43ae-837c-43dd03624575",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dfffdde2-a262-4b0e-9633-9d6e9253b3ad"
        },
        "item": {
          "id": "c46f2a36-6c23-4879-a9fb-7458d33b91c3",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9ced6f3e-9a4c-41f9-875a-fb68028ebed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e421102b-8c63-4f5e-a56e-f9aa9d07e965",
        "cursor": {
          "ref": "7adf4233-5037-4791-b3ce-fa1c313ada69",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "94bd1527-b838-409f-a14e-d2eef7ae9235"
        },
        "item": {
          "id": "e421102b-8c63-4f5e-a56e-f9aa9d07e965",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "db48dc24-b923-46f4-9152-f4b38ce83a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8c57bd-1534-4aa7-a2b0-93c5e0740ebc",
        "cursor": {
          "ref": "b1908759-3650-44e8-a333-82dd4b462306",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "beabd01c-bd88-4861-aded-53bd289272a0"
        },
        "item": {
          "id": "0b8c57bd-1534-4aa7-a2b0-93c5e0740ebc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "407e2e3e-9fa6-42e6-8d79-09a349d973c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1474f35-af39-46e4-ba05-2e0b050eaa7b",
        "cursor": {
          "ref": "ab92d247-e704-490a-9244-3c1cc3f2bd89",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2da1e647-9e60-4715-91f9-ea0346713beb"
        },
        "item": {
          "id": "a1474f35-af39-46e4-ba05-2e0b050eaa7b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b84a88e9-cddd-4dfb-8505-74208a7c171b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561d45f2-e711-405d-9846-8870362cbbb2",
        "cursor": {
          "ref": "3652b074-cae6-40e2-a4e4-1c6275eaf157",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "fbadf758-6b8f-4987-a39c-21da541cbcae"
        },
        "item": {
          "id": "561d45f2-e711-405d-9846-8870362cbbb2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "d17fd7db-2c8b-480c-b94e-d35b2544c5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "777d04d0-7629-44c7-afc4-58f89bb555bb",
        "cursor": {
          "ref": "fd784e44-c59e-4a46-b712-4e7ec94efbe2",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0576354c-2ee4-4d54-8f7d-4da960624fa1"
        },
        "item": {
          "id": "777d04d0-7629-44c7-afc4-58f89bb555bb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "acaddec9-29ea-4ba7-89a3-dc5f5501149c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1bc14d9-b7a5-436a-8d1d-a9492aa7f1b4",
        "cursor": {
          "ref": "907d0c47-7e52-49ba-8d44-92f73c25a6fd",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "14b9daf1-f9a9-4cbd-8729-9215b00dc733"
        },
        "item": {
          "id": "a1bc14d9-b7a5-436a-8d1d-a9492aa7f1b4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "dc171e91-3712-4bb4-b911-eb732e5972b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baeae498-56e2-433e-a490-b0a82efb3920",
        "cursor": {
          "ref": "5627fecd-7c44-4e8b-a27f-3f3f8a67854d",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d2332be8-26f8-48ae-b580-fe49deb7d316"
        },
        "item": {
          "id": "baeae498-56e2-433e-a490-b0a82efb3920",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3a84df90-d6bf-4437-ba56-9c9ae9b4bd9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3cdf1a-1cdb-4acb-88fa-b0cc4e1f55c3",
        "cursor": {
          "ref": "8db7d40e-362f-4ee0-8953-b7b7aeea5c65",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "436237ef-1973-4a4e-9471-b99c001f3c35"
        },
        "item": {
          "id": "da3cdf1a-1cdb-4acb-88fa-b0cc4e1f55c3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a76140e8-28ea-4580-ab01-8ac76ff62069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0b700d-03cf-46ae-a015-7f7d30112f21",
        "cursor": {
          "ref": "2a26da78-c390-42f1-bec6-a7b7524c3a8d",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6bd95383-66ee-4c67-9c05-6eb78388b375"
        },
        "item": {
          "id": "de0b700d-03cf-46ae-a015-7f7d30112f21",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "572a3654-adc2-469f-a88c-01db3053204f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb41211-4368-4df2-8d34-9f8c478b6dfe",
        "cursor": {
          "ref": "7e929556-09fd-4dc2-8fa7-877a2ea957d5",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "840ca19e-043f-40ce-a689-e5586807ac76"
        },
        "item": {
          "id": "7cb41211-4368-4df2-8d34-9f8c478b6dfe",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5c850787-43f5-4a7e-ab1a-916e7097ab43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfbf25f-28b3-4d12-b7d1-d6cc07cf1180",
        "cursor": {
          "ref": "9b02fea2-b616-4ae6-afe0-2f73a7c0bf1c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8e91b267-1fda-4681-aeb8-519d45a34e20"
        },
        "item": {
          "id": "ddfbf25f-28b3-4d12-b7d1-d6cc07cf1180",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6702f917-1b5c-470c-9f1b-9fa9822aa18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9555c7-4737-4cf8-a7a1-f3452b3b75a7",
        "cursor": {
          "ref": "00c42df6-285e-4ba7-8f57-dce8bb718d03",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "023d5882-ebb6-4ff7-bf44-e9822b4adc19"
        },
        "item": {
          "id": "4f9555c7-4737-4cf8-a7a1-f3452b3b75a7",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "8d216acc-1ad5-47a1-afce-61a136dbd6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "786ba6af-30d3-4d71-b36c-bcd422e0f542",
        "cursor": {
          "ref": "af871e2b-4aa4-4c42-83f6-390debfd9b7f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4afa2566-5659-4792-b9f6-1207b875e086"
        },
        "item": {
          "id": "786ba6af-30d3-4d71-b36c-bcd422e0f542",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "684f4164-7449-4955-bc09-6d3a9430a021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf09b43-0050-4345-a79b-38e48e278006",
        "cursor": {
          "ref": "4230b950-30a0-48ff-908e-ec7b5babaf5b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6545f037-be1e-4b61-9ce0-296c48d207ee"
        },
        "item": {
          "id": "acf09b43-0050-4345-a79b-38e48e278006",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0f86c7b9-fbb1-4331-8147-42951e39d12b",
          "status": "Created",
          "code": 201,
          "responseTime": 595,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fea2f0d8-4d6a-43f3-9b5b-db92c5e0ec87",
        "cursor": {
          "ref": "3cbe7160-2d43-408b-b0be-9bb62ee2a6df",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b459a6f5-411c-4d99-85b8-d6bdba044326"
        },
        "item": {
          "id": "fea2f0d8-4d6a-43f3-9b5b-db92c5e0ec87",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9d2e99fb-31df-4477-8193-88b4d3a30e37",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cdae8303-96f2-4504-aae9-f215d315cf53",
        "cursor": {
          "ref": "29404163-27f6-4c1c-a542-d54d75b8453a",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e77649b4-e3b2-413b-b53b-1fe77094d301"
        },
        "item": {
          "id": "cdae8303-96f2-4504-aae9-f215d315cf53",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "48d05422-2491-44c6-997a-354164be6b26",
          "status": "Created",
          "code": 201,
          "responseTime": 236,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ae35cfd2-0e7f-4d59-bfad-528beadcb9c2",
        "cursor": {
          "ref": "6c3d859c-a42f-4664-8fd5-eb018bca50ad",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8360de9b-55a2-48d8-b8ff-56d752735f2c"
        },
        "item": {
          "id": "ae35cfd2-0e7f-4d59-bfad-528beadcb9c2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ba3e88d7-896c-48f8-8628-a1cbf7652726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1967d8c-1401-455d-97e5-216cf43b0fe4",
        "cursor": {
          "ref": "5ff4a37b-3a10-4c4c-a128-85ff677ba3c0",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b505572e-037f-4367-bf3e-b3f2590cd485"
        },
        "item": {
          "id": "d1967d8c-1401-455d-97e5-216cf43b0fe4",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "26c2cfbf-256c-4932-914f-52cbe985aa68",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "521323f2-97ce-4cb0-9760-6cf61ec4c18f",
        "cursor": {
          "ref": "88f88331-c1a0-4175-940d-f94e39b09cdc",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1f581ebc-ac71-4b34-b5c9-c990619683b0"
        },
        "item": {
          "id": "521323f2-97ce-4cb0-9760-6cf61ec4c18f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9db63b7f-ff23-4146-9fb8-b9417a53356f",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7829f2ab-f661-4a19-8c86-ee659a87ad57",
        "cursor": {
          "ref": "870c7ed8-24b1-4671-b933-d6f08156b060",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "08806713-ecbc-4c64-86b4-b17393bc0d71"
        },
        "item": {
          "id": "7829f2ab-f661-4a19-8c86-ee659a87ad57",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "304ef463-f21b-4f54-9efb-6259c6ddde06",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "75f61ea8-ea24-4a8f-836c-f13d0a8da52b",
        "cursor": {
          "ref": "ec9a59d4-009b-4dfb-8298-f71ec80d94fd",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8dee0d8e-93be-4a36-b3e4-13a6928d4cd1"
        },
        "item": {
          "id": "75f61ea8-ea24-4a8f-836c-f13d0a8da52b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b7945238-82a5-4dae-a0f9-7979eee7b0c1",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "66ac93f5-55f3-4aa9-abf2-371dcafc34b2",
        "cursor": {
          "ref": "898fe19c-ea67-49b6-a26f-c526afb334c6",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "3d938e29-9412-4f1f-bb26-a2eb4b70bc36"
        },
        "item": {
          "id": "66ac93f5-55f3-4aa9-abf2-371dcafc34b2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "450b286f-4318-4d52-83ca-4366d50855de",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c755657d-2a4d-493d-a9e5-bbceee2bc55d",
        "cursor": {
          "ref": "a6a4d10a-e2e1-419d-a37d-dc557978e914",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "07808430-491b-49d4-908b-c8ad542a4bf8"
        },
        "item": {
          "id": "c755657d-2a4d-493d-a9e5-bbceee2bc55d",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "0b134dd3-3f53-4468-a90c-a6083e579d00",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "d5226cbf-855d-47ce-952c-99dcb10dbb38",
        "cursor": {
          "ref": "f6caec47-07ab-4f25-b85c-59cd64f9201e",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "828d96ac-0263-4424-b3ad-c5ab76c78032"
        },
        "item": {
          "id": "d5226cbf-855d-47ce-952c-99dcb10dbb38",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c2ce6c32-6048-4976-bfac-e948a2049a7b",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "2f626f20-a60a-4cc1-84d8-ce4233bc5e4c",
        "cursor": {
          "ref": "97e3317a-2766-41c9-a0f8-86e1118516fc",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "54351d73-375c-418e-8064-d2ca8504d8dd"
        },
        "item": {
          "id": "2f626f20-a60a-4cc1-84d8-ce4233bc5e4c",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "077a3049-e687-4cab-9c41-f7fd7d7a620a",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b213755f-f7a1-41b8-a6dc-9b9900747501",
        "cursor": {
          "ref": "a43cf9bb-4f49-4d90-950c-30669cb6f002",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a85e9685-1232-454b-b01b-0f5f8fb16802"
        },
        "item": {
          "id": "b213755f-f7a1-41b8-a6dc-9b9900747501",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "46cf80a3-129a-4664-9f63-37a50414fee2",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "5a2b7bbe-4bdd-4ff9-8673-b13f555d75e2",
        "cursor": {
          "ref": "82b9d20f-944a-4c88-bf55-c9638df5d0df",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c5808cff-c007-445a-a1d9-2d8ec2135ea8"
        },
        "item": {
          "id": "5a2b7bbe-4bdd-4ff9-8673-b13f555d75e2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fdb5681f-c74c-4ab5-afbf-193f414d18c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef91e4b3-2ef9-4722-8644-ffa4fd5d20ef",
        "cursor": {
          "ref": "68dd39e3-e5d8-4e61-8e63-925bd4a3db51",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b8a72f5b-6fc3-4ad4-b059-0bacfd0e21bc"
        },
        "item": {
          "id": "ef91e4b3-2ef9-4722-8644-ffa4fd5d20ef",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "196f96fb-e827-46b4-818c-89aaeb1a9c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28bf707f-1f8c-4ff8-baa2-934102aa62b5",
        "cursor": {
          "ref": "cca8ba6b-17d2-437c-b899-f8728bd3c86f",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1ac66a65-ebd9-4e93-b120-fa9c51920ec4"
        },
        "item": {
          "id": "28bf707f-1f8c-4ff8-baa2-934102aa62b5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2b797344-c831-48f8-bdfd-c84596721709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0ea21b8-ff5c-4072-ade6-f76a7e767c36",
        "cursor": {
          "ref": "6de29030-2056-4186-af32-746bac4def40",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "549e5f26-f1e5-4b9a-9712-5ac6d790b7b1"
        },
        "item": {
          "id": "c0ea21b8-ff5c-4072-ade6-f76a7e767c36",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fd9b37c1-6269-4767-ba66-5dd0c7567551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb51f227-387a-42c2-851b-7d489e97b7db",
        "cursor": {
          "ref": "93762b24-ae43-4495-a5cb-1c01b7b6521a",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "71ab1fdf-6887-4e26-a04b-2a50b55a59d4"
        },
        "item": {
          "id": "cb51f227-387a-42c2-851b-7d489e97b7db",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2699382e-cb36-4ca8-a9ae-4fe6bf63e7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1713feb0-3d1b-48e2-8ac7-6d91de7806ce",
        "cursor": {
          "ref": "949838c7-7f86-4236-b412-2ae31426b1b5",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "597796d2-5182-4d63-a716-fddce0959459"
        },
        "item": {
          "id": "1713feb0-3d1b-48e2-8ac7-6d91de7806ce",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7c4b3d70-4d2b-4491-8214-a1c0175c7ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fccc89-d66a-4b38-88eb-4bb1f06c1450",
        "cursor": {
          "ref": "7fe49cf7-1faf-4d84-a20b-6807ea661164",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "63b5e01f-328c-429d-b024-0333c4ce5484"
        },
        "item": {
          "id": "a3fccc89-d66a-4b38-88eb-4bb1f06c1450",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b008c135-40bd-4c01-91b1-d85caf0f6ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405681a8-4bd0-4927-8255-be4993a7fb1e",
        "cursor": {
          "ref": "2fc83fcc-1844-45f1-8ea7-cce18196988f",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4b45ebac-950b-42fe-a08f-6667ee94bd7f"
        },
        "item": {
          "id": "405681a8-4bd0-4927-8255-be4993a7fb1e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "096d04e1-893c-4442-8b29-fc90382d0188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824a8647-a08b-4203-9faf-3f43f02864eb",
        "cursor": {
          "ref": "0c50fda2-d541-48ff-97de-2fdb136f4695",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ef83759e-dcbf-4a58-9d29-ae88ad90ec17"
        },
        "item": {
          "id": "824a8647-a08b-4203-9faf-3f43f02864eb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3b376d06-4e25-408f-9dbd-cba4e884c3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23225caa-808c-46c4-af52-14c36b0df127",
        "cursor": {
          "ref": "eacc8cc2-95ca-4dc6-b043-e46678f36da4",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4214de8f-26ed-458b-8422-fa8798805b89"
        },
        "item": {
          "id": "23225caa-808c-46c4-af52-14c36b0df127",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5c5aaf90-af40-442e-913c-0b64335c5f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b121ce1-0fa1-4d94-8c26-61f6db8e56f0",
        "cursor": {
          "ref": "6bf4c71a-e60d-4e8a-98e7-d952c5634d9f",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "5de39ad8-ce55-433c-b3e7-883bc58f643a"
        },
        "item": {
          "id": "1b121ce1-0fa1-4d94-8c26-61f6db8e56f0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2e1c368f-ac24-47b1-b3fb-4d7daf881991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563bdd81-1763-4d09-a732-67e3e4f4c013",
        "cursor": {
          "ref": "fc155df9-01c7-4f13-bdf4-7c1dd58e22e8",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a0aa587f-252b-4648-b050-489054706534"
        },
        "item": {
          "id": "563bdd81-1763-4d09-a732-67e3e4f4c013",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "48298476-a4bd-4c71-ae28-af603bbbcbb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927f0367-43fc-4b32-980c-e6a6e4924c3d",
        "cursor": {
          "ref": "b5eda733-2700-4515-8b98-682742ccf2ff",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8676638b-1454-4e9d-a45c-185885a4ebea"
        },
        "item": {
          "id": "927f0367-43fc-4b32-980c-e6a6e4924c3d",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3397a6c3-fda8-4198-a625-3aa9abe105d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff807fe1-aff2-4570-b3e2-f2d0474eb5c5",
        "cursor": {
          "ref": "96fa1f56-de48-431d-8cf7-f77f2d24ce17",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bbbb0175-9d00-48ed-aebe-086a151f3aaf"
        },
        "item": {
          "id": "ff807fe1-aff2-4570-b3e2-f2d0474eb5c5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "024ab95a-f92a-4b78-a443-2668dfe8a264",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f3f2a6e3-b638-4c70-8643-f4b295fec5de",
        "cursor": {
          "ref": "28fd8a28-09bf-4034-ac6c-ed5a8482da0a",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a140fa64-9cc6-4134-87dc-16255a8ad5f3"
        },
        "item": {
          "id": "f3f2a6e3-b638-4c70-8643-f4b295fec5de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3f616e08-a676-4e4d-aa66-0fb980312b5a",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5ccc9ff2-8840-414d-858a-569d17fa1278",
        "cursor": {
          "ref": "38cc88c6-ff82-49a1-be76-332d720b116d",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e97dd52a-ce96-4643-bc91-ca0c85bcb5ea"
        },
        "item": {
          "id": "5ccc9ff2-8840-414d-858a-569d17fa1278",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "96d2d15e-fd0e-45b0-87d0-b784db6a0b61",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "896fda8f-d9ff-4e7f-bee8-01c2eb4bc712",
        "cursor": {
          "ref": "4b4e6f9e-e1a7-4196-bb20-5c83cd8360c1",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "633564ce-ddbd-432a-80ca-3b7b0267b68e"
        },
        "item": {
          "id": "896fda8f-d9ff-4e7f-bee8-01c2eb4bc712",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c1c9f83c-7d8f-4c9f-8d94-38730dfd6bbb",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "50417ffe-7ff9-4997-9e42-36e269ddcc39",
        "cursor": {
          "ref": "b4e26b20-6a45-47aa-9bd0-dcf22842076e",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8c36fe7b-7707-42db-ae40-fba09107e335"
        },
        "item": {
          "id": "50417ffe-7ff9-4997-9e42-36e269ddcc39",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6e023992-6982-49f1-92b5-aeb450fd347e",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "cf6d6ad1-3a10-4799-bbcb-49a9feee8266",
        "cursor": {
          "ref": "b8aa597c-4c23-4d54-9734-4998718eb6de",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fd414ee2-2716-4ad5-ae89-e0bb1dead328"
        },
        "item": {
          "id": "cf6d6ad1-3a10-4799-bbcb-49a9feee8266",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "7b42dff5-6281-447a-a4b7-4a321d41ba49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5662d33d-e5d7-4133-9c7c-48cc6fcf21a7",
        "cursor": {
          "ref": "653ac73b-5c91-4cc7-a6e9-a4d7a00c21ca",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f413b421-9059-4638-b218-11f000b30a11"
        },
        "item": {
          "id": "5662d33d-e5d7-4133-9c7c-48cc6fcf21a7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6d314a02-732e-43ea-b829-4fd8117cf99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17b96f1-2693-4797-a2bf-fbf49a5733f5",
        "cursor": {
          "ref": "ddc5f411-d362-47b1-a532-b90304c9c019",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "349b1ebc-f857-4577-adef-30529adaf72a"
        },
        "item": {
          "id": "e17b96f1-2693-4797-a2bf-fbf49a5733f5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2b18d0d3-46ef-49bf-a3e5-b1deeba0658b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ad4413a-e858-4647-b5c8-562d21054113",
        "cursor": {
          "ref": "527ebfb2-11dd-4044-b2ce-4407b90688b1",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8e1cefad-21d0-4ae5-9199-536b979e35e5"
        },
        "item": {
          "id": "3ad4413a-e858-4647-b5c8-562d21054113",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d15e857b-5c04-4fe4-bd18-7b926439fd46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f465454-20e6-44f8-9eb3-8e018df2a894",
        "cursor": {
          "ref": "69c1d4d0-4c1b-4acb-9375-b214094d2c6f",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ffcb3ffc-f33f-4544-9703-e67a937dd750"
        },
        "item": {
          "id": "6f465454-20e6-44f8-9eb3-8e018df2a894",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "093307bc-0b89-499e-9849-71b0ee0c4b50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3478b8a-dff6-4d58-b22f-1774f4282080",
        "cursor": {
          "ref": "b731365b-5b7d-47af-b8ce-6fa09cf25309",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "388c26a0-978e-4fae-9047-7927ab3d7154"
        },
        "item": {
          "id": "e3478b8a-dff6-4d58-b22f-1774f4282080",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fdf16b36-ab7e-4d4c-a9d6-c93e966be51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e35b9ab-f29c-4cbb-8937-b2f5b2c0dd6f",
        "cursor": {
          "ref": "87709176-1f7d-428c-a0eb-9fb03affe63e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e901b6f9-4477-4042-b1d1-da2edf4f1c6a"
        },
        "item": {
          "id": "8e35b9ab-f29c-4cbb-8937-b2f5b2c0dd6f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "91ac9032-f940-4c93-a841-04d2364148fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659b8fc3-89f4-4025-9158-86b6c86d2c13",
        "cursor": {
          "ref": "46cd5140-6681-4087-bd1b-bd4311029baf",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a2e06713-1820-452b-b5f8-1fb6e5ba30cd"
        },
        "item": {
          "id": "659b8fc3-89f4-4025-9158-86b6c86d2c13",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2e8f4c7f-b98e-49ad-bcf3-2e84b7f11469",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4d196d-7022-4740-819b-0b3fd724ceb1",
        "cursor": {
          "ref": "ff71c781-5371-4f62-bd83-983582d9f0bf",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e1df90ec-9c5d-4ba0-90a1-ee94038b9634"
        },
        "item": {
          "id": "7d4d196d-7022-4740-819b-0b3fd724ceb1",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b51929dc-9fbb-44b2-980e-01b8432a6cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f445f0f4-bafa-45f8-be4d-436c91bc0ce2",
        "cursor": {
          "ref": "23ca1e2a-f05c-4476-809b-19dc1c4e0071",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "081d2770-7f80-4fed-89c0-85dbbf369685"
        },
        "item": {
          "id": "f445f0f4-bafa-45f8-be4d-436c91bc0ce2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "963d266c-66a1-47de-b052-c012b4e1a167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a644b3-344a-4527-aca0-6ce37791769c",
        "cursor": {
          "ref": "aacd26e3-c430-452a-aeee-3cf6323e936e",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c0f299b4-c4bb-4b32-87a1-ff4b78428e5a"
        },
        "item": {
          "id": "b9a644b3-344a-4527-aca0-6ce37791769c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4bb13473-e937-46f5-83b1-0d117eb94d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d30abe5-08fd-4255-baeb-fe5ff05a99b2",
        "cursor": {
          "ref": "07c9a90a-9923-41bf-bc35-2122e6af1867",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "320af326-b441-4368-84c2-0607f472c7a1"
        },
        "item": {
          "id": "0d30abe5-08fd-4255-baeb-fe5ff05a99b2",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d0fdd8cf-3cf9-4305-8569-95d8ae2fc4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d2057f-efd6-4c36-9adf-0a99d5dcc02d",
        "cursor": {
          "ref": "9570d149-8a6e-4483-b042-ad3c8a99dea2",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "54b24cda-2131-4e60-913b-488888ea29ab"
        },
        "item": {
          "id": "45d2057f-efd6-4c36-9adf-0a99d5dcc02d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7450793e-c994-4650-8c12-4fe7fa134acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d570c4-2daa-4ddd-8607-7ca224342380",
        "cursor": {
          "ref": "ab532a2b-75e5-4221-8d09-37c74e08243d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "773cc74f-4f4b-4c2d-a9d2-2e88408983b1"
        },
        "item": {
          "id": "d9d570c4-2daa-4ddd-8607-7ca224342380",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2093c3a9-128d-4dd3-885b-3c0e45105e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3660b6d5-e8e9-4673-91f2-abd4cf7e973c",
        "cursor": {
          "ref": "cb271fc8-2454-436f-bd61-4dbedfbba399",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2340cdfd-befe-438b-a5ea-2433065035ee"
        },
        "item": {
          "id": "3660b6d5-e8e9-4673-91f2-abd4cf7e973c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6580f605-212e-4397-a235-eda7b85989f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4902109-43af-4e67-94a4-b266d67f2a81",
        "cursor": {
          "ref": "a3a2deb4-6432-48aa-a1fb-374dc5edb0e7",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1c8379bf-fa92-45c7-994c-4ea6f93038bb"
        },
        "item": {
          "id": "d4902109-43af-4e67-94a4-b266d67f2a81",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "466ef0cd-fa64-49dd-842d-791d12fca663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe54622-b891-41c6-b3ab-daffa57fb6cf",
        "cursor": {
          "ref": "372319d8-76f8-4c54-9436-85435df0723f",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "be4a3f59-791f-4f70-93e6-5ad6a3ff1336"
        },
        "item": {
          "id": "bbe54622-b891-41c6-b3ab-daffa57fb6cf",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fb93b2ca-ca67-4293-ac98-fdbc64d15f7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a98eda0-e9fe-4321-b82a-38c0383323d0",
        "cursor": {
          "ref": "53f6a182-20d3-4cda-9b8b-ced93e8b96b4",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5ae4019f-03b0-48f6-a293-1838d802e9b9"
        },
        "item": {
          "id": "0a98eda0-e9fe-4321-b82a-38c0383323d0",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "84440504-b9b2-4eef-83d6-dde31bf31235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87195cee-95ab-4a80-b375-23e6b829a537",
        "cursor": {
          "ref": "7718a9df-a4ae-45b1-916d-6c009ac4a52a",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "24c7d919-3ea2-4318-9b4c-06232a7194c3"
        },
        "item": {
          "id": "87195cee-95ab-4a80-b375-23e6b829a537",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f3ec779c-332f-4915-ab99-50301b0ff028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9064c2-d8c1-4d0a-ba09-f6bd1fa160c7",
        "cursor": {
          "ref": "d00cfaaa-7939-44d6-acbf-9a7eb4ca163d",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a73783c2-6c8d-4b12-a00f-5e8fd6985b13"
        },
        "item": {
          "id": "be9064c2-d8c1-4d0a-ba09-f6bd1fa160c7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "b851ea0b-96ec-40a8-861c-48a1e67a62e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a9332f-4b4e-462d-b7f9-e85a4c5bb5a6",
        "cursor": {
          "ref": "e1ae20d6-f7f8-4116-8d92-929b440a1829",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4f554f6e-94bc-402b-9966-1283c7f2f054"
        },
        "item": {
          "id": "f8a9332f-4b4e-462d-b7f9-e85a4c5bb5a6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ca72f853-f66a-45c8-9ea0-c5b86ddd69d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03621d39-f21a-41c0-8d95-9d0eefe59182",
        "cursor": {
          "ref": "382a55bd-491b-4471-a634-ad2c8b4dbf81",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "422d9c33-4f13-4486-ad22-4f28d061329e"
        },
        "item": {
          "id": "03621d39-f21a-41c0-8d95-9d0eefe59182",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "beca730e-ebe9-4462-a1a4-b4d3cd375e63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797406f8-da48-409e-9a6e-0d7f9ff946f3",
        "cursor": {
          "ref": "41a0322a-f6a2-4786-9a53-c6ee965ea33c",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5d23e92a-4071-4552-9d0a-e2ccb2fcbce3"
        },
        "item": {
          "id": "797406f8-da48-409e-9a6e-0d7f9ff946f3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "dc4cebb5-8bdb-4180-87c0-77263ad92f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168f024c-f546-4a79-a5e6-73016468c79f",
        "cursor": {
          "ref": "5f09f94d-ba40-4510-a169-223ea9e13915",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3a7f2236-c159-4b82-84eb-d6f0fc4e2f96"
        },
        "item": {
          "id": "168f024c-f546-4a79-a5e6-73016468c79f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9ac0ebcb-e4df-4649-9be7-fbc5cdff0bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d5ae378-eb56-4cdc-8dbe-a5767c0118d1",
        "cursor": {
          "ref": "a26681a6-1ac1-4975-b75d-96166b0c1686",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1299ded7-2c30-4586-a72f-0af53fb5df73"
        },
        "item": {
          "id": "7d5ae378-eb56-4cdc-8dbe-a5767c0118d1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "56636582-cb02-4f3f-a3d7-24b9f77afc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e942b89-4124-4156-8d57-c8ebc06260d0",
        "cursor": {
          "ref": "abb2df4e-1516-47c1-91cf-01cb1eda21a6",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b58f7583-7906-442f-a4b5-f11048342665"
        },
        "item": {
          "id": "9e942b89-4124-4156-8d57-c8ebc06260d0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f00e90c1-42ca-4641-8093-eee0f0a46781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5824e4af-a06e-41ba-959a-fe5ab3354767",
        "cursor": {
          "ref": "36276de8-c9dd-46b2-bd17-81c4544f8d1f",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "de263497-8d2e-4b6e-8601-4e0830cefe12"
        },
        "item": {
          "id": "5824e4af-a06e-41ba-959a-fe5ab3354767",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f3b018f7-d7fc-4987-883a-39521c051578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5528ef0d-5647-400c-90fb-9d9b2c08f08f",
        "cursor": {
          "ref": "2a9512c8-b1a8-4a6a-bd36-8e4e5a857ca1",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "744f24f7-c10c-43a2-8a51-6fc9c4963aca"
        },
        "item": {
          "id": "5528ef0d-5647-400c-90fb-9d9b2c08f08f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "51bcdd5e-d1e2-48ac-a611-fed6b83c617a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce30e670-6d79-41be-9c44-23208f3d1563",
        "cursor": {
          "ref": "2d76a48e-22c0-49db-80b3-ff125c94745a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8098d752-f7f1-43f5-86cf-e897e1928f70"
        },
        "item": {
          "id": "ce30e670-6d79-41be-9c44-23208f3d1563",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0bd08c99-8231-42bb-adaf-1e2fb473bad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e60b1841-f121-4a64-9dbb-a79b5d4fb206",
        "cursor": {
          "ref": "b01fe59e-2f20-4a74-bef6-77cc2ad96d1f",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b0747893-54da-46b9-8ff3-5336e5cd289f"
        },
        "item": {
          "id": "e60b1841-f121-4a64-9dbb-a79b5d4fb206",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d380c11c-09c1-42a8-9223-f7513d7820e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71165a41-9f7b-49d1-b0de-2b8f59685ed4",
        "cursor": {
          "ref": "61e45b45-7823-4645-bb14-f26a0ac402e3",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ee4d7c43-d14e-47d8-bdf2-7b6e282c5a24"
        },
        "item": {
          "id": "71165a41-9f7b-49d1-b0de-2b8f59685ed4",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6e75eb07-a741-4f0a-b76e-5e9e3a5e22b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b33dda-741a-4b14-940d-f53fb7946ee9",
        "cursor": {
          "ref": "778133aa-7e07-4444-ac06-1ea6c5431c6a",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "394e50b1-d174-4b51-a206-9ee85a8e646a"
        },
        "item": {
          "id": "25b33dda-741a-4b14-940d-f53fb7946ee9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4a0f03ac-f632-474d-b4c9-83261dc83d60",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3e5b5c-6d5e-4b5c-8318-66432f3fa805",
        "cursor": {
          "ref": "ae3bd306-a31c-4913-9c46-066a8196f2e6",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aad9a636-546d-428d-aff6-37356a50c7bd"
        },
        "item": {
          "id": "bc3e5b5c-6d5e-4b5c-8318-66432f3fa805",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4da090db-24d0-4927-a920-09f1b241223b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "395b17bd-3688-4a29-aee3-3bc0a69f62b8",
        "cursor": {
          "ref": "8b2fa43c-b1d5-4277-9c52-e0be7e59d18e",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9e30f381-82b7-4e7f-bae0-3d77bb212215"
        },
        "item": {
          "id": "395b17bd-3688-4a29-aee3-3bc0a69f62b8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2bc812b7-c5a0-4a6b-85f9-412ed0c4d20a",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fcd7e36-e7f6-485b-ae60-927535d8d02c",
        "cursor": {
          "ref": "5c6c66c1-66b8-4ecd-bca9-ea80749f44b9",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "1102a20b-fd0b-499c-b78b-079130d7822e"
        },
        "item": {
          "id": "0fcd7e36-e7f6-485b-ae60-927535d8d02c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "5f12d7da-a53f-4423-a674-0a73d5fe8ad0",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d66ef3-88d4-4b9f-8b36-843ec885a7c5",
        "cursor": {
          "ref": "0fd8b99e-5d0c-470b-9fa4-117827acd632",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f2dd662a-121d-452f-a3e9-263adf0e6ff2"
        },
        "item": {
          "id": "d4d66ef3-88d4-4b9f-8b36-843ec885a7c5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2a146978-157d-4793-8d33-cd97cc1c5ffd",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c554d93-8a2f-4e7a-b384-8fa632a81562",
        "cursor": {
          "ref": "90269618-784f-4f21-a981-87fae87ad1dd",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "3ce5618a-0c25-466e-879a-0787ea676175"
        },
        "item": {
          "id": "6c554d93-8a2f-4e7a-b384-8fa632a81562",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "addab4d6-e7ff-4ca3-993b-89cc00ced598",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c496fdb2-61d0-4fa7-b06f-15dd05ee66a1",
        "cursor": {
          "ref": "9915beca-e960-4500-80bf-df2d448f6d42",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "73d922d8-ba8e-4139-9df0-ed4de94df75a"
        },
        "item": {
          "id": "c496fdb2-61d0-4fa7-b06f-15dd05ee66a1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "afde7988-8ea0-4ef5-9f0c-75711b7f506e",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-19T00:40:00.078Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-19T00:40:00.078Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b2f7387b-71aa-41da-bf97-465de211b97d",
        "cursor": {
          "ref": "78bef308-b19c-4c96-908a-0c3a446c66cf",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8b0c1e0b-9b24-49c0-b729-9d4f5831c825"
        },
        "item": {
          "id": "b2f7387b-71aa-41da-bf97-465de211b97d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cbbda277-326f-4923-aa46-2e859a675a2f",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edbdc19-ff14-4380-a397-b165dbe621ec",
        "cursor": {
          "ref": "47e2aeb6-0fe2-4f09-9e01-d7b59ecb18ad",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c46c721d-e70b-4bde-93cb-12968cfba6ac"
        },
        "item": {
          "id": "7edbdc19-ff14-4380-a397-b165dbe621ec",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "89212a62-49dd-4945-a87b-69ae963053ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d169d405-2f83-43b3-98c0-99b0c8d0a1e9",
        "cursor": {
          "ref": "9ea4352b-4964-4463-a94b-9396259fba48",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d9c871c1-5659-4b4e-a363-9a12da6ebabf"
        },
        "item": {
          "id": "d169d405-2f83-43b3-98c0-99b0c8d0a1e9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "894ac785-04aa-4054-a42b-c7dfc719ab1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce58e0e-de19-42f3-bc0c-c5200d127140",
        "cursor": {
          "ref": "6f68818a-416b-47df-9fcb-02f54c00fc1d",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5adb6bb0-1494-497d-88a5-142bd040a87b"
        },
        "item": {
          "id": "8ce58e0e-de19-42f3-bc0c-c5200d127140",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ebd24829-550a-41d1-ad53-ae71945d6471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbd0e8ef-15c9-4584-925b-955e672befbe",
        "cursor": {
          "ref": "ddcc3ef3-58d6-444c-8fed-0658345c8498",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "bea8f64c-d7d0-4a73-8563-d2dcb9f0b826"
        },
        "item": {
          "id": "cbd0e8ef-15c9-4584-925b-955e672befbe",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "25f2988e-ec66-4823-86b0-14e15190e72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d19c36-14e0-4c51-99ab-14ca0cf73cbe",
        "cursor": {
          "ref": "6143ba74-b3f5-4e07-871f-1d42fad279aa",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "65b08839-90b3-412c-a609-3741ae787fae"
        },
        "item": {
          "id": "08d19c36-14e0-4c51-99ab-14ca0cf73cbe",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "61c419f8-1ab6-4f60-a8ff-77962c5536e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0159aa50-2905-42b8-a2cb-deab284b9205",
        "cursor": {
          "ref": "901fc478-24ae-4609-b7dd-7c00404b6de7",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ad2ca08c-45fa-4726-9aed-f769d7360ef9"
        },
        "item": {
          "id": "0159aa50-2905-42b8-a2cb-deab284b9205",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "d9fa35cc-dd57-4218-8a56-c258c3c4eb75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aeb74c3-014d-41f2-a92f-5bf77b2719c9",
        "cursor": {
          "ref": "118e0df8-7c01-4eea-9f5a-b52aeaa9243a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "683bed02-3451-4de6-8e41-c81493a47f97"
        },
        "item": {
          "id": "8aeb74c3-014d-41f2-a92f-5bf77b2719c9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "71056b7f-e885-4654-bd50-422ceb198715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607c16e0-7ed5-4591-a77f-610092de2b70",
        "cursor": {
          "ref": "62ebf5d8-5ae3-4a09-806d-9886a4321b1a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fa6e4e79-e192-4f66-a4e4-e3a278631fd4"
        },
        "item": {
          "id": "607c16e0-7ed5-4591-a77f-610092de2b70",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d09f71d1-c413-402d-893f-2da9e0792aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19b90e1-7cf2-4cc7-b65c-64b890b2ed75",
        "cursor": {
          "ref": "7ca0b875-111e-43e1-8926-f856b868fda2",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "53ddcf9b-dcc9-4eb4-9ba0-2879da525b8b"
        },
        "item": {
          "id": "b19b90e1-7cf2-4cc7-b65c-64b890b2ed75",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d12709c5-c830-4e24-ac33-a06f84040e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e409a5a-1ba1-4f25-988a-b8d798d27a89",
        "cursor": {
          "ref": "e910512f-289c-499b-ad05-3afa4d2c17d5",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "891ac613-fd32-4f02-a986-a6278a02d6ec"
        },
        "item": {
          "id": "6e409a5a-1ba1-4f25-988a-b8d798d27a89",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bacdcc37-3f99-46e9-a48b-0d33b45a1d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c22fc5-486d-4878-b0e3-4846fcf55687",
        "cursor": {
          "ref": "27bcd1f0-d8bb-4159-a555-82b43f7f42be",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2049d154-88c9-4052-808d-7275ce934da9"
        },
        "item": {
          "id": "e0c22fc5-486d-4878-b0e3-4846fcf55687",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "aa617036-f05a-4440-8ed7-c00c8219b371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14ab414-65cd-4178-867a-35c0f940071f",
        "cursor": {
          "ref": "0fe30504-de94-4373-ba7e-aced510fe5dc",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "00367bec-ba9c-4b5a-8588-d9e09a22a997"
        },
        "item": {
          "id": "c14ab414-65cd-4178-867a-35c0f940071f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e395f1d6-1862-45c8-873d-52c2c49d689b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9bbe3b-e9e1-4e39-aa54-fc7209c0845b",
        "cursor": {
          "ref": "747aef79-4dda-46d2-a0fd-063cc1bfd381",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9af153f2-b93e-4cdb-9428-b1c6ed7f798a"
        },
        "item": {
          "id": "9c9bbe3b-e9e1-4e39-aa54-fc7209c0845b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "cef51f3f-d6d9-4f96-b5a6-1defe9391c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65d30767-73f4-4937-b6c5-35513b245fe1",
        "cursor": {
          "ref": "04d7d77d-beb3-477b-b8d0-925e918edf65",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "e6d3219b-ae68-40cf-9591-90f8189c40c6"
        },
        "item": {
          "id": "65d30767-73f4-4937-b6c5-35513b245fe1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "301baf19-d692-41d8-8f5c-aa24287c93af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e51bfe7c-dfd9-4c71-a8f2-769ee3ee5c95",
        "cursor": {
          "ref": "a013d702-5af0-45e7-a832-670210bd57a1",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ae7fcab0-1ea6-46b1-ac7b-684783bea780"
        },
        "item": {
          "id": "e51bfe7c-dfd9-4c71-a8f2-769ee3ee5c95",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c9885394-0533-4fe9-89da-ef667daa9e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd0be92-7195-4c3e-92f8-9701216cdc45",
        "cursor": {
          "ref": "3abc5f72-2abe-4ce7-b793-eab767520ea0",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ba542f33-4fef-48ff-947b-5436b1fea9f2"
        },
        "item": {
          "id": "7fd0be92-7195-4c3e-92f8-9701216cdc45",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "429416ec-76da-4be9-a8b9-c2abd3f7062f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff64710-1f62-4b36-a88b-406d1ee1cdc9",
        "cursor": {
          "ref": "04f25749-4451-4f75-8d70-9f8582d26e3f",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "94991ed6-6323-4327-95a6-f49219867836"
        },
        "item": {
          "id": "cff64710-1f62-4b36-a88b-406d1ee1cdc9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b9cff2c7-68f9-4cca-bba7-829132ff7c14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411b169c-da21-4b69-92ee-f9ccee2a9b54",
        "cursor": {
          "ref": "47786fe2-f64a-483f-b494-3e5bbf08b7f3",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "79cd7085-c4ae-47c0-ad38-15202976d1f0"
        },
        "item": {
          "id": "411b169c-da21-4b69-92ee-f9ccee2a9b54",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3ba39ed4-46ac-45d7-b48f-dab14e62009d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560e5b5d-01e7-43f0-bc79-957f8b91f3f6",
        "cursor": {
          "ref": "8c9cc043-890e-48a5-87a3-d43904c91803",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bbda82dd-9f69-4baa-b1b5-5e8ea5e23e5c"
        },
        "item": {
          "id": "560e5b5d-01e7-43f0-bc79-957f8b91f3f6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4d260817-cfc0-4593-ba55-5c96c3753be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810c0f78-4ad7-41dd-9c3a-d57a85649016",
        "cursor": {
          "ref": "05eeca04-bbf9-494a-852e-e599079ed914",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "3b934780-8739-4cbd-8419-ab72d5169e34"
        },
        "item": {
          "id": "810c0f78-4ad7-41dd-9c3a-d57a85649016",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9ffec15d-facd-457b-8347-bd17ac930780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae3d81ee-de66-42a2-a2e0-674328cdc189",
        "cursor": {
          "ref": "ff4a2fc8-57a7-467b-a973-f6838da1fd10",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6e4c73ea-1ee4-4ac8-88c0-b8809ffcb0ce"
        },
        "item": {
          "id": "ae3d81ee-de66-42a2-a2e0-674328cdc189",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "31a852df-d9ca-4be0-802e-bbb37f4bacd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5dc7f41-a221-44fa-b4ca-70f45d7a5550",
        "cursor": {
          "ref": "e0fee722-968c-4a04-b83a-9861d6b1b5de",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "969ae3ab-75cb-4dea-a8c3-cbdf5b0f5859"
        },
        "item": {
          "id": "c5dc7f41-a221-44fa-b4ca-70f45d7a5550",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2b927fc7-a797-4f4f-86c7-64b2811568c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8472a68f-cfe5-4e7d-b0fd-5fc78c40487a",
        "cursor": {
          "ref": "51e7ab27-6620-4991-a2d4-c279a96864a2",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f86e3608-b2e3-48d9-919f-e56f7ac801e4"
        },
        "item": {
          "id": "8472a68f-cfe5-4e7d-b0fd-5fc78c40487a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6df0e225-d432-426f-87ed-1a2da31b7146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd92ae34-2890-4608-a9d7-b3efc17b37f2",
        "cursor": {
          "ref": "513057df-29c2-4ef6-ae91-f601a829e6d2",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "850d8a49-7216-4997-ae5a-21b4f7b35bd6"
        },
        "item": {
          "id": "fd92ae34-2890-4608-a9d7-b3efc17b37f2",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c7d64739-879c-4c65-b6e2-8d5ebb88b93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12d0d8f-6430-4f4c-bfc0-953ec88a50b8",
        "cursor": {
          "ref": "c7f62671-41dd-49a8-b97e-8f3aacc4750f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "84eda3bc-f33c-4306-a5ec-0c7b3d8d9d56"
        },
        "item": {
          "id": "d12d0d8f-6430-4f4c-bfc0-953ec88a50b8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3d6be483-520e-421a-b97f-0275ad68d250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a854fb51-d85f-4fe1-9b16-2020839fd980",
        "cursor": {
          "ref": "1476c121-c635-4fe9-843d-cabe972de85b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9f4c078c-c717-4bb8-9986-6b3e72cc6e9e"
        },
        "item": {
          "id": "a854fb51-d85f-4fe1-9b16-2020839fd980",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e3796fdf-c740-4b99-8a83-7545baf085e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7693c5-7716-421b-8aa0-25ae728784e1",
        "cursor": {
          "ref": "e35e4e1f-0c90-4573-ab39-2ab7ca2dfdc0",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c2047199-c33f-4d11-9645-683b769894e3"
        },
        "item": {
          "id": "cc7693c5-7716-421b-8aa0-25ae728784e1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e1210ce0-4b03-4f2e-b7ad-35b598fd3740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33564ec-8735-4a7c-8aea-0f6898a10af0",
        "cursor": {
          "ref": "9b55ae42-6274-464e-8d69-88a47fcde480",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e00201f8-6d36-4faf-8d52-c092c8d1275a"
        },
        "item": {
          "id": "d33564ec-8735-4a7c-8aea-0f6898a10af0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "520d15d0-5225-444c-94e4-2704a6e08d78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c58f38-6a5c-41a3-94d4-48018dceec55",
        "cursor": {
          "ref": "8c407ea3-594c-4e4b-a6f5-fa69b0b6185d",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "5a260294-a45a-4788-8ae3-c94234406421"
        },
        "item": {
          "id": "57c58f38-6a5c-41a3-94d4-48018dceec55",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "54ff1be1-3e0a-4bf6-ba65-244c7956eee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0887e0-a6e7-4f41-bcee-bebf4a42becd",
        "cursor": {
          "ref": "49949e04-1b2e-4c75-9b47-28f6c1aaa249",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "79b2ed00-1d16-4000-9138-23ab7132de4b"
        },
        "item": {
          "id": "ba0887e0-a6e7-4f41-bcee-bebf4a42becd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a9f1bad0-32fd-472f-a2e2-713aab932c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a29ea5-2a0a-474d-878e-382cabd5f69d",
        "cursor": {
          "ref": "65a52c93-0fa5-4357-a9ac-edd8254eb942",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7ab5355a-66b0-4bee-94b8-f1cfc544b072"
        },
        "item": {
          "id": "a5a29ea5-2a0a-474d-878e-382cabd5f69d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0e3e6769-602e-4f5c-b4d7-bd8eb739bf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c4571a4-bd8d-47e4-a8d6-c248f45f4486",
        "cursor": {
          "ref": "89c3492c-be07-4153-8854-48e730d2cf93",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0c458db3-f952-4660-96e2-f6daad4c04b7"
        },
        "item": {
          "id": "6c4571a4-bd8d-47e4-a8d6-c248f45f4486",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ab429a04-90ec-4520-8df8-adb01b6b559d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c7d74c-b916-4863-84cd-1454a387f84a",
        "cursor": {
          "ref": "b20ab020-5ed4-4eff-bae3-4f9b3d63ecf6",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "106ac722-4667-4d36-af2b-90d5bd056c7f"
        },
        "item": {
          "id": "e9c7d74c-b916-4863-84cd-1454a387f84a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2597d98f-b5d6-44f6-9ad4-d2e720ca6c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b7ddf0-f3b9-444c-bb22-78d15341568e",
        "cursor": {
          "ref": "ca30bb89-5600-433e-bec3-a4fdffda99e1",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c005ac64-3ced-40f4-ad07-19f499587578"
        },
        "item": {
          "id": "f8b7ddf0-f3b9-444c-bb22-78d15341568e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b062dd9c-45dc-4fd6-89f0-20e799b45373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832c1d7a-3f0e-4571-8af3-6089bb8440bd",
        "cursor": {
          "ref": "df27bf98-1d07-43a2-99e6-bc268aa154b4",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a0d647df-d1c8-4c5b-8a25-05bf1173e6d2"
        },
        "item": {
          "id": "832c1d7a-3f0e-4571-8af3-6089bb8440bd",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "2694739b-8287-4e3f-a058-4759543ffb19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "037aad0d-4635-4816-87ee-f57d69172c3e",
        "cursor": {
          "ref": "9aaef8cb-3b6c-47cd-be34-df29b6bd6928",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "729f6041-2b5c-498b-899f-11e3a97af5c5"
        },
        "item": {
          "id": "037aad0d-4635-4816-87ee-f57d69172c3e",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6fc4e0ae-fb63-4917-9337-0a5622a20966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55831d50-f6c9-4747-a91b-7bb936143264",
        "cursor": {
          "ref": "d43e2e98-20bf-43f1-8eee-98c4d53c5c2a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bae73f4b-c4e7-45a6-a9c0-8629d4368ecc"
        },
        "item": {
          "id": "55831d50-f6c9-4747-a91b-7bb936143264",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "2d31014c-d403-4d1b-b084-61135ba9050a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7faad59-f03f-4ce2-bb31-07e6ed2c31c8",
        "cursor": {
          "ref": "fda92449-7766-47e5-ad7d-824bddc75ac2",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "78e61453-76c6-4d6e-8d8e-99682420986a"
        },
        "item": {
          "id": "a7faad59-f03f-4ce2-bb31-07e6ed2c31c8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5606b8ee-9c0b-4ac0-8258-faa8befc34c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760e52c6-bab5-4aae-b0d5-e1609cab2fb9",
        "cursor": {
          "ref": "493ae4c9-b538-418c-addc-4c754816c61d",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "78c75c06-1e6a-4554-ba7b-6bfd475abd9b"
        },
        "item": {
          "id": "760e52c6-bab5-4aae-b0d5-e1609cab2fb9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "29b6b480-219a-49f1-9f24-961e88455d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651b9679-88af-47bc-b64a-0a5aff6a84f3",
        "cursor": {
          "ref": "6fb6c9f0-8a11-49f1-8a07-545d02b6de8d",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "48d99298-e8dd-41f6-acd6-16f5a38b08a2"
        },
        "item": {
          "id": "651b9679-88af-47bc-b64a-0a5aff6a84f3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "aa4d18cd-96b5-4e58-9c3a-26bfaa093b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6772bd16-76ff-4edb-892c-369972651e22",
        "cursor": {
          "ref": "2e4f74f1-14ba-4800-ac80-57420b5b6c18",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d501b3f5-bfe1-47f0-ae5e-69eecfe34853"
        },
        "item": {
          "id": "6772bd16-76ff-4edb-892c-369972651e22",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4a340eb5-c82f-4215-a288-10d3cd9972f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded8060c-10e7-4a82-b89c-afdd29822ff3",
        "cursor": {
          "ref": "6bf3eefb-6e88-4ab1-8c37-3a97414fd96e",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e3f62fb0-5cac-4297-b863-16179cb069b3"
        },
        "item": {
          "id": "ded8060c-10e7-4a82-b89c-afdd29822ff3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "94c37098-103e-4a36-912b-7f6cd079d7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c49406-9344-4e9b-a044-f1eff2512cdc",
        "cursor": {
          "ref": "828cd89a-4bb9-43f7-b59c-a11042adf93a",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5c6c5358-ace5-408b-ab6b-89c03752348c"
        },
        "item": {
          "id": "81c49406-9344-4e9b-a044-f1eff2512cdc",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3053bd32-bad1-451d-9c53-e59fc21a50ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "098c2ac0-6417-48a2-9e4a-933724adee91",
        "cursor": {
          "ref": "d1c59bf0-553e-48fe-890a-6e76568baf69",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b8f8f8d1-c25e-44b1-9504-4d23b1bbe7f2"
        },
        "item": {
          "id": "098c2ac0-6417-48a2-9e4a-933724adee91",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "ac0c7508-26c2-44db-a38c-52714b5ef070",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "6f1ce92c-c428-401b-ac0c-6881bd5f1571",
        "cursor": {
          "ref": "c793d9a1-adc3-4b8d-9be1-0158c1d4d597",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "97976454-8cfe-4d28-af72-5a5b3fbfbc42"
        },
        "item": {
          "id": "6f1ce92c-c428-401b-ac0c-6881bd5f1571",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "73299941-0aec-48ea-9274-15e7a58ffdb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99cefc85-fc88-4d02-9ae0-6cc35a21e291",
        "cursor": {
          "ref": "6c8c93b8-b91d-4780-aff3-6eadbf5077ae",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3b66dd97-d0c1-4b98-8a3f-38c1fb72066a"
        },
        "item": {
          "id": "99cefc85-fc88-4d02-9ae0-6cc35a21e291",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "62eb64e3-168a-4b1a-888a-91686ad5103b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d097a9c-8851-4a28-81a5-05964da2461e",
        "cursor": {
          "ref": "c84f51e3-c215-4369-b56a-ac2b2ec64b7f",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b00d9c23-cf5d-4d51-8fed-f1db07fa22b4"
        },
        "item": {
          "id": "8d097a9c-8851-4a28-81a5-05964da2461e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "844dd3e9-77c7-45d9-b9b6-8faa2a5d5f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd1b2b9-6ce1-4421-8e0c-f8d396bb3faf",
        "cursor": {
          "ref": "3a8f4a00-974b-4ee3-81ac-c3f3c36c224b",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d8b949f6-a7fe-4b93-b99f-4f46a64433de"
        },
        "item": {
          "id": "4bd1b2b9-6ce1-4421-8e0c-f8d396bb3faf",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9e179bfb-37a8-408c-8938-208f780f8692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c85c364-78cb-4627-8da6-c8248312d3b8",
        "cursor": {
          "ref": "03ef570d-7d1e-42d4-9feb-3b6a3ae90d66",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "640ef325-a87f-4f98-bd74-9771c6fea63d"
        },
        "item": {
          "id": "3c85c364-78cb-4627-8da6-c8248312d3b8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a6502566-6464-447f-a79c-c48d2b0553c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cbd29cf-15f8-431b-a388-6b9018f2fce2",
        "cursor": {
          "ref": "7171ae62-e8da-4ded-be39-aedb0ef4135d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a00754e7-f302-4d28-9251-1bba90f1632b"
        },
        "item": {
          "id": "9cbd29cf-15f8-431b-a388-6b9018f2fce2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8bdd3e8e-e2bf-4997-8120-ba40f7850761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39eccbee-2c04-4411-b6e1-0d51df807d84",
        "cursor": {
          "ref": "24b911c1-cffc-4e8a-a84c-23b3f2bdf2e1",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "52cdb8ef-f1ff-4248-a557-d8e45209612e"
        },
        "item": {
          "id": "39eccbee-2c04-4411-b6e1-0d51df807d84",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "65e94efb-23e1-4be6-9cde-ecbf5d614910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a8fb46-8d68-42a4-8fe7-18dadad17a68",
        "cursor": {
          "ref": "820f614b-d0fa-4e81-8158-b1015768b674",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "91ac0d06-396e-43e6-9446-9d378a8b16e1"
        },
        "item": {
          "id": "f1a8fb46-8d68-42a4-8fe7-18dadad17a68",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d5f7068c-defc-49bb-b2ec-d6e78e0914db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d133db5-3ed3-49f7-8be0-c655f2408f19",
        "cursor": {
          "ref": "dae2569f-c26b-4b2a-8b87-6b5e72d99c52",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3241ee23-0f0e-4b23-88de-1dcb8b128a9a"
        },
        "item": {
          "id": "7d133db5-3ed3-49f7-8be0-c655f2408f19",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ee0e9997-865f-449b-b210-a11b5c394cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc52204-84ac-48b9-b11d-8d142e090ef5",
        "cursor": {
          "ref": "0f81ba18-9b94-4e42-a697-c5cb9fb8c888",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "991770ee-815b-4265-8ff5-d0e1c676714c"
        },
        "item": {
          "id": "cfc52204-84ac-48b9-b11d-8d142e090ef5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "5965f9c4-ac9b-45d7-9e68-e9472b0fcafe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f969197c-d879-459f-af77-129060a8d0ca",
        "cursor": {
          "ref": "41500c63-5d61-448c-92d5-81db5433ea5a",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "db543fe6-b20e-4b95-a229-4e5171dd5e1b"
        },
        "item": {
          "id": "f969197c-d879-459f-af77-129060a8d0ca",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "eb09e084-a86c-402a-8a6a-8667edf12c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5bd142d-caa8-468f-a3ef-06595497d23c",
        "cursor": {
          "ref": "138bd817-710b-4b7d-9913-b30b8abda96c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a884f71d-f7cd-4d68-aed8-e250335d4a96"
        },
        "item": {
          "id": "e5bd142d-caa8-468f-a3ef-06595497d23c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d07b58cf-549c-4fac-b4df-c699dfe27889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9816ec14-69c9-4409-81a7-f78a9bba3db5",
        "cursor": {
          "ref": "3c7945d4-e050-4ce0-b34b-3de5b11d2cd3",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f135328b-d780-4e0e-acbc-26049d1c3f50"
        },
        "item": {
          "id": "9816ec14-69c9-4409-81a7-f78a9bba3db5",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "41262c0b-1915-47a4-a506-a47e172274b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c63b083-a756-4a5c-bfce-b7f7f3b81133",
        "cursor": {
          "ref": "a94caadc-ce83-460c-9e7b-176b1824564b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f046f097-85c9-4e30-83e5-05c74994b3b3"
        },
        "item": {
          "id": "2c63b083-a756-4a5c-bfce-b7f7f3b81133",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "97820fd2-0d93-4bc7-b096-12889ea0cfd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6acbc1d-4d69-4c68-84cf-4a9a47c9a2ed",
        "cursor": {
          "ref": "31ce2509-9c75-4eaa-b6d1-0a17280d0a02",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "92d92b02-fa8b-4bb2-a440-23023a3faba6"
        },
        "item": {
          "id": "d6acbc1d-4d69-4c68-84cf-4a9a47c9a2ed",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f6dc5810-d165-4068-a3a2-2a96f5eb6539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a825712-5ca2-4e0a-b8a9-f35a42c1c996",
        "cursor": {
          "ref": "35bba483-bc71-4a9b-a11f-1d49b37780fd",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c0fb7b97-b45a-4aac-a411-e2b4ba152bdf"
        },
        "item": {
          "id": "8a825712-5ca2-4e0a-b8a9-f35a42c1c996",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d9a7654a-7788-4971-a404-c35242686c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457207ec-3bc3-4cad-acaa-d93ce91c59b9",
        "cursor": {
          "ref": "6d7ffd62-fcef-415d-aac0-e2c39db07539",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c2eadea4-db01-404b-839d-625d88b72b3b"
        },
        "item": {
          "id": "457207ec-3bc3-4cad-acaa-d93ce91c59b9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5fa6ceee-17c4-4c21-b8df-af05618387ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb70384f-d5c6-4b17-837b-973cfbdc52c4",
        "cursor": {
          "ref": "8837b776-d622-4259-8ab1-b52a42046085",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "49ba8837-799d-4dcc-a5b7-9562e1a7cf58"
        },
        "item": {
          "id": "fb70384f-d5c6-4b17-837b-973cfbdc52c4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "0cb45c9c-b696-4d9d-a85a-09f48bc420e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08fc7bb1-13a0-4c8d-8bda-4fbbb6605f82",
        "cursor": {
          "ref": "bd7c719d-e4ad-4f73-b41d-7d3fdc9b2cf5",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bc416b16-f0c9-493a-830b-8f686e367ccb"
        },
        "item": {
          "id": "08fc7bb1-13a0-4c8d-8bda-4fbbb6605f82",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c22f74a7-ecbb-479c-91ea-b26b62c43944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8db66f8-eeb3-4b50-853c-8cb0f36aed4e",
        "cursor": {
          "ref": "8fee3236-69d8-432d-963b-27fed1a11e57",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "48711797-c2e9-4ec0-b1b8-85392f059745"
        },
        "item": {
          "id": "e8db66f8-eeb3-4b50-853c-8cb0f36aed4e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1655c986-ce94-4243-aa3f-cf2c0ac44afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b24d498-200e-43af-ae36-9f6e00176e8f",
        "cursor": {
          "ref": "4aaa58ed-f916-4691-8dc3-d9a02bf498a5",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7ea4b95d-af67-4829-9cd5-c0121592432a"
        },
        "item": {
          "id": "0b24d498-200e-43af-ae36-9f6e00176e8f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9caee047-b8b1-4c02-a49b-2fd1129080ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392e61b5-9522-42b6-89ee-b4d614b94ea4",
        "cursor": {
          "ref": "e1ffcbc5-fe53-4aea-bd19-52503708b795",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "63fb7878-2cac-4049-ae1f-de2bbe2ec90b"
        },
        "item": {
          "id": "392e61b5-9522-42b6-89ee-b4d614b94ea4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ade6df44-dd90-4516-bf03-eac251189af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3671f508-db02-4e11-a961-dd90eff4e6a7",
        "cursor": {
          "ref": "2f9bb9ac-127c-488e-8c25-65018db4ad50",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8cb77699-6972-4425-bc51-0dd341573259"
        },
        "item": {
          "id": "3671f508-db02-4e11-a961-dd90eff4e6a7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5a45432f-601d-4182-8247-b7b755533a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd44ae39-7dba-4695-b977-24366dabb6a7",
        "cursor": {
          "ref": "78a7e3b8-0a90-48eb-82d2-ee5fba59a6b0",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5b472cd2-1f08-46de-a0b0-fd7aa6f86863"
        },
        "item": {
          "id": "cd44ae39-7dba-4695-b977-24366dabb6a7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "119b4184-0f96-4360-94e3-4b05a389aad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7de56515-73c1-4f85-bf0e-e09f876e981f",
        "cursor": {
          "ref": "a4fc088e-8ba3-4e04-8fba-92bff4be2e7b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bff7b2cd-f102-422c-a105-3b184548f6ce"
        },
        "item": {
          "id": "7de56515-73c1-4f85-bf0e-e09f876e981f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8ee79824-836b-45b2-a878-76ddd386ac9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18495af-b898-4262-964a-f915963373e6",
        "cursor": {
          "ref": "90d9a469-694f-4d84-92f9-9073948e3b13",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "caa63b87-c19c-4248-814f-271bc689a156"
        },
        "item": {
          "id": "b18495af-b898-4262-964a-f915963373e6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4775e002-c770-4d10-ae8e-4e9a5b407d37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297d3c9b-6c08-42cc-81a7-d57fdf5c03ff",
        "cursor": {
          "ref": "16824ba5-faaf-47ba-baf9-9862070b1911",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a6d7fb3a-8e9b-432c-8b63-6c03241c1d2a"
        },
        "item": {
          "id": "297d3c9b-6c08-42cc-81a7-d57fdf5c03ff",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4b900a5f-13b9-430d-9935-290047e621c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7178c1d1-42e3-409a-bb0e-ea4131718ecf",
        "cursor": {
          "ref": "37b14fc6-70e1-4510-aae6-ece670992bba",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8954e53a-7ebe-459d-a435-5903ed2829a6"
        },
        "item": {
          "id": "7178c1d1-42e3-409a-bb0e-ea4131718ecf",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "9f69cc97-42f7-4044-a378-49342b55ce9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a0b3a2-a00e-430e-9995-691706eef799",
        "cursor": {
          "ref": "8485a93a-136b-4cec-8890-37273843c56e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b76ae8fd-6d8c-42ba-858e-784ea2f69eb9"
        },
        "item": {
          "id": "79a0b3a2-a00e-430e-9995-691706eef799",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9d003f27-5455-4969-8d40-5143317b0588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19baec5e-406c-4f5c-980c-3c5a05aeb5c2",
        "cursor": {
          "ref": "ee3179cc-0e44-4e2b-9314-0e939b54f151",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "64e92e30-d3cb-4b11-9159-1dd114042a5c"
        },
        "item": {
          "id": "19baec5e-406c-4f5c-980c-3c5a05aeb5c2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5be7897d-bfff-4232-b002-949bd12fa590",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f456c000-da00-4c0d-8d02-bdf8731c9dc1",
        "cursor": {
          "ref": "a34a991f-9445-4c3b-8a97-89e840b9712f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1b9300be-4f02-4107-9f46-cd8b92d32126"
        },
        "item": {
          "id": "f456c000-da00-4c0d-8d02-bdf8731c9dc1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e273d0f5-d044-4148-92fb-379227e9ce23",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "42e61a80-e7b5-4b31-ada3-2b5db57a9f42",
        "cursor": {
          "ref": "fe3cb986-84ee-472d-b576-8f0b136a45ab",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "629537a7-195c-483d-b253-7e24272e08a7"
        },
        "item": {
          "id": "42e61a80-e7b5-4b31-ada3-2b5db57a9f42",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3c1980f4-a8b3-41b7-adde-3531ce284f97",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e3c15a31-80d9-4bb7-922a-9400547d1718",
        "cursor": {
          "ref": "08dd3fe4-52b7-44ed-bf2d-7ccf428f071e",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "dc0483aa-5eb1-4a1e-af87-97474054e309"
        },
        "item": {
          "id": "e3c15a31-80d9-4bb7-922a-9400547d1718",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d0962907-b7f0-4792-97aa-ae3b6149fe5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a0cf5d-265f-427b-bd5c-d16d31699a60",
        "cursor": {
          "ref": "fa18670b-aa29-4f98-a86e-10b8f371a6f2",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2d00ba9a-0011-4735-94a3-5d9899bf562b"
        },
        "item": {
          "id": "d7a0cf5d-265f-427b-bd5c-d16d31699a60",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "2a0f2256-2cfa-4e9c-a12e-a6af81aa2be6",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "3c87d8af-2116-4c55-b542-cdc2fb0fdfdb",
        "cursor": {
          "ref": "b99bf7f5-b96c-4b20-ad00-ab566be341cd",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "799aa31b-8bcd-473a-8009-1510300c1a88"
        },
        "item": {
          "id": "3c87d8af-2116-4c55-b542-cdc2fb0fdfdb",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d2ae1211-2940-4a1e-8c52-20942f56259b",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "7694f25b-1e34-4fa1-9741-4a39d45355fe",
        "cursor": {
          "ref": "a5ebf7e1-3051-4d9c-a264-1bd978c5fb17",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "45f557e0-f75b-4625-b169-82a9fa158bc1"
        },
        "item": {
          "id": "7694f25b-1e34-4fa1-9741-4a39d45355fe",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0b238080-50d1-4b37-b709-b2f2f2e3a5ca",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "463f96cf-c78d-475c-912b-6fbef897976a",
        "cursor": {
          "ref": "aa9f2a84-79c7-4222-94ca-1f9643ea341c",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "72f55bfb-cc54-4bc1-b592-4b5db7970f39"
        },
        "item": {
          "id": "463f96cf-c78d-475c-912b-6fbef897976a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2af7e1bf-268a-4fda-b6c8-d5ea995a72cd",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "7fa40114-36ee-4618-8b35-d3b392097658",
        "cursor": {
          "ref": "676076c5-28ff-485a-a7e1-0612a7cc81ed",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "f3cc7852-70d2-431d-9bd2-9d3bf9f98b9f"
        },
        "item": {
          "id": "7fa40114-36ee-4618-8b35-d3b392097658",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "47c7786e-c5c2-4f65-9f23-0250ecc30f75",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "647976dd-f89d-4578-b614-a2e4aeb42206",
        "cursor": {
          "ref": "fd65ef92-fcda-415c-ae3b-5ca9084f7ceb",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bb8ad8e2-684d-4c7f-9035-8340785a9179"
        },
        "item": {
          "id": "647976dd-f89d-4578-b614-a2e4aeb42206",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e3fa8627-da24-49b6-8def-253fb7b53077",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3df66572-6ed4-4bdf-9216-64633824cd30",
        "cursor": {
          "ref": "9e7dac9a-b0a4-4e47-80c6-586442624d1c",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8fd1d2c9-069f-404b-801c-07c7e9d90e3c"
        },
        "item": {
          "id": "3df66572-6ed4-4bdf-9216-64633824cd30",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6a93b311-dbe4-40d4-974a-49f8278a7d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68850a5-3b7f-4126-b228-156dce9e6c5c",
        "cursor": {
          "ref": "93d9c37a-e625-49f9-af9c-1ffbfdba3ad8",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "e6629cb6-6187-4b55-89c8-8a09b2cb70dd"
        },
        "item": {
          "id": "c68850a5-3b7f-4126-b228-156dce9e6c5c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6e14e14d-adbf-4b55-8565-1ad27533b7c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256233e4-b872-4833-a2f9-cd439def9f7b",
        "cursor": {
          "ref": "04dea084-8acf-4a16-a03e-ad6b21f919d8",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d892f4dd-f952-49d8-b8fa-9348b62b443b"
        },
        "item": {
          "id": "256233e4-b872-4833-a2f9-cd439def9f7b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f4b1f8a0-4ea4-4b0b-8621-d21554617185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62547256-581f-4bfb-b16c-b25f3c1019a0",
        "cursor": {
          "ref": "16b024ae-b699-4506-be90-4a81335cdd00",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "66a115b6-6a1c-45fe-b4c4-937b0639b959"
        },
        "item": {
          "id": "62547256-581f-4bfb-b16c-b25f3c1019a0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "fbbe0c24-7719-4d99-9593-464e2837c40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3cda6e-a91d-46db-a0bd-47c294a3f9e8",
        "cursor": {
          "ref": "2af4524c-a106-45ce-888b-5d52f1bf9d2c",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "9da00d85-4ac7-4442-aa58-6ecced3de2ec"
        },
        "item": {
          "id": "ad3cda6e-a91d-46db-a0bd-47c294a3f9e8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ac5d8ed6-6d16-4416-b979-f87abcb00c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59a3c3fe-ffe2-4c8e-86c9-636527bd0b65",
        "cursor": {
          "ref": "12074eab-3e5d-414c-9858-8f640becadd9",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d67e143d-7446-45dd-9f76-e9587c2286a6"
        },
        "item": {
          "id": "59a3c3fe-ffe2-4c8e-86c9-636527bd0b65",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ce412c29-8147-44f8-8ff3-9d6624bf353c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623dc713-226e-4572-9f14-53f8e6a11a77",
        "cursor": {
          "ref": "af62c72c-2fb9-40d6-b253-16e43bdaedd6",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2ed208fa-84a6-488c-9b6b-57791f1b36ea"
        },
        "item": {
          "id": "623dc713-226e-4572-9f14-53f8e6a11a77",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "67517b98-fe95-4a7d-8573-7780decd6d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825a2f24-662a-4aca-9b4f-f3ca2f5fe441",
        "cursor": {
          "ref": "5807e1d4-634e-41ea-baf8-fc2af38463da",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "2d1c0a35-5159-44f6-8265-8b1d20df3559"
        },
        "item": {
          "id": "825a2f24-662a-4aca-9b4f-f3ca2f5fe441",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "665b5b4b-5f40-44b8-9404-067e96a44730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b540d40-c71b-4281-86e8-58c43527b214",
        "cursor": {
          "ref": "c423e77c-d202-45b9-be4a-bbb4f6f2edb9",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ea4a421e-573e-46b5-8460-d611182983ca"
        },
        "item": {
          "id": "1b540d40-c71b-4281-86e8-58c43527b214",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "595d6a5a-4d44-4d7d-b375-b60d5cc23761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44e166d-9900-401c-8665-4792fc5bbf77",
        "cursor": {
          "ref": "7d962f35-1756-4d91-a22c-69622280c047",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "6af565f9-31db-47cd-ab96-a14f578f27f4"
        },
        "item": {
          "id": "e44e166d-9900-401c-8665-4792fc5bbf77",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6af01ba2-e663-4209-a9d1-25666ac681c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71899bc4-5c3c-4b30-a290-13a38326501c",
        "cursor": {
          "ref": "a238a7bf-605b-42da-8e0e-26ba40881fd6",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cf231c24-7edb-422b-95c4-1567666ebd99"
        },
        "item": {
          "id": "71899bc4-5c3c-4b30-a290-13a38326501c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "52a02aef-0452-4df7-96ea-8b23d213293f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486eeb89-f884-46ed-a194-a53b28a7dc5d",
        "cursor": {
          "ref": "3be3c1a3-939d-452a-8d9f-6b611213c536",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ba8741bc-d1c8-436d-bae1-10f22363f21b"
        },
        "item": {
          "id": "486eeb89-f884-46ed-a194-a53b28a7dc5d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "798e2338-e4be-41eb-a824-5d974271716e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56311740-672b-4933-8ca5-b3bb83819221",
        "cursor": {
          "ref": "49b6580e-5b6b-4750-abb1-b3dcd1663b1a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "17da87f9-17c5-45b4-aa89-23911fca01bc"
        },
        "item": {
          "id": "56311740-672b-4933-8ca5-b3bb83819221",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "0bb9cfd1-00e3-4109-96c6-c3ea7afcb772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbec961c-dda0-4ea4-9ffc-8472641ccd5d",
        "cursor": {
          "ref": "9b23d73f-3da8-4b26-ad5a-b046464ade81",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ffdc73d0-c766-4045-8689-75d276e4b446"
        },
        "item": {
          "id": "dbec961c-dda0-4ea4-9ffc-8472641ccd5d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "92befe1c-a218-4d84-8b40-4e44bf85758c",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d06bfbda-a7fe-4f61-b753-4400531b2e59",
        "cursor": {
          "ref": "fac34ed9-c686-4ca8-9fed-5db94487aa60",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c6bb688d-08c5-42da-985d-224dc697526a"
        },
        "item": {
          "id": "d06bfbda-a7fe-4f61-b753-4400531b2e59",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a18143ef-d107-4f06-8d4b-b5bd2bbb6df4",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "f50dcd7a-d145-4c83-b72a-fc08a94f3526",
        "cursor": {
          "ref": "92029b34-0889-4099-a72a-d53a62bb67fe",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "db22881b-36e3-4478-b421-40572acf8e7e"
        },
        "item": {
          "id": "f50dcd7a-d145-4c83-b72a-fc08a94f3526",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "eb0b330f-c27b-4e8f-880d-817524949a19",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "d631333e-f7f3-432d-8ba3-cf068c08e09d",
        "cursor": {
          "ref": "30534f6c-dcab-4d51-984c-d345e663edbf",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c8e68dad-73f9-48d4-8701-4caef489305f"
        },
        "item": {
          "id": "d631333e-f7f3-432d-8ba3-cf068c08e09d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "5623dadb-7189-4b51-b56e-3216e9a50d11",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "ad943445-cfa0-415d-af7a-9716fb9d5b24",
        "cursor": {
          "ref": "f657d423-790c-4eb0-b1f8-227326ca9ad9",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9430e528-62c1-4d93-851c-d3f43d1b8e15"
        },
        "item": {
          "id": "ad943445-cfa0-415d-af7a-9716fb9d5b24",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "42096901-46ad-427c-ae26-995f60fe3cb5",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "bb0f5e09-e81f-4305-ac30-c23b497f9b22",
        "cursor": {
          "ref": "2e9232be-c739-4038-b219-c395ad7041bb",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "08152e16-246b-4bfb-af4a-57906ec60179"
        },
        "item": {
          "id": "bb0f5e09-e81f-4305-ac30-c23b497f9b22",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "34661cca-6c7a-4ded-940c-eb7b754190c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed658ed9-d914-4774-9bf4-180ef8a030de",
        "cursor": {
          "ref": "c8fcb94b-9dbf-48f2-a865-8990747b6392",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3f60123e-3533-4329-9df8-bfcd5a8083a7"
        },
        "item": {
          "id": "ed658ed9-d914-4774-9bf4-180ef8a030de",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "952dcf31-1909-408e-bc89-26a2d83eb6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3ec00e-2329-4a2d-9e18-da45339d37ee",
        "cursor": {
          "ref": "ed5ae8c8-4975-44da-bc2f-df908bceb9ed",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e861b624-0f19-4a34-a017-1011a7f67f33"
        },
        "item": {
          "id": "3c3ec00e-2329-4a2d-9e18-da45339d37ee",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fa4819d9-00e7-4275-8846-75c4cbd1ef34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf4c6e8-036a-4eec-83fc-c23d289db8ee",
        "cursor": {
          "ref": "cfeb98a0-fb49-475a-8473-5d39bf192bdd",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "61a434bd-363d-4d19-a4b6-4b29da8ca160"
        },
        "item": {
          "id": "6cf4c6e8-036a-4eec-83fc-c23d289db8ee",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "76399ca5-1520-4e17-b45a-86e958a26850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdfb5d2-efcb-4b91-83c2-cfe6e71ead43",
        "cursor": {
          "ref": "aa19428c-d54f-4132-99c8-c319ce3bde43",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9a552664-f0af-48d6-a4c8-b98eac1f7625"
        },
        "item": {
          "id": "5bdfb5d2-efcb-4b91-83c2-cfe6e71ead43",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a0948322-475b-4b1c-93ad-c4227f64eb9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ba757e-469e-4c59-b0d5-a916ebdc24e5",
        "cursor": {
          "ref": "48768e14-7351-4f98-bb17-f8001f301c85",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5ffe5fc7-1fc2-4801-903b-4e1476e18d97"
        },
        "item": {
          "id": "c9ba757e-469e-4c59-b0d5-a916ebdc24e5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9a5f3829-7397-4140-b832-75b83e6470b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c367ecd8-0184-43d3-88a9-5e716fe53beb",
        "cursor": {
          "ref": "100b7c76-3557-44e5-b463-5b85382b03ac",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "696d0aa8-71bc-43e5-b859-8518cd0f2a1a"
        },
        "item": {
          "id": "c367ecd8-0184-43d3-88a9-5e716fe53beb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "18686245-2a62-47bc-ac5d-67154e8b90b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711e4415-65ba-4331-b262-5b4f023615d4",
        "cursor": {
          "ref": "f192c129-7661-442c-9220-3eeef50fb477",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "40034d69-876e-49e7-a1ca-c557232e5c30"
        },
        "item": {
          "id": "711e4415-65ba-4331-b262-5b4f023615d4",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ceb5d813-6954-4f34-854c-b05f225498f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f4ca4b-85ff-4ace-8eea-a9b420849412",
        "cursor": {
          "ref": "ddfeca80-58df-4205-9e37-a94d5394fb9c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "49ad9c69-35d0-4026-b2aa-3f1993bc93ee"
        },
        "item": {
          "id": "e8f4ca4b-85ff-4ace-8eea-a9b420849412",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4d733921-c4a4-4768-a4c4-27ae3d85547f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fd348f-d1ad-4e33-8921-33b2d0e76a91",
        "cursor": {
          "ref": "df612e68-4b21-42a5-9b87-64aaf2a63ae9",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cd045b35-10c9-4a3f-9c84-0b35965bdc73"
        },
        "item": {
          "id": "86fd348f-d1ad-4e33-8921-33b2d0e76a91",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4d7c9759-fabb-4e74-bb99-9b95dcc6274b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36750e70-97f3-4fb2-95e1-336c7806f713",
        "cursor": {
          "ref": "4195676a-cbda-4130-a63b-f3711389b642",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "7f89a266-5b6b-403f-ba04-7bf6638e727a"
        },
        "item": {
          "id": "36750e70-97f3-4fb2-95e1-336c7806f713",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "69968e81-e4c7-40dd-9555-6e3ba69ca9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96035421-85f4-4137-acf9-0d200817a619",
        "cursor": {
          "ref": "6f9df9f9-e86b-46b6-a726-dbefd1f16c3a",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "760b5854-183e-42b8-ba7d-fdf28cfc3f44"
        },
        "item": {
          "id": "96035421-85f4-4137-acf9-0d200817a619",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "839e4d86-03d7-49f8-a1b0-db6a8e20bfe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "765b9f06-e20a-4c5f-8382-5a819e063452",
        "cursor": {
          "ref": "8cf89a2a-f612-41b5-99d5-b96c7cf0a7f4",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "3c1b43a6-ab4c-4770-89f8-da709573f2d9"
        },
        "item": {
          "id": "765b9f06-e20a-4c5f-8382-5a819e063452",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b339c224-09f9-47ae-a771-7850df664161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f05a7d-22ca-4864-ade5-a7a1052ffc8d",
        "cursor": {
          "ref": "efdec913-2ce3-41d9-9e08-c9b27efdb4b2",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b9d137c8-39f7-4466-b1f2-65491dde9dfb"
        },
        "item": {
          "id": "d5f05a7d-22ca-4864-ade5-a7a1052ffc8d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ca412af5-c2c9-49f5-971e-7dd7bee2e10d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa292d65-8f45-4032-aa88-826e31ed7f27",
        "cursor": {
          "ref": "1646803c-d7b4-44c8-8975-050bb3c9c42d",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c49960fa-c131-440c-bb5e-8a60e754bd13"
        },
        "item": {
          "id": "fa292d65-8f45-4032-aa88-826e31ed7f27",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6f0c0348-7c7a-416b-85eb-7b8aa219b57f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae83c21-6935-436e-81ac-2d72cab8a471",
        "cursor": {
          "ref": "c6d8c99e-e147-42e5-9fc9-e993da127ffc",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "fbb84d35-653c-4730-b3c4-a6646365f000"
        },
        "item": {
          "id": "9ae83c21-6935-436e-81ac-2d72cab8a471",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "18edef92-aa7c-42c5-b69e-40c09808f5ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10b2d13-3245-45d8-be62-0eaf556e05c3",
        "cursor": {
          "ref": "ca919843-6c7e-4ccc-9495-0c732f9718d5",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dd66bccb-d2f5-4456-851d-053e12be8b7d"
        },
        "item": {
          "id": "d10b2d13-3245-45d8-be62-0eaf556e05c3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b19fed6a-a729-49fa-be78-29316bb1eb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48cee0e-4207-46b5-9e0d-08912aef9039",
        "cursor": {
          "ref": "0e9fd42e-238b-4b43-bf18-fbe599a7d667",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6e49e7c8-a722-4451-bdc1-96b06f3348f0"
        },
        "item": {
          "id": "d48cee0e-4207-46b5-9e0d-08912aef9039",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "158e8b00-c3b8-4fff-851c-6ad4b9a6ee30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9be32f-3dd4-4d4b-be25-3ce8c982d974",
        "cursor": {
          "ref": "cb8b08ef-19bf-44f7-9cd2-22405c3fc0f6",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "79173f0f-528a-43e2-baa6-b38bfcf158d5"
        },
        "item": {
          "id": "0f9be32f-3dd4-4d4b-be25-3ce8c982d974",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a746773a-0dc6-4df2-b786-c65db9579c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d0d51e-7228-4a9e-b770-7c196adeecfd",
        "cursor": {
          "ref": "e0353e2e-a626-48ad-b899-966045a2b3b3",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4e79a740-9b21-4d13-8302-35f08e512116"
        },
        "item": {
          "id": "00d0d51e-7228-4a9e-b770-7c196adeecfd",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9417de7f-0ca6-4f35-b7e1-2ffa5687c487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb359093-0d42-42f2-a7a4-d111f45381cf",
        "cursor": {
          "ref": "e71530ec-bd99-400c-94d8-deb393e848c7",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c4cb03bd-5670-49a2-a20e-eacc55f6b9d5"
        },
        "item": {
          "id": "cb359093-0d42-42f2-a7a4-d111f45381cf",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "984d6cd4-2f3c-490e-9cee-b83f7f97ccc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5663f4ec-842c-4c2f-a4fc-6df8aa8ae985",
        "cursor": {
          "ref": "ac0c30f6-6a9a-48d8-9d7d-517bdc39a377",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4e394eb5-0543-492f-9e68-cd370a3ea641"
        },
        "item": {
          "id": "5663f4ec-842c-4c2f-a4fc-6df8aa8ae985",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "42d1d270-58a7-4fce-80c1-b0e23fa1c902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c30906-41cc-44bb-87ac-819159bb4c06",
        "cursor": {
          "ref": "e1ed2691-d642-4411-9d5d-2aff8758fb0b",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b346cb8f-bb7d-4607-ba2e-36f910186626"
        },
        "item": {
          "id": "b3c30906-41cc-44bb-87ac-819159bb4c06",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "099de9bd-5aaf-4ba9-b4d4-2e520761cd1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27868db-0a3c-4bfb-89e1-4a8f64b1ebad",
        "cursor": {
          "ref": "f0fbc5bc-e16c-49e0-b0a7-d6d3fc6d97f2",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1e2d8a2f-0d29-4138-8b95-0430a3411f8a"
        },
        "item": {
          "id": "b27868db-0a3c-4bfb-89e1-4a8f64b1ebad",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cbec5282-44a9-4c30-8287-e70dbf9dcb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fcfd7e-9d2d-49b3-9037-77e45a6bdade",
        "cursor": {
          "ref": "108824fa-7700-47b9-bc7d-eb982ecaffd5",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b70769ef-1ad1-4ba2-8076-0d9dc2c53f1a"
        },
        "item": {
          "id": "b0fcfd7e-9d2d-49b3-9037-77e45a6bdade",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5de21ad6-ceba-488d-951f-7d941adf79cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba98128-7e8e-40ac-9d12-9758c59811e0",
        "cursor": {
          "ref": "fc185514-3769-4ae3-9e82-b388cc9a47ab",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "fb0a5d88-9ab8-43ca-8983-2d76a1a9e612"
        },
        "item": {
          "id": "3ba98128-7e8e-40ac-9d12-9758c59811e0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c0c2c59f-0c3f-4858-8ccd-5842865db538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8381cb6-0e1c-4150-b4c2-e31003718141",
        "cursor": {
          "ref": "bae9a7a5-f939-455a-9738-bcee666bca78",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "14c8e746-bf69-480e-9f37-ef9c4777c678"
        },
        "item": {
          "id": "b8381cb6-0e1c-4150-b4c2-e31003718141",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8d4199ff-8b24-4a26-ae5e-45286e91df42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af4f9b4-f9e4-40ec-931f-32cc9c5a5c8f",
        "cursor": {
          "ref": "4ac7c30b-4362-419b-916a-bf8f474cd50b",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "03e29b5e-6fb5-4d77-902c-f5fbbc5f968d"
        },
        "item": {
          "id": "2af4f9b4-f9e4-40ec-931f-32cc9c5a5c8f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "584a1d12-22c5-4b02-bc9a-1084ca10d169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46db2b59-672d-46ab-954b-3b3038cd90cf",
        "cursor": {
          "ref": "399b74ed-fbdb-4df0-a12d-143682851b67",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "91a6be8c-4b11-46e7-9bd0-8b58329e2f87"
        },
        "item": {
          "id": "46db2b59-672d-46ab-954b-3b3038cd90cf",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9d063316-1be8-4523-ad85-618f7b1cf476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbff14ea-9d62-488a-b293-e059cc7338a4",
        "cursor": {
          "ref": "50bc66cf-896b-46c5-ba1d-7aecb34b1099",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "16738965-6144-4d68-97a6-86b953c5e17a"
        },
        "item": {
          "id": "dbff14ea-9d62-488a-b293-e059cc7338a4",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "62192839-28db-4e86-a55b-63fe3ee9fa4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cab416e-71c3-45f9-8d9b-e7868bf55b7a",
        "cursor": {
          "ref": "77cb127d-f4d1-4315-b979-e19c1feae4ec",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9f0b8932-4825-48d6-995f-22fe7adfd628"
        },
        "item": {
          "id": "0cab416e-71c3-45f9-8d9b-e7868bf55b7a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "613641c5-7b53-49c3-9070-a5d2e6ffa34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcfc86fa-5e77-4164-bc5d-9530e01e706a",
        "cursor": {
          "ref": "dd03ea19-c882-4397-91d6-509623a89286",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "55314f96-451c-4cef-84eb-6e47b6e1bfd4"
        },
        "item": {
          "id": "fcfc86fa-5e77-4164-bc5d-9530e01e706a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7cc2bea0-345f-42e4-a8c0-0eda31c5bd84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50477da8-668b-4977-b269-2e7a5bcbc14c",
        "cursor": {
          "ref": "fdb56597-3717-467f-9453-6791198d01af",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f0c70552-c840-491b-a110-d84ae0dd0710"
        },
        "item": {
          "id": "50477da8-668b-4977-b269-2e7a5bcbc14c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "826c0e1e-3d34-417a-8554-8bb17d419090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd38fcc-c53b-4b5c-a585-1cd571a23cb1",
        "cursor": {
          "ref": "0dc11963-7193-473a-9e70-58306c4fb509",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1fe29e89-8553-407b-8bce-12d1f240633d"
        },
        "item": {
          "id": "2bd38fcc-c53b-4b5c-a585-1cd571a23cb1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7230f0d8-4d8b-4269-bdfa-2b21ec5a7b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ad6c21-32cd-4b79-8f7d-b32db6cb66f4",
        "cursor": {
          "ref": "dd18f2b7-a6e8-4ae8-9cb6-ffc3d30ab94f",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "11eb0edf-8764-490d-a938-ced70e8736d1"
        },
        "item": {
          "id": "85ad6c21-32cd-4b79-8f7d-b32db6cb66f4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "bdb992c6-9583-48f4-b11d-f90c1716e74f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4227e6a1-de81-4e58-ba86-03801b5edfcc",
        "cursor": {
          "ref": "ccecc0e5-12e4-4725-8ae9-a79d39dbd570",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a8218618-1bf3-4e09-a197-09904a4d465d"
        },
        "item": {
          "id": "4227e6a1-de81-4e58-ba86-03801b5edfcc",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f227c627-4d8d-439e-8590-45013c7a2aef",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "845d4cfc-5888-40fe-95ed-3c6c867f925e",
        "cursor": {
          "ref": "ff6ed27b-c066-43cd-b711-404df24d1a91",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "cd91e8fd-fb22-47e8-9e3b-22b4c9330d63"
        },
        "item": {
          "id": "845d4cfc-5888-40fe-95ed-3c6c867f925e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7af0b700-bb69-4e58-8e78-1b3281be1ce8",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a4e123-3d45-438c-9608-b0592fa3b869",
        "cursor": {
          "ref": "068ac5ae-bf80-4d6f-927e-ef4c716d2bb2",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e52f10c3-cc67-4672-b974-819187e4cc0e"
        },
        "item": {
          "id": "d7a4e123-3d45-438c-9608-b0592fa3b869",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9047c1ff-6c12-409d-8763-fd35607ac71e",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea5fb17-989f-49f6-92ff-a3e7dc78ace5",
        "cursor": {
          "ref": "4f02fa66-e6df-415f-abb1-a485204d3331",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "64de8ec3-3d6e-461b-99e5-c98219f83a25"
        },
        "item": {
          "id": "dea5fb17-989f-49f6-92ff-a3e7dc78ace5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8ce5cee0-687e-48f5-b1dd-40ddb0510f9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea5fb17-989f-49f6-92ff-a3e7dc78ace5",
        "cursor": {
          "ref": "4f02fa66-e6df-415f-abb1-a485204d3331",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "64de8ec3-3d6e-461b-99e5-c98219f83a25"
        },
        "item": {
          "id": "dea5fb17-989f-49f6-92ff-a3e7dc78ace5",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8ce5cee0-687e-48f5-b1dd-40ddb0510f9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bced7676-eeff-4123-bcd9-25df567b2e09",
        "cursor": {
          "ref": "f0d323f3-f378-4e22-bf9f-82f543823c14",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "27010eaa-798b-4dc3-b493-fc57fcfca9e4"
        },
        "item": {
          "id": "bced7676-eeff-4123-bcd9-25df567b2e09",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e566b92a-3360-4663-a890-dc0adbeea3c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb3f1f3-edaa-4e8e-8956-784afd9fc2b9",
        "cursor": {
          "ref": "a4153bb4-ba41-4d8d-8246-c36e29e371f4",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f664df30-154a-4f90-a9fe-dbaefd8987e0"
        },
        "item": {
          "id": "efb3f1f3-edaa-4e8e-8956-784afd9fc2b9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "29cfbe96-97fd-4a99-9133-a1b968b6959f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}