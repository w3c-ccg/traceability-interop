{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "769c26a5-ec14-4c05-86f6-27883da5746e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "05ee495d-0262-4e91-9aca-59abe5dd2f90",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "755eadd3-20f8-41ee-a8e0-22763a2aa3b1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f3a345e8-7af1-4f08-bbf1-145513b5a4e0"
                }
              }
            ]
          },
          {
            "id": "4825d0b7-a240-46c1-a6a5-99c79a73fb35",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3332bcfb-11f1-4e0d-aa16-7f03da82b211",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "17276d45-25fb-492d-baed-305c7609098f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8558857b-e6ff-41d0-a732-ab8609517f44",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2ac81f7e-8e66-48fb-a343-cabfa2ce8e3a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9c544304-f0f0-497c-8457-4b2b15939c77",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a63a77d3-465e-4cd1-8b49-00b14be60d93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c33b1452-ec8b-40a4-b0f5-432c2ad16728"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ab3d7c5c-f858-45d9-a6e6-3c4aac55370e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f8c98989-e0cf-4012-99d1-cd2bf1fce000"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "609de012-c178-4b45-9a6e-978b4f996bb3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "980e54ce-b1a8-4e56-aaf5-de4cc4399fac"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6efad17a-a1c5-4aca-a33b-7f84b0f2262d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "59b2d64a-668b-4992-9350-50486c7990d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d85b656-615c-4da8-a20b-3d6b2f36b74d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "95d165b3-5a53-40f7-8135-e69e8597e429"
            }
          }
        ]
      },
      {
        "id": "3f73608a-7c6b-4f41-b228-25abf8084d9d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1fbb5d90-3aba-49cb-b3f2-9d16d49c55ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "206b4bde-3496-44df-92fa-99d9f11a6a63",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2b5bc63f-391e-4871-91d9-bfad0dcd2406",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad589d80-6378-4ed2-a6db-b7538c505c57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a212e460-7c5f-44db-b523-edb24bc98616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043c7491-4a16-44f4-8e7b-1f4a45605964",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e13df2d-5a30-43cb-a9e6-29528770429d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3550d3c8-9e6d-46cf-b790-2cf46d953843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c32b16d-eace-41b2-a01e-11e454b30e53",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d0fc27-6876-46f0-aed6-7903bd653893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2debf48a-d098-4b5d-8d4e-6ec207b27e52"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5cfc095c-537c-42d7-b5ff-93c98798525f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a70677e8-2ebf-4f1f-ac10-ca7190a090f3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f867ab3-0547-4b41-969f-19db5958b45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bec7f50b-7551-4e0d-869b-41d5d6bd7600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdd1bb9-660e-45f2-84a2-e4a43b2cd7e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92d98207-9de3-424d-83f0-3598c67f370b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fa75b7e5-3fe3-4f09-8736-c45bc564335a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "677572a2-ded0-4649-878b-21e7c80912c5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c25ad8f1-4e58-4d8b-8fa7-87f8deb8ce09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "fd573697-1636-4941-a589-c6c8f8b23d80"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd7e302f-4acc-49b5-9bcd-15654c1de91e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b2398e20-f08d-4535-ab04-c94759a9b347"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fb3aadb-6b45-4433-9657-b3901a3203c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b73c7c30-391e-40e5-9eb2-4e9f5a83f45a"
            }
          }
        ]
      },
      {
        "id": "571ca5af-cf82-4134-beb9-587682f37f5d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "49ae91da-7407-410e-b37a-9aea3a1d35ec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d9981b81-99f1-4cee-a82f-a2b091063ea4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "736feb21-58f2-41e3-8241-7a2d9ee973b3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6a58fc-a924-4f7b-b4e0-df6257a7b95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce69d16-69d7-44f1-91ac-a61188961da5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab2cb062-6e4b-4e69-939b-1780e853f3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8b84b1e-607f-425d-8f4c-67cd6c3c6068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1813d093-f2c3-40d7-af7f-28d99cb9043d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dee8d4-eebb-4189-ae9d-c3b8bcfc8c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85df6228-53b1-4eba-bf5a-e50b59b76efc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6f63ee-a2ec-4f7b-9067-4feabe62469c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a87618b-98c8-4db1-a44d-969a9fd5cfaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab52ecae-db5d-433d-a1ac-1ed5af271463",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d3ae86-32bd-4837-aaf7-a2c801760005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68d8e2f8-8204-4e19-9ac7-ec27cf419688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93abcc1e-8d3c-4be7-b2cb-d828c556111e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f78b7b8a-5975-48ae-9e59-833604e23051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065d2f9b-7951-46d3-8c20-45c23642ab02",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e57dd9c-18a6-44d4-a37a-0c6007055be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facbab78-fb73-4843-91d9-ba3c1415127d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67579dee-d2d6-4ebe-aab9-2241d1afaaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ef17955-4f56-4ea8-b7a1-9c461d3879b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3173df9-0709-41f5-8cf4-4c3451dc0882",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b8ad4b-0794-4746-9226-6eb11b8d33ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a59876-f4f7-42df-8437-dda66493e648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4fe727-6af1-4ee1-8349-c932f18e1ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0951365-c89d-4dce-ba6a-67f40e481dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9d2b9a-fc7e-4655-9268-468ed712240a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7172ed6-d098-4d6f-888b-79cc34fc107b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c29c05-beea-4b88-9c3e-cc9bc2e281e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c8e014-56e2-456b-87ec-99865f3a3f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5ec5ff7-1f73-4702-ac4b-be09c82bb7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecab24b7-7793-41d8-b716-207a8ceefbcb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbcb925-2514-4ff5-8151-47f1acd6f585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741fb41b-145b-41d4-aee5-c1a2e6c24348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d5f4ab-cc13-42a0-ae57-89f4c00b852b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "536ad891-332f-45ea-9200-2b909e6be9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba148ba5-c8cc-469b-8a8a-74eb90260edc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eab9a8e6-26aa-454b-90b3-75aedc67505c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c834f311-6f2e-4087-bba3-e33e83d94eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfb171b-939e-4c3b-a1f7-4e887a36f5b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c14b8394-3965-4829-a785-c7c9d8267234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40f4843-7305-471a-ae2e-a6bba1a176be",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb51129b-ed82-480f-b73f-7b1b97c4e47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2992a41b-e74c-4d54-90bb-e98ab620be35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6985ffe8-f287-4932-a968-dc5f98152fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80507182-d490-4f78-81c7-74455db74b58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4513d9d-52ca-4139-b9ce-ba340c59b7ce",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07368a8f-8cf6-4678-8a49-c7142a05ec01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47397ec9-6958-4ac2-95c0-aee67bd4734c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc7e4c5-a593-439e-9038-ae96478bff9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c19e8b9-1200-4b81-a587-85a68a1aaa69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffbaf254-aadb-4651-b589-f240324eff4b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b94ce15-e0aa-4eed-97e6-12febfcf1b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a079f0d-9c60-4cb0-a208-3626dac04df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f23f4f-38a8-44b2-b221-c5fa49283c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f71a554-4e02-4581-9a75-b5f184294823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c5a5e1-61e6-457d-a0fe-ffeb233a0e0e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd6c850-cf91-48d9-b91e-ddc1a3bd324f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe94278-5678-40cc-8d3c-0a6ca5f6dd86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8a7600-3881-48cc-9402-788836f32ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e8962d3-ebe2-48c7-b9e9-ab2ab281ba38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be79896c-5cea-4267-85eb-42bc5c40f9b7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac5ed42-144d-4b93-8cbd-0e4872eae704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0423163a-a0a9-4992-a1b0-ef4c52819a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52862a7-230f-43d5-badb-d4b0fe00839a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8be158f-88e4-44a3-b002-284c48db11ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e77ec9-1a21-4d71-924e-53561b7d17fa",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380f3c8e-a9e4-4c0f-9d70-68a2d60c103a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f6d10a9-c921-41f8-80d1-55a6f9c746dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74de9994-bae6-4b04-89b7-a0d142d36281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cf2414b-c3b9-4202-8414-3be7370bfc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1058c508-0a29-4902-a43a-9edc358c2a82",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e5ff9e-6937-4808-b239-a29e036f1c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204c2e9a-370b-4408-bd77-3071d610eedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf3493f-b44a-4dce-8c3e-6cef4a3d0e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23109946-ecff-40e7-ae83-b4f01bcbc5ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acabd213-7b7e-41ed-b932-d351cebf21c6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b1736f-5d94-4acc-b371-69dfcc9b069f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad32c662-bbf4-4a7e-a9ce-f60c96181a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e75c4d-792d-46e9-83f4-a04a3d5299c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ccf39d1-f8b4-477e-86f3-0710eb48c124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3f2e17-e5d6-4925-ac6e-f6668106ac93",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "101a040b-ceec-4f40-b617-21fda831c02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe40a493-8599-454a-960a-ca1ecc71bdf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619e53be-a154-43b3-b3a2-7bab9fa3b0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98060f74-9004-41a3-a1c9-b5625bfe7687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1b7b07-f143-4301-ac1e-38bbd1eb4434",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3c4fc6-ab7c-47cf-b7ec-2bc76931f84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb52e2f-bd71-430c-8309-efc9390aa3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c22eb8f-06b2-4004-a7cf-fcb770b19d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "142ef7a5-4355-4567-a25c-f326ce843843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad65ec0-c377-48ef-a062-f6334545d3c2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4076d7de-6139-487b-81c7-8f6621a3a3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d5d1cf7-61b3-4e35-95a7-8105bb38f39d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ed7b84-418e-487f-8249-082b17480b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "52daee57-312f-4420-b44c-6753ba9f84e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b68861c-f9d8-483f-8ee3-2b7951a7f3ed",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87bfb1a-a80a-493b-a6d6-77e5bde536b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e1bb594-678b-4462-a0db-dbbcd53c24dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a821f54-ba8c-4ba6-b7e8-c86c60c0b84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4269c2-0c9a-43b9-8d33-87fe6fb63557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730e6262-1fdb-47ad-b622-10b69a2f01b8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9695f2-62c2-4bce-baa3-4bd13240214d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf58ba84-5325-4ab3-9ca4-d5e156b29882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d844b6b-7189-4c0c-b66f-8bb830cf4df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd98a1d-7e5a-40b9-932e-40c5202b75ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "150e1294-00a1-46c2-8829-561b8dc8e31a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48936051-aad1-4080-9f23-d2d53f956fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6b3aaf6-0dc0-4880-b3ee-b4051d5fc4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ab976a-0300-48f7-9ea1-5f237b1cbb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f65280be-0c7f-4479-8ac6-371ff8b16e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128cb6b0-4728-4a95-a38e-700bd9dfbc3a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99a7144-c2bc-420a-ad99-9ae47d8ab5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d678d7-8964-439f-8695-94383ad43b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b567e67-20a3-4ef5-82f4-6003d61c08ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcabd6de-2780-4261-9e26-4c5a5fb6f49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733217de-4b29-4ccc-a0cf-2359de0367c4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cbe221-78a3-4652-9699-969f01c1efde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885feab1-79ff-4239-9ddd-01176cd6cde7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffae6e7-4358-4adb-a756-29993565d971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "994d23d2-0397-4d70-8f4e-0d8a9d8989fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f385e1aa-a350-4673-9f1f-75efd7f0f467",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac727aa8-05a7-46ab-9ba9-4671e640e9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5477d874-eeb8-4182-8bf0-eb0715f4a649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f471c94-088f-485a-947c-e42c43d20837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a30fa86-dc86-4a27-afde-1379e0a445ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452e8a64-92e4-4854-97fd-58771a2b0fc3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772b697d-8ba3-4281-ab57-bfdd25097076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98197640-78ce-4f22-ad53-52fdc25e7250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982ca80f-a1a9-4b73-9c73-f72ef09a3d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1d66da-7a4d-407d-b3ca-bcf3e525936b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a12f36-c71d-449b-9428-94f6c58394fe",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e73cf6a-d1b0-4abf-95c7-7251f2b73578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8adce2cb-ce14-4675-b02d-c27d5cf2165b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7e0b2b-7f14-4890-89ca-fcf04762471b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6451bb9b-4778-4e98-a950-0b6aad459e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2e2397-d1b1-4dd1-bdbf-35906c5b8345",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4589c419-fcb8-4528-bc2d-085c562c9a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ad0bc8-6f2a-447c-812a-a973bc8c145c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf70bcf-b429-4166-8ad6-934e7932dbd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a52641ca-ebfe-4e9f-a213-5864e3c3dbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f4ef6d-f430-424d-8e61-975d58ef701a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a55dfb-62ff-4a2f-b07c-3d91815df021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c384c35-667e-48f7-9955-9af97ffb8cf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c68b171-b22c-4b76-a8bd-eb60b9878cd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "020a9b33-e5c5-4e5a-9d7b-5a80ea5d7e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab3ef0e-6847-4bcb-8485-dd4017d356a3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7228da0-a392-48fc-9e08-3133f743f030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e96cac9b-5aed-49bc-92c5-a8f9f879ff07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b94421-7829-46b9-b14e-a75409905c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "85021d60-0e32-44ff-9bc1-16115119154a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2242b17d-d73d-4081-b076-98203f7519d3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882728cf-821d-4948-8ff2-a0d6850c1dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5939b032-3c57-4962-8f4a-1ef8273547d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c4e613c-a574-4564-be01-a03d7104df0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2e1625-fa17-455d-9414-c1748e3802b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a8da55-ed46-4916-a75b-eb3b83840011",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9008bede-ed75-4660-ad5a-40129b4efea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b94c221-763b-446a-a622-9c4b8553dac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20303f63-0a69-4a92-af26-6778a5ccaa86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb4a8ae-97c4-4c53-af44-bc6f07934191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c18e1c-c53f-4049-b55b-2887e21093d8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e63b92-8e65-40e7-8d81-0954e5e154d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66ce9864-32cb-44d8-8c51-6471006af489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d316b6-7d32-46a0-9c46-23f2997512ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "218e2edd-40bd-4ebf-b4e8-99a47c7f54ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d909c996-3e8d-4384-a8b4-70b308a1c7e5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9ad7b5-a340-4938-8627-17ca8ccf42e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4005982-1380-4c76-b84a-2da08575ec05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d906e8f3-3219-4447-8f1b-b46220be74e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89cf2602-e28a-42ad-8ab6-c8555ca7c694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12b733a9-a60b-4529-8014-554f29f584a5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a90b72-c207-4e96-92b0-294614deca76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3106de1c-d602-4fd0-bf49-a6d778b877f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab9ab9d-cdd6-406a-b39b-7d4c4722159b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d62e0add-d2c5-4bf7-902e-04bd8a627cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583d72c5-a298-45f7-aeb5-4facbcb51f6f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3630e117-ecf9-4fbc-9f53-414ee0fa3c54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1764bd31-e4ad-40ae-8029-5839634dc5f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a74be9d-5882-4a6b-9211-952e10284a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc427f8f-d8ac-4f54-9bc6-96e4f49bf6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7a09ba-963f-44e6-88b1-925f40cdf43e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de0ea37-4525-4a29-a102-05156bb9e3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce79e0ba-305e-464a-a9c5-1eee598b3f23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b523eef-be23-49d3-98cc-73dd2a254e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "db474899-4985-4142-9282-c689d0cb0f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a707944e-1b7d-4be1-8d36-02cf0bd7d19a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbf1c96-5c90-469f-bf9b-413ba7b45f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e64ce7-3c89-4bef-ae39-4be38563092c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499dcef2-adec-4e3e-a0ab-a8ba35e31311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fbde69-1bd9-4daf-b621-e8673c983bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d54e0fe-2c45-44f3-af8b-e09d79c60ab2",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fb4000-a649-4fd2-b56c-764bcff70c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec4934d3-7297-4788-8b57-7b27d105ec41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c120bd66-9998-4e2c-9587-e6392d731352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9771c3f5-afc4-4c6f-af5d-08c71f9336c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e75ced3c-c786-40e6-a9a3-9ce8d4c7d73c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073c58e6-eaf5-40af-92f3-454ae75a3e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fa1fdb-1651-4497-9107-c45043e28d7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b415b429-0ecc-45f3-9e2b-cf9855a41cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7445806f-08e6-4b6d-b38e-e36d7d409e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a1af38-706f-45f0-be72-e90763a02380",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "145acf1e-a307-4b3c-bff6-7520959d1b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000f72bc-d27b-4328-9832-92109d89ce2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7db2fb9-12d2-4a3d-9215-471094c08d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5de5dee-a7d2-40f0-bc41-908279a862c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb977ba7-18e8-4653-b7e6-6fa3948eafd1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670a9102-fac4-455f-9dba-844a512f85f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5caf11e-9ace-40fd-a917-f3f9f405192d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947bd71b-fce4-41cb-9e27-510d1fc71081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b4d4d35d-bdd7-41c4-86ea-ec4705db2338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4308ff-b1ec-4f73-9b31-87a3493eeec1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea63f80e-3211-4beb-9cdc-dad103b56455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c89294-fa57-4e99-8b79-c40bae131bb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1691f377-3354-4c0b-b9ba-c931e12103d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3301626a-905f-4c5c-a9b0-cf3dcb75afd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66401d29-7ff5-4cf5-9f8d-a8de1bf4b51e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c64c6d-def7-40bd-a4a5-1e5b07d1d6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f1af37-0054-4b37-a12d-1f58649d47d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a86fd9-4196-4762-9205-12eff565a02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "57daf254-586e-4ab9-80c8-6e681e7925b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7891f944-509d-4cfc-a0d2-78bbf02b3465",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f850d9-d1f3-4080-a309-57df25372e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b228bca-828f-449b-bf0b-3dd67b0b4ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc300a2-d341-4a15-a707-46349270065a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "09485a31-9832-4546-8850-67ea6865b2ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4d2949-359d-4fa7-8858-7fb05bdedb66",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac569c41-7e01-4ef6-8d92-5818961fc580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c5a596-2704-4bf5-b856-0fd585ab6f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0644526f-5089-49b8-b570-eb421295fd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a759f58e-b97a-42f2-a40c-b89b0776a138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f37e85a-0c7b-4186-85f6-d4d690c0d750",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e04f129-59e4-4b84-a397-e932ec31d652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04affad1-5070-4f32-87b2-e658f46a9125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71d98c7-a403-461f-9ec0-8e8fac082813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fee0e9d-6af5-4219-85dd-8bf801c4b7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f9122f-2df6-4b15-a0f6-3d2bb3b5b774",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6593d6e9-828d-475c-8c2a-0cc3baa84edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33e5d2df-b315-41ac-86ee-eb5cb7d1dae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b61f61-e7fb-4dd7-9d23-8d355bda2d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "efb298f7-aa41-4d07-93ca-68a0a8614c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aded795-ffab-4bc1-aae1-cd3e34a2e58d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02541349-c5b5-4bb5-a406-e9af1ac43758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7127b4c6-d81b-4b48-b3ae-a94680cf7158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc9b188-10cd-472a-ac25-b04b84b3c5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72e08aca-fd67-48a0-b5ec-64a1c178ff3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318bf23d-a2fc-4db5-b9dd-df488e00cfe3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cd2718-f9b9-4858-84e0-daeac594d50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8370aa8-6aed-4d6b-ad1c-e4ae4bfdff1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2418a63d-da6f-4fc0-aaea-1e0420b68ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3d801627-cee2-4861-8dff-019d83816b5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151fc60a-ff9e-4438-abd4-22abc4c7328e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d447ed59-9979-4e35-85aa-2e9222a255ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29ef9fc9-9136-4c84-946e-904967e49b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2f27b6-26ba-4f00-87b0-18a9f042d067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "48bda0a3-5a35-41b3-9e2c-81a5dae93cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa37109-9efa-4c35-a761-0c05c2e7d87e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d8af0b-beca-4165-a6ad-2943edef7831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01bdf9dc-4399-4aeb-a3eb-364aeefaf7cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5402b5cc-719c-4d21-b64e-4a043e823f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fcfa452-781f-4adf-8db7-68d6e150c07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7ab0bf-aefe-414c-b36f-6dbed28df31f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bf6622b-a8bb-49b1-a0ae-2f040bbd4e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecafb200-f20a-40f2-9bfc-d18ec3da0bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963a7629-d644-46f5-83db-d972d1c0e818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ede307c-1ee9-4018-8298-33d88e66bcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7975bf93-c79d-42fa-9e28-01b3c3b76dab",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f10dff-0e23-4fec-9e2d-dab0b062d5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3148ca32-1308-48df-a440-a0a626a2cab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481028fd-2692-4de0-a6a8-efbdc8ec63b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "995a5dcb-b858-46ca-aa53-d9caf4c20a96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8147c8e-7aff-455c-b648-e79c86860231",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea370a3b-e841-432d-b91d-c806487205fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12d15b6-b953-44b4-aa05-2b7449a03956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b34340-3678-4883-a823-fb1028c2bf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2eee6fc-0e64-43c6-a07c-e0b6262d312f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7402a179-1115-457f-9c1f-f7002ed79753",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28770df-f372-4f0e-8f03-84cbf46719d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b591da55-2354-4022-8105-b066c0f0ea3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94149a12-f2db-491b-b8aa-a91ca31a9686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4597cfa6-6e05-40bf-a023-cb6987867df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213dac25-a694-4f73-ae79-5e6dac2dfca2",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5a8238-ff44-4831-824a-c5298156e596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ad21f0-5657-4012-8219-aafddd98ed9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ce7922-0f65-48d8-bedf-7c9b867bfddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "265d002b-06f0-4b88-88c6-2091ae20d74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "753efe12-b2f8-4ea1-8b31-dffb99a7e40a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d040601-25be-4f1f-a370-fdc4c0ba50b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af1a355f-4e89-4a50-a21d-303c53bf3ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f625b3c7-f80d-4ece-8996-41ffb37c53eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4670bf4-e1e1-4acf-ba82-3de896872e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351a2c03-faee-4f5e-906e-61c2042279b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c47cd2-cae5-450b-9561-6fc96aa98b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8992a258-b659-4937-a5c6-c75f83bb0335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e2e67a-b0f7-4f39-88a6-a30bdad20748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "96d65489-9d5c-4229-985b-7d185e41ba9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc138ca-1779-4da3-8346-2d54f85ceba9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ae5370-962b-40cd-9486-a56b452feaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4ffcf7-7b04-4c63-9da9-c78f8ee26800"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f555cd38-1124-42fd-b644-043c108ecd2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b068d6e-0b57-4d29-b2cb-ec2d198a7eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bde9a576-afa5-4320-92c2-a3f16482fe73",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea64840f-b2b9-4b6f-93fd-4e66a28e0ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54781f62-a775-4c18-871a-ffa7df2157cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497d0ac7-af2e-4a3d-abf8-28fc878a6f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dde3cb0b-9038-4d9b-9490-3d26f8bed8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c4d477-aa23-48fb-9451-1d93976e92b4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5e0346-e49a-457c-92fc-ce5669358d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7991fb75-7a47-4301-8a3f-7fd8a64f36fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a671e05b-213b-4f4c-80c8-03bd560fa15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "182fdb0e-bdd9-4709-8033-717faf1c845b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edab8a1-6416-4ce3-a2d0-de698d742313",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf953b8-d079-4038-87f8-614ea49ef0f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cad7d098-b92c-4ff9-be08-59458ac2aca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48578218-f977-4a42-bb90-0bb74e9d46b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d8fd703-de3d-4530-b48f-f1d9c56b6092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f4c78a-d3df-457d-9af3-de4ce80b8448",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5551fc3b-e3fb-4b23-88c8-2fcaa7acf0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a33b9f5-cba1-4c14-8f8c-4ea787d4f225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5cd305-f2cc-40d3-a976-f37a4292b068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "53de6618-38b2-4294-8e4a-0e8ea648abe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666d175b-adb0-49a5-b713-0ac061136710",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3d8e0c-abda-4d5c-abd1-6b34fe2ee784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ff41882-834e-495c-b25b-b75c7880bc41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222397e6-e2bd-4fef-aebb-ead22bd3492a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f65e047d-d75d-4e40-8fee-b0dc702a179b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2f2535-7c20-41c5-bc62-dc0f66c4db26",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a76c04-c92a-4ef0-92a6-9395af428c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7e122f-24af-40ff-977c-9358ef78d5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4552217-d604-4449-9953-b41dd6720f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f2215f2-d460-43b6-a2c5-b0c85b505607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d557e71-269e-4a83-a8b5-21580152b435",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ee7318-5c84-4f04-b903-26c23c7a08a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca36f199-dee7-4c3a-9e6f-161e78aa4658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40eac48-bf3f-44fa-8e31-c2654c458563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "978c8dbf-b54f-41ac-88fc-6b95a93a5c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f94989-85a7-4075-9034-799335ed226f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f5c51f-4320-4bd7-b487-acb5f5867cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de384e4e-a775-4ef0-9697-a8f0ff05964f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ba2472-764e-446a-bfa9-4c12d1581352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "aab093e5-eb80-4cb2-93d1-c77e3728e872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5771d6e-5bd4-408e-b44f-327446d3fc18",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74bdc186-c43d-4e86-9620-91a60b25e388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "922957a6-beb9-4872-9200-f7ca3ee55078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ad3991-3de7-4f98-884c-fc598b9a686b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f589ec30-1346-4517-a788-296a9f329a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317c538e-c9fe-4b20-aa74-68b4b5d61d22",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cb317b-d0c8-47fb-a493-ef9bb5981b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b409c970-75f3-46ff-991a-4c98ba2d18f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bb80ad-3ae2-48d9-ae70-562642061a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8dc6ca-b27f-4bb0-a37f-fedb2eabe37e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557f1393-0ebe-4270-b791-aa39efb0a810",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b48294-9375-4859-9139-72af5ecb4ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03433b31-1258-463e-bb93-0aa57623b9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd2669f-a044-4f7f-87e6-46d696d0c6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82131ca9-7cb0-4967-943c-90cc1df0ba4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fce9d9-9d23-463b-a091-c5268e828d55",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d768a5-e452-4cd0-803b-5bc7e34e7620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b623dd51-7967-4727-a508-5f13706aaa50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f473c5-dbd8-4121-8b35-22e953648695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4e12a27-683f-4263-a6fd-d1ab9c76ea8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe7fe5e-a823-4f25-ba4a-f377540c2752",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6defd967-aee9-4b6f-8c41-c686a68e1b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71866567-dfef-4924-ac65-4d027c2da948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619f2077-fe30-467a-82e9-61d1e033e718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a27d75-2ddc-47ea-ba61-ef7d5eaf9310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4339bd-c1b8-4b6e-8e0d-05122b6ad439",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29f7fb5-8491-448e-a7f0-1b511dddf869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a15146b-d51b-40fc-8dc0-2d8ff2876f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18ecd9f-da58-473f-84f6-cd2125b4a658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d60306da-6202-47b1-9173-b7ac21c1e3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc3b70d4-27f7-41a4-ba4b-b5aed2fd7841",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f542e4-103a-4f35-8b3c-1dcf020cca87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c722a85b-1ab8-4e8c-94dc-4929cf48f3aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0973a7-c176-4a71-9c92-af44d01babdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b543ede1-93da-4af2-b5a3-40971963ccb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e58b78b-d816-49ec-a07f-93870d8ae015",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69cec4d-3216-44e5-9ce7-ee6c0f78d115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50567555-e171-4dd5-8c0a-32c26a5d4a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b4189a-659e-4956-a4f8-baebbdf8e6b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72056816-ae4c-46a0-b748-5ab6ef3993cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92ad8b6-e857-4890-ace2-fc66855dc70e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15ffaf8-63ba-40a8-a639-b7f05abd80ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25a8231-8bcb-47b0-bacb-95b9e062476e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9f8d60-2f62-4c20-b6e5-4710640ecc20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3293627b-4022-4465-9114-4e031c64bfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e84b8e-311c-44b1-a670-4ed745981523",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c42d92ed-cbaa-4b9e-b1b3-a1503c616aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e831261e-ee4f-41e2-b540-e5d9183777db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cb984b-18ac-4cb2-89c9-7c1e31840766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "72f665fc-86f7-4ee8-aba4-6aae73bbd601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a520db4d-52fe-4a39-a609-4b9100e15851",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5d63fd-a15e-45b9-a8c3-f0f688fd2721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7914ca89-ca75-43b3-93c2-2da0da0d69d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64c9587-e044-4e4c-9411-1f178cf1fcf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d1e6b91-1b37-4a1d-a3b7-8bf8da0b11fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6646d153-7ae9-4923-a95f-58e66b095198",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d36c22-05fe-410f-9561-2eb9ffefd40e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f74173-02a0-4264-8f14-5504306faa52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8f8c71-95eb-4fae-a35b-07a0fac24e17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2be98d28-4802-4ee5-bb83-3b7c1509d715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7307ef-bc74-44f5-808e-bea88fe3ce73",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f99db3-5fa2-4955-a769-8a22b86f3ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05e5d82d-7bf5-4c5c-9400-168fc27f5503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5850f2c7-21aa-423d-99fe-801266bd3652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "823ccec3-a138-4de4-b7e3-af17dce6f141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf2ccb0d-a28f-4892-9629-76d691d3e3db",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac7e96c-2919-4ad6-a544-ee39038a52b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b37601e-723e-469d-8ed8-b1854d4b1a0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b38695-6607-4373-bcdd-693f4030ab34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfad6dff-2080-4251-a054-dbc6ff0d6c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac56771e-9a2e-4ab3-9750-f75579654b97",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf06fd3-4317-4e73-88c4-11a240c074ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cef7832d-b2df-44d6-a310-b5e6085e037e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9823a9-d869-47b1-8fb0-e822a8ea5987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "60791588-525f-47b4-ab87-658f6fe9ca48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d95a675-fe2d-4958-a468-f2d6e7c5b791",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d36cb9-4a2e-4b09-b568-aa1430b6b0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1240116-27a8-4afe-b153-828974aded25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84917694-6573-4387-b8b5-6e88f13409b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f32a20d-bb1f-446f-aae4-ac83b7dbb9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1756f7-4fdc-489b-9ec4-5bfd31920d25",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dcd1498-d9e6-4b9f-870c-9ae4a020fb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd7099b-04c0-4536-843c-66871a9a6cae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0ca6c8-5dc2-4fa3-8e90-6c1fc1042427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8d3aaf-fe24-424d-8ba9-35440afa9386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b056aa6-95b4-4060-a2ee-2ca1e2ab216c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3d49d9-a596-40ea-bbc0-b51e1b17a827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b56707-4561-42c5-b747-d59801f66e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b917bfc3-2de7-4f61-9101-6b7a7142e56a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "604d89cd-1476-40a9-b601-fe6035950186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47b5e7a-a319-4dc3-962b-9238fcee1bdb",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e8215f-32a2-42cf-a403-f0aaaebfbac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b874ccd6-aa75-4032-810a-7e6f53836a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7add23-4a6e-4b1b-977d-b4356e0fbc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "25505f79-9472-45c4-a369-3f04c4a31cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4bc34df-054a-4aa1-9a3c-52a77e2152ec",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0977526c-6eb9-4675-a331-6e5b47561fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7975174-95f9-4e5a-b8a5-d0484b1937ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212e1f77-b4c6-4525-945d-c9b60ceac096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea50a256-f1b7-4c17-acda-56e21f1152d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80829db-5ad5-4f7b-a704-c1ec69a6b7b4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ca92be-223c-4da0-95f9-e5098b2eebe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7f65a6-2226-4a46-9530-1440e54b2b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1dc082e-4fc3-4e3f-92b0-5e6978219a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "69b7faa1-a9d3-4c46-b85f-277e8db49b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc51ebeb-134f-409d-b047-b96d6080d5e3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6f3f6b-71c5-411d-ad2d-0c399b403f72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8cb9e43-6278-4486-a804-5202ec9e1085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44f4af1-7226-448d-a6c5-cd16c9b1c549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab98e2ef-002a-449e-a307-b0929fbfbd1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0416b5-2cc5-467f-a8a2-c9f4b5d4cc1e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93efd52-fcef-49c9-848a-c8be3d032478",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d5be2f-e97a-4155-8e6a-3e4e82829ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b190eae-381d-4069-84c7-2fcdeb92826d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e548352d-3b9e-4104-a7eb-b0a614945cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b155423-43e8-42a1-97c2-138247189344",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9084087c-096b-4cde-adfc-5d09705eb1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4463bc9d-c4b8-4bd0-aef7-4697d626790d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc6bd4b-7c79-4d17-9eff-2ee813c3e1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4caf49c3-e436-43a5-8b32-6bf201d184a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf6399c7-852e-4a34-aa5d-75795c4ffe22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bd6ddb3-fd00-4f77-88c9-3bb657a28b30",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8463905e-1c92-4f5c-9bd9-b832383afa8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cf2085e2-ca6b-457b-97b6-d2a6841762b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd16053-b3a4-460f-b0c4-87783fab7dcd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "555bca34-2f96-40b1-b04e-b1c87d157ea0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1ae8a15-4ee9-4ef4-a2f4-795a079c1ec4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd86c2e1-5620-4895-b021-d22ea4e1a787"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "305f1a33-043c-4721-ab20-14968e0b2beb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66701a0f-42e3-4155-9afe-d7e347110d76"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0e845bd0-ab8c-461b-852b-3f479210d3d6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f2ac0ac0-dc51-463b-861f-0f1aa709e921"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f35b7b0b-2137-4e75-87ff-b2550a6e3284",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d5d52ec-b589-4bc1-9121-c1d7c7141b1c"
                }
              }
            ]
          },
          {
            "id": "91c9b699-acec-4972-ac6d-908001886a9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f15ccc20-cab2-4087-97f5-05811b817e98",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "6af3fc03-ff65-4352-8e71-4a4bd1634782",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd008a1-3bb7-451d-8e19-66d51fe38a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b5b5a806-9f4c-4d9e-9d81-f65bcd73d2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86362448-59ce-437f-97b2-33808e648c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a52da23-3732-49eb-a2c2-91858877a351"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "aa267c7e-4f76-4d55-beab-fe4da5d00e7c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bf49419-29d4-4a9e-9609-1a6f157f7fd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8eae75fa-900c-4cea-a2c1-8d19869541c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5652a162-d952-4426-ac6d-39159e8e82da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6a8997dd-6f3c-4cda-a853-1a6d1a337ae1"
                    }
                  }
                ]
              },
              {
                "id": "dba64dc8-d367-4a24-8821-29986e04a290",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cffdf76-740d-4b80-b7d4-e4a2e2baa3a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0423735b-fc21-4e58-b5b6-aff4ad898452"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e35cd4a-791f-4952-bbce-b482a28a7b03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bc02d222-5200-4e41-9efb-e7c4d8193277"
                    }
                  }
                ]
              },
              {
                "id": "76a059ea-465c-4ebe-9bf6-3f2e661f672e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d92ce955-daed-4a85-a540-8f0707f91500",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "180d292d-4ec0-4858-8085-4b766f3c2a12"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "810d80c2-8a47-4c65-8202-51575505b243",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "55526181-df5c-41a3-8d3e-ac6eb99dfe45"
                    }
                  }
                ]
              },
              {
                "id": "4fcc9141-3904-4326-aa03-7f6b2730f065",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d309fbfb-b45a-4544-8271-804fc08f7a29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa0413a4-3fd9-4a52-98a8-56d80aac069c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4475d60d-87d0-4306-b59a-82e56749ff18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f6add941-9531-4b16-8305-a18ebbdbcc8e"
                    }
                  }
                ]
              },
              {
                "id": "14bfe41a-bc1d-4c82-9e62-2bb0500af97b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a749e597-f8b0-40bb-9a88-288f548257bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6008a28a-38bf-4af4-9277-03be2607220b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36d3ad60-b645-4b36-8dbe-8779de840021",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "53e9d545-647f-472c-8178-6240664d8966"
                    }
                  }
                ]
              },
              {
                "id": "1a35b1af-91b1-4a05-8647-581ed6cad690",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db71fbd5-d974-4778-bc30-4a7d9b539831",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "41cc128a-0167-4ad3-a7f5-69787dd68bd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b7c800f-f88e-416c-94e6-ffd491b26748",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd8ecba8-c53b-47ef-8878-32342a4ef692"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "46ca8167-aa27-47ea-bc64-a07a7de14274",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "95062474-2b99-42c7-9549-d7701bd147f4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f502128f-0408-4286-b898-c8c3c8adcba8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e7158a4b-8a06-42b6-9ccd-ab54eda4f841"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96c3f64c-5799-4413-902c-cc8e12a7c5cd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d8c9b257-8c55-4e86-9440-8dc6e206714e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a97d48bd-e3cc-4902-bfca-0df27e595fa8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de52bf94-2136-4397-8c4e-ff2eb6430dbc"
            }
          }
        ]
      },
      {
        "id": "8f230ead-e98a-4293-9488-fe5114b48af8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "12a7a6fb-fe08-48bd-82fb-a32e4b9710eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b6e5ddef-6038-45ac-b6c0-f3f00c1a97e5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "31805056-ad16-4973-8fa8-ac677ee6abd3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3439568c-d90b-4a1a-98d9-6b115cf51405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e4dc47-4f84-432f-a839-0108f3f2f90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5ee6db-29ae-4bb4-baeb-68a941a751c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9afdf450-d07c-4d8b-a115-079f467f3c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c26ab5a0-b545-461b-bbfa-13de7e5e58d0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e5d12e-ca26-499f-83d0-29011d9dfb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc36f6d-4486-486e-85fc-bf059f818306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f200a3d6-210e-47b1-aedd-ff90c40cbc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6947f36-86d6-4503-a31f-0efbd9fc4213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74526cb4-47b0-428f-af53-4042b2bd5e92",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40510a38-6798-4984-acf7-d81b43cd2001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "440cfd2f-ab65-46ab-a2b1-1303d8bd4304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eac80be-ba0c-49e8-85d3-6f4f7b425107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c9cbc2-ebb8-4b4c-becc-0d83c7b70dc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90aec577-3f09-47a1-93a3-43f8680bab45",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafd75b0-ae25-43d4-add5-f4f9a75516b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acaab800-53dd-432c-9cc1-da0703a5ccb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d30a1ab-3899-4e80-ae56-9e2e3f9f62cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c6dac84-8319-48d9-a458-3ed6a241688d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3431b0-5b7b-479f-bf96-789303f941ed",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2d6e7e-c4d6-4e22-8c2e-e4e26d827d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d149cfc1-14f3-4f84-aea9-bfc12cb9c57b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f71efd7e-feca-4113-8388-b0623f2fd42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "524d9aef-0cc1-4726-b912-910caa11b815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4d35d1-688f-41c9-8dfa-6abc09fe5520",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc44db8-8630-4f7d-88a0-4c9864a4a83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da08b55-914c-43ab-a8ad-26eb0de55150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fdce744-bf78-4ef6-a774-1a5b6b5325c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2836cdf3-b7fa-4946-9347-3633a9efb736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99561b6c-c728-4a07-a262-60aef85a9382",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d89800f-5779-424c-86c5-cb2500f364c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5b58a5-5055-43b0-a877-e11c23e13a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c39723-7f8a-45f7-899d-919317136e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b6bd11-aaca-47f5-9e7c-303c3892bcf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fdc018-757d-4a08-b1c6-86ed72b73bbb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf414f2-7475-4aca-b52f-3a4c200dbdf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7b69aa-1121-4723-bd81-51adc03ae6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6978c2-99db-4fcb-b7c5-8c26095ca081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5ab6c3-ab88-474f-8101-c4333f887ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7d8383-a50e-4b7c-ac46-0403337ef0d8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d401a901-7b4a-4d89-82f4-2c0928ead154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe50efda-1322-4348-a4a2-d706d65ef1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b6ffd5-b18c-4060-8e14-6f20ce1ffd5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1b7581-78a4-4e51-8490-058391294288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8241ae-2bff-4ec9-b3e7-37340f32bd0a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ace370-82df-48f8-95d2-b0aeba5cd9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c7ad21-894f-48f6-93b0-334cb586784b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8d106e-ed8f-4828-9ec7-74db0c000f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c76f76d7-54e0-4693-a10a-d99686fb3a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a9c5587-b467-48ab-921c-46edf290edde",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcea026c-8513-4048-9e56-eb0b38a206b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a80165f-de4d-4ed9-b284-e619673642c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa22cf7d-6c48-41ac-ad42-46db5b32feb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "235078ec-f7ae-4ab4-85b8-3d5284d79807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b74096-fae2-431e-a69d-63ae8461bf34",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53de8075-69bf-45de-9816-2b68ae17c272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0bec59d-ba7f-45d3-8e41-8d58f9922e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844539ff-b4a0-4f7d-8a42-4d7531c7f4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "649e7078-5864-4122-a3e7-cd621cc369fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe7a322-3503-43fc-8035-6707d7bd824d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61214fa-c2da-4032-876c-4fdcd6242104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0004293e-2f24-4093-83d4-3a5e9d226d04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd7cbce-3a1d-45af-aeda-3692a0bbb1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1aabf27c-e984-4603-ab3c-c460ff3e5251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7faadc6-01e6-46d4-a2ec-a50e58ce72d4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a6b9c0-af55-451b-86a8-0c80dd4fd91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987023f5-1252-45a3-886e-c234008b9e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3b52cf-4b05-4f99-b344-196b7f3d98a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3b124de-49fc-42b6-8443-7b4377fb0309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cd369e4-9b6e-476a-bad3-f05aeef628d4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1afebb5-fb1b-4aea-87ac-c67db7da3beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b3cf36-972e-482b-bba9-7d78a5453525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9eef95d-2979-42ea-b298-9264de9081cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "462f4b5c-4bf2-4745-ae70-c083cda4086c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47101c4f-1e75-477b-b9e7-f9b63d6674cd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7dafd5d-67f1-454e-83f2-9bda8e4649ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e0b293-5a4a-4bb0-8ef9-b574be085765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79532e5-4b64-4da4-802c-f4597206282b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef12ec7d-3fab-4878-95bb-9184043dbee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeda4605-7b74-48cd-92c9-fb6d8ece7466",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "908f2053-f61c-4174-82fe-d6145a3291b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5020612-1a1f-4d9c-9883-4db5650480fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea5e2c0-e4fb-4c16-afa2-cfb766a7628f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "d98b868b-614a-4ff4-8030-fdc210bac995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6025bb75-e71a-4c73-b0f5-a10dde3d36e2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7d9abc-bf1b-4469-9a43-f109403f8c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9f0512-1eff-4aea-adf9-bff8a8d006b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04f6132-d646-4e48-9448-938100d64c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "08481b30-9ca8-4fc4-a36a-d83ce17050da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399cb23b-bc2b-4f8a-b5b0-0483167fbdd8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde8e24f-1626-41f5-9083-8fdd06c6d4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc8eecdd-af53-431a-b29e-f735ab70af6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee683e8-3774-4450-b6bf-0d16523ff24c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3740646e-a6c8-4b74-b9b1-f4f8c5f10b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbaca89e-8953-44b9-b4ee-0d3284fc9aec",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0309322-dfd4-4168-a065-673ed8409e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d561932f-3b06-4cec-9882-1531c2fea842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a240672-b6db-4e69-907f-992d2b10f620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7515a206-029c-4cf9-80aa-c75b112b53c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15701a3-5bd8-4876-94e3-196fb242f825",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207c39cf-ce67-4e96-8ed3-f5f01d0425a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0ae447-5a0d-4c83-9340-18fe6dea13e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34491a8-e982-447c-a8ce-4718398463fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c3fbe1-7801-49cd-8d0f-324f1a016437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62d45da-5d0e-45f3-afad-3508af40bae1",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "776e701d-a858-4a4c-9218-cf0b06fde20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba17a2cc-4618-4654-a9b2-a6d75fd98c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a0fddb-9696-44af-8312-ba9c05fc878c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb2df69-580c-431d-899e-39766a8da905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad590a98-4ae1-4955-8292-fabea121804a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef02fab5-e050-4878-9811-4a588ff69b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d31c115-c92b-4673-b6ca-8dd6a50b84f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a63d4f03-2cee-4a2b-95a6-d56709058b7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11a567ce-6b3a-4d5a-ad2e-680d0c6dabcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4de21bf5-a55e-419a-a472-2502e9dc92b0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b3530aa-99fe-4be4-88ff-1a03a49a0c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca6a3f8-9e08-4179-813f-b0500e15155c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7dd743-4b96-4eac-8ee6-bb8bd22ec305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d83a0604-a261-4351-9a58-c7c2b1771234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f09368-f249-4a4e-bd04-f405341179c6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d7a577-0999-431b-9143-33204dc49cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0c592d-1f89-450e-9772-d5624a48574b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4b4be3-4a1f-4708-a78f-77f80a674cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55fa4dbc-fe18-4e7f-8e71-92d08d533b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5734dacc-726e-4de2-b73d-d6ccc030dd0d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292a8700-cb40-4470-9303-c530e46b2019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97be12aa-131d-45ea-9b52-627e72913451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2343230-3379-4998-beec-be76f3f80673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "342b9148-aae8-4b15-8f2f-01292d729f5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8420d517-1aa5-496a-b372-736362803244",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62aae7cf-a759-4ef1-9e9d-9eab63d37660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2cf73c5-5e9c-491c-9e64-964a4a89b8d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559e9a9c-a4ac-48ae-9829-c9911643315a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "410c7cad-900e-4456-89d7-47ce061c8052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5488f6-dbec-4e88-a8b3-992187779fe4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae64d3f-6905-4449-8f02-6eb0259d0052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab737d74-0b93-443c-b967-572b3e4f2804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab196db-e377-410f-8dd8-1acdf6e885c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16e3a382-a83d-4891-94b3-9a990c388aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763ea4bd-b30c-4688-b509-4e463da6d22b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8221b648-e0d6-4e2f-ad41-0301914abc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0561055f-067f-45e3-938a-48bbf51ac7a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e590182c-4331-4c39-9b64-243289eed8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ed257af-fb87-42d5-8e9b-50d17c7aaad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae9a669-0ce8-4c40-b07d-c0cd546d52fd",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135d195d-1e63-4006-9baa-ff377d169421",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd378777-70b5-47c4-8e2a-3ee5f1f22b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627ef16c-512d-4cce-a804-1410b55a0d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "146d3995-25f2-4d0a-b205-5122c38bcdb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11a90a33-2c55-4c0d-9dc7-423ae00723d9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f386a60-ec86-4b23-958b-0ba9dd663a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda76818-17cc-495a-8118-72cd4367cb72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c28c1c-1a92-40f2-9319-c93f8edcb47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a58d9926-37c9-454c-8e2a-82c2356f0eb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b696145-5ce0-41af-a0d0-f68367f06e66",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f8eb00-3d3a-4e0e-b7b2-ba2dec968bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8ca2d3-e5ef-4275-89ef-23b2df0ba22e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0789ca2d-2081-4ce1-8d63-0acece6be3b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace85d6f-d765-4e04-9c15-bdf544027af7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "110a2b58-d9b7-43f8-9dd1-51160e03dd62",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "01d873d3-086b-447c-a94d-9c01162e8385",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55e56ca0-f2ea-4a7a-8418-a87eeb9a7a50",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "23654ca6-b883-4499-984b-f9861601e28b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c63590-37d0-45b7-9270-b7f728e7c3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b789fbfd-abda-42d1-bde2-8e22ac2a3f5d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aabe2fa2-875c-41bb-80f1-9ccc81217335",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7531e48-9ef6-4c42-82d5-5be782b4f00a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39e41579-e6d0-4c33-a51b-806eb3e96671",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2d854de-44e4-40ac-bdad-d83ffab881f0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42af9489-aaf4-4593-be7b-8a08becaa228",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "90320ba0-a889-454b-ad0e-dbe78bf906ed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0040e1c-94ec-4f8c-84ea-1e60f1dab912",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1cbdb80a-346d-4366-a26a-13c6248105b9"
            }
          }
        ]
      },
      {
        "id": "07531b81-1122-403a-91dc-b1d3e945aa71",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9b680a61-5482-4fc3-9dc6-2b303f38dcdf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d2d98dd-e073-477d-9d78-d487a7b7b84b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "57f5ac4e-dcfd-488c-8732-08a44b032f9b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d35cd0-1acd-4b60-a9a0-fae6bd469302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682afc43-d6e2-42ae-bfbb-2de241d30572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f0322d-42c6-4c48-b8d5-d985766e12fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbc1f801-9ca8-41dd-a9ca-d08f31d8496e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "880d9128-9edf-4a25-a39a-e17cb7d20bc5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04722953-085c-4240-8157-bb08036b84c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4065dca7-3ccc-45c5-8b4e-c98760f53fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069c1ad4-935b-4f6c-961b-08b08f104a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "69343091-f4a7-405d-b563-f8957876f708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d61274ba-f494-4891-9d40-801eaf1fccb4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa97c66-a511-4e42-ba0c-3067b4891be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f88ccca-5542-41c1-8891-7e35a7ceb9bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dffea57e-3ca4-49d2-b4fe-42cbe8efd36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16b1dc77-fa24-4535-95d8-f628c4c43d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba855da-0d09-437f-8563-bf36135c4e93",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12052c01-94cb-42d0-a52e-386a65d704e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79df24f7-d3ae-4066-8dd9-e157964fe498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abae1932-db95-4d4b-b5fd-a0c275753d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cfd5ff2-55c8-4660-a3e1-02cee447199b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c590f8-d465-47af-9b7a-cf8610d59a0f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f165a759-f2dd-46f6-aeb7-2e33e88c9cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b56a150-5490-4312-a5c1-3902fc3cbf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560dbce7-6d96-472b-a244-f07317b7f40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd97a4b5-7ed6-4ced-ac72-e08131d2495e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a5377e-fdcb-40df-a1a5-32421af4d734",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426c1020-a343-43dd-ae2b-24bc420a850d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c9aa12-f7ad-4721-a09a-f4eb161ba627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f84ca937-736b-415d-876a-d070622ac764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1620d578-1d8f-4664-9aca-627430f94312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e12feaf-edbc-4942-8985-d167ccd1b2e1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9506a3-ee7a-40b9-af7d-b3dbc97640cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6603f264-475c-4635-be35-d15f315c57f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5f550e-d84e-4cb8-85d2-d07897cdb8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c337ea84-19eb-485d-bef6-d0a0652f9be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87796326-5526-476b-a662-5f0994508c80",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6092b9-d9f6-449f-bbed-04b82c623b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192bb8eb-2ec4-44f7-9b8b-8367f9371412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a296dde-0577-4db1-af38-380a947a4379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83fbdb3c-c576-4505-b089-e6dc37b44157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc38d0cf-5aa6-4274-9027-f9844bb91a16",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01ddfd0-30ca-4feb-9324-77d51d00b871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86656bd-31f5-43ab-a653-6ef37a8ec50d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e307345c-46c4-41a3-8783-47327d48b834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "817d0937-8f01-4a13-aa49-3c8db26786b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7642db2-0d45-4b08-98c0-c0d266e9dc4d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8e4e5d-d4fb-48e3-86f9-5dedcbf93cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e654fa9-8854-4254-8165-83c525eb2103"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69105039-6170-4029-ac9f-24de0bc1700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc70e2e5-22cb-4bd4-945d-ad57114bcae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef9e066-2502-4abb-bec0-cb8bb676796b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52fed856-dfee-4619-b85b-00ac5acb5289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af8b5eb-1532-46f3-9965-c7e83e335755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109e683a-f506-4e72-9d6f-720017147ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a901aea9-8d2c-4fc2-91c4-e76ea149933d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46e02ef-3dee-47ae-b1d5-e749261db160",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c28dae0-53ed-40fb-a521-816017b18673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf187879-0926-4929-b3a0-f909ac41c8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5191d3ef-8e26-4fea-8c5a-ece1b0343942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c18c112-c499-40df-97a5-19f4316007d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d97681d-f036-48bb-a66e-f0a4d62ca7e4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd3240a-3e17-4e01-a0af-dcf7f7551320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bcc457-4814-4909-92d3-96193175728e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08644ac9-9097-406c-998f-baaa9b0bb4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "890651c8-e68f-420d-9f7d-7daac93e7a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b53f91-19d5-4c90-ae3d-fe9b5d973911",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230d0cc8-c2f2-4566-b737-bf184ab24cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50a0a164-ba05-4036-84d7-3215d2138227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248dce7e-fa5a-4f23-8f24-575ea3356b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b95b025-536e-45e6-9d5a-217912003269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d7cc25-4d8d-4380-b21e-519d6d174d43",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6992a92c-91ef-4824-bb8d-2c715a31cee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a21755a-c826-4308-a229-695c998c0b97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae4a661-6985-4750-81d2-f7c8ceccbbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d26a7c95-a2d8-45af-bb3f-627b6ec4f05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3255fb-2b05-4704-b1c3-4aec3f6d7dca",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7a2b72-510f-42fb-9c47-e547f21e24c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdcc63b-2990-4c99-84b3-346119044b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d130ee-a08d-44d5-b5f4-34b1d89e2886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ab2a92-afe8-4df6-886f-d8f7c213c12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81322bd-cf0b-4125-b586-31a4635486a3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7834df-342e-47a9-aadd-35b20820f123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2bdeae0-e0bd-4d71-9bc5-ad034b4843e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3faa33e-b0d1-40ed-ae92-e678a4aaf23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "53610663-4730-48e4-a679-540d5a33b736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72161fef-ed2b-4587-9d22-2befaf27b3a8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aca7862-5329-4c6c-81a2-dd26c8e777b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab42d00-4a6d-49ed-92fe-62ea23143274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406713fe-5a57-4219-a3f3-b7a7ffbe583f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "15e45765-9688-459b-a339-57a67a8e32af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f091f78e-0fe7-415b-ab62-61ca81433d32",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5b7beb-0adf-435a-8768-91615527b261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72da8c41-2f47-4fcf-9f3c-07bb46ac204f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54846f15-4942-489a-98b7-0ef5b6b62f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b8ed6f-7920-4ffd-9e9b-1b7031fbf942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0dce1aa-293c-4da6-9117-344c0acfd471",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19bc6998-d1b8-42f7-935f-644447445d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5896a8a3-b042-448b-b0f7-ff1f3b698fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54790fca-e3a4-4ed4-ad0c-6f1e905a8c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7747535-9822-4e15-8178-262227f2aa2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292ebf1d-502f-4c48-a0b5-ffa3ef928aa2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26045ac2-a29a-4c57-a749-47f0ba643105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ff0bc28-f940-4a70-a290-4c364e499b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b967dc36-e97b-4b0e-84c2-6431c92479db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0918dd6-1f59-4882-88e5-36260ece7644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5becadb8-7ac4-4918-ae3e-81f322114088",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd32869-615e-4314-aab5-c112b397ea3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8beac836-059e-4bc2-a854-7ac3d74cb4cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c086990-583a-4900-94b0-dc98d9bc1ec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74ae8e2b-3fd8-4aa4-8451-2398fdb9645e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297d77ca-7bfb-4bcb-a083-9f42f9600d5f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393020e5-9f21-4c7f-98c4-4915f2f723e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23900fa1-fc4d-43cc-95d7-c5f3d8666581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e374a89-f1ea-4ffa-896b-fdab7380674d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eedd2ed1-6db6-43a4-a444-21396475e1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d2d5ef-bcd4-49ff-afb1-3021205260c3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e8ffcd-abf5-4d6f-8322-3bd19778b16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc2e404-bc82-4546-bdaf-64231aa64016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba510a3f-f64b-47e8-8567-2f2b2ea1b4f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8077a6e9-f5c5-4fbe-bdca-d1f23ef0bf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920130cf-0408-4e10-96a4-ffde85ee79dd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4f9a12-72bf-4d2e-a1b2-b3aeb02d2c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "698dcea8-855a-4bef-97e9-af1dbe340ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dedb348-2764-40a9-8724-8ca6a9673322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1cd6a2-0a47-4451-a097-678eb00d854b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad06a473-d079-462f-8db8-09da6368de6f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b9cff0-f6af-4b05-b912-fa3902eb799a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef424843-5dc0-4bae-935b-efbd8653aacd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee84b98-8861-42ce-95ce-b1e6dfcae2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aca1997e-f1d2-4f08-bf69-4caad0bc3365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa339ee-28c2-4dd7-a019-814685d7d927",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30ade3bd-6e01-43c1-bdd1-81c887e50aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56225fd-e4d9-49ee-998c-4c6df3b4e0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396955cf-4af8-4da2-b08b-577478c161ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e94d2ea-34c8-4fa4-a09e-95725f8d6eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52b3e19-3803-4f97-a165-616f5a18de64",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cbcb47-60d2-4638-8c76-79050eee0d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e033d6-91ec-450e-ba28-b4f9c194c10b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed9c7eb-1420-411c-9a65-e86c33ac2fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9974d84b-0df0-4b62-8369-f852c11b2187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb42950-e051-4976-84b2-049708686ec4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd900570-cbec-4471-8320-605b8802bc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2634b368-b20f-417d-9815-4fa0d366d40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee58c90-3822-4bf3-a442-194e4636c034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5862c7f8-0565-4fbc-9ef8-fee0ed981dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25b6746-2908-4681-9982-51b3c0533069",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e0bddf-fe78-4c9a-a7c3-6ddb433b60cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55705ace-2f39-452d-9ce9-bea234308349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ce4efc-d970-440a-86e1-735440cf5ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7514bd1e-59ea-4fe6-83b4-2c3abeb9eed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41803e0-7fc4-456b-82b0-46b46a11090e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ae9bff-03bc-4ef4-b09e-2af4f9db28d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58066131-37ab-401c-a764-d5261def98d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d595a12e-28ed-4587-a276-a1657f8ef4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da6a8548-2cbf-49a9-89a6-a3c1bd9fa4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02818816-6bc8-4414-b9e9-c437d29adeb7",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28300e45-c687-4f9c-a2fa-b46426289522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc9b6ba6-2f67-4736-9129-bdc5319e59c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e627210c-5651-4298-ae90-5b8013a9d54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d30ee909-d65f-41f4-87ce-f7a010eec299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a9d5bd-dd45-401e-916b-2f50ac0024c6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6156be27-ec2b-4dd6-880f-ac1be532488f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f09bb1-195e-4a57-b448-692b030d69ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a56d911-439d-4314-9617-7fd15b31419b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be1a3bfd-c844-4374-90c5-2a96d51ac757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a6c2d7-506b-4794-be94-fc10e9321899",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cef19a-9137-4ed1-b26c-7af9a234da79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bb0eb8-19a5-41a3-9ea0-06a7d3339b64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96782278-fdf6-47fd-9815-f2aa437f838a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8055b386-b6b2-4990-a426-4cb7253ad49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f64712-a892-4337-9191-2b550a5dd591",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e241f95d-4512-41bb-8961-b59b8606ab80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e52f7a1e-1c25-4275-be9d-a7609fb64d8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3c05a5-a946-4a6b-bb90-e470c5674791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59808215-9727-4eff-b9a5-6b23e72f2013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac50454-7a2b-4ed1-a692-62070c111643",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6a4b47-440a-4107-ba9d-d304f4de20a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1968cf24-f5c5-428a-bb21-f7238718c870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28b6371-dc08-4c97-9a1f-f108b6ec5f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9958d3ae-2085-4cf6-a65e-db0d5f08f0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3dd5f3-aad6-4492-9294-b3940c79d1d5",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "026c9b14-bf1b-4549-9d7d-11ac0fc6f6c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044474e3-c55a-4412-8ec1-591ecd94fecf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26bdcd5-c5ea-47b3-91a0-ac9b0a81baff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "379f2010-70b9-4e9d-a749-6fba589cf82b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eb59876b-5c61-4f1d-a147-cc4d23101889",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43fed485-a90d-4e5e-b33f-1509ac6ea38d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "216dec98-3b24-4c4d-9edf-4be69ae8dce2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1c9dc455-14e9-46cd-aa70-d9041bfa5799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644393ee-a188-4583-a0a5-c1068ac20287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2bebcf86-1b14-452d-9296-cc5b690d4d4c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b370256-b555-478f-9a94-e2adcaf9631b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0ca4f9f7-e664-4298-97ec-8015540378ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "540ac6d9-af9c-4769-9a8b-cc03253e3125",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e7d6b3ef-7cf5-4a36-9460-b5eeb63b2b10"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63ab5186-9221-4837-b506-4d87bde06eb5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60f21818-8bb7-4efe-8cbf-ffd9e973cbbb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea2d082f-3247-4396-b73c-48571b2e23d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd3105a1-a7ae-448c-bdf7-94b2f2c05e77"
            }
          }
        ]
      },
      {
        "id": "1f89aeec-ce69-45a5-abfc-bebd1d7214c9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "73cfe454-82e3-4f67-9f1c-6932052773cb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e638841-b98b-443a-8983-7c0ce0b0e7e6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3cca5413-d95e-45fd-bc3e-521984c02b14",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1de5f8-34ee-463f-bc35-417b10a924b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e89d67-33fd-4367-b243-8694dd394111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8a4ced-9e82-4a3e-8b48-66c7b9161768",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ac7f84-be7d-41cb-9566-a2b3f1e87f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3111586-14bd-41b3-a3fd-4ba11ccc66e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133ef145-6f7f-4f25-91b9-5921569828fd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b019edb-6375-4f79-8db9-02e95ff8cc7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f1055e0-a93a-4d7d-80db-775ee1fd93b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8464e7cb-c0d0-4f52-ac77-cdbd9c661b22",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04fab9d-4611-4239-8333-ae2d3a580641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf81cca3-fa6a-47be-b14c-a1eafe5d6112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ad8f01-2232-4dec-a5ec-b9be04f983ff",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7327cf8f-0398-4f43-8aaf-939aa1971b34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c74ee61e-1840-48d1-9560-01b64542ac50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda39292-0b16-4adf-b8f3-5241f386445d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86735d8-cf0f-4ab2-b247-dc00003c1b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39557fb8-63e1-4024-beef-9d55e71863e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3e65f4-5cb4-4b0c-b1e5-1aa6be5449e3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82abb94e-ce9d-4c52-9dd0-4a6b4e93fe4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee608ac-bebc-46e8-888c-0433644b4833"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c182aff2-58f0-413d-b1d4-1f67b1175c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93d52988-2882-4382-9756-e97fb73be675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a3f1c7-3ccc-4f05-87f6-668d5485ba9a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cfe83f-0b45-42f8-84e9-80253148972f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71b8acbf-8646-4e79-8878-3825a4e5386f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af22ed5-fb43-4d6b-af9c-9b43a1201780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc327fa8-fdb8-4b49-8374-dce911a9cd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71697808-b3f4-4307-8a00-c465673fc94d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e38ccdb-43fd-4cc2-b0db-1bcc610de49d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa27cfad-36a0-4354-a590-b35f5a2dcfc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07065ca1-0cf3-4b34-8c12-05503b322b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd628f00-6d68-4cad-b40d-089b54d80773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4544198-5916-4c43-af69-f9e957cd6237",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95a0d2e-4130-476b-bb1f-99f00f41ff86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ca6b972-2c76-42aa-94e2-bef398341b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eccf95f-7832-4034-aeef-7035389147c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba512904-c337-43b6-a3ca-f62abf0f1378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724a2311-3d11-4703-bc3b-986ce54b649e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06007749-ef65-474b-96cb-271c471cc156",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47542915-7fa3-48d2-a8c6-66c43b654b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "591703a7-17be-438e-8c4b-bafe2fb7bd49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc5dff9-8770-41a5-9f8e-be5010ea2e29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee196530-df4d-4daf-9789-af70973a2487",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3e89d1-ba73-479d-8c73-5a9b6c91a8b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae218d14-9276-4549-bbb7-fda2a7f306ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84251f27-a3bd-42b7-b913-c4b78c002d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d84fd12b-6ed7-489c-8b8c-589b49408907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68331d37-8849-4f1f-914a-8ba36fa71e36",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4dd2206-3c54-476c-aa89-c64a33910d44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84d2b940-6c52-4867-9146-506bb4c57ce2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5300afae-705f-4a11-a57f-c49e5baec16f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b882b138-875b-4f02-8dd4-88da632044b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547408b8-84fb-4ebd-b95d-f73e32ff0298",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ce3863-b2a1-4939-833f-4f5608f9ec62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a3467a3-2365-4d54-9b13-007c52bc7cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d5dfa7-8def-4216-b0ec-34ff18185150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f570d44-0966-416f-be74-35df4f480497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9b1857-0698-4b74-89bd-dbddb50c4d6a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1c7bfc1-1d3b-4f26-9768-35cd5d292899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5cb302d-437e-466a-ba26-0812bb471375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d936d2e0-bcce-4299-b282-817bdeb8c6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760b3d30-252a-43be-a08c-5f51f9b352c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2e20ee-7bae-49d4-90fd-b26038bacc1f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08081f6-3f15-415b-9a0d-5a2701b7b9e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec62bf48-7a44-4fbe-b311-a1fef75a86c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957b6044-dbf1-4b44-800f-e025febaf018",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa385bd-e047-44f3-9e46-61eb6115c8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90d5f84-b861-4a42-8ead-b691ca072db5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6e7b6f-4cb6-4ec0-992c-cda16bc016c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72b1692e-a6a3-488c-ba15-8f708252800f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6482465e-8ed1-42c6-add8-4ed11893a9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d9aa57-b8d2-43bc-96cc-2ddc2502e32b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6265b186-490f-4914-b95b-4ea55ae0dce1",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a612e38-7e33-4327-b318-1579f49bb7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29c89b6f-b462-4da4-8d6d-4946f35d68ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaffd2fe-c27e-4aef-ac09-8ebe32cd65f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7dd50a-d775-470f-96a3-6f6815955bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d099d9-8f5a-4484-bb22-0041de38fbd8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca8c641b-239a-452d-ae4f-557bb5354b8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61dd8f06-4197-4ade-95e5-4772344a4647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bced7acf-456e-4112-81cf-d36923ec8ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96c5f4aa-2829-4e10-8feb-b7b859aa0642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf42bd68-50ae-4426-8488-040b5fcde04a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0352575d-25f5-46a9-8097-ef3958a4a736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf7a312-eb5b-4540-bad7-e1338b34bbf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944da9d2-bfac-4b80-ad8c-b207528138a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa49042d-ff93-4a96-83a7-eac48ae334c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1daae4c4-44eb-4e22-97c5-58af3487293c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d860ed1f-b3d4-479e-993f-c444bc519b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63e01ef-7fc5-4e11-9549-ae4058e81ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "003249c6-0352-4604-ab57-e0a6b2db6dde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90651998-6edb-44f5-a9c6-4e94e4602865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717f47df-15e7-44d9-a28f-edc9713ab2ae",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b6dd3c-3bf9-48da-93ba-18ecae54c9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02f1b4c-6c17-428f-905e-92ba4fa9b2e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7062a8e1-a8bd-437b-9951-60bfcf6a07b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9184a48-cb7c-4b2f-ba33-09b4214f894c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693e8042-5395-41fd-ab21-f0da4660633d",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8abd4d-a17d-4fc0-b2aa-6ebbeb6ad3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4554e9ec-f6d1-433e-ae7a-b82e90ea4751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1f07e6-40d7-49fc-a67a-93a0035de50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558d0e0c-2ccb-4809-97bc-0f3a6607ed18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95068f60-1162-462c-b3e1-a3797a7169f2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be64e07a-a876-402b-8791-9e1fcf933b40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae59a4a7-4563-4c9f-8f63-ae4dd41d7823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e2b3c7-a7d4-4ce3-882c-a12fa474d4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58040bc-4869-4734-ae73-c1145ea2e41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a259d4-9d54-4019-8538-ea9a7225f495",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de96b5ed-093b-417a-b859-01be957cd045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e391a4f-afba-42a5-999d-c288daddf1f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c182c4ae-c60b-4d53-aeeb-3d378c5f3374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735a6c2d-2fa2-4d8b-97a9-8d99810293c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414fee18-bb49-4e5b-afe5-9ee71fa9dcd4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5dcebb-17f0-40c7-900d-20f0559b57eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f5259ce-bb3a-4b45-8b92-cfa3b8ff9a84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2506b4-daaf-46d6-baf1-841175c1557f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23f983c-2d6a-4c9f-b0e0-1802f44b9059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619c6aec-f5eb-4967-94de-84b318dfd383",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a18e62-d24d-4319-82e5-5a3dd7c83357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0c5a64a-6fc6-4951-9d4f-3c081868eeb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33faf16-076f-4456-84bc-610b844158bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ab78557-7b47-4c88-84d4-99595ef003d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2550d64d-de4d-48a7-8b68-a766e78e9fb1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7542f9-9cc8-4664-a261-d809a06c2c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "383bc808-4899-4eb7-8823-4c8bfbd9e079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b6ab29-8e13-456a-bb7d-9a37acd58cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e44b19f2-c505-4f13-8be2-e956442ce0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f5168c-8d72-4826-a224-c50e9a616ab1",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f6809c-c025-4dc3-86f1-10081cd66ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04e36772-7982-4b88-9655-f740f9275004"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2dbd87-a745-45be-8e25-39ad6fd1d076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d5780a-dbec-4673-8dcb-afb1eb6d5edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986ada28-7910-40f7-9d92-a3ae928c6e4c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada86839-4602-42cb-a3e4-ae0e9ceec58f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97ba4cf7-8a2d-4010-a8d8-bef154f7cd2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd826d18-2f10-4257-9656-93729c23f0d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "193384da-ea0f-464c-81c1-fd9b761c977f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881219aa-89fb-49bd-aaa8-9d0a19027b3f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd290d51-4288-4c8f-97a1-ac17775d4108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a5d7c4f-8c4a-4f58-b4f6-3cc655ce7cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f604057-15c3-429a-8a1e-9ba1c73ca71e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6ae409-552d-4c47-99f6-c3882d1c67c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c56dacc-1d34-4915-8165-d5a14466caeb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b421fcc-bb19-43f3-ba0c-e3097d74a7be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b43e9190-ec39-4db7-b8cf-036959765e69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2c65ca-80c8-4b8f-9ad4-b5678c952117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688c3691-f1c4-440c-92ad-ba202a79a554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6c3159-5c4c-4b59-aa0f-0f282e098ff0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f70bb6-1d97-4964-adf7-a429abf20e94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "341be1e5-c2dc-401f-8217-74f97762e8d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca7822e-c733-4d12-b044-3346dc2a104d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0793571d-edc8-4142-ad7b-b85a417c13c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13205af1-7c39-4b1d-8440-c74c324c5a71",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eeb35b9-7b24-4d09-a1bb-8a3e83b09c98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01862edf-7346-47e6-aea3-e1df7e6625c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b686bc88-a405-4d4b-bb2d-59541faa7901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c360b412-1d8e-4d90-b678-b6b5050d7d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ec1d6a-3049-4090-a4b0-62124b5f8d41",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb644c0a-fa1e-40fa-a629-1d740f5ed2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c631f202-8ffe-4c44-8197-0774e9697a62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7523c2c3-6d6a-495b-a4d9-656e7afe3f0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766df2f8-1280-439f-88ba-ac529bb43b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf6d07d-9b59-40cf-80a0-291243de8714",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0baf8e2c-6f3e-4e7e-a123-35e6cc5fc629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82231c2a-2e64-4bbc-aeb7-4338a1e43a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb1e9ba-fb7d-4c5b-958f-6c8bc8e503ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd16dbd-81ae-4ad4-8f05-ded020ff275b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48aad6e5-c1c1-4ea5-9a65-eda0e02c9d52",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a774b60-9174-4f56-b1e8-3eebbf58c2ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f33a1a-717a-4d5e-affd-c38e4f67c974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5f48f7-6130-4958-9b7e-27ed22fee2a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b593a6cb-5cc3-471f-a7cc-3bbe6a48c19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f26bda-8ab7-495a-9eb3-e9dbceaecffa",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041f893b-bf46-4492-ab44-46bfb7666459",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b561fe59-e188-40e2-858f-86bc58310c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "218096ad-5dad-400c-8216-76f327a15b64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b8b5949-06cd-4bf9-97fb-25095c62742b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeff98c1-9456-46e8-9917-58ea07010b4e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732d1403-d10a-470b-bb50-338e82256fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83dab23-1739-488a-9856-da88a3467cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ff7e90-0d51-4fd9-8713-a6befe6d93e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e07658-5ce0-4b81-953c-cc8726477dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1204375b-1deb-406d-a355-2055cc0eec13",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c871028-aa2e-46c9-9f7b-25689dd413d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb09bbf-9020-4b00-b39e-6911915768d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f421ea72-faaa-4515-82cc-853920c6f228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e986e59-d42e-4425-8aa4-91f861aef885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5f1cec-b052-423c-a845-e14858a59698",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fee868-af5a-4e0b-b3d1-49ded21f9ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3793bd1a-e943-4f17-80f4-3184b8971091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24be3f5b-bdf0-428f-b537-19f80a46ebbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e8ed1e8-a060-4991-9bc2-593a2f12b949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc019e45-d5f0-43de-98d6-dfbc67bb3c28",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69645bad-ea16-4e33-84bb-1da8963db1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0940b484-1ede-413b-bf5d-d089b7dc98b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b940c46a-2afe-49d4-950a-7b288b86d74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71bf1b1-e994-413b-900e-831a96286b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ab3479e-767b-4fee-a0c9-58a8aa810037",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2c0b96-f4ee-4a78-9a1c-714d49327fb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0ec16b-8bcb-4ab3-a9dc-97e6d9c23385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a846af-2d61-49c9-a74c-f475e34a2c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eee4205-5bba-49e6-9909-e3b3252dbb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c6ce78-938d-4ccb-b694-8143d5784505",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dbca721-4e7b-4d3d-97f4-bb6002656bf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7d2a6a4-51a9-48fe-b2e6-2c4e658dad90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49257c0b-29f3-4ae6-b6c3-1cc0fa648704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169b24f8-ceb8-4875-9e1e-0d5db726b635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e508b78-8a1b-4774-ad10-3a4fb9e7712d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f26bb7f-205a-4812-ade2-ab14122864da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9fb2d8-60cc-435b-a50f-169fd5400af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f723e946-bdbc-488c-913b-35af97b477da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c835c1c4-e810-4647-ab59-816c9ace6239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b66ebd-7ef1-469a-a23b-5c88e2d02c61",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d60f3143-3fac-4df9-ab9c-8a5dae736bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a41814b-7ed6-4180-a3f8-872e37f88f65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3277563a-c7b4-44bd-94b0-a427b94f1cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158fd143-2406-4b99-aeb0-925f45f19311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad7416b-7d66-4829-ba16-94c970e5b0b4",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb61e4f3-53b5-4485-94d2-9c0b39c4cdbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3c90d10-ade3-49b9-a07a-aa127d3fe19c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dafcf46-f443-4773-849c-f641dbe8ff7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc398a16-fa02-4d34-890d-b0a2ef86f5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff101427-2db1-42d2-8dd7-d1e49bb55e28",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9b8408-6ea6-482d-a5d4-c44efe9d0307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256a1f32-bd32-47dd-bac3-9a572a54a0ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f451b52-ea38-483e-a65c-ee0fa9a9aa7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74db451f-7bd9-4d34-8613-07d548169992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b54b29e9-2215-4870-a21b-0a1c61409a7c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a63eda7-ccd0-4834-9e9a-154790061619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e6db1c8-7938-4cae-b6fd-4cd0e72c06f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b1f156-bba9-4d83-a0f1-b2e01b3b75d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70475c0a-0644-4755-9e3c-93e9dad2a023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2db6466-75b3-4d6b-9e59-367650c5f1e0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988d772c-f885-4972-af16-4779605cbb61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429c2acd-39d6-4d27-8564-1652b6953a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced2a865-12c2-49ee-9a38-6b7b501fa288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38371a01-b1eb-42bc-8eed-c455a2ea7221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744302e4-2202-43e8-ab9f-e60249fbff73",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2c7fa18-c535-494d-be42-559490006b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2151aa-2d34-415b-a10e-136b09188d1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65b770b5-8cb0-4e41-8886-129c9f159988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29363441-e85d-4343-b28a-963914c624a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1814f1-8058-46e1-82c0-97623aa560f6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d49e86-f40a-4dec-a178-66016449bbf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff37886-b287-470b-9832-766e4fff050d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e461fe5c-3c52-4e1c-b7b5-99e5e9ae4668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8b4323f-562e-4a58-b806-951112898cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de58898a-e6ad-4b65-b1ab-4137e51d623f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b419dfef-b12b-49e4-b06b-75071c56bf64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56770c7-3d30-43ef-a12a-6b9833f4713b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06b301c-0647-4cf3-b6f8-9371ed805b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06d1bc0-2d2f-4d99-b5ad-ebd899eaa780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b72d99b-5e92-4c53-9a03-ea7007bd8d12",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831f2f38-e290-43b8-8eed-de9c2ae2565c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09335902-ab72-4bdf-b0c0-393b41aaa564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e838f2-3873-4a1c-b967-f349777cebe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f0a431-c328-43f5-aaeb-d971cdee7ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610b6cae-340b-4a96-9bbe-e3c273486735",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f836d07c-f178-4d09-8ae0-784c2a4a6b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76092bd2-0b2a-40cf-97be-47c8a07bbf90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece31557-35f6-485f-a905-e4bd26819337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc2b6bbb-21ed-4eb6-badd-05dfdd6a6b08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab22b8c-8263-4e04-8957-523661837dff",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf125a0-e120-49f8-9404-5ed64a901743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81905ce9-1052-447c-85f6-fa72aaf5bb5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0014dc-13e2-402e-9d5e-43d9648fbc2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "282b1f39-d120-4c4e-b734-97302620cdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f8a047-830f-4b3c-b2d4-843389897f88",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ad1e7e-ebed-49ac-aced-760c1facee2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769125c8-6197-4c71-a513-16faed4b258f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c5430f-5090-4c7c-93b2-5e500b13e748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f66c99-6aa7-4b61-ba88-0a6e7471e99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0c9d070-bfa1-4c0e-8c29-c834cb2f937e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d65a151f-866e-4b28-a6d2-125003ddd462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e036a74-38c3-4617-81cf-47b01749f5f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3c14e0-4d10-4e55-b8c6-3990cb7b6c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb06104-c8f1-4a6c-b18b-4b3529267191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb6a4582-c7dd-4902-8841-de0a22fe214e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12963f06-7f51-4619-875d-f4d4e0d1906f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87643872-5aff-4469-8ab9-97925598eb9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6088bb6-8bf3-42df-ad61-18ba3d16b1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6eda9aa7-c0ae-4585-ae3c-1fc5232fb43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9987598f-0402-4c3c-b16e-fa74e72e6572",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ae10aa-e2f4-4288-8dbf-c4bce2f3b67d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d12bd02-8f07-463c-a33e-34624079ab5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a64328f-927d-4ab8-b522-be7b26aedaf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5097ae37-38a2-488c-80e9-d4715cc6e669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9747c9-898e-460a-9fe8-5d92c0a1e915",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358218eb-ef3c-40d2-865a-69ab90162903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301cb161-a129-40a3-8393-26707ef7286e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fa7917-1d46-4709-823c-9b62bcac6938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e356d970-88c0-4130-8798-a244d6bcb965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c2ad3d-61c9-4523-aea2-a57cf3ddd38d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d8efbf-78ad-46a1-a7ef-df96c401ad65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489cd750-4b48-43f9-8d41-40d3d577865e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eada5ce-d8ee-436a-be15-916931dc2515",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b337a78-7f3d-4c11-8317-c4b9836a06af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d251f5b0-1378-4dc3-8e6f-a9f668acc08b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35821aa9-1a7a-408a-96b4-2bb93b1b478c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91401ea-5eeb-4baa-aeed-e3efa47fb6d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8aa911-73bd-4219-b62a-d00f79fd1f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93c895c-15c1-4d59-ad9c-2b524c5f0eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7eac0ca-5f93-4b4a-a932-c33cfa4fa603",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea08e6f-54ce-413d-af46-f98312dc9e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e0e9e3-8cae-40e4-be9d-bec42232d939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b19259-db56-4285-b154-a826ad0f9b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "114dfecb-3a5a-44ec-a0a4-fb81a9e63ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85abc6b4-e9fc-4a7b-aa7d-7ce4d9dae101",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b2bce9-c48d-42c0-9c41-1c534e34dbea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1bf8a88-0970-4c66-8419-24ef9cb4ad1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13b7879-39c8-4b57-ac4e-3a2c78290e20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c35b322-7d2b-4907-b02d-a5efdde40d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba668286-da9a-495a-af09-febb45fa43a0",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f58eb08f-89ce-413b-b1c4-6d0727abe780",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e03e3cc-3f7f-4e94-bfd1-fc8e7075ca09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f60976-6c04-44c4-ba13-23eea528018c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00618a4c-ba94-40a9-8ee8-889cb25e0612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6f6a0b-6e61-4bff-8639-9a555bb2de75",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e473dff-066c-497b-9ad5-ba5aba1d5cf6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8c4e424-a8ff-495a-8f5b-e8c614aaeeec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e6845f-050a-48ac-91ad-3a3092ca81b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bf4cf5b-49f4-47c6-8a19-211bc8bbc8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1272cba-7c5b-4e7e-b40c-96f246af56da",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e806b2-bbad-4330-8f69-21b36354b8b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a484b5f-efae-47b1-8a84-824143101e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b262a19-7ce3-49d8-81cf-482a2fd573a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d078ee4-cf5a-4eaf-a4be-80349aba52d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "985224f2-3e20-48a3-a1da-16720432449e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0da62d-153c-483d-9ebe-6748d7a04cf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7df745f5-641f-4673-9152-419471a51d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f1ab70b-c0a1-4e13-ab22-bb414d8ad130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e85b1719-d2ee-45a8-95aa-f9c375c55082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1c6960-7401-4fa8-8c5c-0b965b6dc892",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c76e665-3cd6-437e-80d8-cccd20f6c7fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58abd8f2-db2d-411d-b940-74d35a6ca97e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "245e7e4f-0a83-42d1-9964-5fe6675710d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78dc8101-a72c-4fa5-9d6f-618618e794b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8cc0158-6954-41d6-b666-0a5ddd093cfa",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71617be2-5e67-4afe-a0fe-ee3b8e297897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97458942-7ed2-424a-bc8a-fa036a2d7981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50946679-682a-4334-93fe-d4df1b992784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2299231d-5d89-4cfb-97ee-34b1b30f0bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b2778d-ee87-4b50-a621-f16c0e7abc8c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bef72ba-94cc-432a-aa48-e3be0dddb203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26b660e9-7d0b-453d-8940-6124ed257725"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d268d3af-fbd4-4722-ad06-b746d49755d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c252eb69-07b3-40bf-a812-48854c1167e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a994858f-7d14-4866-8388-da5ba83939b0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6518ce-31b3-4d53-9ad9-7ad31a2896d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "185b1334-c233-4d31-a60d-bc421b6c65d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57afb52-f6ef-44fc-9bd0-80c600c60f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674a980c-87ac-4b1e-94b8-631e775ea722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925dbbfa-1c57-4b61-8787-f36b822f889e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98592c31-e91f-4f8f-a7de-a8a0c9a5b99b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17269961-2241-426e-8fd0-d9c66231ca7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e47056-8e70-4dcc-8ffa-0208b827f08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea7d3f0-702d-475f-b810-5c9810379b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b9467b-eaf7-4bee-91d2-b34f4062d272",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc93d95e-ce2e-47df-9e08-41a5baa65c22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "652a7294-30f2-4ab5-b8d0-f9abda748176"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8892cefe-8001-4525-a9a1-98a4431a4e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901bb89c-d311-4d8d-ab4d-bf20e605c782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a43d785-6bf6-44ca-9d35-0a0c0f07e0a6",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6fd7f36-178e-45b9-b57f-d77e80ce3336",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fd47e3b-407e-4ace-b0d6-62028674de0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af89b158-31ab-4f38-9c6e-8982041d3e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615871e5-39e4-4dc2-9de0-0249593137f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96f486f-6b0b-4f9b-b7f2-84f75e83b7a7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b68a17-f787-46f5-a150-fee8e6c6e77a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ca866c7-7094-4b21-8f22-580af572ffdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa73552-0593-4e05-bfc4-d1d414d02223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c30efc-dce8-45e8-933f-407f5bbce9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25d8183-a32f-44f3-82f5-ea6b555e27e4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfeb8e1a-76fb-4497-b744-b3fd85292aaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "197e734e-ffa1-4596-a653-31060d142ace"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877bd803-1b11-4929-8fe3-7612cf369e4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfeb83cd-0806-4551-b47d-1fb0ffd7ddc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0280e1d-1321-42fb-9a67-85b75eddb013",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97c3ec6-fb9c-4864-aa08-ddbd6b2b5a87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1b316be-b33f-41f9-8ddd-fefb2c383bd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f7f946-aeb2-463f-8bab-2502ee1ab374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ef9493-b432-4921-ab3b-b0e71758ddd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de183e8-e156-4701-bb91-227e06c50001",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b5099f-91e8-4410-ba7b-c57c7d7c5175",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c864469-0109-470b-b755-275a3f07bd9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8129ff33-b60f-473b-ad35-aa57cdde9469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8775f22-84f1-4d82-ba37-05c020b5b3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d22b5cc-6158-4dd2-a1a0-8531dba26e75",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67693272-969a-43c8-b17a-b6c4b06a0824",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8669cd6-1c0a-4dfb-8a97-99520cedbb86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2128939-8e46-494f-aacd-87f2e797c3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad5c59b-d9ba-4415-962a-3b9c77916562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc435aa8-beb6-4476-8cd0-192f47d1095e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f765ab7-6f5d-4e99-a500-f756c62040db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98488da8-d026-47f0-8ac5-7a1b950dbf92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea91f8f-33d7-4d40-bb5c-b81b7258df3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b697eff-6180-4236-a679-c55b4f09a4cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e8c6c5-bffb-4d53-b3ca-3a4616c72c61",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450e602f-2437-4947-9fe9-1bb02ae782b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "531e0d95-34ce-47aa-b290-7a879551548a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe4f81b-2398-4756-88b3-701016e77c14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92b0219a-c7db-42c6-b0e6-8299b33b7f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17355c7-f033-4025-94e8-ded58481f4e9",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee07c69-6070-464c-9ed5-2530ac523a44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8105e161-a96e-4d56-afec-dfca21958e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce72a37-6f8a-4def-a2d1-41b3135815aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93976d95-d6a0-4d63-ad06-1a6e6c2d282c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f93fc8-2d16-40af-95eb-202384e915e0",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ca896e-0fc9-4746-b12e-5d0b7492ac0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6770bb79-f5c0-4014-a33c-602a6676d51d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57b4bb0-a6b0-4fb5-94aa-c604fbc46b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7eac537-6f26-4ef1-a648-dae6746671c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949689cb-f06f-46a2-95fe-4df795b4dd3a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c256ad75-46c3-4bdc-bcd7-572e7542967a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8101e60-41f1-4f12-b137-2a94f6abc8a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d753c6e2-ae86-499e-9d1a-1d710b75323e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc66f59-673d-4215-b39f-1dd144f33764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5aac01-274d-4ae1-82ea-36c52fdfc626",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb094a9-07ea-4974-b41a-a5d57f44ed93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43bf9784-5e1d-429f-9fe1-d4ac7bbe05f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91dcf37-576a-47e1-9ebc-73abad70b602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419f6175-849f-4dcb-8b22-c6a5e7cfb5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66be2067-1516-43bc-b31f-431e93ab1764",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cde0cc-1f04-498a-b4e3-8ad3f1fba505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c658ffc-eac1-4222-9524-1a9604093b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715d38db-1939-4153-9e84-de7f925d256a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25937bbb-eb29-4238-a86f-5a679a0ae4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2663d451-acea-4ad8-b0d2-62ce94c9fca3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97991a39-a012-49f2-bad5-e03643fac0b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf87ffef-514d-4919-bb2e-ef9d468f8998"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34b9b40-d2e1-4ddf-b174-94c79d93644a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deb90154-cd0b-4d9e-8f85-b3a3dc97ea9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10982830-ec7a-413e-bec3-99ba90adcb69",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018238f9-9f7f-47b4-8731-63b04f3b7e67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab8add4-15b3-4655-8918-8ad9d1a267b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b340881f-6198-4ca1-9d1b-3b9c4ca90440",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de9be48-e034-4d8d-950b-2c9ab2b8aa41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aa1484a-f5aa-41b1-921f-c8a260b3e3fd",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe802164-6637-47cb-a1c4-4a3a3f70cd4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c758174-eba0-4875-ac8d-a19d62971f80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be06544a-cbb3-45e9-b440-696a692dbda0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7084f4ff-5ee2-46fb-9c61-da1b9ebe363d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa21fadd-ad05-4b50-9678-b721fa0a78d8",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099345ee-7088-4354-a303-d12fd4414699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7395adde-24d1-4f34-be61-2869925859e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafea641-7641-4833-9b42-ddf8b5ddc83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2afd0502-5181-4893-a20a-c8dc5526a903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "963ae15d-194b-4aa7-b81f-c83778fb382c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ef308a8-de8d-4778-8b28-eaf6cd27f324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ff13060-49a0-46ae-8254-10ba4dc2b7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dbdb719-4c8e-403e-81c5-4d4f04cc3518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688350f3-c7a0-4a51-8853-aa0514118809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dce738-15ef-4c97-87fb-70779f7f2dce",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9325ebd7-52d4-40bd-80fe-b292eff328d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1cc2e54-b2c1-4d68-957f-7cb36c098825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527d17ae-4408-428d-99a7-a5faabf698ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc549408-369c-4ed6-a9e6-6ba88510f88b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77b3a166-8568-43ff-9c7a-c6ce5715832b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56836097-460f-4441-bd81-ec75d050fd28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdb244e9-fc1b-4528-a6a5-b79e367558fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1868a402-b110-477d-b411-06d167e64a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154692ba-4978-417d-bee1-978b04790178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8af45ef-521a-43c6-a9e4-972043c14869",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dced4f1d-6482-4ffe-a158-0183d7faeb56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b874ee9-56b2-4b85-ad58-5ba0381ca0f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c213d9f0-3c0f-469e-90c0-9e4c5e0f20d7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42daedf-0304-4937-bcec-6921301eaa9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40780497-d362-4acc-a32b-76443aebee27",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e15e42d-18f5-4d0a-a16f-32222ba600cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec2119da-be2a-48a5-8fe3-6f49a5b59a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fa865b-c2e0-41b4-b225-780d39fed07c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abf3ef26-317d-43e9-bbd3-d987ae58e29c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f602893-e76a-4996-b1cc-cb6c1d6cf717",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e964dec1-86fc-43c8-bb21-83783be4578a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45f50e00-e836-4340-8f1b-7b8c5df04275",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0091b079-522d-405e-8efe-be46b851ae68"
                    }
                  }
                ]
              },
              {
                "id": "1136ea78-fd8b-4906-b703-6db0fb6655d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ecf8f61a-3cb5-4840-8ba6-efb8d435002a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc14e46c-79c4-46ac-a89b-61417d674097",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ac39b2ad-5b33-4647-8750-3ab56aca9293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db2e6aa-3c40-4a42-becd-85a1355bad27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77321aee-50d1-4fee-a7bd-ce1de5204ff8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d443a7c-fc41-4e44-8b49-4fb32efc92e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "987ae5a0-1c31-4d53-8f3d-8eecc7755b18"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b9f0457-2403-4272-9739-0d2c8be068af",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5195d03-317d-438b-8cf5-f297cc0a7d78"
                    }
                  }
                ]
              },
              {
                "id": "373a3f19-651f-4e0a-a974-c5a9701cdd9e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6e5a3714-6e1e-4932-bd00-592d60150718",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48133afd-4908-405f-a4cb-ef8159726c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5819a511-240a-4730-9bdf-6119cde7a2f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0834e0e3-7b8f-4fe6-b527-0d5ae071174e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cae8439-493a-4024-bb6b-63c16c398e2f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "fc8d68aa-7303-4d7f-81bb-2079d653a629",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ec9faa3-3075-4ce0-9bae-e49def1192fe",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09530aa3-d4f1-4c7c-b815-71f97294c88c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4238da9b-a525-4f52-a208-e5209061fd50"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b54059d5-3ed8-409c-9f9e-7da9b7dea64e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8f0ef902-6945-43c7-b998-21160ce5c07f"
                    }
                  }
                ]
              },
              {
                "id": "a37df18f-cbc8-4cca-b53a-c6448dc44128",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "818fbb4a-1f49-4f0c-890c-3f729ffbc635",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "16942047-2a6a-4ff6-a012-29043cefc7fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "de2201c5-9192-48e4-8c2d-01c8adfeac4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40393575-ecfe-455f-9648-b158f56ea7fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f84c6381-dfdb-430b-8159-ddfdb276fbc5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c7726deb-7ca0-4644-9e27-5f2cd8551cde"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "511b563a-f996-4221-89a9-54bb80b6d7f4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e0f95dc-f26e-47de-88b1-d2ab2c8b8733"
            }
          }
        ]
      },
      {
        "id": "98baa130-7399-4770-b027-a1bd00d8a8ed",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "86d75e5a-662a-4b8a-bdcb-d61c76435896",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3257e3a-0a01-44c3-a5ae-a60e7c076369",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f61131d2-32ae-4966-a40f-573133c54bf1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682828fe-a8b2-4079-af7b-8bdc1979bfb7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6af6a703-97ad-4a7b-a920-1b7c17ee23de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc36b23-ee98-4421-90e1-c4100c81814a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a439f9c-fb48-4549-a976-240436dfec24"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9c1501c-e8e9-48f8-a70c-a5f6759d7c74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "344484f9-87a5-427b-a5a0-4b5c3a17ce5d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a4066827-4cbb-42d1-a0db-147bd4dcd1c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33a87656-4aeb-4b63-bd37-cfafa29387b8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5eb5ef83-8725-4913-bc1e-77b9229ffc3d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9a22f20d-c5e9-48f5-a377-f8f403b881c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2f7a2cb-de61-4365-a625-a0d65d470666",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b3887db-ef80-40a1-bf69-8d303d801691"
            }
          }
        ]
      },
      {
        "id": "86948ce9-3905-4778-963e-655510078d37",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6b8f1f7d-412e-4479-adec-98cc44805999",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f046d580-8cd0-4294-a5c0-cc9e911bde6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25172576-815c-4a12-9764-d5e02d0ff9f9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60022d42-466b-458e-aa49-2b5564eb7ad5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0b69447-88b4-4c74-9807-f2c344d4f848"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9f31bd-d66c-46e2-86b7-9354b0a1778b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b91fa66b-094f-4480-bbdc-c4f4ab71fb4e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e655fb2-436d-43d3-8ed4-fcf84629e37f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "661509c8-b5f3-4a1e-9904-edf163306263"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b0a25ef-a094-41e0-81b3-f828c91ca1ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "365e4505-bc9b-4127-84c7-1324ee60816c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c726c0c-fb76-4342-90e4-d07afbb8c029",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bf068f2d-88c1-4fb1-beb8-2bf798800f08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2aa4b9c-313b-4902-96a9-4c275117be9c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "763f97f0-dce9-4660-9624-acb9eb9e8641"
            }
          }
        ]
      },
      {
        "id": "684a782f-a6f4-4406-a07c-99328a7aa5da",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ccca8e10-389e-4faf-a23b-68325a36a93e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "09fff929-9957-4862-a3f6-662d2cb5c040",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dd88bf0d-8a5f-49f5-87b2-a8caaeb0421b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811a40dd-8dcc-4b10-a869-72ce84a31411",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f5c7f1a-82db-431d-9c87-8fdde60b0600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdde0de-6a72-4b6b-987b-eb0e4c9ae100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0843ed93-9ecb-453a-9312-0d18e9db60fa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91c16518-b9c0-4f79-97da-4b3968e26cf8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dcd1424-e472-4f9f-ba67-0ae892083205"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7aaa4ba6-45f2-48dc-bf85-420d012358d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9c8edbb-ffbb-4170-a44b-41798e665832"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14a354f4-fd9b-4556-b3ff-bee498066d5e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "83c366a6-ad98-454b-90be-89144d284443"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbfd503e-c900-46fa-a9c7-db3915e63693",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e000a0a3-6d87-4dcc-8282-a2b0bc1ef6b5"
            }
          }
        ]
      },
      {
        "id": "f0151326-04bb-4cf1-9013-dadb35f466ec",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b2eb5c4-0189-49c7-98b1-5d66fe5f83eb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b800059-3d6a-4a8e-bf29-e75dcbc6f6ec",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c5d63276-239d-4427-8b72-a1fd48900196",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "31cec23e-0492-42ff-a24c-d45c2e8b3f69",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "339cffdc-d60c-4690-ba3b-0977bc97f0be",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.55789473684207,
      "responseMin": 6,
      "responseMax": 590,
      "responseSd": 71.66859144057909,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1703983099570,
      "completed": 1703983127849
    },
    "executions": [
      {
        "id": "05ee495d-0262-4e91-9aca-59abe5dd2f90",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e6c9aae4-f579-4b01-9a35-b3d754bc9ed6",
          "httpRequestId": "2853d351-73ee-4557-9da6-20e9ad214c6c"
        },
        "item": {
          "id": "05ee495d-0262-4e91-9aca-59abe5dd2f90",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "3a6427eb-c177-4e24-8004-d7f8370a7a01",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "4825d0b7-a240-46c1-a6a5-99c79a73fb35",
        "cursor": {
          "ref": "5a9e6a17-ec62-4012-8b9c-6ea365683cd3",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "40c53234-9159-4e44-86dc-43b3db208630"
        },
        "item": {
          "id": "4825d0b7-a240-46c1-a6a5-99c79a73fb35",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d4327c3d-6baf-4698-bc48-303e4a4d4c63",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "9c544304-f0f0-497c-8457-4b2b15939c77",
        "cursor": {
          "ref": "d3960ac7-8a88-4e96-9068-c9c23ecc20ff",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "87a83d22-14a8-4c0e-86be-54b9662383de"
        },
        "item": {
          "id": "9c544304-f0f0-497c-8457-4b2b15939c77",
          "name": "did_json"
        },
        "response": {
          "id": "2c75ea6d-4a20-419d-887c-a51d85a77650",
          "status": "OK",
          "code": 200,
          "responseTime": 306,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5bc63f-391e-4871-91d9-bfad0dcd2406",
        "cursor": {
          "ref": "7f2bd343-d557-4b64-bbea-e0eddc736f51",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "63e9bc17-062a-4357-9aca-7faaf5f6b13e"
        },
        "item": {
          "id": "2b5bc63f-391e-4871-91d9-bfad0dcd2406",
          "name": "did:invalid"
        },
        "response": {
          "id": "d68232cb-2b92-4e93-95d5-984c20c77b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b5bc63f-391e-4871-91d9-bfad0dcd2406",
        "cursor": {
          "ref": "7f2bd343-d557-4b64-bbea-e0eddc736f51",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "63e9bc17-062a-4357-9aca-7faaf5f6b13e"
        },
        "item": {
          "id": "2b5bc63f-391e-4871-91d9-bfad0dcd2406",
          "name": "did:invalid"
        },
        "response": {
          "id": "d68232cb-2b92-4e93-95d5-984c20c77b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043c7491-4a16-44f4-8e7b-1f4a45605964",
        "cursor": {
          "ref": "22944cc0-c865-4e14-aa68-c067b0b98a3d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "162b6bdc-da56-4380-af61-cd8e9f37356d"
        },
        "item": {
          "id": "043c7491-4a16-44f4-8e7b-1f4a45605964",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f1142ae4-5b43-4465-a6f6-1eed428f28f3",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c32b16d-eace-41b2-a01e-11e454b30e53",
        "cursor": {
          "ref": "9ba3cb36-8ab4-4438-80d9-11d91dc1582f",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3c3e41ec-522b-4843-94d6-48d88ec43c76"
        },
        "item": {
          "id": "9c32b16d-eace-41b2-a01e-11e454b30e53",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "fe1e4b22-a529-4525-8738-639cf2bb46ed",
          "status": "Not Found",
          "code": 404,
          "responseTime": 44,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70677e8-2ebf-4f1f-ac10-ca7190a090f3",
        "cursor": {
          "ref": "a4b5f6ea-1a3b-4676-a385-c130beb428f8",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c2971814-18fa-43aa-bfe3-02beec07905c"
        },
        "item": {
          "id": "a70677e8-2ebf-4f1f-ac10-ca7190a090f3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "330e184c-519d-4be8-aaf5-f905ab977bb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677572a2-ded0-4649-878b-21e7c80912c5",
        "cursor": {
          "ref": "bc71fdeb-886d-4f13-a350-1ecf7a7e85e6",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "61670ba8-5388-407f-b26f-7f523b477f1d"
        },
        "item": {
          "id": "677572a2-ded0-4649-878b-21e7c80912c5",
          "name": "identifiers"
        },
        "response": {
          "id": "8672a58d-4d55-4327-914a-11320ae30f52",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736feb21-58f2-41e3-8241-7a2d9ee973b3",
        "cursor": {
          "ref": "06e4615b-b833-420d-b72b-06dc4aa35c55",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c21f8e96-6c7e-4094-b144-14cd26930335"
        },
        "item": {
          "id": "736feb21-58f2-41e3-8241-7a2d9ee973b3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b4810682-c7c9-437e-9e09-3c0ecf532653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1813d093-f2c3-40d7-af7f-28d99cb9043d",
        "cursor": {
          "ref": "0153cf16-b697-4fe4-8d08-56176638688a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fd8ceef4-4c44-4c83-9e2f-9177df6bfd8c"
        },
        "item": {
          "id": "1813d093-f2c3-40d7-af7f-28d99cb9043d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fc93fe96-7480-4f75-9748-974250f40f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab52ecae-db5d-433d-a1ac-1ed5af271463",
        "cursor": {
          "ref": "0892296b-9ec6-41b2-a4b6-e7263efc0dad",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "825a13a9-c35c-49a4-b6e7-cdbac1dffe21"
        },
        "item": {
          "id": "ab52ecae-db5d-433d-a1ac-1ed5af271463",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f0ffa9f6-0deb-415c-9154-3f018fd4cf95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065d2f9b-7951-46d3-8c20-45c23642ab02",
        "cursor": {
          "ref": "7c0ecc32-aae9-4bc3-ba36-bbb721767c32",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bf174a4b-7e8f-4aa9-8805-8e6f060aa76c"
        },
        "item": {
          "id": "065d2f9b-7951-46d3-8c20-45c23642ab02",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "96b57585-b20a-4642-b6ad-31f9e5e16f0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3173df9-0709-41f5-8cf4-4c3451dc0882",
        "cursor": {
          "ref": "9b7fdcc7-fbdc-4bbe-8405-4d0a590b00a1",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "fbcc5460-7899-43f5-8792-c95052fd81c7"
        },
        "item": {
          "id": "d3173df9-0709-41f5-8cf4-4c3451dc0882",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0f53120b-4e35-4f58-85f3-be0e9530dac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9d2b9a-fc7e-4655-9268-468ed712240a",
        "cursor": {
          "ref": "3af969d7-034f-49ff-9c28-52b61039d7de",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fc021eb7-41d1-421e-b2ae-10e46260ad2a"
        },
        "item": {
          "id": "0f9d2b9a-fc7e-4655-9268-468ed712240a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bd19529a-9a26-4fd3-b50d-862066dcc997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecab24b7-7793-41d8-b716-207a8ceefbcb",
        "cursor": {
          "ref": "228672c2-978b-435c-aa0e-ed00be230e55",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ee80af0f-4c76-4230-830b-a6648d893051"
        },
        "item": {
          "id": "ecab24b7-7793-41d8-b716-207a8ceefbcb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "99daea1d-4cdb-47af-a8b2-338e4b814e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba148ba5-c8cc-469b-8a8a-74eb90260edc",
        "cursor": {
          "ref": "67feabad-ba7a-444c-883b-a6ad2a688ea7",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7d63725a-0a77-4d98-87d6-310c46f2dc4f"
        },
        "item": {
          "id": "ba148ba5-c8cc-469b-8a8a-74eb90260edc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "dbacfcbe-ade1-471e-98e9-2cd899c33e85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40f4843-7305-471a-ae2e-a6bba1a176be",
        "cursor": {
          "ref": "ac2e3660-43e0-47c6-bace-1880261702ee",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2d93168a-5c1f-49f9-bd82-eb53787e9f11"
        },
        "item": {
          "id": "f40f4843-7305-471a-ae2e-a6bba1a176be",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "fafdfe48-8348-438e-a034-2a7e9bb78695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4513d9d-52ca-4139-b9ce-ba340c59b7ce",
        "cursor": {
          "ref": "8b14f107-d586-48db-975b-1bc0bad92aab",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "82edcbba-5369-4fbe-8a67-04b0cd0c4e10"
        },
        "item": {
          "id": "b4513d9d-52ca-4139-b9ce-ba340c59b7ce",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b75b1100-67bd-4f95-8533-46d182550921",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbaf254-aadb-4651-b589-f240324eff4b",
        "cursor": {
          "ref": "e75dae1f-a411-4873-ab2e-80e87bfda46f",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e53d8203-d1ea-4f45-b94e-f679e3098050"
        },
        "item": {
          "id": "ffbaf254-aadb-4651-b589-f240324eff4b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "586a5a55-0354-4163-9575-9d17475250ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c5a5e1-61e6-457d-a0fe-ffeb233a0e0e",
        "cursor": {
          "ref": "5e1a0efd-b2ae-4e42-ab7b-7b914768ea5b",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "9d08ba9b-221c-42fc-bfce-a8884077a8f1"
        },
        "item": {
          "id": "07c5a5e1-61e6-457d-a0fe-ffeb233a0e0e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "53170d4e-b7bf-445f-8acf-996a75326752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be79896c-5cea-4267-85eb-42bc5c40f9b7",
        "cursor": {
          "ref": "2c095b1b-3fda-45fd-840d-9bb197ceb44d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ba8e352d-36c7-41ed-87fd-f419f9d72584"
        },
        "item": {
          "id": "be79896c-5cea-4267-85eb-42bc5c40f9b7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e176a5c5-f74c-4c1c-ab9a-bc7128f69730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e77ec9-1a21-4d71-924e-53561b7d17fa",
        "cursor": {
          "ref": "4373564b-907a-4503-a284-b7dde4dc33a7",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "170fa0ed-f1ae-40b0-aab1-6d2b8fdf5467"
        },
        "item": {
          "id": "53e77ec9-1a21-4d71-924e-53561b7d17fa",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e004824f-7d52-4edd-8ae6-bf2d93096f5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1058c508-0a29-4902-a43a-9edc358c2a82",
        "cursor": {
          "ref": "8fae7807-94af-4439-ae80-f53fbd7d3acd",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "87892561-c45b-4d42-8767-1d490727f3a7"
        },
        "item": {
          "id": "1058c508-0a29-4902-a43a-9edc358c2a82",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "20104fe6-00d9-4188-a1ec-6868a69ec1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acabd213-7b7e-41ed-b932-d351cebf21c6",
        "cursor": {
          "ref": "de1833bf-469f-4e1f-809a-8cd4195ec8d3",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "95cf72ab-7212-4682-951f-f2423e0367ea"
        },
        "item": {
          "id": "acabd213-7b7e-41ed-b932-d351cebf21c6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "28a17bb8-90b0-45ed-a133-7acd1482d2b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3f2e17-e5d6-4925-ac6e-f6668106ac93",
        "cursor": {
          "ref": "c7da3fbc-3525-4f8f-9f4e-765fa107490a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bef317bf-76fd-4237-8780-6c70da07bdc3"
        },
        "item": {
          "id": "9c3f2e17-e5d6-4925-ac6e-f6668106ac93",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c3c3955d-a137-4370-a5a5-687b066d59b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1b7b07-f143-4301-ac1e-38bbd1eb4434",
        "cursor": {
          "ref": "eea1aa6d-dd82-4196-8613-23214856f5c1",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "73bcca88-ac5c-48e6-afae-1b35dfa544d4"
        },
        "item": {
          "id": "2f1b7b07-f143-4301-ac1e-38bbd1eb4434",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "71077678-f69e-4ccb-ac98-e2c694c6f0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad65ec0-c377-48ef-a062-f6334545d3c2",
        "cursor": {
          "ref": "669194a1-9619-4d71-810a-6a82c9309b2f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3d920f15-90a7-409b-b578-48d9e08e9cf2"
        },
        "item": {
          "id": "dad65ec0-c377-48ef-a062-f6334545d3c2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "90ebb3ea-8250-4f91-b6d1-4748e50b102b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b68861c-f9d8-483f-8ee3-2b7951a7f3ed",
        "cursor": {
          "ref": "6391ea80-877c-47fa-b7e7-95bc40b8a17d",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "28d546b5-80cd-43a0-8e60-e74021b46b99"
        },
        "item": {
          "id": "1b68861c-f9d8-483f-8ee3-2b7951a7f3ed",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2640b32e-e45f-41f7-af24-0edfde726725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730e6262-1fdb-47ad-b622-10b69a2f01b8",
        "cursor": {
          "ref": "f32cad4a-02ea-4e27-be3b-03ef0f3c5e02",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "cf55025c-37bc-416e-a7c2-ccbe2057c5e9"
        },
        "item": {
          "id": "730e6262-1fdb-47ad-b622-10b69a2f01b8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f5824d01-2819-478f-81a4-4f0eced68284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "150e1294-00a1-46c2-8829-561b8dc8e31a",
        "cursor": {
          "ref": "83f7d61b-2f9f-4978-ba76-9fd54d0ee7a0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c8b0c306-c926-4e0e-b2d9-be0852b6bf40"
        },
        "item": {
          "id": "150e1294-00a1-46c2-8829-561b8dc8e31a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fc9910b7-7ed5-4ef3-ae6a-4865deaa775d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128cb6b0-4728-4a95-a38e-700bd9dfbc3a",
        "cursor": {
          "ref": "569adebf-b853-4bc7-b3b2-7aadcf67c005",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "dcc276de-cbac-4d3e-855e-c730c1b55dcf"
        },
        "item": {
          "id": "128cb6b0-4728-4a95-a38e-700bd9dfbc3a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4d105e32-7642-4598-81a8-5576eea2b3f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733217de-4b29-4ccc-a0cf-2359de0367c4",
        "cursor": {
          "ref": "cd00c54d-353b-4750-8940-dda213321569",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1bb1a8ea-75e7-485e-ae45-82c0dd14354b"
        },
        "item": {
          "id": "733217de-4b29-4ccc-a0cf-2359de0367c4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2276dbac-a6e5-4565-a2e0-5f918ef8d926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f385e1aa-a350-4673-9f1f-75efd7f0f467",
        "cursor": {
          "ref": "e43142ea-c640-41ee-b0bb-ccf4e0dd6d25",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a642dca6-43c8-4564-941a-59f72c2a40ff"
        },
        "item": {
          "id": "f385e1aa-a350-4673-9f1f-75efd7f0f467",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8300963b-f82b-4d6e-9092-17de84557dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452e8a64-92e4-4854-97fd-58771a2b0fc3",
        "cursor": {
          "ref": "6a8ab8d5-29cf-481e-8fc9-cdfdcbbe1488",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2c81009a-1524-48c0-8ab1-6061140a4d97"
        },
        "item": {
          "id": "452e8a64-92e4-4854-97fd-58771a2b0fc3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9f9ebbf2-c0c5-49ca-8449-a175b1cc573e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a12f36-c71d-449b-9428-94f6c58394fe",
        "cursor": {
          "ref": "c796588f-4c0a-471f-9676-bc925f8c9bbe",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a17f5e0b-cf33-4c26-90c6-ccf9940bcb71"
        },
        "item": {
          "id": "47a12f36-c71d-449b-9428-94f6c58394fe",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d1448310-b3ed-44a6-b033-a768b5760a10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2e2397-d1b1-4dd1-bdbf-35906c5b8345",
        "cursor": {
          "ref": "a9acc9a9-a40c-4a41-afc0-c5e44fd93b34",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "729661e1-9eb5-4a93-8d02-aacecc8da97a"
        },
        "item": {
          "id": "9f2e2397-d1b1-4dd1-bdbf-35906c5b8345",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "c8648226-ca45-4849-b954-278bf95e2cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f4ef6d-f430-424d-8e61-975d58ef701a",
        "cursor": {
          "ref": "060e74ba-bdb2-4abb-ad6b-9186f8a85b98",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9c03dbd9-6b52-4af3-81b2-7736f58d5418"
        },
        "item": {
          "id": "11f4ef6d-f430-424d-8e61-975d58ef701a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0fcdf3b3-d875-420d-abc0-8a75a30f93a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab3ef0e-6847-4bcb-8485-dd4017d356a3",
        "cursor": {
          "ref": "4d8730b8-7136-4374-bb48-0d46263b335f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7e0c8163-9f74-494b-85e2-2838ac87312e"
        },
        "item": {
          "id": "cab3ef0e-6847-4bcb-8485-dd4017d356a3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "e4ffde75-cc56-4fcf-b297-b8e2c1642181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2242b17d-d73d-4081-b076-98203f7519d3",
        "cursor": {
          "ref": "ac1a08f8-3e26-42d4-ade1-2497764a769e",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6e6808bd-8562-44f3-b4e6-17ff348f8216"
        },
        "item": {
          "id": "2242b17d-d73d-4081-b076-98203f7519d3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6348d282-3721-405e-9d4c-0056190ec03c",
          "status": "Created",
          "code": 201,
          "responseTime": 590,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "f9a8da55-ed46-4916-a75b-eb3b83840011",
        "cursor": {
          "ref": "3e9f2a41-594f-4d98-aea3-87c06e5ac24a",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "45d2bf95-34a6-4c6b-8425-88d2ded5f9ac"
        },
        "item": {
          "id": "f9a8da55-ed46-4916-a75b-eb3b83840011",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b5f8d1b1-94e2-4433-a112-1d459e4dd1b4",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "62c18e1c-c53f-4049-b55b-2887e21093d8",
        "cursor": {
          "ref": "7f89d44c-3175-4f2e-a3b4-31e84e0c0c25",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8599073b-e733-4e42-8633-39feba5780fa"
        },
        "item": {
          "id": "62c18e1c-c53f-4049-b55b-2887e21093d8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "619a483c-b759-4d9a-9887-9717ed93130e",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d909c996-3e8d-4384-a8b4-70b308a1c7e5",
        "cursor": {
          "ref": "fa189e85-006f-45f2-b49c-2d9f80dca1b6",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8ed1c7a0-33ed-4846-9b04-7f5ee196a9f8"
        },
        "item": {
          "id": "d909c996-3e8d-4384-a8b4-70b308a1c7e5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "50f42209-9583-48f1-bc48-0fe5a5c202a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12b733a9-a60b-4529-8014-554f29f584a5",
        "cursor": {
          "ref": "cc5ed053-82a0-4918-85bf-9aace86eaf65",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "65b711a7-5ffe-4178-b08d-0f5c5bd0d2ea"
        },
        "item": {
          "id": "12b733a9-a60b-4529-8014-554f29f584a5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "33565b25-1e5c-40e8-879d-b0d8227a19dd",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "583d72c5-a298-45f7-aeb5-4facbcb51f6f",
        "cursor": {
          "ref": "d2c03e5d-5287-41d6-8a7b-866e23516120",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ff2b8a02-107a-41bf-951e-2ec72b209fd0"
        },
        "item": {
          "id": "583d72c5-a298-45f7-aeb5-4facbcb51f6f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "35609115-467e-4f64-858f-a745d4d2acca",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "bf7a09ba-963f-44e6-88b1-925f40cdf43e",
        "cursor": {
          "ref": "716df9e2-e598-44e5-abf9-1a7fe86f456a",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1fa9a629-e29f-42c3-af3f-14c7f2672b83"
        },
        "item": {
          "id": "bf7a09ba-963f-44e6-88b1-925f40cdf43e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "19d2fc3f-54c0-45b6-b38a-800faa0ec036",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a707944e-1b7d-4be1-8d36-02cf0bd7d19a",
        "cursor": {
          "ref": "2cb5c778-35f0-471e-a62b-333f4f663740",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8d096a86-8481-4645-8392-b87959f9243f"
        },
        "item": {
          "id": "a707944e-1b7d-4be1-8d36-02cf0bd7d19a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2c88143c-6e97-43d8-80af-68f226219805",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0d54e0fe-2c45-44f3-af8b-e09d79c60ab2",
        "cursor": {
          "ref": "4da0dcaf-7990-40ae-a0b8-5d592f3d5359",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0a3b1ba9-3063-4ee9-a188-a751e66044f8"
        },
        "item": {
          "id": "0d54e0fe-2c45-44f3-af8b-e09d79c60ab2",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e3e199b3-63e6-4ef7-82a7-85ee46ff6b9b",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "e75ced3c-c786-40e6-a9a3-9ce8d4c7d73c",
        "cursor": {
          "ref": "a865b38a-3f5f-4b2d-90a9-b407695001d4",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1cf0850f-59ee-4e41-ad58-bb66af1c89ec"
        },
        "item": {
          "id": "e75ced3c-c786-40e6-a9a3-9ce8d4c7d73c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8e2449fe-2bd1-43e9-a4ed-9698370ed6c6",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "61a1af38-706f-45f0-be72-e90763a02380",
        "cursor": {
          "ref": "58b50413-5028-4c1a-b431-1f2c22109f7f",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "b3e2b017-8406-4eec-9498-5e9fe7eba42d"
        },
        "item": {
          "id": "61a1af38-706f-45f0-be72-e90763a02380",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b29112c7-b302-4c44-9bce-3ae2e2b4c915",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "eb977ba7-18e8-4653-b7e6-6fa3948eafd1",
        "cursor": {
          "ref": "1dd10628-8e8d-498f-87a6-a3b262690eb1",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ae240729-3d6e-4ea2-b701-cb84a1d9df9a"
        },
        "item": {
          "id": "eb977ba7-18e8-4653-b7e6-6fa3948eafd1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7af44897-8f8d-4c87-8f40-d55c6db78abc",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "fb4308ff-b1ec-4f73-9b31-87a3493eeec1",
        "cursor": {
          "ref": "ffa8d509-0b88-4d02-b6d9-d27af1e9068a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "833697fe-7742-4a7b-9413-a3c3299024ca"
        },
        "item": {
          "id": "fb4308ff-b1ec-4f73-9b31-87a3493eeec1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "ed1c7fd7-0f1c-4940-8961-db64417a7c03",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "66401d29-7ff5-4cf5-9f8d-a8de1bf4b51e",
        "cursor": {
          "ref": "55a33acb-2299-4d62-8196-95dc2b161a2f",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "adb3dd48-8af1-4a86-96f7-5da9c231fd93"
        },
        "item": {
          "id": "66401d29-7ff5-4cf5-9f8d-a8de1bf4b51e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2f21f848-31c4-4d52-8105-03d8c7fcd9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7891f944-509d-4cfc-a0d2-78bbf02b3465",
        "cursor": {
          "ref": "f1fb61fe-3320-491f-acfb-7b42bc75d814",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "19a983b8-dff2-4bee-a992-8fce44530d70"
        },
        "item": {
          "id": "7891f944-509d-4cfc-a0d2-78bbf02b3465",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "bfa1ca9f-de20-4736-adea-e1586294e566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4d2949-359d-4fa7-8858-7fb05bdedb66",
        "cursor": {
          "ref": "d26efe4b-80dd-4f8e-888f-c43a9ff466d8",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a40e7441-334a-4f98-8055-ebce31099880"
        },
        "item": {
          "id": "9b4d2949-359d-4fa7-8858-7fb05bdedb66",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f9166b07-0116-4ec8-a385-1c6cef9a5a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f37e85a-0c7b-4186-85f6-d4d690c0d750",
        "cursor": {
          "ref": "de14ad60-823a-4f04-ab61-76917ffe9658",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cf29198b-24ef-439d-a961-832c0d618452"
        },
        "item": {
          "id": "2f37e85a-0c7b-4186-85f6-d4d690c0d750",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "dbb4cb08-1524-4675-b217-6ad99ec45281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f9122f-2df6-4b15-a0f6-3d2bb3b5b774",
        "cursor": {
          "ref": "d8d9aef6-0a61-42b9-9545-93abd14e719e",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f8fd187a-0c2b-42d4-ba8b-8df96c808370"
        },
        "item": {
          "id": "40f9122f-2df6-4b15-a0f6-3d2bb3b5b774",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f5b41f38-0d03-4297-8255-8e11398205ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aded795-ffab-4bc1-aae1-cd3e34a2e58d",
        "cursor": {
          "ref": "8934e55f-0a7b-415a-af98-69a833fc3cb8",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "62dbd65f-3f0a-470e-9c54-b1bcf9eb8964"
        },
        "item": {
          "id": "6aded795-ffab-4bc1-aae1-cd3e34a2e58d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5be0eff6-47d1-4c25-8048-4a6af7b06d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "318bf23d-a2fc-4db5-b9dd-df488e00cfe3",
        "cursor": {
          "ref": "65bfe9b7-b944-4fe1-a017-dbbb7cb3feb1",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "cb48cf19-50f6-4e0b-b3fe-36ac33d3daae"
        },
        "item": {
          "id": "318bf23d-a2fc-4db5-b9dd-df488e00cfe3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "832ea877-5c63-4f0a-b09b-0abf21d17e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151fc60a-ff9e-4438-abd4-22abc4c7328e",
        "cursor": {
          "ref": "816d5f56-a269-4c60-b436-9efddbb68547",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a4ef8bff-5990-4d65-ad0d-b49b4db351d6"
        },
        "item": {
          "id": "151fc60a-ff9e-4438-abd4-22abc4c7328e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d77f8511-7ef9-4cd0-8893-8c22c58aa1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa37109-9efa-4c35-a761-0c05c2e7d87e",
        "cursor": {
          "ref": "4784eb9d-18c5-4eb6-b433-f2e333d9b8c7",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "21c34415-1253-4f11-93e8-3a93d74682a9"
        },
        "item": {
          "id": "6aa37109-9efa-4c35-a761-0c05c2e7d87e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1eacc907-261c-4455-b7c8-e5f13c84f7dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7ab0bf-aefe-414c-b36f-6dbed28df31f",
        "cursor": {
          "ref": "72452f6c-e084-401b-abe2-087e4746ff97",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1281368c-49eb-4b48-a6f4-70bb29935218"
        },
        "item": {
          "id": "aa7ab0bf-aefe-414c-b36f-6dbed28df31f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "481d943d-9b58-4520-a10c-d6c6841d0680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7975bf93-c79d-42fa-9e28-01b3c3b76dab",
        "cursor": {
          "ref": "37e1378e-0294-4696-be8d-a7ff0b65077b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1bddce0f-f5a0-454d-a017-15efd46a3cbc"
        },
        "item": {
          "id": "7975bf93-c79d-42fa-9e28-01b3c3b76dab",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7add0bbf-e02a-4de5-8fe6-dc1ecaed8ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8147c8e-7aff-455c-b648-e79c86860231",
        "cursor": {
          "ref": "80184907-f585-48a5-a7eb-1a13b7e7bbbc",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ec3c45a8-d164-4fdd-a3fb-96e71d6114dd"
        },
        "item": {
          "id": "a8147c8e-7aff-455c-b648-e79c86860231",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "25ce9e43-2fe6-4841-b9f4-9e2f48f1cf8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7402a179-1115-457f-9c1f-f7002ed79753",
        "cursor": {
          "ref": "7667f519-29a1-4bdd-9f33-7c5360536c67",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "72a2712f-df32-47d0-a9e7-989f402e3e9a"
        },
        "item": {
          "id": "7402a179-1115-457f-9c1f-f7002ed79753",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6eee1c78-e002-4857-9675-fb92abb21efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213dac25-a694-4f73-ae79-5e6dac2dfca2",
        "cursor": {
          "ref": "8e5b670a-588d-4ad1-ab7d-f663165778a4",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b574b789-26fb-4db5-a8cb-c0ff4290d4a3"
        },
        "item": {
          "id": "213dac25-a694-4f73-ae79-5e6dac2dfca2",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "089180f5-492e-4980-928e-a000eb024006",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "753efe12-b2f8-4ea1-8b31-dffb99a7e40a",
        "cursor": {
          "ref": "19ffea01-6581-42cb-b204-40de509c6fe4",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "429e35af-eecc-4566-8905-93e2b6614827"
        },
        "item": {
          "id": "753efe12-b2f8-4ea1-8b31-dffb99a7e40a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "96b9c427-5cdc-4dd8-b5a7-f7040b5d76bf",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "351a2c03-faee-4f5e-906e-61c2042279b9",
        "cursor": {
          "ref": "a7886816-d0f3-4956-aeb3-838eab878a88",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6f469837-1a82-4176-a2e3-c148700dda93"
        },
        "item": {
          "id": "351a2c03-faee-4f5e-906e-61c2042279b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a79569b4-affa-4234-8ae6-7fdeb0cb2510",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "efc138ca-1779-4da3-8346-2d54f85ceba9",
        "cursor": {
          "ref": "e5c64d2a-70ac-4982-88cb-0af1abf081ae",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ed60b5c2-62c9-49be-b961-c358841ddbed"
        },
        "item": {
          "id": "efc138ca-1779-4da3-8346-2d54f85ceba9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8e6be01a-1592-46c1-9f2d-441a0bd1ed5c",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bde9a576-afa5-4320-92c2-a3f16482fe73",
        "cursor": {
          "ref": "8804be0b-7106-4d24-a345-44ea35829b51",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9cf5da5c-acb2-49f4-afb5-65d90bd7d291"
        },
        "item": {
          "id": "bde9a576-afa5-4320-92c2-a3f16482fe73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "06a988a0-6d39-4aef-9c0d-d08c3082df45",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "a0c4d477-aa23-48fb-9451-1d93976e92b4",
        "cursor": {
          "ref": "c13f498b-14e3-489b-8497-62fbeb2d024a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "38bdbc31-e723-42e5-a2c1-533e8d4cee07"
        },
        "item": {
          "id": "a0c4d477-aa23-48fb-9451-1d93976e92b4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "518796d1-dab0-4da7-be6e-4e2f35b9fd26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edab8a1-6416-4ce3-a2d0-de698d742313",
        "cursor": {
          "ref": "659ffecd-5cba-440d-bbd1-1013f3962799",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "eb0977c2-a6ba-4cd2-b509-c2d7053bf431"
        },
        "item": {
          "id": "5edab8a1-6416-4ce3-a2d0-de698d742313",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0e7e4da5-2230-4674-b4a2-a97b59265a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f4c78a-d3df-457d-9af3-de4ce80b8448",
        "cursor": {
          "ref": "472c178b-35d6-4d38-97a8-03a33e820056",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "95078fe8-b0d4-42c5-9bfb-25742e6a404e"
        },
        "item": {
          "id": "61f4c78a-d3df-457d-9af3-de4ce80b8448",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "543cb119-c127-409a-bab7-1eb184ef111d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666d175b-adb0-49a5-b713-0ac061136710",
        "cursor": {
          "ref": "6ef2cb24-155c-4c88-adfa-3479b4155891",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "fdc02b4c-45d9-4c6d-a835-2245f23cc580"
        },
        "item": {
          "id": "666d175b-adb0-49a5-b713-0ac061136710",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6e0fa6a4-f4ba-4d42-97fc-e6f458ba1b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2f2535-7c20-41c5-bc62-dc0f66c4db26",
        "cursor": {
          "ref": "6133ae98-b38a-4a78-80c4-ecdcb02a0432",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ae6a196f-9c35-48bd-98c5-103894d7f5e8"
        },
        "item": {
          "id": "ee2f2535-7c20-41c5-bc62-dc0f66c4db26",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3e8436d4-c90c-4820-9294-cc04b099a883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d557e71-269e-4a83-a8b5-21580152b435",
        "cursor": {
          "ref": "af571e3a-3a73-48f6-836c-ea2c82c5a223",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "452399cc-8d91-45ea-8c62-80385f59ee2f"
        },
        "item": {
          "id": "1d557e71-269e-4a83-a8b5-21580152b435",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c22ad047-3387-465c-8c56-e0abc33b89e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f94989-85a7-4075-9034-799335ed226f",
        "cursor": {
          "ref": "e68a57ad-206c-4a17-b14c-a6e30dc76b6e",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d86255b4-4e34-47fe-abc2-368b59fa6882"
        },
        "item": {
          "id": "e2f94989-85a7-4075-9034-799335ed226f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dc29a5d8-83ac-4fd9-9cf4-3314bff98fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5771d6e-5bd4-408e-b44f-327446d3fc18",
        "cursor": {
          "ref": "d4c34ddb-d2f9-419f-9880-14b109641527",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "60bf459b-e4f3-471d-9a31-aae7cc2d5c19"
        },
        "item": {
          "id": "d5771d6e-5bd4-408e-b44f-327446d3fc18",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "239717de-7d01-42ee-a473-dab7786fc243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317c538e-c9fe-4b20-aa74-68b4b5d61d22",
        "cursor": {
          "ref": "81263430-9d34-45aa-ad64-8428096a955b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "174e596a-84e8-4576-ae87-885fb402b93e"
        },
        "item": {
          "id": "317c538e-c9fe-4b20-aa74-68b4b5d61d22",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c80b8351-1915-4560-a1c9-1e1cd042a464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557f1393-0ebe-4270-b791-aa39efb0a810",
        "cursor": {
          "ref": "de8f5c5a-1ee5-4b69-a38e-179e7f5550d9",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "a6cbaf69-69c8-412e-bdb5-c5a795c6848a"
        },
        "item": {
          "id": "557f1393-0ebe-4270-b791-aa39efb0a810",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ad98a854-a5b8-42a2-9456-f6ab95fb4686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fce9d9-9d23-463b-a091-c5268e828d55",
        "cursor": {
          "ref": "27046374-81e8-4d73-ba86-123b3ee3ceb5",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9e04604d-15a2-4ce8-9128-44144963fa61"
        },
        "item": {
          "id": "b2fce9d9-9d23-463b-a091-c5268e828d55",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ceb8e242-5fbf-4dd6-aeeb-33c45ce3169d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe7fe5e-a823-4f25-ba4a-f377540c2752",
        "cursor": {
          "ref": "8c972e6a-1b65-477d-a09d-c32fc0b28d73",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "383849f7-eef1-4ac2-a669-d4136ef00f0d"
        },
        "item": {
          "id": "6fe7fe5e-a823-4f25-ba4a-f377540c2752",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1eec7907-ef59-454d-8a37-01739300ffe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d4339bd-c1b8-4b6e-8e0d-05122b6ad439",
        "cursor": {
          "ref": "34d9902d-28c3-4052-bddf-db3523d2fd10",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "6c0b1350-3a04-47a6-95d2-0a5b66ce0150"
        },
        "item": {
          "id": "9d4339bd-c1b8-4b6e-8e0d-05122b6ad439",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f409da6c-8041-4a55-a55d-32beb0eeecb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc3b70d4-27f7-41a4-ba4b-b5aed2fd7841",
        "cursor": {
          "ref": "8d981b6e-4a95-4f58-bc47-6bc783799507",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bfd0e9bc-cf3b-4987-b0d8-d76f4c5a02d8"
        },
        "item": {
          "id": "fc3b70d4-27f7-41a4-ba4b-b5aed2fd7841",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ef991fe1-eb4e-42a4-a605-26e56cb25ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e58b78b-d816-49ec-a07f-93870d8ae015",
        "cursor": {
          "ref": "a8b122a1-84d7-4404-b96e-66a716da0d17",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c9a91bdd-6f8c-4032-8ede-27d5544ebaba"
        },
        "item": {
          "id": "7e58b78b-d816-49ec-a07f-93870d8ae015",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e1307c47-7e35-41e7-a183-704bd3920b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92ad8b6-e857-4890-ace2-fc66855dc70e",
        "cursor": {
          "ref": "dde1631d-15eb-4c7c-a4cc-9a28de52aa4b",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2c29a3e3-2f19-4282-a77a-988790bb3418"
        },
        "item": {
          "id": "b92ad8b6-e857-4890-ace2-fc66855dc70e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "aa2ca4f7-1449-425a-871f-a229ebb940eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e84b8e-311c-44b1-a670-4ed745981523",
        "cursor": {
          "ref": "7aa210f5-679c-41bd-9887-c8209e54f7eb",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "64fc02cb-e0d7-4b6d-88bb-905c301ee851"
        },
        "item": {
          "id": "a7e84b8e-311c-44b1-a670-4ed745981523",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7a1e8087-1382-4f29-9354-25d77561b454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a520db4d-52fe-4a39-a609-4b9100e15851",
        "cursor": {
          "ref": "b7ff1207-222e-40f3-91c1-b935af1a8a6f",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "320d7620-63e8-4630-b0af-d2d93901cd49"
        },
        "item": {
          "id": "a520db4d-52fe-4a39-a609-4b9100e15851",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f42bb43f-b29d-46c3-a2d0-df301d121adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6646d153-7ae9-4923-a95f-58e66b095198",
        "cursor": {
          "ref": "cba9dd29-a1bc-41f1-a08f-38387e68d642",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b6f396df-bb12-4b38-8595-5852b4619cc0"
        },
        "item": {
          "id": "6646d153-7ae9-4923-a95f-58e66b095198",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1a7b3d3f-2ecf-42e4-b72d-9b6898291396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7307ef-bc74-44f5-808e-bea88fe3ce73",
        "cursor": {
          "ref": "9d66ad8c-ae23-4953-b5cf-7dc54713bef9",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b7c48ccc-0d56-4b9a-8ef8-99520c48e4c2"
        },
        "item": {
          "id": "6d7307ef-bc74-44f5-808e-bea88fe3ce73",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6d6e4e5e-cfe3-41aa-849a-6e2c6b5b7e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf2ccb0d-a28f-4892-9629-76d691d3e3db",
        "cursor": {
          "ref": "a593a720-8aff-43b3-ac5c-3740e510ee4b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "413c4985-17b1-433c-aa11-4b6f3366fd5f"
        },
        "item": {
          "id": "bf2ccb0d-a28f-4892-9629-76d691d3e3db",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6b8305c4-1451-4fd3-a019-b7e1b5400b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac56771e-9a2e-4ab3-9750-f75579654b97",
        "cursor": {
          "ref": "75b8da15-111e-48b7-83af-5e8991ae99d3",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0098f154-74d7-4c0a-bef3-882ade3ac5a6"
        },
        "item": {
          "id": "ac56771e-9a2e-4ab3-9750-f75579654b97",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b5fd3b87-e78f-4a9b-88ab-2b8a2c0253b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d95a675-fe2d-4958-a468-f2d6e7c5b791",
        "cursor": {
          "ref": "be32a212-cea7-4f31-a3e8-b7ea3bc3eb0e",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d95d1d2c-cf96-4d2f-9b7e-a4f920e3b435"
        },
        "item": {
          "id": "6d95a675-fe2d-4958-a468-f2d6e7c5b791",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "db16d87f-e4ad-4db1-ba63-ce7c42ba5b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f1756f7-4fdc-489b-9ec4-5bfd31920d25",
        "cursor": {
          "ref": "5593a169-2fbf-42c1-8241-6320c79f99c5",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a15351d9-b6ee-469b-b416-ff3275a63b08"
        },
        "item": {
          "id": "9f1756f7-4fdc-489b-9ec4-5bfd31920d25",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "63b653ba-eded-4555-bfe3-ec8a1eff429d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b056aa6-95b4-4060-a2ee-2ca1e2ab216c",
        "cursor": {
          "ref": "a4b62ac7-0503-4f4e-a18b-223925225db0",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ac0e0aae-b7f2-43bf-b05d-d0723b973533"
        },
        "item": {
          "id": "6b056aa6-95b4-4060-a2ee-2ca1e2ab216c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "87d7248a-2110-48ec-ae4f-7a64c0bc4b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47b5e7a-a319-4dc3-962b-9238fcee1bdb",
        "cursor": {
          "ref": "1667b5cb-bc8d-4c2a-a430-c96af502cabd",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3eefcbc6-e3b2-4222-bc18-4a094f19bb6c"
        },
        "item": {
          "id": "a47b5e7a-a319-4dc3-962b-9238fcee1bdb",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "bf26b575-b686-45c2-b008-7563a40c4d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4bc34df-054a-4aa1-9a3c-52a77e2152ec",
        "cursor": {
          "ref": "d8b485ca-8071-4a0c-b34d-3d090420dfce",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8c74ef53-f3bf-440b-a2a4-715640a76ed4"
        },
        "item": {
          "id": "d4bc34df-054a-4aa1-9a3c-52a77e2152ec",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "e61d2dc7-2b34-4668-b18e-8fcefaec2e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80829db-5ad5-4f7b-a704-c1ec69a6b7b4",
        "cursor": {
          "ref": "db15dba6-97d2-4740-8c68-c59d9713d61a",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9cddace9-e2c1-4510-a517-829ccdf1609c"
        },
        "item": {
          "id": "a80829db-5ad5-4f7b-a704-c1ec69a6b7b4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b5427439-02c3-4539-819d-a05f71054ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc51ebeb-134f-409d-b047-b96d6080d5e3",
        "cursor": {
          "ref": "916e0c60-4298-474a-bbbf-869620f5a6be",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a00ccff8-a495-4028-9388-98e275f86ef7"
        },
        "item": {
          "id": "dc51ebeb-134f-409d-b047-b96d6080d5e3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "74cc98c5-923d-4c3f-9089-7969cee862eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0416b5-2cc5-467f-a8a2-c9f4b5d4cc1e",
        "cursor": {
          "ref": "2f41ce8b-95a6-453a-8b5b-783268f8df7a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "141bc651-d7db-4525-895d-1f4e726d3006"
        },
        "item": {
          "id": "aa0416b5-2cc5-467f-a8a2-c9f4b5d4cc1e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9a1ff390-7e90-4b7b-9600-e89c011f880a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b155423-43e8-42a1-97c2-138247189344",
        "cursor": {
          "ref": "66043c0a-7edf-4107-8c0f-7be3ecdb8d73",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d4bee39d-c35e-4a78-a034-abea21a4725a"
        },
        "item": {
          "id": "1b155423-43e8-42a1-97c2-138247189344",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c2c0f04c-eedf-4327-be84-12d336aee617",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bd6ddb3-fd00-4f77-88c9-3bb657a28b30",
        "cursor": {
          "ref": "1b585b2a-d6d4-494d-8f5d-cac74922013e",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bd864a3c-1c98-4d4c-a35b-6184642096a8"
        },
        "item": {
          "id": "4bd6ddb3-fd00-4f77-88c9-3bb657a28b30",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fd5e5c27-8902-4a6c-be31-c8375904da06",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af3fc03-ff65-4352-8e71-4a4bd1634782",
        "cursor": {
          "ref": "27a23937-da10-43f2-a196-89c38dee62dd",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "33e1f8cb-ba8e-4ddb-971f-b864c2df1ccd"
        },
        "item": {
          "id": "6af3fc03-ff65-4352-8e71-4a4bd1634782",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "714dcaca-43e5-4927-b0e1-59888c3286bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "aa267c7e-4f76-4d55-beab-fe4da5d00e7c",
        "cursor": {
          "ref": "9256d307-4377-4f03-b6a2-6943de6a833e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7493f913-11ed-4522-9889-46e54023855a"
        },
        "item": {
          "id": "aa267c7e-4f76-4d55-beab-fe4da5d00e7c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c746f06d-45a9-4687-97dc-019b47f47906",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba64dc8-d367-4a24-8821-29986e04a290",
        "cursor": {
          "ref": "871f830f-86d8-4cde-9814-31b82c2e905a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "73eedef2-5522-403e-8914-0e352518d922"
        },
        "item": {
          "id": "dba64dc8-d367-4a24-8821-29986e04a290",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0e655f4d-c9ff-48bb-84ca-30ca952e0d9e",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "76a059ea-465c-4ebe-9bf6-3f2e661f672e",
        "cursor": {
          "ref": "e5c2b598-d6da-4b55-b5a3-d2dc099fa520",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c8cb09c3-f7d7-4720-a9a6-ffdb69150bd5"
        },
        "item": {
          "id": "76a059ea-465c-4ebe-9bf6-3f2e661f672e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "532139cb-6a53-4a6c-b596-4ccda9a13543",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcc9141-3904-4326-aa03-7f6b2730f065",
        "cursor": {
          "ref": "e5a93852-eb2d-4d73-998e-31943676c78d",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "93b2f56a-5c15-4762-bccf-2e8e87167604"
        },
        "item": {
          "id": "4fcc9141-3904-4326-aa03-7f6b2730f065",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b7784c08-0112-4714-8ded-89e59ee7c602",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "14bfe41a-bc1d-4c82-9e62-2bb0500af97b",
        "cursor": {
          "ref": "e5f91bcd-864e-4039-baa4-20a97ce97791",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7ae5ff0e-5270-4569-b2b2-028a0ce6bc8e"
        },
        "item": {
          "id": "14bfe41a-bc1d-4c82-9e62-2bb0500af97b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "658187db-75e4-4bfa-9bfb-d64d68e48b1b",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-31T00:38:33.535Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-31T00:38:33.535Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1a35b1af-91b1-4a05-8647-581ed6cad690",
        "cursor": {
          "ref": "a6b1eb17-c647-4a12-9cbb-85a616d933ae",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "af2c70cf-91c9-47db-a765-8cee9c15f2de"
        },
        "item": {
          "id": "1a35b1af-91b1-4a05-8647-581ed6cad690",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "96fba27e-a342-45ca-b1d7-ea5f7f2e774a",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31805056-ad16-4973-8fa8-ac677ee6abd3",
        "cursor": {
          "ref": "82f1ea58-a81a-498e-a86d-b8d9a12a86fe",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "350f2641-f12d-4109-ab36-05bfd74335b1"
        },
        "item": {
          "id": "31805056-ad16-4973-8fa8-ac677ee6abd3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9a59b984-ca90-482c-8702-3e9fd8dc8539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c26ab5a0-b545-461b-bbfa-13de7e5e58d0",
        "cursor": {
          "ref": "b497d539-b980-4f6c-918c-4bd728380705",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5f96b0f6-8b14-49a7-a09e-94bc35abe9f7"
        },
        "item": {
          "id": "c26ab5a0-b545-461b-bbfa-13de7e5e58d0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "81196864-4314-4378-87a1-79eff8269493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74526cb4-47b0-428f-af53-4042b2bd5e92",
        "cursor": {
          "ref": "5964c22d-20a2-4a67-8d5b-0fec463323a6",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "43634aed-347c-4828-aa5b-dcd761673f0f"
        },
        "item": {
          "id": "74526cb4-47b0-428f-af53-4042b2bd5e92",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9915cc8a-f68b-4420-b37c-c92412654734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90aec577-3f09-47a1-93a3-43f8680bab45",
        "cursor": {
          "ref": "dd4de030-9598-493c-a72e-b0553a67d02c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1f1dc947-87a2-4f6b-a4a2-38c3a6d1a129"
        },
        "item": {
          "id": "90aec577-3f09-47a1-93a3-43f8680bab45",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d2b59b99-4cdc-499d-9bb3-1d77368c8138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3431b0-5b7b-479f-bf96-789303f941ed",
        "cursor": {
          "ref": "2992e581-7ab8-4fc1-b874-a4d390bf2f87",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "02ebcfa2-4856-433a-b4ba-ab48ea8d6be3"
        },
        "item": {
          "id": "3c3431b0-5b7b-479f-bf96-789303f941ed",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f2de1589-d92a-4b49-8680-d41bfb1d6a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4d35d1-688f-41c9-8dfa-6abc09fe5520",
        "cursor": {
          "ref": "054ce4aa-5e21-4082-848f-39c58c1a0a05",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "2bf1a9b0-0b35-4670-b34e-c3dfc16ca133"
        },
        "item": {
          "id": "1e4d35d1-688f-41c9-8dfa-6abc09fe5520",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "94051d6c-289a-4d52-a598-2a7be1d078f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99561b6c-c728-4a07-a262-60aef85a9382",
        "cursor": {
          "ref": "318fa237-ad74-4c5b-a26b-c189d9e83819",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a18c22d7-6f1f-4075-b3cf-6474a080ba77"
        },
        "item": {
          "id": "99561b6c-c728-4a07-a262-60aef85a9382",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4b363fc0-d921-4d88-8977-b6c7fe4aa8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fdc018-757d-4a08-b1c6-86ed72b73bbb",
        "cursor": {
          "ref": "c433ace6-9211-4296-a49f-4e6f90385bdc",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a74b0660-22c2-4e9c-9e9a-b55ba1bca7ce"
        },
        "item": {
          "id": "b8fdc018-757d-4a08-b1c6-86ed72b73bbb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "64d324dc-6b95-4340-a3c5-35a2be7ebbd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7d8383-a50e-4b7c-ac46-0403337ef0d8",
        "cursor": {
          "ref": "39c04063-2771-4741-a263-0228d52abdd9",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b88aea29-8037-4875-8281-992eb5507e9b"
        },
        "item": {
          "id": "5d7d8383-a50e-4b7c-ac46-0403337ef0d8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c5d92220-ecd0-4915-bc03-119f87cc13fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8241ae-2bff-4ec9-b3e7-37340f32bd0a",
        "cursor": {
          "ref": "9bacd4a6-d538-4b32-9f9e-ba37c1c7fc9f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c2568af8-1503-4ad2-ac4b-20083a14e643"
        },
        "item": {
          "id": "2d8241ae-2bff-4ec9-b3e7-37340f32bd0a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "21ba7b1f-a6c7-4a70-8fa9-f008030c2c63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a9c5587-b467-48ab-921c-46edf290edde",
        "cursor": {
          "ref": "664b6b95-73b5-4c9c-b173-80d0f05077ff",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8711d618-abcc-46d5-9e41-81b2d3f707b9"
        },
        "item": {
          "id": "3a9c5587-b467-48ab-921c-46edf290edde",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "190e6093-5c01-474f-a088-7fe36b556804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b74096-fae2-431e-a69d-63ae8461bf34",
        "cursor": {
          "ref": "fb11c7f2-824e-4530-b8fc-dadb22920a91",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "86793734-860f-4d61-b96f-b876d04a671c"
        },
        "item": {
          "id": "75b74096-fae2-431e-a69d-63ae8461bf34",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "93568b8a-1e29-461b-a9cb-27fb8a0ef2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe7a322-3503-43fc-8035-6707d7bd824d",
        "cursor": {
          "ref": "1627745d-becf-4395-bad9-8547563f9b75",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "09c92713-bbca-4188-81d2-4bd359f6a600"
        },
        "item": {
          "id": "abe7a322-3503-43fc-8035-6707d7bd824d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d34cfd1d-69dd-469a-80ed-587b1e5f3ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7faadc6-01e6-46d4-a2ec-a50e58ce72d4",
        "cursor": {
          "ref": "1c044335-eee5-4744-9087-c51177ec88a6",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "bedb4e8c-7890-4112-8835-73b02fc800a4"
        },
        "item": {
          "id": "f7faadc6-01e6-46d4-a2ec-a50e58ce72d4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "41731352-51e5-4436-8dd0-c8700a3ac47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cd369e4-9b6e-476a-bad3-f05aeef628d4",
        "cursor": {
          "ref": "808aa085-53b6-4a83-9844-80c374faa1b2",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "0c89d440-3883-451d-9483-a3e23872c97a"
        },
        "item": {
          "id": "1cd369e4-9b6e-476a-bad3-f05aeef628d4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "acf506e3-0041-47b5-bb99-e6ea8f2a1433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47101c4f-1e75-477b-b9e7-f9b63d6674cd",
        "cursor": {
          "ref": "7d494e10-721d-431e-bf96-44232c7f1f53",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "022fd576-7a54-4671-a62a-44b107cce6eb"
        },
        "item": {
          "id": "47101c4f-1e75-477b-b9e7-f9b63d6674cd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "eea6ac42-acab-4709-9683-f0d415e24cea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeda4605-7b74-48cd-92c9-fb6d8ece7466",
        "cursor": {
          "ref": "5dc9a8e1-aaff-4a83-91ad-92d2759f547a",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "849f7379-0208-4b7b-bb1f-613d0d056f2c"
        },
        "item": {
          "id": "aeda4605-7b74-48cd-92c9-fb6d8ece7466",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ae47b964-89a3-4d0b-b13f-286f3b27b51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6025bb75-e71a-4c73-b0f5-a10dde3d36e2",
        "cursor": {
          "ref": "251757dc-abe8-42de-beb9-5dae49a3e35f",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e0f503c9-3585-4156-a252-d66185fd7946"
        },
        "item": {
          "id": "6025bb75-e71a-4c73-b0f5-a10dde3d36e2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9119f78e-63e0-4f41-bb49-b4088f8daf93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399cb23b-bc2b-4f8a-b5b0-0483167fbdd8",
        "cursor": {
          "ref": "e21050cf-88c2-4591-8eb4-0b48d300c982",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7b0cf043-76db-4ca8-9da9-e87dbefcef61"
        },
        "item": {
          "id": "399cb23b-bc2b-4f8a-b5b0-0483167fbdd8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "120465f6-651c-40dc-a8c6-95c3761b7528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbaca89e-8953-44b9-b4ee-0d3284fc9aec",
        "cursor": {
          "ref": "eacb9f54-63ca-4a7e-8a7f-f8f2ed21fd9d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "eb8cc406-7493-4c78-9db8-29028828b40d"
        },
        "item": {
          "id": "cbaca89e-8953-44b9-b4ee-0d3284fc9aec",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "bc9c35f9-bebe-473d-b97e-88db82ad14d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15701a3-5bd8-4876-94e3-196fb242f825",
        "cursor": {
          "ref": "ac84f64c-1843-441e-bf8a-1d31c03d718a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b96606ff-11bb-4079-81e0-203ef4009a24"
        },
        "item": {
          "id": "c15701a3-5bd8-4876-94e3-196fb242f825",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f52ae15a-16c5-44c9-8115-29e79b4630e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62d45da-5d0e-45f3-afad-3508af40bae1",
        "cursor": {
          "ref": "9ad6b66e-59aa-4c48-8b7b-db907d66979d",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "259f3ff7-8f17-4e24-ac10-3aeddfeb4d21"
        },
        "item": {
          "id": "b62d45da-5d0e-45f3-afad-3508af40bae1",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "25b7ce48-e9df-43a9-8286-c026faccccb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad590a98-4ae1-4955-8292-fabea121804a",
        "cursor": {
          "ref": "284f44c5-205f-428d-a2bf-1bb3dc233f97",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1650b638-f5cc-49b7-9cfb-6caa25ed559b"
        },
        "item": {
          "id": "ad590a98-4ae1-4955-8292-fabea121804a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "14dc96eb-0df5-4cb7-8c44-e10244d44b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de21bf5-a55e-419a-a472-2502e9dc92b0",
        "cursor": {
          "ref": "b68bbdd3-83cc-4ee8-a1a1-263d687f064e",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "19235d68-f585-4299-af9e-f6d074d3e0b3"
        },
        "item": {
          "id": "4de21bf5-a55e-419a-a472-2502e9dc92b0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "155bd7ae-c791-4723-bd83-b37bf2a1cb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f09368-f249-4a4e-bd04-f405341179c6",
        "cursor": {
          "ref": "9f742d97-3f2e-46bf-9a21-db228233d340",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0d80d975-0890-47f3-81b4-b9c289e5d1c0"
        },
        "item": {
          "id": "58f09368-f249-4a4e-bd04-f405341179c6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9ec23ff3-f3d7-4ff9-a036-c257db636385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5734dacc-726e-4de2-b73d-d6ccc030dd0d",
        "cursor": {
          "ref": "7526643a-f068-42ec-9e3b-44069a8cec07",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "edb8e749-b086-458e-b51b-532b539a9382"
        },
        "item": {
          "id": "5734dacc-726e-4de2-b73d-d6ccc030dd0d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7624e750-1707-4ce9-b4eb-da07e5ff1ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8420d517-1aa5-496a-b372-736362803244",
        "cursor": {
          "ref": "5d9e8d74-64f4-4fc2-8de2-44fc443b55e3",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7c0d6b61-d867-4d0f-8cff-6fb055795e1d"
        },
        "item": {
          "id": "8420d517-1aa5-496a-b372-736362803244",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ddb02d69-9cfb-4d35-beae-f0b4e9eb444a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5488f6-dbec-4e88-a8b3-992187779fe4",
        "cursor": {
          "ref": "f13b02f7-a7b2-4836-a3ef-f7f20ce84303",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "43ea52d9-14f3-4307-a2ee-c9ecdb8d1005"
        },
        "item": {
          "id": "8e5488f6-dbec-4e88-a8b3-992187779fe4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ff0ea1b9-0dbe-4b0c-9e78-e267bb34491c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763ea4bd-b30c-4688-b509-4e463da6d22b",
        "cursor": {
          "ref": "4085965b-ec56-46aa-becc-0d503330b2e5",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "59ed9d67-6fb5-4cc5-bf5d-3bf8354dcb57"
        },
        "item": {
          "id": "763ea4bd-b30c-4688-b509-4e463da6d22b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6fedbd45-c8e5-45bd-8a02-ea3820464b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae9a669-0ce8-4c40-b07d-c0cd546d52fd",
        "cursor": {
          "ref": "43b4da0a-fe6c-4ff6-bca2-e83c43e55131",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a0b97d39-a42f-485b-911a-aa8318416bee"
        },
        "item": {
          "id": "dae9a669-0ce8-4c40-b07d-c0cd546d52fd",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e54c59f9-847d-498a-bdfc-ed7c5a7e9259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11a90a33-2c55-4c0d-9dc7-423ae00723d9",
        "cursor": {
          "ref": "2d0403df-3ef8-44eb-a6ec-1bf4d047a2c2",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1e41f51d-628d-4cbd-8c6a-e78109943fa5"
        },
        "item": {
          "id": "11a90a33-2c55-4c0d-9dc7-423ae00723d9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3131670c-fd88-4ea9-83e3-d6634dbc53d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b696145-5ce0-41af-a0d0-f68367f06e66",
        "cursor": {
          "ref": "edb48160-3fe7-491c-8a91-39700000c250",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5fb6d147-b5ea-4643-a592-19820c9ea74a"
        },
        "item": {
          "id": "4b696145-5ce0-41af-a0d0-f68367f06e66",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "e94d4575-3e31-42fe-8e75-1cf93b6390de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d873d3-086b-447c-a94d-9c01162e8385",
        "cursor": {
          "ref": "039a36f8-e091-47e5-8768-b7dd7f8e5822",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d6d342e9-a4a1-4e44-9d95-8eba7ebc73d6"
        },
        "item": {
          "id": "01d873d3-086b-447c-a94d-9c01162e8385",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "88c9d653-94fa-4ede-937e-7bbacf3ef197",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f5ac4e-dcfd-488c-8732-08a44b032f9b",
        "cursor": {
          "ref": "b072362b-e5c6-47f1-a514-bde9631a0ad9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "936ca89e-4882-46b2-8d48-141cd8e17e5d"
        },
        "item": {
          "id": "57f5ac4e-dcfd-488c-8732-08a44b032f9b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "99d7944f-2964-414f-ae00-b52cbee9a3ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "880d9128-9edf-4a25-a39a-e17cb7d20bc5",
        "cursor": {
          "ref": "a5f835a7-a066-4453-9bb8-f63eb507ed58",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "164ea491-3ae7-469c-a068-a54edfff386e"
        },
        "item": {
          "id": "880d9128-9edf-4a25-a39a-e17cb7d20bc5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3f553a09-d9a4-4016-b245-95b6caa2dd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d61274ba-f494-4891-9d40-801eaf1fccb4",
        "cursor": {
          "ref": "6d680a3c-8ca8-4124-a4da-992a4fbf343f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "4aaa815d-8348-4a7f-955b-ab8d0c262e68"
        },
        "item": {
          "id": "d61274ba-f494-4891-9d40-801eaf1fccb4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "52bbadb7-dee6-4618-90ca-16e5b1de113e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba855da-0d09-437f-8563-bf36135c4e93",
        "cursor": {
          "ref": "073523d5-0196-41a5-8bdc-ab160f85a93e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "970413af-cbec-482c-8418-ac795598a5be"
        },
        "item": {
          "id": "0ba855da-0d09-437f-8563-bf36135c4e93",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f4869b88-db49-49c5-9ac1-e3f42e877124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c590f8-d465-47af-9b7a-cf8610d59a0f",
        "cursor": {
          "ref": "b9ca16eb-9265-4c66-846c-ec6ce61b396d",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "bb650e74-682e-4aff-a923-1284a74b5dde"
        },
        "item": {
          "id": "47c590f8-d465-47af-9b7a-cf8610d59a0f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "715e6f37-322e-425d-94d1-565c65b75391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a5377e-fdcb-40df-a1a5-32421af4d734",
        "cursor": {
          "ref": "2cf86770-c491-4c80-802c-c0964ba72b6d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b14823f9-f833-4930-a5bf-b35f915cbb0b"
        },
        "item": {
          "id": "b4a5377e-fdcb-40df-a1a5-32421af4d734",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9fa3cc93-ff30-4dd6-9164-f8806fd3e62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e12feaf-edbc-4942-8985-d167ccd1b2e1",
        "cursor": {
          "ref": "218ca255-4615-44f9-a0ae-0d327e1e996b",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "0d35c145-77fe-4087-bdf3-b0224e3ddb43"
        },
        "item": {
          "id": "1e12feaf-edbc-4942-8985-d167ccd1b2e1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4ccb2a5d-44cf-406e-849a-7ac7773bb599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87796326-5526-476b-a662-5f0994508c80",
        "cursor": {
          "ref": "fa12eb55-42ab-42ac-8e25-e60d723ed31c",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "391042d4-eb32-4566-bee1-f393748d73bc"
        },
        "item": {
          "id": "87796326-5526-476b-a662-5f0994508c80",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "24860d83-c532-4630-adb0-6bbd74a40e26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc38d0cf-5aa6-4274-9027-f9844bb91a16",
        "cursor": {
          "ref": "1fee84de-2aff-46b2-a869-fd429c99df5b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "40268d7c-3202-4d19-bf75-9dda807122e9"
        },
        "item": {
          "id": "bc38d0cf-5aa6-4274-9027-f9844bb91a16",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7543d51a-c50a-4b33-bc80-f0d50c084b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7642db2-0d45-4b08-98c0-c0d266e9dc4d",
        "cursor": {
          "ref": "ad5c2cf4-5f7d-468b-b154-bdc3b2131959",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "17c4315f-dbe6-4867-aaae-d48528690a68"
        },
        "item": {
          "id": "c7642db2-0d45-4b08-98c0-c0d266e9dc4d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2a448739-79d8-4d7f-844b-0ef6c4e4f3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef9e066-2502-4abb-bec0-cb8bb676796b",
        "cursor": {
          "ref": "ac8caa9c-01f0-4391-aaa5-428f2048c4a3",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "43a9cb93-dc3e-4a20-887c-7972173c911c"
        },
        "item": {
          "id": "bef9e066-2502-4abb-bec0-cb8bb676796b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "14471d1c-d2ca-4bf3-9c35-ee926aa230ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46e02ef-3dee-47ae-b1d5-e749261db160",
        "cursor": {
          "ref": "1a0b5631-2ace-4d3c-884d-1ed02acd5699",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "06125a2f-3a5d-4179-9e1e-45ad6f1d4604"
        },
        "item": {
          "id": "e46e02ef-3dee-47ae-b1d5-e749261db160",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "80e94f65-58cd-430b-9488-065303f18fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d97681d-f036-48bb-a66e-f0a4d62ca7e4",
        "cursor": {
          "ref": "8725c6e7-9262-4082-8487-03458e9cb05a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "40f68cfe-3776-4ded-b0ab-16e57e676b1c"
        },
        "item": {
          "id": "6d97681d-f036-48bb-a66e-f0a4d62ca7e4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "28e15318-f249-4ffc-b42f-3e48a47023fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b53f91-19d5-4c90-ae3d-fe9b5d973911",
        "cursor": {
          "ref": "34f358b9-360c-4a0f-862c-13dc40474903",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "d163c3d5-787d-43fa-ac98-b000647ac78d"
        },
        "item": {
          "id": "d2b53f91-19d5-4c90-ae3d-fe9b5d973911",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "967dac6e-c020-48f8-84e9-c6399f85ea07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d7cc25-4d8d-4380-b21e-519d6d174d43",
        "cursor": {
          "ref": "aba44630-cf69-42c9-822c-34492e0c15e8",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "ca6148ee-1452-412c-ba9b-e286d0d9221d"
        },
        "item": {
          "id": "37d7cc25-4d8d-4380-b21e-519d6d174d43",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "54d4e7b7-bb7b-4b61-bc15-3bc9e89aa59f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3255fb-2b05-4704-b1c3-4aec3f6d7dca",
        "cursor": {
          "ref": "ef29476c-d9cd-40d5-9540-f392fe3f4809",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7a7054d4-e3cf-4812-bce6-fca48f5ed4a2"
        },
        "item": {
          "id": "dc3255fb-2b05-4704-b1c3-4aec3f6d7dca",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "08b858e5-6c64-4e14-acde-bb560c26f706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81322bd-cf0b-4125-b586-31a4635486a3",
        "cursor": {
          "ref": "f3429445-2dfb-4ce2-9f5e-e42ce096a372",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "efeb6ebe-d4a6-426f-90d4-304ceb05c70a"
        },
        "item": {
          "id": "c81322bd-cf0b-4125-b586-31a4635486a3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ea229be2-5625-49e5-a144-ea52eab613db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72161fef-ed2b-4587-9d22-2befaf27b3a8",
        "cursor": {
          "ref": "85aafc77-ab42-4425-bd4e-53e9344d5dcb",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e63791ac-4759-4021-b4a7-e4ac33c625ea"
        },
        "item": {
          "id": "72161fef-ed2b-4587-9d22-2befaf27b3a8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e7233375-a82e-4326-b2a6-8764e42cb85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f091f78e-0fe7-415b-ab62-61ca81433d32",
        "cursor": {
          "ref": "aa1e33e0-b6a2-40f4-b597-d1ff49a1f188",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cceda847-ceca-4f73-b63a-7e576c3a51b2"
        },
        "item": {
          "id": "f091f78e-0fe7-415b-ab62-61ca81433d32",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b4ed9fda-88f5-4a36-bac5-833302f16168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0dce1aa-293c-4da6-9117-344c0acfd471",
        "cursor": {
          "ref": "03f12b94-1d98-4c79-bfd9-cfa620b433fc",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "162a5b64-abc9-4b97-80b4-afed9c55cc1a"
        },
        "item": {
          "id": "c0dce1aa-293c-4da6-9117-344c0acfd471",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e11faa37-f0a9-4632-880f-6674d36fbebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292ebf1d-502f-4c48-a0b5-ffa3ef928aa2",
        "cursor": {
          "ref": "c407257f-3b43-4cd8-bd12-df5ebd0432dd",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "adbb9938-0f7d-44fb-9db7-cb4e86b31fdf"
        },
        "item": {
          "id": "292ebf1d-502f-4c48-a0b5-ffa3ef928aa2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "67d6a3ba-5945-434a-b689-87ecd0bc6c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5becadb8-7ac4-4918-ae3e-81f322114088",
        "cursor": {
          "ref": "9181d2e2-02a9-454e-b558-a302ba211f91",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8c8c4b05-ed5b-4bd6-bcae-657bd64f74a0"
        },
        "item": {
          "id": "5becadb8-7ac4-4918-ae3e-81f322114088",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "03cd66dc-c22a-4726-a27e-8e4ecbee8478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297d77ca-7bfb-4bcb-a083-9f42f9600d5f",
        "cursor": {
          "ref": "7a05429a-d11b-46f4-b90c-7ed317b353f5",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "26911545-97d5-4819-80db-d7f0ae7e4db9"
        },
        "item": {
          "id": "297d77ca-7bfb-4bcb-a083-9f42f9600d5f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9a07ade9-13d8-4e2a-a235-27da85f620f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d2d5ef-bcd4-49ff-afb1-3021205260c3",
        "cursor": {
          "ref": "e0804b25-9c20-45e9-961b-8258852f2cae",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "959ba8a3-002e-491e-b7da-e7302f6cd7ca"
        },
        "item": {
          "id": "26d2d5ef-bcd4-49ff-afb1-3021205260c3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cef97706-f9bb-4d33-b360-e5127325cdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920130cf-0408-4e10-96a4-ffde85ee79dd",
        "cursor": {
          "ref": "d961c4a7-b49b-4279-9888-16015b12c028",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "50728efc-ba9a-4a99-bec4-f5e15eca914f"
        },
        "item": {
          "id": "920130cf-0408-4e10-96a4-ffde85ee79dd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "44461036-b611-4ff3-ae14-5ece45b541a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad06a473-d079-462f-8db8-09da6368de6f",
        "cursor": {
          "ref": "516ae1ef-ec92-470e-8683-4bcc8254a0cb",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "44a9ce70-b95d-40a0-911a-441dada2bfe2"
        },
        "item": {
          "id": "ad06a473-d079-462f-8db8-09da6368de6f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ceef1051-bd7b-42a6-aee1-c2d23cc18a8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa339ee-28c2-4dd7-a019-814685d7d927",
        "cursor": {
          "ref": "16c8c77c-b5a9-4843-8cd9-3b123e5835b9",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ab6f4a8a-ddc2-44ac-b0df-be0544e3580d"
        },
        "item": {
          "id": "7aa339ee-28c2-4dd7-a019-814685d7d927",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "75cb3d39-045c-4218-93df-55efc729069c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52b3e19-3803-4f97-a165-616f5a18de64",
        "cursor": {
          "ref": "c8ff0a25-ca74-41cb-8e0a-f5476b68dc2d",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1c6cc79f-9f3e-47fe-a4b8-3b2128325527"
        },
        "item": {
          "id": "c52b3e19-3803-4f97-a165-616f5a18de64",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cdf16585-5e5e-4a0e-879f-71e49f404136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb42950-e051-4976-84b2-049708686ec4",
        "cursor": {
          "ref": "ee1f31bd-c8b3-4fe5-a859-2f59ee78e359",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2886bd8b-0923-40ae-94ba-0eae194c00dc"
        },
        "item": {
          "id": "ebb42950-e051-4976-84b2-049708686ec4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "8f8af089-d792-451a-b640-3c1a1557137b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25b6746-2908-4681-9982-51b3c0533069",
        "cursor": {
          "ref": "07d66ec4-2a51-42ca-98eb-c2355cb5ac95",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7b77b23a-5fcc-4ee8-b010-e1a0ec2497ff"
        },
        "item": {
          "id": "d25b6746-2908-4681-9982-51b3c0533069",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0a1277dc-66e1-4421-a4b1-3aaa078cc6de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41803e0-7fc4-456b-82b0-46b46a11090e",
        "cursor": {
          "ref": "431ff152-795a-47df-8144-8b6133fff0c7",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ed063cff-c488-49ca-a717-879be34cca0b"
        },
        "item": {
          "id": "b41803e0-7fc4-456b-82b0-46b46a11090e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "a502e7be-fd73-4216-9a9a-814464de8f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02818816-6bc8-4414-b9e9-c437d29adeb7",
        "cursor": {
          "ref": "bbfc6a21-ab1d-40ad-b180-9acdb2956aec",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "901dc886-9fa9-486b-8cd4-4c19958e6359"
        },
        "item": {
          "id": "02818816-6bc8-4414-b9e9-c437d29adeb7",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d698b92a-06bc-4085-9ca4-1b2283deff18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a9d5bd-dd45-401e-916b-2f50ac0024c6",
        "cursor": {
          "ref": "5795f4ae-c558-4753-a51f-60554c8d95b4",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3c8ba559-5b06-45a7-b44c-eee2a7c201d3"
        },
        "item": {
          "id": "b6a9d5bd-dd45-401e-916b-2f50ac0024c6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ed58c0c7-a698-4f99-9695-8047806791dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a6c2d7-506b-4794-be94-fc10e9321899",
        "cursor": {
          "ref": "8f5423df-7a6b-434d-9e8f-f53fb5d60f15",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "83996742-5c60-446e-8677-64362cd79e9c"
        },
        "item": {
          "id": "14a6c2d7-506b-4794-be94-fc10e9321899",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "e8818806-ef78-4a84-84dc-bf1909b40735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47f64712-a892-4337-9191-2b550a5dd591",
        "cursor": {
          "ref": "fce1dc98-6edc-4046-b126-b88089bf664d",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d84cc944-2c87-4843-886f-571f33914cf5"
        },
        "item": {
          "id": "47f64712-a892-4337-9191-2b550a5dd591",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "cb802c19-a417-4ae9-8706-fb54d8aeb5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac50454-7a2b-4ed1-a692-62070c111643",
        "cursor": {
          "ref": "f580fc5a-0141-47ef-839f-6559eefa23e8",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "623acf0d-b58c-4e40-9cfd-f5093f400f6e"
        },
        "item": {
          "id": "bac50454-7a2b-4ed1-a692-62070c111643",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ed089c2f-f905-4af6-9f13-18591c3ed4db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3dd5f3-aad6-4492-9294-b3940c79d1d5",
        "cursor": {
          "ref": "75c5ea09-335d-48d4-8e69-792ae3031296",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fcc24389-d0cd-4302-ae64-c15c3a1ea5ed"
        },
        "item": {
          "id": "cb3dd5f3-aad6-4492-9294-b3940c79d1d5",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a3966378-7f5c-4e09-9e8e-4d4e504a5a3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fed485-a90d-4e5e-b33f-1509ac6ea38d",
        "cursor": {
          "ref": "e080c5a6-15cf-4eef-8b32-d029e270dfd5",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "312b4fec-ef96-4340-bee3-a7f175e150d9"
        },
        "item": {
          "id": "43fed485-a90d-4e5e-b33f-1509ac6ea38d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7d97853a-c2d6-4e08-8840-cdf9fe10e736",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cca5413-d95e-45fd-bc3e-521984c02b14",
        "cursor": {
          "ref": "9de61891-31d2-4d81-89f3-a402ecb928c1",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3fd2ae9c-92b4-4545-9701-3447c1e9029f"
        },
        "item": {
          "id": "3cca5413-d95e-45fd-bc3e-521984c02b14",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "40e9d4e8-1fdf-4a40-ad04-fba0fdc3578b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc8a4ced-9e82-4a3e-8b48-66c7b9161768",
        "cursor": {
          "ref": "3b2e733f-d112-4a38-9d74-d3210e42b9b1",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e1a18ede-e0a7-42b6-83ec-8b7af3b88d9e"
        },
        "item": {
          "id": "bc8a4ced-9e82-4a3e-8b48-66c7b9161768",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e660dd2d-a338-4697-8243-e8d7b8f1d4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133ef145-6f7f-4f25-91b9-5921569828fd",
        "cursor": {
          "ref": "39b867c8-9297-4265-8815-d67e3e5aa742",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e5f96c5e-0852-45fb-9529-0be18aafeaaa"
        },
        "item": {
          "id": "133ef145-6f7f-4f25-91b9-5921569828fd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "afdeedca-9e3b-4390-9372-7b4f93ceb9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8464e7cb-c0d0-4f52-ac77-cdbd9c661b22",
        "cursor": {
          "ref": "c919e2dc-70a9-46f7-82f5-484ad9c8f988",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "fdaaafa1-12de-4d4f-aa52-565a051bbc2c"
        },
        "item": {
          "id": "8464e7cb-c0d0-4f52-ac77-cdbd9c661b22",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dc949a9a-f95b-40d4-b327-8c7bb46a27d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ad8f01-2232-4dec-a5ec-b9be04f983ff",
        "cursor": {
          "ref": "045acb67-fd02-4f38-a5bf-a5f5072f71fa",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "1108c074-45a6-4575-8dc8-94ef93d5f826"
        },
        "item": {
          "id": "b8ad8f01-2232-4dec-a5ec-b9be04f983ff",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5a18cd77-e61b-4d14-84b3-bdc290270183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda39292-0b16-4adf-b8f3-5241f386445d",
        "cursor": {
          "ref": "3e33b111-67ae-44af-98a8-84d1d01db9a9",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ea3823db-7425-4555-8fb3-111774f1bf7f"
        },
        "item": {
          "id": "eda39292-0b16-4adf-b8f3-5241f386445d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "14143d8e-6bd0-4641-91ae-f1743460bcab",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "7d3e65f4-5cb4-4b0c-b1e5-1aa6be5449e3",
        "cursor": {
          "ref": "733607ed-a837-45dd-b369-58d9e9e53286",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "62b6963c-cc2c-4dde-adac-b4db24559569"
        },
        "item": {
          "id": "7d3e65f4-5cb4-4b0c-b1e5-1aa6be5449e3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1ac5e5b0-0176-45b3-87fa-6084b51e81c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a3f1c7-3ccc-4f05-87f6-668d5485ba9a",
        "cursor": {
          "ref": "9b941bb9-4cc8-40ea-add8-d2d41b464462",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8a00586a-693e-4bfd-ab87-16be4a8b082b"
        },
        "item": {
          "id": "27a3f1c7-3ccc-4f05-87f6-668d5485ba9a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "77467058-04fa-4221-90bf-9100e1945816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71697808-b3f4-4307-8a00-c465673fc94d",
        "cursor": {
          "ref": "c644e365-32cd-4d2e-9802-c6d8f8f0e27f",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3f434508-640e-491c-a618-2e72aeace11f"
        },
        "item": {
          "id": "71697808-b3f4-4307-8a00-c465673fc94d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "47d24979-5d45-459f-885c-7486cd782ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4544198-5916-4c43-af69-f9e957cd6237",
        "cursor": {
          "ref": "cb593818-bbe8-4a2d-99b0-96804db7ade4",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e3ac4a3c-0117-4f77-b9f0-c07e9fe14d05"
        },
        "item": {
          "id": "f4544198-5916-4c43-af69-f9e957cd6237",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "164d027e-9522-4f96-b5b9-5efb6f4fca82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "724a2311-3d11-4703-bc3b-986ce54b649e",
        "cursor": {
          "ref": "f7892cef-3d42-48da-8898-eefcdad006f6",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0af03b2c-43fa-4db4-9ca2-95923c778430"
        },
        "item": {
          "id": "724a2311-3d11-4703-bc3b-986ce54b649e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5edd6247-9025-4c23-90bb-22270594abe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee196530-df4d-4daf-9789-af70973a2487",
        "cursor": {
          "ref": "8c7c469d-573a-4d65-bcbc-936ae3cb48ac",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "daacaa84-8815-425a-98ef-8c1353c5ce7f"
        },
        "item": {
          "id": "ee196530-df4d-4daf-9789-af70973a2487",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "55f7fe82-8f68-4e00-b172-c0ffd2c19b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68331d37-8849-4f1f-914a-8ba36fa71e36",
        "cursor": {
          "ref": "3ff4158e-425e-4486-a414-538f6ad52fb8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f56a21a4-c28c-43ce-afdb-58d71c899c31"
        },
        "item": {
          "id": "68331d37-8849-4f1f-914a-8ba36fa71e36",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f544e443-8ddd-410e-abf5-a04341a62e67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547408b8-84fb-4ebd-b95d-f73e32ff0298",
        "cursor": {
          "ref": "0494bb2b-6291-4cf2-aaa5-95ea3954a189",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1a1f578e-1391-4dc3-a5f5-bb064b4673f0"
        },
        "item": {
          "id": "547408b8-84fb-4ebd-b95d-f73e32ff0298",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "605a9a99-d110-4b64-a0c8-6ef35c477283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9b1857-0698-4b74-89bd-dbddb50c4d6a",
        "cursor": {
          "ref": "33f3f299-27e0-4319-9a43-49ed53c7d4f5",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1b2c5e1e-ae61-4527-839a-3391f67b843c"
        },
        "item": {
          "id": "ed9b1857-0698-4b74-89bd-dbddb50c4d6a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "8ab818e0-f62c-40c3-8ab7-bc1bdafe4c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2e20ee-7bae-49d4-90fd-b26038bacc1f",
        "cursor": {
          "ref": "959d59c9-7e5c-44b9-86a9-9d200db81ac2",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c506875b-c9f9-4695-95d5-6d97488ef2f7"
        },
        "item": {
          "id": "cd2e20ee-7bae-49d4-90fd-b26038bacc1f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e289824d-f76d-4b16-80b6-bb5a146f764e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90d5f84-b861-4a42-8ead-b691ca072db5",
        "cursor": {
          "ref": "ca1a169d-df3e-40ba-aa55-22f39e4bd36b",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "55bb2f3f-d173-428a-80f2-69d107c4cbb1"
        },
        "item": {
          "id": "d90d5f84-b861-4a42-8ead-b691ca072db5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "435cfb24-9807-42ee-ad6c-a919ba9dbd79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6265b186-490f-4914-b95b-4ea55ae0dce1",
        "cursor": {
          "ref": "9b913fbc-7074-4e59-afa2-c547836bd6e7",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f64f5145-a244-4fa2-b850-648c1d176d11"
        },
        "item": {
          "id": "6265b186-490f-4914-b95b-4ea55ae0dce1",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4a073aa6-ada7-4757-a582-bf68bdf57ab9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d099d9-8f5a-4484-bb22-0041de38fbd8",
        "cursor": {
          "ref": "cace211d-ae0b-43b6-a650-5c03822a7b24",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6c4ff265-9032-4618-a948-c870d931394e"
        },
        "item": {
          "id": "39d099d9-8f5a-4484-bb22-0041de38fbd8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0857c65b-4558-4ae0-b306-783f83e9caab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf42bd68-50ae-4426-8488-040b5fcde04a",
        "cursor": {
          "ref": "8a220c59-c260-48ef-b4fe-1a679bccbfad",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7035c618-dd28-4bfd-95c7-1356880b089c"
        },
        "item": {
          "id": "bf42bd68-50ae-4426-8488-040b5fcde04a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7f561505-4eeb-4ccf-b9d3-185bd2adaa08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1daae4c4-44eb-4e22-97c5-58af3487293c",
        "cursor": {
          "ref": "64b37cf5-62c4-4613-907b-0424c6bee0c4",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "79961fcd-c5b0-4b5d-a126-035ab2539d72"
        },
        "item": {
          "id": "1daae4c4-44eb-4e22-97c5-58af3487293c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8a735977-30f3-4398-bd36-b496c76daa50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717f47df-15e7-44d9-a28f-edc9713ab2ae",
        "cursor": {
          "ref": "a4eb5d98-f519-4d0b-9323-f2ef8477f002",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a844bbba-e54b-444d-b98b-994bc94e7468"
        },
        "item": {
          "id": "717f47df-15e7-44d9-a28f-edc9713ab2ae",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0b91824e-9dc7-45c0-bd05-22ca54fb66f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693e8042-5395-41fd-ab21-f0da4660633d",
        "cursor": {
          "ref": "8762a379-983c-447c-b1cd-2a36d701d337",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "600c060c-a7e9-4abb-ac1d-52a5ef95dde2"
        },
        "item": {
          "id": "693e8042-5395-41fd-ab21-f0da4660633d",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8023cb51-da71-43f6-8f8a-57f503db6c6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95068f60-1162-462c-b3e1-a3797a7169f2",
        "cursor": {
          "ref": "42495225-ed11-4019-a601-21bb808d0d9c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4fc4f25c-4015-463f-a7ca-8b38c07bb274"
        },
        "item": {
          "id": "95068f60-1162-462c-b3e1-a3797a7169f2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "11602c38-fed6-4fa2-83b7-d322e9542924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72a259d4-9d54-4019-8538-ea9a7225f495",
        "cursor": {
          "ref": "e3bb8210-df6f-4198-a920-214ef2110285",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c03d5a20-3597-4616-9e07-d5aaee02d3b5"
        },
        "item": {
          "id": "72a259d4-9d54-4019-8538-ea9a7225f495",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "13693996-4f1d-427b-aa2d-0cb3f04c82cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414fee18-bb49-4e5b-afe5-9ee71fa9dcd4",
        "cursor": {
          "ref": "89efbe45-3c13-405d-a3d3-3566a4c5bf93",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "622a7c44-5f4a-42b0-8a7c-a203067f0efa"
        },
        "item": {
          "id": "414fee18-bb49-4e5b-afe5-9ee71fa9dcd4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "34502371-52db-401a-9cc9-fcdd9d1b672f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619c6aec-f5eb-4967-94de-84b318dfd383",
        "cursor": {
          "ref": "fa3ab280-6cd1-441d-b0ab-cdf8bb2af43c",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "93a61062-9292-4130-9e26-c3c36f8dc751"
        },
        "item": {
          "id": "619c6aec-f5eb-4967-94de-84b318dfd383",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7b74f552-61a4-44b7-9047-27c395e4badb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2550d64d-de4d-48a7-8b68-a766e78e9fb1",
        "cursor": {
          "ref": "cda040c5-15c1-4370-b640-dd11b84ebea8",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "be4cd239-f366-486f-9982-d93624d4f0c1"
        },
        "item": {
          "id": "2550d64d-de4d-48a7-8b68-a766e78e9fb1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2e2eb165-c64c-4ca7-b5f6-97eb812110bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f5168c-8d72-4826-a224-c50e9a616ab1",
        "cursor": {
          "ref": "8d772283-f643-4486-a38c-0b54e34f9f7e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0eb9822b-a9f6-4410-b4bb-62045c5b551e"
        },
        "item": {
          "id": "60f5168c-8d72-4826-a224-c50e9a616ab1",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "a0c171ff-ab7e-40b1-9250-ca60f60659cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986ada28-7910-40f7-9d92-a3ae928c6e4c",
        "cursor": {
          "ref": "75a60aff-101f-44b8-8f92-5bc9349d505f",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9cde30c4-3fa4-45ab-8e23-1f75ee597b93"
        },
        "item": {
          "id": "986ada28-7910-40f7-9d92-a3ae928c6e4c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "8a7c42dd-f094-4a0e-a267-f47a4186930e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881219aa-89fb-49bd-aaa8-9d0a19027b3f",
        "cursor": {
          "ref": "a407e67d-b91c-48bd-8e0f-038f174005a2",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "27ac551a-02d5-45e0-8e87-3151aebf8eed"
        },
        "item": {
          "id": "881219aa-89fb-49bd-aaa8-9d0a19027b3f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bd060662-715b-4a66-9ea9-9b71e64c8461",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c56dacc-1d34-4915-8165-d5a14466caeb",
        "cursor": {
          "ref": "36f97be8-6f64-4cfe-8c93-d85bfb8087f3",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "720741d2-66f4-4add-8fe0-7ab66b6268f1"
        },
        "item": {
          "id": "0c56dacc-1d34-4915-8165-d5a14466caeb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "be81f2cd-f64d-4f76-a911-7c95cdb81254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6c3159-5c4c-4b59-aa0f-0f282e098ff0",
        "cursor": {
          "ref": "c252d6aa-c9d3-4f22-9ee2-45765ec33cdb",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "649a3735-00a8-4f6c-af31-b433853c495d"
        },
        "item": {
          "id": "1b6c3159-5c4c-4b59-aa0f-0f282e098ff0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "940871af-daf7-40b0-b0f8-c9838c333dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13205af1-7c39-4b1d-8440-c74c324c5a71",
        "cursor": {
          "ref": "418f23cc-9a38-48c4-a447-2e626f057a9f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "2ff1ab50-6c7e-4ead-bee2-10c42571e4c7"
        },
        "item": {
          "id": "13205af1-7c39-4b1d-8440-c74c324c5a71",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "976fe197-2d4e-484b-b971-b1df296cd4c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ec1d6a-3049-4090-a4b0-62124b5f8d41",
        "cursor": {
          "ref": "cad8f86f-2915-47e9-9a04-2f7af89a11ed",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "04bfc02a-2716-4aee-b576-b6a7bf809565"
        },
        "item": {
          "id": "47ec1d6a-3049-4090-a4b0-62124b5f8d41",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "deb6504c-4676-4677-b0f5-dd100517222c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf6d07d-9b59-40cf-80a0-291243de8714",
        "cursor": {
          "ref": "7803d483-5fff-460c-93c2-9237de876eb6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a9c60050-5ff1-49db-848a-b9cf0027bd2c"
        },
        "item": {
          "id": "cdf6d07d-9b59-40cf-80a0-291243de8714",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e0752626-1eed-400e-9fd8-30f233d38b28",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "48aad6e5-c1c1-4ea5-9a65-eda0e02c9d52",
        "cursor": {
          "ref": "273606c7-6b30-4f25-b255-d6942d9a4b0e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9efafe8e-3f92-45a5-98c3-8af53a7f22e6"
        },
        "item": {
          "id": "48aad6e5-c1c1-4ea5-9a65-eda0e02c9d52",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "973ceace-ccef-4683-8301-9be7d4b2170a",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "26f26bda-8ab7-495a-9eb3-e9dbceaecffa",
        "cursor": {
          "ref": "e0117ee9-b156-4e28-b329-d0a9e03e9c57",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "835f491e-d38c-41dc-9ba4-2579c58bb8ca"
        },
        "item": {
          "id": "26f26bda-8ab7-495a-9eb3-e9dbceaecffa",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "31d181e5-ac1a-49c6-a50f-ce957cd7a83e",
          "status": "OK",
          "code": 200,
          "responseTime": 154,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "eeff98c1-9456-46e8-9917-58ea07010b4e",
        "cursor": {
          "ref": "b308cb69-4975-42ef-af22-7403d260e244",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0ec80b5a-97e2-42bf-91ae-7742f2a064d5"
        },
        "item": {
          "id": "eeff98c1-9456-46e8-9917-58ea07010b4e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2cfe86b4-aba8-4bb4-bc52-dccaec7f1c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1204375b-1deb-406d-a355-2055cc0eec13",
        "cursor": {
          "ref": "857b9e67-89bd-4345-be5d-d144d3d2c8f1",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a450c33c-6d61-44df-8205-c8725d8463bb"
        },
        "item": {
          "id": "1204375b-1deb-406d-a355-2055cc0eec13",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0acb6660-a075-4e78-b82b-144af7832722",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0e5f1cec-b052-423c-a845-e14858a59698",
        "cursor": {
          "ref": "99fd726b-6d17-40ab-98e0-325fe40c3b71",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f1c9d5f3-80de-480e-a564-87c4417647e7"
        },
        "item": {
          "id": "0e5f1cec-b052-423c-a845-e14858a59698",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2466e589-2e87-4048-b5c4-91429a7f89ce",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "cc019e45-d5f0-43de-98d6-dfbc67bb3c28",
        "cursor": {
          "ref": "50b9725c-8f22-4da7-ad97-1d69d85bb5ab",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "bb89ba28-5c9e-49df-85cd-c622ced577b4"
        },
        "item": {
          "id": "cc019e45-d5f0-43de-98d6-dfbc67bb3c28",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "327c7cdd-8f9a-41ea-9455-a8bf66fd420e",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7ab3479e-767b-4fee-a0c9-58a8aa810037",
        "cursor": {
          "ref": "524ecab2-db0c-4e59-a8b4-0027cdc6abd9",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6713e03b-2b5b-4303-bd9a-c1fb31f42d35"
        },
        "item": {
          "id": "7ab3479e-767b-4fee-a0c9-58a8aa810037",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4840369f-f460-42f0-b2ba-c413eb041b0e",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e5c6ce78-938d-4ccb-b694-8143d5784505",
        "cursor": {
          "ref": "f55ffeea-46b6-44ab-aa55-1e3f42a7d4f2",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cb8f8cff-6668-4c39-b04c-7e8cb2a74da3"
        },
        "item": {
          "id": "e5c6ce78-938d-4ccb-b694-8143d5784505",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "74b03c6b-5ca9-4018-8171-50d4ea63c23f",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4e508b78-8a1b-4774-ad10-3a4fb9e7712d",
        "cursor": {
          "ref": "f69f5d96-b5f0-47bf-a2fc-048066847ad8",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "bf42d2e1-b61a-4b7b-b6c9-d779e5049317"
        },
        "item": {
          "id": "4e508b78-8a1b-4774-ad10-3a4fb9e7712d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "31cc7d41-c3b2-43d4-b6e8-0bbd98067b2e",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "73b66ebd-7ef1-469a-a23b-5c88e2d02c61",
        "cursor": {
          "ref": "563ee56f-6751-40bb-9e5d-0385a60b940d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5008fbb9-ef22-4f81-8741-f1b00a43cd9e"
        },
        "item": {
          "id": "73b66ebd-7ef1-469a-a23b-5c88e2d02c61",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dbfa8769-9000-4ee6-8133-c9a0b75f883a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad7416b-7d66-4829-ba16-94c970e5b0b4",
        "cursor": {
          "ref": "407f5433-a996-4726-8107-c63c1c52a313",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "06964e13-0835-4e01-977b-63f49b2031b1"
        },
        "item": {
          "id": "5ad7416b-7d66-4829-ba16-94c970e5b0b4",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c1bf7d4d-b66c-42b1-970a-791d27d57dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff101427-2db1-42d2-8dd7-d1e49bb55e28",
        "cursor": {
          "ref": "9b75b93f-4652-4526-8bee-065067fe99f8",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8dd1da7a-3496-420d-93d2-a37355216b2b"
        },
        "item": {
          "id": "ff101427-2db1-42d2-8dd7-d1e49bb55e28",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6e34d0a4-d5a7-4b03-8942-7310fcb2e580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b54b29e9-2215-4870-a21b-0a1c61409a7c",
        "cursor": {
          "ref": "a4314819-8e48-4f0f-9b61-44e6dbc90bff",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d814915c-2c47-4c3b-af94-f0bd714b27f0"
        },
        "item": {
          "id": "b54b29e9-2215-4870-a21b-0a1c61409a7c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2dbbf3d4-c372-4411-9b4e-10fac7321e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2db6466-75b3-4d6b-9e59-367650c5f1e0",
        "cursor": {
          "ref": "aff406c7-5bf0-45ee-bab6-33be4136df61",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4357b2bf-8e82-41e0-af98-1f24da7079db"
        },
        "item": {
          "id": "e2db6466-75b3-4d6b-9e59-367650c5f1e0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a4617d85-d185-433a-a40f-ea19ca257389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744302e4-2202-43e8-ab9f-e60249fbff73",
        "cursor": {
          "ref": "525da88d-539f-4eea-9c5b-f4244260feee",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "de7b522d-2e41-4fcd-9a5e-571e3955a4b2"
        },
        "item": {
          "id": "744302e4-2202-43e8-ab9f-e60249fbff73",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f50b542e-38b0-4fcf-8968-1b1336bfae91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1814f1-8058-46e1-82c0-97623aa560f6",
        "cursor": {
          "ref": "991150bc-e11d-4046-ac27-ad8dae5cbd98",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e4afa1f9-6742-4e5a-96e4-4d0957487967"
        },
        "item": {
          "id": "4f1814f1-8058-46e1-82c0-97623aa560f6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "564d5c09-0aff-4237-a6e0-9bf321d2968f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de58898a-e6ad-4b65-b1ab-4137e51d623f",
        "cursor": {
          "ref": "62955a7e-23e7-42ca-b8f2-37614c479975",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8386959b-de50-4ff3-a94e-d8526c8291f2"
        },
        "item": {
          "id": "de58898a-e6ad-4b65-b1ab-4137e51d623f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3dcaf665-1800-4edc-b6c3-10411030b978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b72d99b-5e92-4c53-9a03-ea7007bd8d12",
        "cursor": {
          "ref": "13c7ffbf-5f5c-4516-825d-b070e0216895",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "66521223-2b62-46a3-a6b2-4039217a2702"
        },
        "item": {
          "id": "8b72d99b-5e92-4c53-9a03-ea7007bd8d12",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7a60a0b2-b8f3-4fc0-98db-aa0b44d8d6a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610b6cae-340b-4a96-9bbe-e3c273486735",
        "cursor": {
          "ref": "dc28a90c-d04c-45d1-a031-e0f09854f775",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4039df77-9b69-4969-b1d2-76eb330abcdb"
        },
        "item": {
          "id": "610b6cae-340b-4a96-9bbe-e3c273486735",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5135dad7-bf69-4662-99a9-65894667f9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab22b8c-8263-4e04-8957-523661837dff",
        "cursor": {
          "ref": "29b40178-7528-438e-9f86-7fbd4126a1a4",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "372ba77e-7d92-4ba6-9412-666ae563c4aa"
        },
        "item": {
          "id": "6ab22b8c-8263-4e04-8957-523661837dff",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "046df59f-f8c9-4d86-af2d-6b071ad8874d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f8a047-830f-4b3c-b2d4-843389897f88",
        "cursor": {
          "ref": "9b777902-4e50-4455-a14c-b8445eca082f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e5179f9f-9c06-4e10-9c83-70c9ea0e7880"
        },
        "item": {
          "id": "49f8a047-830f-4b3c-b2d4-843389897f88",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6354f892-6945-4a82-b312-77c202c0a093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0c9d070-bfa1-4c0e-8c29-c834cb2f937e",
        "cursor": {
          "ref": "1f3de836-a97e-4dd0-a8a6-e8628d4d50be",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ea8de8ca-bb11-4739-b5dd-0b69ea62fe4e"
        },
        "item": {
          "id": "d0c9d070-bfa1-4c0e-8c29-c834cb2f937e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "347050e0-6950-4af5-afad-e25e151f2f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb6a4582-c7dd-4902-8841-de0a22fe214e",
        "cursor": {
          "ref": "d3a9195b-e6c4-4e2f-bdfe-60b89fee5c55",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "05d346a3-eee2-4c50-ae22-09d76721be98"
        },
        "item": {
          "id": "fb6a4582-c7dd-4902-8841-de0a22fe214e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2f6133ed-4b53-4ab5-a5d6-81e80443a153",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "9987598f-0402-4c3c-b16e-fa74e72e6572",
        "cursor": {
          "ref": "eb68ab96-0fd6-4969-94fa-68b0a733aca6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d346d231-b6a1-4d9e-a8f2-3a47a47d4bfe"
        },
        "item": {
          "id": "9987598f-0402-4c3c-b16e-fa74e72e6572",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "381736fd-004a-40b5-9204-e46aa181bfb6",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "cf9747c9-898e-460a-9fe8-5d92c0a1e915",
        "cursor": {
          "ref": "edf8d2d6-0a3b-44fd-b491-081fa6b69954",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "85a1c00b-1b1a-401c-b12a-48981689f454"
        },
        "item": {
          "id": "cf9747c9-898e-460a-9fe8-5d92c0a1e915",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "eafa1476-7ed3-41cd-ab12-a57c4396ffbf",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "a5c2ad3d-61c9-4523-aea2-a57cf3ddd38d",
        "cursor": {
          "ref": "8865fcbe-b64f-4dfb-9dbf-4fb132985e85",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d77150b0-96e4-462a-b60b-e8aed46dae06"
        },
        "item": {
          "id": "a5c2ad3d-61c9-4523-aea2-a57cf3ddd38d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "43fcb4c9-6e52-4bcc-977c-6f15b88d9837",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d251f5b0-1378-4dc3-8e6f-a9f668acc08b",
        "cursor": {
          "ref": "bbe40d18-474e-45c4-bba5-a7432867e45c",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "68e27bfd-b630-4fa0-b15a-b1135a4bc7cf"
        },
        "item": {
          "id": "d251f5b0-1378-4dc3-8e6f-a9f668acc08b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f3401cc4-884d-41ee-a2eb-aaed731ce274",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "a7eac0ca-5f93-4b4a-a932-c33cfa4fa603",
        "cursor": {
          "ref": "12349f32-e9fa-4386-b2dd-3f7ee6a5e7ea",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d06c4ce5-7ad7-4037-830e-6a1b0e049010"
        },
        "item": {
          "id": "a7eac0ca-5f93-4b4a-a932-c33cfa4fa603",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d6e28062-5cf9-4689-8a9a-37345481ae5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85abc6b4-e9fc-4a7b-aa7d-7ce4d9dae101",
        "cursor": {
          "ref": "fb12b5ff-e496-490d-9c8a-f46fba764eec",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ff232870-98b6-4506-aea5-c39b1371a0e0"
        },
        "item": {
          "id": "85abc6b4-e9fc-4a7b-aa7d-7ce4d9dae101",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "78384908-51ec-42c4-a3cd-768b65bd7072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba668286-da9a-495a-af09-febb45fa43a0",
        "cursor": {
          "ref": "c9971ec8-0374-4d34-8616-e0184ea4ef2f",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fd31a436-7d81-40e8-a386-52315549b71b"
        },
        "item": {
          "id": "ba668286-da9a-495a-af09-febb45fa43a0",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9e00eca5-7536-4ff9-8b95-1d6d17426801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6f6a0b-6e61-4bff-8639-9a555bb2de75",
        "cursor": {
          "ref": "f5e15298-da9f-4afa-b805-8ede068e4ca9",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5ff74d2c-1e21-4e71-be33-3720b2899faf"
        },
        "item": {
          "id": "2e6f6a0b-6e61-4bff-8639-9a555bb2de75",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "35691852-5bc0-410a-ab5f-d09e4d3a86ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1272cba-7c5b-4e7e-b40c-96f246af56da",
        "cursor": {
          "ref": "1b943970-61ad-4e75-a30b-7cd4bfcbf707",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "cb200cdf-9a63-472a-aecc-9f9b0bd7b710"
        },
        "item": {
          "id": "d1272cba-7c5b-4e7e-b40c-96f246af56da",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bed88b1a-617f-41b1-b143-80c975b410e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "985224f2-3e20-48a3-a1da-16720432449e",
        "cursor": {
          "ref": "52009cd1-d20c-4ecd-a240-167fc88b7c3f",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7c850e3a-1465-4367-af77-d8e2acc79f69"
        },
        "item": {
          "id": "985224f2-3e20-48a3-a1da-16720432449e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "7b336a88-bdfe-487c-adf9-463f31712bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1c6960-7401-4fa8-8c5c-0b965b6dc892",
        "cursor": {
          "ref": "bf863dd8-dd56-406f-a960-a69a5e02857d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "153b85a8-6e29-4289-b667-63456fd87c9b"
        },
        "item": {
          "id": "6b1c6960-7401-4fa8-8c5c-0b965b6dc892",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2e50907a-82c9-42a8-97db-849cd7abaf88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8cc0158-6954-41d6-b666-0a5ddd093cfa",
        "cursor": {
          "ref": "3ad79898-3d27-43c6-b349-083be4dcdb28",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "ec1a2a98-1c43-4eb2-89bb-90447a3ee35f"
        },
        "item": {
          "id": "b8cc0158-6954-41d6-b666-0a5ddd093cfa",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "17d01c88-16d3-423b-8fb5-3a0279271dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b2778d-ee87-4b50-a621-f16c0e7abc8c",
        "cursor": {
          "ref": "f1ddc792-c458-427b-aad4-996b66f76d15",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "716219ad-a4ce-4fd0-bd89-233490525a5d"
        },
        "item": {
          "id": "93b2778d-ee87-4b50-a621-f16c0e7abc8c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "922d7d54-e0a7-41b5-822f-9c170ab6f3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a994858f-7d14-4866-8388-da5ba83939b0",
        "cursor": {
          "ref": "b016ee38-b5b9-4636-a957-b26d57e898d1",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "55b0921f-ff27-4db8-89f6-5b896c4a507d"
        },
        "item": {
          "id": "a994858f-7d14-4866-8388-da5ba83939b0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "258582a4-4623-4c3c-b372-cfb70408bef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925dbbfa-1c57-4b61-8787-f36b822f889e",
        "cursor": {
          "ref": "6c3de75a-49e5-4715-b725-2eea2fc469e0",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "37a59374-b7f4-4168-9bcf-e6a64d9b6336"
        },
        "item": {
          "id": "925dbbfa-1c57-4b61-8787-f36b822f889e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9f735d01-4789-4824-9906-96ae6f76d102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b9467b-eaf7-4bee-91d2-b34f4062d272",
        "cursor": {
          "ref": "0c4e44ea-963c-455d-b5be-93d9ff80a470",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "01c09ccc-b172-4948-98e1-3c05af874ae9"
        },
        "item": {
          "id": "58b9467b-eaf7-4bee-91d2-b34f4062d272",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f235dd5f-5191-4840-824e-5a730b1f1e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a43d785-6bf6-44ca-9d35-0a0c0f07e0a6",
        "cursor": {
          "ref": "934c74fc-c556-4d13-b682-a9fae1b616af",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "e8ea51e5-6533-41b8-941d-ebd4272a697a"
        },
        "item": {
          "id": "2a43d785-6bf6-44ca-9d35-0a0c0f07e0a6",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6b7b09c2-05de-41ce-a0bb-cedefc925d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96f486f-6b0b-4f9b-b7f2-84f75e83b7a7",
        "cursor": {
          "ref": "4c69a21e-59d3-445b-96ea-5525c6e5c3f8",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "51ecfbb9-9e38-4c5c-b8c1-9a81c401ea66"
        },
        "item": {
          "id": "e96f486f-6b0b-4f9b-b7f2-84f75e83b7a7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2ef7327c-417b-4e34-843a-d1341b6e8759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25d8183-a32f-44f3-82f5-ea6b555e27e4",
        "cursor": {
          "ref": "37d4be4b-2800-4408-b5a2-4c0a83c0e99a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "81fe7e90-83dd-4d35-aa62-bf4f11871bb1"
        },
        "item": {
          "id": "a25d8183-a32f-44f3-82f5-ea6b555e27e4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "92ee381c-81c9-4415-9a9d-420ce4caa653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0280e1d-1321-42fb-9a67-85b75eddb013",
        "cursor": {
          "ref": "0ba056b4-1fb8-4276-a9c5-486afc14c4a6",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "dc66016e-c047-4c39-bd79-22e8a287bd15"
        },
        "item": {
          "id": "b0280e1d-1321-42fb-9a67-85b75eddb013",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "8f2cac33-8da0-4411-a44e-a00a734c1b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de183e8-e156-4701-bb91-227e06c50001",
        "cursor": {
          "ref": "87462be8-5003-44d5-8f07-8f1b2a7534e9",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e205b0da-0176-4cc3-8ae3-077c45a2606f"
        },
        "item": {
          "id": "1de183e8-e156-4701-bb91-227e06c50001",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "45263c30-5550-4efb-b292-aaead2e62220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d22b5cc-6158-4dd2-a1a0-8531dba26e75",
        "cursor": {
          "ref": "b96fc826-4198-42ec-a761-8b61f427d2bd",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "0aa2e9c2-fac9-40ca-b7e6-abd3cfdbd700"
        },
        "item": {
          "id": "2d22b5cc-6158-4dd2-a1a0-8531dba26e75",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "63ca1608-b507-4e94-a58d-9f18a33a5d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc435aa8-beb6-4476-8cd0-192f47d1095e",
        "cursor": {
          "ref": "b47d895c-0b68-42bb-a470-86a18ede78e2",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1bd0484c-cd30-47d5-a2bd-72a6c1520ce2"
        },
        "item": {
          "id": "bc435aa8-beb6-4476-8cd0-192f47d1095e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0759ef1f-b758-4070-9fd6-76ce4372c16a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e8c6c5-bffb-4d53-b3ca-3a4616c72c61",
        "cursor": {
          "ref": "d9aab94c-f0cc-4087-a857-b6a4d3922e0b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "4aff8e62-4d97-46cb-8d71-7890d24383b4"
        },
        "item": {
          "id": "52e8c6c5-bffb-4d53-b3ca-3a4616c72c61",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b6e6624f-b6f7-4c1d-98eb-706e0974cda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17355c7-f033-4025-94e8-ded58481f4e9",
        "cursor": {
          "ref": "030110b2-cdb1-4946-90dd-e289fbc6271f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "3d15aa45-2c80-4e8b-9be7-26a8b6aa5fea"
        },
        "item": {
          "id": "f17355c7-f033-4025-94e8-ded58481f4e9",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "38482a39-2e1c-45eb-ae3c-0a292803b25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f93fc8-2d16-40af-95eb-202384e915e0",
        "cursor": {
          "ref": "e1892fe7-9216-40f1-8d51-339ddf7a8e57",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1fb4582d-7522-4022-ab39-291601ae5243"
        },
        "item": {
          "id": "40f93fc8-2d16-40af-95eb-202384e915e0",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ef9282b2-bef3-4b10-90d1-75d87899002c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949689cb-f06f-46a2-95fe-4df795b4dd3a",
        "cursor": {
          "ref": "db482ae1-218c-49d5-9c84-4068cff36860",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "fc928813-679f-4345-817d-c5672ebf118e"
        },
        "item": {
          "id": "949689cb-f06f-46a2-95fe-4df795b4dd3a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0d262b8d-062c-41be-9c58-f663d44c0c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5aac01-274d-4ae1-82ea-36c52fdfc626",
        "cursor": {
          "ref": "21e43a88-9ab8-46fd-9baa-13ff110aad0e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "952c60da-435e-4638-9bdc-513f167c6c09"
        },
        "item": {
          "id": "ac5aac01-274d-4ae1-82ea-36c52fdfc626",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "72829e58-059a-4bbb-a8d9-57aa937d4ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66be2067-1516-43bc-b31f-431e93ab1764",
        "cursor": {
          "ref": "0265d702-0ba8-47d4-be82-6318cdc9dbee",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e678b889-dd3c-424c-8ee7-0363d2e44410"
        },
        "item": {
          "id": "66be2067-1516-43bc-b31f-431e93ab1764",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d18cd323-8f0b-473a-88b5-9c549710a3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2663d451-acea-4ad8-b0d2-62ce94c9fca3",
        "cursor": {
          "ref": "9b7a8c7f-2ba2-4731-9279-d206a936f6f9",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f9c2492d-278f-49be-b6a8-4adcafe20839"
        },
        "item": {
          "id": "2663d451-acea-4ad8-b0d2-62ce94c9fca3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6d07a19d-91b4-40aa-959c-e2d674bd9cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10982830-ec7a-413e-bec3-99ba90adcb69",
        "cursor": {
          "ref": "2d895988-0b8f-403b-8166-77625621a79a",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "e3c60ce1-b5e9-4a39-ba34-9ad7afbdf108"
        },
        "item": {
          "id": "10982830-ec7a-413e-bec3-99ba90adcb69",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "9b091f15-7525-4598-bea3-2aa6da20cba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aa1484a-f5aa-41b1-921f-c8a260b3e3fd",
        "cursor": {
          "ref": "23390717-f15f-4114-bd27-9530792df7a6",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "fccb2fd8-a91a-401c-82b3-b59c71ac1254"
        },
        "item": {
          "id": "9aa1484a-f5aa-41b1-921f-c8a260b3e3fd",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "47b0cad1-190b-472b-b21a-38a21f603b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa21fadd-ad05-4b50-9678-b721fa0a78d8",
        "cursor": {
          "ref": "502c0cf6-4ae7-4019-a3bf-9bbc9baff32d",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4116b8e7-cf30-4ee3-8599-18a43accfbb7"
        },
        "item": {
          "id": "fa21fadd-ad05-4b50-9678-b721fa0a78d8",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9f67f2a6-90c4-4ad1-b6ff-002507d01be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "963ae15d-194b-4aa7-b81f-c83778fb382c",
        "cursor": {
          "ref": "f32e4c81-96c1-484f-a0d2-35268abc6221",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ff03ee5d-8246-4619-941f-969bcf6683cb"
        },
        "item": {
          "id": "963ae15d-194b-4aa7-b81f-c83778fb382c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9132c7a0-cf62-4591-8356-ad728802ac34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dce738-15ef-4c97-87fb-70779f7f2dce",
        "cursor": {
          "ref": "ed1aeabd-d794-4f59-b676-5feb60a0dcb0",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "b14201c8-df54-42e6-8508-bcd71e7e99d0"
        },
        "item": {
          "id": "01dce738-15ef-4c97-87fb-70779f7f2dce",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c5d67556-7308-46a1-aff6-23b5d277fdf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77b3a166-8568-43ff-9c7a-c6ce5715832b",
        "cursor": {
          "ref": "4cb294f4-08a9-48d3-9e3b-6f0307020ed5",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "65b7e951-346a-4b80-9bf7-eada11fbfaf0"
        },
        "item": {
          "id": "77b3a166-8568-43ff-9c7a-c6ce5715832b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "4fae034d-b082-4f7d-80b6-78fe887bf123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8af45ef-521a-43c6-a9e4-972043c14869",
        "cursor": {
          "ref": "1825e84c-c1f8-4bd0-9148-8b8a2f1b02df",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "4b22b4c2-41e3-4f96-9aa3-102b932a6109"
        },
        "item": {
          "id": "e8af45ef-521a-43c6-a9e4-972043c14869",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1677622f-f6f0-4856-bca6-f8d529a775ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40780497-d362-4acc-a32b-76443aebee27",
        "cursor": {
          "ref": "a71b059b-63ce-46b1-8c5e-8c36a6db4ab8",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "adfc7ec7-9f3e-48b0-bc29-b0418f00673b"
        },
        "item": {
          "id": "40780497-d362-4acc-a32b-76443aebee27",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "c18611a4-f30d-4dfe-8d90-e4ac38527e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf8f61a-3cb5-4840-8ba6-efb8d435002a",
        "cursor": {
          "ref": "7accf0b0-1c88-419e-bf7a-1645b233f608",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b791b9bb-0a5a-4974-b541-55339549ee2e"
        },
        "item": {
          "id": "ecf8f61a-3cb5-4840-8ba6-efb8d435002a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1390291a-fe28-4d6b-8ab5-b4550aa502bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5a3714-6e1e-4932-bd00-592d60150718",
        "cursor": {
          "ref": "77919ec1-1ff1-479f-ab9f-9e17027d7793",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e04628ef-0ca9-40e3-b28d-96364833fe43"
        },
        "item": {
          "id": "6e5a3714-6e1e-4932-bd00-592d60150718",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "93f2f08f-c849-461e-9c9f-65aedfd6eeda",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "7ec9faa3-3075-4ce0-9bae-e49def1192fe",
        "cursor": {
          "ref": "ac06a8ad-c759-45fe-9856-dcb81df00000",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "8e48e7c1-2bab-4044-bb44-ac47137cbdb8"
        },
        "item": {
          "id": "7ec9faa3-3075-4ce0-9bae-e49def1192fe",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e842aefc-b0e4-47ce-b3d6-cfb71821bbbd",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a37df18f-cbc8-4cca-b53a-c6448dc44128",
        "cursor": {
          "ref": "bb8892ea-cd0b-4fd7-8256-08528ba408a1",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "b5fb6aa0-7a33-43ef-90c1-060cda19bf60"
        },
        "item": {
          "id": "a37df18f-cbc8-4cca-b53a-c6448dc44128",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d75b6c94-9858-4081-97ed-4d8b0b6df065",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61131d2-32ae-4966-a40f-573133c54bf1",
        "cursor": {
          "ref": "9e4f60d3-6a18-4383-a5fe-26e063409cb6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "17f3a24f-b5b6-4385-8422-0c23be12c44c"
        },
        "item": {
          "id": "f61131d2-32ae-4966-a40f-573133c54bf1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2a217634-c960-4b28-a994-ce2bc9c954b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61131d2-32ae-4966-a40f-573133c54bf1",
        "cursor": {
          "ref": "9e4f60d3-6a18-4383-a5fe-26e063409cb6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "17f3a24f-b5b6-4385-8422-0c23be12c44c"
        },
        "item": {
          "id": "f61131d2-32ae-4966-a40f-573133c54bf1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2a217634-c960-4b28-a994-ce2bc9c954b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25172576-815c-4a12-9764-d5e02d0ff9f9",
        "cursor": {
          "ref": "60fb2362-4e9c-4d3e-8b03-19c82df599e0",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6010b343-5cb7-4834-9ccb-cf4ad3dba79f"
        },
        "item": {
          "id": "25172576-815c-4a12-9764-d5e02d0ff9f9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "70484e34-dd32-483a-af65-541619335913",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd88bf0d-8a5f-49f5-87b2-a8caaeb0421b",
        "cursor": {
          "ref": "24e8ee51-cc14-4fff-8c52-a8229dcf377c",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "3eee8ec3-485f-41be-95bb-c25916968513"
        },
        "item": {
          "id": "dd88bf0d-8a5f-49f5-87b2-a8caaeb0421b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b037f707-9405-4ec0-ad76-06d16b0676c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 32,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}