{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "38d11c9e-f262-423c-8b27-01383f2889cc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c984446d-199a-46c4-9c31-0e2bde4305fb",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb3ec2af-a268-4b76-b259-0edae360dddc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1dbb58ba-564c-4518-898e-6f3663b6ad9e"
                }
              }
            ]
          },
          {
            "id": "6f762f76-dead-4e7c-8548-41fc742cbcc9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f0a14b7-21ce-4e51-b562-a30ef6383e21",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bf5b8827-3dee-4533-8ed1-0b5d5040d7e2"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "39df9adf-bbcf-4788-8f73-b0fb8c048a7e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2de40f77-9953-4ffb-a1e9-465400cba745",
            "name": "Positive Testing",
            "item": [
              {
                "id": "834196dc-cac7-4fdf-8d29-6ebf368019da",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a457364f-d6cb-4562-b751-d567ee0066bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9931d07c-ec7a-4915-b619-2cbe247f3460"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bcf1dc47-45cf-4aae-871c-9963dbbcca90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7150e4a5-1983-49a2-b553-60b1ea2e3c81"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8603ae0b-dc61-4498-ba1a-20297b1bf317",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bd7779f-3095-4605-b573-15534cce9f7a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d655ddaa-bed6-4618-951b-b87f15a23374",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f201a2c3-ad15-4257-97fa-16286f99400e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b185c520-4246-44ef-885e-ed887ee3b1c8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "21f6dec0-10b5-4349-b6f0-d35fc9e02a8b"
            }
          }
        ]
      },
      {
        "id": "f5ce9627-cff6-4356-81b8-631a2831337d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d0eff9ef-fcbd-44c7-9b74-e9def4deb8ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "804d918f-217a-4b13-8b31-b18251835bc8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ba51ff53-f604-44e5-a9b5-e69225d36245",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5287c2f-6e46-4aa6-b741-613b9bec9123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "67adf678-ada9-4331-86c8-a180657deb77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893c0764-0ebc-4781-9559-fc66f521af9e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff088d8-14bd-4a0e-af5c-6dd944d28768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cd2e8f2-bd42-440c-be34-07522831ee11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be469b33-0ae5-456c-aaf7-9ab807934d8e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d31bf0-0b4b-4150-8bf0-35896e87b37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1a0f063-584c-4d93-8af6-21c511b6e487"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "28063a81-f984-4d24-990e-ad01174efc11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d38b4f1-5d62-4769-aecf-957f6be464f6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9adce08-5d24-4460-8647-5250afeea643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58a193fd-c9ed-4445-8b67-7e78849d97d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd30136-6448-43c2-9646-456c6f2da91a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df055085-1944-40ad-90db-6fde6fb96e89"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cd36b6c8-00d5-46f7-a303-250a037ecfe0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3c1badc-25b3-4ca4-9ab3-ff8298294f85",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91d4dd8f-1503-4e40-9a73-3d2c1d5747d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "50f909f3-c45c-4821-ba48-2de084cb4848"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ebfdb87d-a62c-45b6-a8f6-8559836a6fc6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8cddb9ca-1d82-4379-a65c-4eaf387f17c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d3e843d-40c8-41a0-bbe6-07a3421a830c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55651731-b1e2-4a19-b409-5c394146e6a1"
            }
          }
        ]
      },
      {
        "id": "ff29f66d-fa3a-4724-a362-e0aa8de1add4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bec4fd83-c6eb-4db9-b220-4163fbf06436",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b18c0ed6-e0a0-4e5e-b37f-725c288d55ea",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "4363310a-7711-4785-98c6-91f2676b30ae",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d058719a-71d3-4b09-8f91-67d411241a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28fca1a5-526e-4870-b3bb-7a8a0a2fbc8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf03d26b-4adb-48d0-a8cd-1b4f8869d8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d093b357-9ecc-418d-8771-e16582188df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbc32fa4-6853-41d9-a8bb-38d91ad396bf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb82d2c-905f-41c8-b7a2-3e686b3ee254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43af0c4e-e41d-41ea-86ba-f7fca64df64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd60d2ab-6b2a-4254-83e6-0a14963cb8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcdd2884-85e6-4481-a0a0-bb4bd51354cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "325afa31-090a-4664-ba73-271a04ea5264",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0e61f6-2aba-44f2-94c6-6bee06f17ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed49de9-be96-4166-a6f7-461fc392801f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbb30d7-f905-4ed9-9937-e72dd811bd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6896b0e6-2be8-4674-87fc-b83e2d2f9d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a2933e-46cf-4978-bc2c-f30e6cb283af",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebb7da62-3530-4f80-8291-c799cadabf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e5eaae-b6d4-44b0-bf57-796ff517d6e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3893a3-014d-4e1f-ac82-53dc0a565e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "84660e24-4f5e-4dbb-b2be-af493adedccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e62abd-8dff-4d86-9f18-e799c5d59734",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5b8891-1c55-4e17-843f-cfc4f552e4df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58bca60d-57ce-4f3e-afb2-9a0251e614b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e56886-7b00-4960-bfb0-670af04e615a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0447033-62c8-4bcf-9246-400d6e1bca73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae29ed99-81c0-42df-90e1-48c8161a79e7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc0f888-abe7-4a81-8b0d-07d8247b80bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbf2c6a3-4479-4666-9622-c3887e12ddd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085c4086-6f29-48f0-a106-dc92c0af16d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d74b426b-d756-48dc-9aeb-c029352c3ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcac6ae5-f536-494c-bce7-fd76e8084a16",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251c55ca-2f69-4b9d-8759-af661e53f29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "291bb6f9-bad7-4d28-a2d4-7597218d5391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41692b5d-21d1-416b-8ce1-0f39d1323bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1bf50a1-a15d-49f1-8c15-85d80fa8cb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f514e78-25e4-4cdb-a05b-9c701995dfe0",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d09f772-70bb-400d-bda0-fd900d716914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e164983-a12b-4a5f-abd0-48e0cb6a96b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a96aae8-7d09-43b8-b6ed-29de72c49d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c75c99bf-dabd-4683-8bae-665de3892322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c5b48b3-0586-4c72-a12b-b043d49d001a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f02ab45-864b-45cc-ae8d-b3f9624fe024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6dd51d-abd2-499c-bf1e-31348afa1a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a5205f-3afa-4edf-9cd8-85138bcd26ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "926d12cf-2554-4de6-9538-3955945766fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5cbf319-dd2b-40c4-b204-dd5f8a08fb24",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365d0306-53bb-4f4e-a701-cd3a7d8be02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e5660a1-af38-4e40-9404-85fca6d73102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8129a9b0-c7e5-49a2-a1fd-d32aab307443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85da05b6-7272-4f93-9c79-659620f50dc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816e35fc-a35d-4c5e-ab24-2bf90ed08c7b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a49597-7452-4a61-892d-1106eba804f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2a03eb-db0b-4614-889e-d33f0b266450"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b4efc3-88e6-4d70-816f-2a6e04ff8a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9f353d5-9d43-44ec-908a-631a3309e89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01f9c57-ce59-42c9-ad85-e21502a3e441",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78344677-5817-4b05-ab95-022864c3e6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dab4de2e-61c5-40b9-8479-83e670a5b4d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d631f8-cd05-4ecd-b5bd-9d1473ac49c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b576c59-2461-48cc-a9ee-7f19e1422ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e1dd9d-8604-47a2-be19-7c0aff80b473",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5d043d-4b96-4838-82f7-f7dd5eaa94a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6d2f2d-1374-4c6b-8199-2099e69418ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b624d51-8923-40cd-b416-c8c4a6f86ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49f80ec2-8f1d-41e8-9fcb-5c963afbead7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11a7ba5-499e-427c-9769-502c2b75b8b0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1927c0f-bdf4-496f-beba-c682900caa49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d791a34-3b02-4c3a-b8d8-490fe1127ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cc7565-0224-4aa1-be88-6d19d3a82e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "768fad6a-2f46-44ec-82cb-18b745a6c933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17fe4485-c056-41db-a26d-fbff83c8959c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6561a60-5b27-475e-a86e-f79226cee682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa4cf383-cca3-4382-8290-d4b523bff3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1573ad0d-339d-4e80-a0e1-bd00eee0536b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e635939c-f968-4245-9bc5-1f3b573b2c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7befaff6-32eb-41cb-a396-97977ff96f58",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443c8fb7-6fde-45db-b5a8-2013bb16431c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe0840a8-145d-4e3c-9063-aac454d40348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff65339f-4456-4dac-a185-77fd4838ab31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96df8c74-2524-454c-87ed-dd8dc26c5c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f734639-21e5-4fed-a0bb-fa66836d72ad",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7fb73b-2953-4562-a11f-af19696e54a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b6c7687-690d-482b-8c1e-9d12f048e1de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153b8d8f-cd51-48a2-9873-a6bc046b61bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9c5e1a9-8c99-45b0-b6fe-3de42186f1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be07f4e-420c-4a21-903f-1faa4d3e7856",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5cae39-5911-4687-afcc-d57ab4038a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c718bb4-2a1f-4095-a71c-b62eea29504e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c2dd6ef-0a81-4d85-87b5-9ca7f187b5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f4c73c0-acfd-4b89-8d42-d1f911de9846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e6d309-7a95-4587-acb3-ae7d15a403be",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f16be40-177e-4d76-889c-3ca5f4f654c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62a2550-cc08-4ad1-bd84-352ef8acda14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e08620-22ec-4058-a516-e36e1f848141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9578cb0-bb18-49b1-9876-c6da264ece94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb7673b-1e59-4240-b7b5-a235179aab72",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503160d4-5e81-4172-ae2d-d771473c56a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "889898be-7651-4d42-bacb-065af04a6676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9ce8f2-35ab-435c-b5ce-cb33fba30614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2cc69d3-a1c3-415a-b4c4-e9adb715e40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3406b9-23f1-46b1-95cc-9fc17181e7bf",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2a23365-29b4-40b9-83a3-5c9c390405de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dbdcb33-a507-4bab-a0ea-3720c7d58dd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7c74bd-7eec-478c-a843-438c341f6ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "557cffdf-fb00-420a-bc8f-d915cd3183dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c2b4c7-01e5-4f31-a0fd-e1bfe99270ec",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c607ea18-20f5-40b2-9b25-6cf2a63020ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca3d7f5-ab02-4d59-ae44-6aeb4899675f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2e9a18-2049-4ebf-b19c-4b5fd2655ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dccad1ad-2b12-4ee9-9bf5-344da6dabb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0bb2e67-a17d-473c-83ff-1fc35e9a59d3",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6d4b67-7d07-49b1-b0b1-7e13d1a48b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4138af6c-b759-4d1f-ae50-7bbbcaaf53f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fae38e3-6e20-4eb7-b3d2-04000a012340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65d244e7-eeb0-4f67-af12-39f34f357c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edafd709-f215-422b-9973-7fc323358989",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142f059b-f459-403c-9361-d30665163e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d8cbba-c5de-4c6c-b35e-04a9cff2e792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858bd85f-5f8a-44cc-b996-ad955bd188d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc051e99-514a-4444-b515-beccb42f15f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c402ba67-c48a-48b1-8c51-f95c7acb5ab9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad06e54-363c-4820-9a5c-341778d2c47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8855c6-e5ff-4a9a-bb93-910e7d792ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f14ec8d2-8ae0-4780-bf6c-e0a58f28f424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c45abe1e-4529-48c4-9947-26a099c5f313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e991447-1f07-4853-b492-41965b261ac8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26858355-ea0b-4b1f-ac7d-f456b2f6cbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24354c7e-503b-4203-9ad9-2c31029ce426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca569e20-92b1-470b-991e-18515d02402c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc593262-ebc2-4d75-813c-6041716952ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773c9f0d-dcfa-43ba-8908-81725b1e622f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a7b380-a1a2-4670-b006-31fb58c319ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d95fe5-c12a-4772-b6a3-4238f268a4f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65673bde-bd73-4650-ba5f-76396e0609a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "568cb0a1-0457-4eef-820c-fc8c5b108df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21eeca2-184f-4b28-9989-1889bf20b827",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32afd522-6fda-4bfc-9b60-3a618e422d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4f25c1c-34be-4192-991e-55c18210c7c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a178c1-4fe2-42a0-bdf8-7ea31e88ecb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "17db2813-f1dc-417e-836e-e9b8a8f43b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48a28b3-1897-4971-a1bb-8ce4ad2887d8",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8217da5-9ec9-4903-bee7-f37db8482532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a135d5d-51be-41ea-ace9-cd96f782f9ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204687e3-0477-4120-bfe2-2a3c664c9eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "97d4c159-ff1c-4de0-a88e-c0a87177b985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2063346d-142f-43d6-bdf9-4a962750a6c3",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb46d4b7-5a50-4885-a342-5f46ccd46dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca360cbe-3670-464f-aae7-1b01115f931d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5543121b-4d6f-4028-b262-48cb70f7913d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8931aed5-1fa0-4a9c-a718-7c347b46d122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a8e0ec1-7696-4f97-a529-e152d0fe4b4c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fbc45f-07d0-4b46-9d4c-cdef6f6e7c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a21473-e3d4-4195-8e0c-98f225872c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcc3c6a-ae76-4459-82ff-a02184f2c88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb783e10-f232-497c-82a0-d194731865cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a9b309-8145-4ec4-b171-0ec15f96bbc4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86da21b8-c1fa-4ceb-b37e-72a6ceda3b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0bdc950-eb42-43d2-be8e-449a53e0318d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a00a77-08f6-4299-b181-f5c87142ca24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6396fcb-3c88-4895-860a-ec7610fd3f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9cd756-f73a-4ca1-b4d9-522a0b6326b4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63994991-3445-4b8a-9cc3-508fbede771f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0dea17-c4c3-4fd1-95e0-066ab0a90c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c1a5f7d-0b5f-44bb-9761-0dd82905d887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b015ab2c-3834-46ad-892b-6023bd7793c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7469458b-1103-4f5e-ac3d-f97d4659d318",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc215ba-5e11-47bd-897e-d1a6a946c931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f874b2-2eb9-4ef5-a2ce-6e241fdcc390"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025807a4-7935-4fe9-9144-19077833a570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb93dfd-6e0f-4758-98b8-4cf7319f81b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2b61a5-1b47-42dd-9015-52b6c4278768",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc2f4f1-76eb-41a5-a008-a283502841a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e59ba3d-0bd2-4456-9bf4-83058fce91b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e49afda-3a0c-4566-961b-6801b49ec2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "40f5d6c7-99d8-4830-8bda-acc3481197f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1192deda-9d60-49d7-9e3b-8077420f827b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77c3f8b-6389-4ae8-b443-c719cf11e647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5ea8febc-55ad-4f9d-8c22-720493eeb7ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e387d9-eca3-4bcf-93ca-fa82679ead5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cea201e1-1f68-4079-9cd6-f7acab42b1a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49633da5-d4d7-4960-a090-c65b46ae9133",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f73759a-65e8-4889-8007-8f74d20b091e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677d0d5b-8ae3-4672-a8e9-23449e5b866d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c00bed-f848-4670-a0b7-8f16a1c97fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a033255-6b7d-444b-948d-84741be4ec46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3d9b55e-39e4-4aba-93de-db495706b6e3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf46af4-f976-4232-8307-b2293af8ef33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6350ee7c-14a6-42c2-894b-579076dfd4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a32cb26-869b-44c6-af24-7e38dd07dc18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "887ec89a-689b-4769-9356-70da665423a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb3c2d7-2451-4991-ad6c-ea9a7e1a6c9d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcb26cb-8312-420d-9865-f0c487f220ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec2bdef-0a71-4948-9756-12ebf6271609"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a83ead-d169-4d01-8cbd-c696723786db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf49a57a-3069-4bb3-b860-8dbff946a0e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c2a50b-fbba-4ef9-93fc-a70cb212cee5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "651d6414-c5e2-4f36-affa-33d16ee4ebb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7b1ad5a-e459-40a4-bb5f-7b673bf97e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9de6898-6d4a-4423-9eb2-55fd70a494dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6a5b83-d627-43cf-a19a-2236f2ea9e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d7e143-71bf-49b7-9736-c2a3dfa8aa6a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c198319-4fdd-43f1-8ab4-8c00edf14864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8ef917-2c74-428f-933e-6c647d549635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a4d518-1cce-4b45-909c-aec0ad14e35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "570c9527-22f6-4552-a576-caab86abd8bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68bc97e-be86-494e-8090-967612f064ae",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0130ff63-3dd7-4520-b10d-d3b605a9be65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0befb97d-9cac-45d0-a0f0-763c2d841eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1617be-fbf5-46d5-9bbc-65535f320d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "82f91ca8-52dd-4b69-9678-6c87851a10ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246e73b3-c26c-4704-842a-f3c7e8cf67bd",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7368b62a-0c94-4be5-a425-c15375f8a5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9fbdfdd-b432-42f1-b500-3d0a2de2fb8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f2df0a-d2bb-44e3-b222-e0aee92a407c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c448741-0e41-448b-af5b-b462c97e6ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c619a90b-8159-48b6-a807-49a7456408db",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26696d3-f87e-4a1f-aec9-9775d6b1234a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d791596-84d8-4a05-a478-a74d315d82c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d0f320-6e8a-468f-871d-33e2228024ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d26d883-e86b-484a-9857-ed7be349729a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9270af-e62b-4334-8bf2-165287fc31f4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2920bf-e4a8-4a3f-9762-a0f4f33edb27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f82e74-2f5b-491a-bdb9-89eac815ffc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168ef8ce-316d-4925-983d-c4f8df2a09ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "df4d5cff-9124-4614-8f7e-01f66300f9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6b40c78-8123-47b4-977f-94e170675bf1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e86281c-e304-4036-82f8-bbc02c36436d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4276dcae-c4ab-4b4b-88f2-724691e8f941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa952b4d-7a23-42aa-9d74-ead997c3d0d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38ebbd88-1429-4b01-9d11-c70590eabf43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "865030eb-2b9c-432f-8b25-88650a77beb3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66eb1b0f-63bc-4b70-a8a2-b988c89104bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82be39d0-17e4-47a5-8b1f-ca27444cb2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0af6c97-33e4-4305-9beb-f934856379d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0beb01a3-ff84-4939-8fbc-2a1db3dce423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61068ff6-1bb6-4237-9317-fdce506437f7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4cd31d-9d85-4d1e-abc5-28b0d706ae86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c31e0f2-ce92-478a-a2d2-0087990d6bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b26040-f81f-4758-b14a-c94e00f08a55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69d77b94-dcbb-4c3e-befb-140e3d31467f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2079de8b-aaba-47fc-b508-d11bfebdf0bf",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee4c064-22b9-43d4-9d65-652e2e855b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701f4fc8-e5e1-4920-a3fb-b9fc7269ff53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e639521f-1b2b-494b-b252-e26903d87e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50c1e72b-d2cf-4f01-9846-a9d8e7e76d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404ea9f5-d324-4b55-80d2-ca8a7c8a097b",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d5ac56-8f7c-4584-849c-a4e41da766c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8b97dc4-b9f2-472d-8f3a-197f22c3193a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef3bb0f-9606-4410-8f0d-d640f32a82ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f58d8308-81aa-42b9-b52f-427c43adca31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f09e607-c5d1-41e6-84b2-caa387d63241",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65285b7b-4c8c-40d0-9d39-7667a577cbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34ae89d2-d21e-4efc-a2d0-ca6a869eb32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68ad789-fcbd-4765-b7d1-e69dcfc5b471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7623b9f-6027-4f9b-9ebf-13677510792a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b641e448-e351-4fb7-aa73-cfe893334d38",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be56f35-bb7d-4b13-b417-4dcdec18b7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c88996-23c6-41f4-8360-c42926dc80b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080b7175-3e35-4b7c-9b17-beaced45ab99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01bc67b6-849a-4157-a898-a81f73cdd72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c80621-2e56-421c-8b1e-98014c979137",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ddea3b7-b78a-440d-adc7-dabbda8deaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb3522ca-e7d3-4b04-a9ba-0916818c6a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8281513c-bfba-4792-874d-21e8067e59b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "213f2a88-b59c-4a8d-83ef-33a71a79a4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd69557-a15e-433e-8deb-c7ea9aec2413",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a84cdd3-7504-4966-998f-8a7dc55a4993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1898b6-d608-4352-9980-6df737f4ce33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64273daa-6ed0-4e1b-a8fb-5b0f388c6caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c45f5d96-63bd-4815-a394-3cd47a15e590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8b2030-dd01-40fd-b016-48bbd8b9f9ee",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5590cb6-2c11-4bf5-b102-6d9ca7a8e040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c6c0fa-859d-41d3-a27c-80bb2506fb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f056d7ed-f2bc-4255-9f84-cda0a540eb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d4381ae-af78-4710-899f-59e7b864ff0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f9e6cf-f91e-4e34-bf84-8f45ba0e7589",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbc4e23-d0b6-4ced-8237-6abf0c822c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede73c5d-c858-44dd-bbf5-bf3e89b1605c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4b9b90-28c9-48d9-9048-535538eba7a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c299f8-e2e5-4a97-bd31-2fc7bc4861dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5a2b3a-2aba-4e83-9874-3c54f37ef364",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3546d03f-9767-4912-afb4-a39b9df3249d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bd3a2f-4b0c-4a5b-a556-3fcc783d3b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0146cf15-3ac5-439b-addf-3a8411f79732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "491aa51a-ab46-431b-a78c-c5e6405d7eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e0217f-ff19-4234-9f04-2f19a992380c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efba3c32-d408-46b7-9cfc-cb3e5db058e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf540cf7-432d-4ae9-837c-b8bcd99d8d08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb901efb-2c88-4771-84d7-e398bf2bb917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b04dcf1-cb9f-4f03-ae78-1784ddf5b321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8604684c-0903-4478-a829-8fb99f5ca73b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e358e87c-a235-4d29-8ab0-e9fc97aec8bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c015fe3-ccc8-4a15-be2b-68713573dd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3664d64f-b068-42d9-be0c-4b676dad249b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2babc03-7c97-4d40-a214-8efebc68aac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f6f94f-6384-4c1c-987a-a7e1a1547561",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06469a24-3c39-431e-ad1d-24eeef6e4a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5607ef7-93f7-4aac-aa3c-a38eac46f7c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12a161c-3712-4971-82fd-e09d01a760a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "de72e442-eef4-455c-b16d-41d6234263dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727c1c23-d6bb-41be-904b-0a8a9d4fab44",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b680417-55fe-47b9-93c0-9de611b6ef07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92742aad-100f-4fad-9a5f-69322eaed39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e935b9f-40bf-4af1-8051-7518b10a9e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f37ecba9-51c1-42f6-87b8-fd1d539e5dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0419f0db-9376-401c-9665-8ed33c98e27f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a981e575-a5d6-4004-a02c-69fa566daafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b5f2df-2be5-419f-a24e-07384187d4de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afdead6f-0011-4e00-8f90-df6db727c5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "19310e25-8a55-48e5-8719-fd4e0bd6fdb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f65a0fd-a24a-4864-b30e-2f99c680d003",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b107f0-8896-4320-aab4-3e35c2da6634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acaf90bd-ae03-42e2-a18d-fddb784fa5fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964daea2-0572-4df2-869e-6296271ab0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a12aa6-06c0-4bdc-a1d0-b5609cb1a510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598ec4b9-8949-4406-b9ab-b31e6d18166f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "806284c2-e9c9-4e9c-97de-6e86a724030e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba3c87a1-bfe9-405b-90d5-bde85a4676b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82a2ba13-1d1d-4ec3-b6ff-f8d74e572d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60e3001d-f9cd-4a15-ac00-571c99ff75cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e84e720-5503-4903-a42a-b3a77e14f982",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe14d18-97a8-457d-a994-646497bd7d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42a37eec-a39d-49c4-b38b-f486408d388b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c829f486-53f1-41ab-9312-23c7390b1789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc0b27b8-20ba-4133-a22a-b55cb2188764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf6897a-41e1-4d30-b7f0-50e4f267387b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494a3608-12cf-4c21-863c-1b4ddbcc9013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a59fed0-45a1-46ba-821a-08c9386d5d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65086f72-86f2-4283-a72a-867e7352f514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "24276beb-1837-41f2-97da-caf911da6e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9336ff42-d043-49e8-afee-48c96eb870a9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19ec8cc-71c6-4181-a997-d342a0f84987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d7febe-3b7a-4d03-a085-a4f5da201aaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2a0625-b121-47c8-bbfe-ffa17a7242eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "942e63e0-0d15-4647-88f5-3e610c00c8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947aa639-1212-4eb7-9bbd-dde4a0734a4f",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505a1156-e5a4-4d97-a6e2-bc8a8441032a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "436901a5-79d0-42c4-b004-dd72be3070d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f9a166-7146-4fe7-a772-d821c0e9ac89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a207816-9f1d-4780-8397-246511c2b80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3bdd25-7404-487b-9d69-975636a95003",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42970b39-6c26-43fc-9036-52f578b15aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8e4eac-4bc6-4b2e-8915-3a051b582cb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd3b3ee-7c7f-42f1-8e21-4c32ed818e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc826b71-007f-48f0-b73d-31eba4f63136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "783c09a7-ca3a-4335-abbf-25bf2598814f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c38f963-c0e1-480b-9b3d-00768c331926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723e92c8-2fa8-4785-9929-15c49c86f7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee113912-df41-4340-9d57-1cff94533a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0da4fca-0a85-4cb3-8f6b-2c034f6c0eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8572485-14a9-428b-b62f-cfebfd8781f3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82e1198-6198-4783-87c2-bb4bd01c031c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39179300-786f-49ad-84b5-7862c8a5c0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f40bfc-6930-4153-ba75-892cf9d1ba1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbcda4fa-43bc-47e4-bd5a-ba6ecd0883ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3be547-adae-47d9-8f37-6679929b361a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a566b65f-8741-4230-b48c-f7c9c8dbc241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63af4024-76d3-4387-a076-64df1f771e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94eb508c-392e-44a4-944e-3a125755d8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3e6853-6571-4086-aba6-0672b16466d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a5e351-9ce8-4412-8ed7-d49ab870d82d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da37234c-bd09-4d59-bda3-c700cb38310e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cda426-cc9e-4909-94ae-0c269504c48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f80acd-5d4a-45d5-b2d2-fc7be4bf64e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c37225b-298b-4f3a-95eb-1fbbebb9aabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a88c620-876e-4720-9541-6c011282c4a1",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63d64b5-c6ce-4fa2-9cc3-f55917a7c722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c102aa79-e3d5-439e-a8e3-6b90992ea23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d93e37-ca37-469c-813c-e64fcc711e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fdcc1de5-cb50-4fcf-91ba-b61fd1e28f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a678d2f5-3340-487f-90fe-595ade2a15bf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b3d2131-e323-44c7-90dd-74f8c7f6e554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c5ca24-68f6-4920-8027-3b8eebeb6c6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc583a50-773d-4afa-8945-afc496f9e565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d51d408-3c76-4c94-a8d9-851bd24f3cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bf4d20-ec06-47d9-a6ea-cc916e023ca6",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84882c8a-e45c-4d52-a2f7-dcdbee42aee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb0810fb-12dd-44f8-8789-b9b01aa4538f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fafa14-6252-4816-acd0-315e4ca374e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9abf79-93d0-4a5c-b9e4-345b5f78e322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2026fc5-9aca-415f-b6ea-bf9997802118",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b645fb-afb0-42cf-ba3e-b0bd8a6ed6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6767e45-f6ab-4c7d-bb7d-d8202d7bf88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "936a8b42-69dc-4717-ae04-6e3d50e20e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "186595fd-5ae7-48e0-afee-24440b392ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a987a00-5a73-4479-b8d3-781c71731b3e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a315a0-3d5a-40e1-9c0c-3d4ce7036283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f6b605-7473-41b0-b4b8-36ca6c92b6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb486cdb-1fbd-42b6-bec5-48d02db13bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac033f85-5d92-4709-afa0-58e8bac4af42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f9eadc-9ab6-43b5-9cd3-6e49a1ef0798",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81aa489-caeb-4554-9420-7293ea578c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "468c2c58-1595-4c16-8d2c-0f790b9b28fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3568100-7f3e-41e5-a016-c24e3729f17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "61516362-57e2-4aab-a130-922fa2e0e07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c806f93-57cb-4c7b-9421-a957408e3238",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58504b1-6497-42cd-a05b-b27833e4b8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f53128a3-f496-4e03-8cb6-25147b33256f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38167f12-cc49-4d47-8228-7af9d0747415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5927c26-78ea-4a54-af0b-41f46b368123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece49f2d-0589-4917-a35e-0c70e74dc416",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ebd7978-d489-43d3-a9b7-6c9cbcf5a921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed8893eb-4aba-48f6-afc4-526e9c93a7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dedb7ea-c613-4813-9a17-260489c73d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "64535c63-a017-4d6e-8d8e-513c025cacdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7891f37c-995f-4abe-b1c2-369c3c7f7f4c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3a1513-410c-4191-a378-4d5973daacaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7700be69-11da-4512-95dd-cad996982d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f28d9f-6749-4d99-bb9b-ad41dd7fd449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d91ebb77-cbcd-4e6c-b841-69df3ef93e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffeab2d6-c67d-47ac-a7ca-58fb8b5471e7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327110a5-743b-42b4-ae17-cacecfc445fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffacaedc-b9e1-416f-8f39-b14503645033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91932a5a-4e05-4852-bafe-38087adc8c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c57aa64-ec91-45b3-8b32-134af0c3175f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19947497-2b39-4a6e-a499-ad68a590e42d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c07eb17-03f8-4f90-a477-1feb6dcca868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38bb53bc-1add-4da4-baf5-573b9d88300d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "928175d6-4c87-4022-8398-fe33f9f1d27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "673a78d9-5b37-45f0-83db-1333cf568308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cea3c76-cfd2-4452-8334-4532c9599995",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c51f335-9e2f-429b-8ccd-c42a7a14d583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b49257-3301-4165-97e6-235a0091eebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdee64d-27fb-4761-8132-fdb1fbf77301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98c4a185-fcea-4188-92a1-c90874243466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062f5ebd-accc-4c0e-aec6-6496c632b155",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9f41338-89e9-49ce-ab6c-1f5439722d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0e4137e-20f7-41c0-9cc3-1730c5996e4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca3fb65-f1d0-402e-8658-5d58ec1f77de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec6d2083-474f-4558-84e5-348e9aee7ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a07566f-ceb2-4bf9-b9c3-ff7694a857c5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64638c9-1ec9-44fa-aa7c-c4b253646c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fcbe6f8-e1c1-447a-a872-0c3400bcee94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6f5acf-4822-4dc0-ad36-4fa2b18ae4ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c93323c2-f4f5-4f61-a5ed-972d2c53bd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93dedba-d2e9-414b-8b92-5d77a41c8ad1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349ef451-7922-46b1-a51a-4970131f9576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d9f049-0495-494e-91a1-dc5d3c436ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f17361f7-0dfb-4d49-a2a8-901736d1037b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd346f0-1c3f-42e5-9a82-b0834b46d8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e8c6f7-f7fa-4b8f-977d-7972e47f0566",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a1428e-0f9f-4c05-8ce2-76cf0f50d997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc66229-764d-4f45-ad48-d0bda9494a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e24d052-b63a-465d-bed2-e73e297d6551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2a3559-620c-44db-8d95-8c333c5725e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a305ed-f8ea-4832-b1e4-aeca7a404768",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d47269-e7ee-4fee-b034-32c94f3f4f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebcbe45-54fa-4e36-8d00-4b0f753f990b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6d0b40-27e6-4150-ae31-bf24efb54d67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "90930f4d-5eb4-4a92-96f5-ac1efea3b262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1905c256-c2e5-4381-85a4-2ade829a13ce",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95518da5-fe73-489a-9bab-0326b04c6992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc12b74-526b-4b0b-9a1a-123af28680f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53ca148-c62b-4644-9015-f2feea307ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2f93454-1a2b-4c7c-92be-bed5d0c3473d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95648db1-3442-4283-8c47-875db89ddbf0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2344652f-f413-4dc8-a46d-bfe678d3a412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e6ddddaa-6cc9-4bbe-9da3-cf0b7014d471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3277a0-e051-46f1-9fe2-247c0dcc280b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "45297afb-a3a3-4747-b6b0-c3d1aaf7922d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f746787f-a55c-4e72-9f63-1ee5d27049af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0647bf4-82ba-4119-83ff-d56960bd1360",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22309e3-8141-44c8-b1eb-196f9011558d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2047d8ab-63c7-4625-bcf4-799d0d5fab9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20002cd0-acc7-4b5b-b73a-0959c8c7b80a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c07aea0-c8b9-4450-af53-6d533fc0cdb8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae253ace-eb83-4a88-9e91-bb278479e63f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4638d80b-35bd-477e-be9a-2a9733392876"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "91b457c3-e301-4402-b69e-523f2e833bf5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d35998e2-cb3e-428e-9e8d-c2fefa4f0d40"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e381c406-2b13-495a-8c9a-3f77de6b0239",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f44337bd-3c47-4a62-a70e-b77ebd1fc5fb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c45a257b-8c28-4147-8d73-00ea6daf81db",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b37bdaa-aca6-4c3e-ae17-a42687b82f45"
                }
              }
            ]
          },
          {
            "id": "37b5dd94-8611-45f6-b4b5-b2f1d8026cbc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3c474d6-e421-4c71-84c2-24b003df28e6",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "bb2b789c-d43d-4cf3-9397-f4eecb1b42e4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb23495-5c59-4809-b07b-f88636e46ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e4f1ad61-88ed-4236-8d1e-1573b50363d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8d12a4-5cf9-4f47-9c34-53b56a3fcb5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5178baaa-6375-4645-a3e8-a9e42a3c80da"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c435168f-73d2-46c0-9b91-2f13f4677cda",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb9d4318-373a-491e-978c-5897d6e5710e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ed9413c5-6931-4f69-b7f7-c285cbeb98e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5441e0c-a860-4e89-bdcc-02313ce31888",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8bc932a-2077-4cb9-a4ff-543de6c294a9"
                    }
                  }
                ]
              },
              {
                "id": "24641bd9-bb81-48b1-acae-60c6cd5cea16",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "077d3068-6cf2-454b-b09b-8a3609e29789",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ec3cc23c-ad54-4878-bcd6-aa7108ea8ab1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8616f225-20bb-4bbd-b94e-e0b8cad7575b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "86bbf54b-70b4-438e-85c2-92fd62c3d72e"
                    }
                  }
                ]
              },
              {
                "id": "0ae3539b-14a8-47e3-b946-d03608bc353f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9190c7d-3548-4831-9bf7-e6f256772abd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "37f6ba52-6894-42c4-a50a-7910ca1918aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16ee09d7-5bca-4353-be9c-ff53c1ebdc0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "37d9f55c-85b2-4534-8e49-87052a5bf3ff"
                    }
                  }
                ]
              },
              {
                "id": "5f38d088-d393-4138-8636-cbc453afe121",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8f61036-a2aa-430f-aa57-8b3face7cab3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67a8244f-870e-46ea-848a-3bad596191f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d976fb72-16c6-4c9a-ab08-36cdf02c2891",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "74764af8-c02d-4365-9229-a4a0f452be08"
                    }
                  }
                ]
              },
              {
                "id": "9766cccf-92b7-4fcd-8f2a-84d87481b62d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0b891881-2dca-4537-8dbf-52404583faba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8a90281-aa0e-40c9-b38d-ac7b8df6093a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "face9b3f-d078-467a-a599-0843d26ca235",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3f33563d-464b-453b-906a-14a91c903703"
                    }
                  }
                ]
              },
              {
                "id": "5e0e3551-ee17-4d04-b8a9-df9744b3d85c",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cad240d5-2031-4b4e-8880-1886ed53554a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31f47e22-fb0a-43d7-87f7-7eadc4194d85"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6058d7f-bb85-48d4-b7e8-fc5315e75e1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0b9959d-7bc0-4192-8b80-644a8814482b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8a471b06-ff27-4bdc-8bd9-9607fb068439",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e605dfc3-322f-46eb-bd3f-f98c2444a26b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "109cd721-4e6d-48a8-af2c-afd0eddd5868",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a3d85d2e-e1bb-4f3b-9531-413d0bf0b1e9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41972ea4-15fc-4d68-903f-71adb20b5562",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6fa63672-3427-4838-9434-bb06c678fc30"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "65f92e38-dbec-43f4-b921-67c4a5a3dfbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5955ec6d-6e8f-4653-9acf-480b964501b2"
            }
          }
        ]
      },
      {
        "id": "f1decf48-aae6-4c80-b333-35cb4e85e6d5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "29388595-6af3-4437-bf1f-ca0d08778806",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e58a0d7e-ab92-4234-838c-2bd8966c6071",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3e0c5a46-f46b-4a7f-9f48-6e37a6166a58",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce9e01b-410f-445a-9b4f-240a2882d72f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c545bf4-9b1f-4eeb-a390-4245111abb3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67aca876-461b-483e-971f-3323b9782702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "6858403f-e230-4482-8ca3-7e282e443de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86af5aea-304e-4980-99bc-0a744d02bf58",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfde775a-dc90-404a-a806-b5da93822cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b1ef0e-9272-439f-b864-c5580d10fe94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05574df5-fdac-45fe-82a2-0f96082593a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9111ed1-1e2d-42f8-8aa6-25ac55d01985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0b87d5-dd06-4d41-a4c2-d8aad2f3a3c8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d974cf7-81c3-43ff-b702-257276721f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "456f55cd-6216-4444-a2ee-ec56905e19f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804847c2-4378-4fae-a205-617f31cb6746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "01171e48-2a11-440c-8920-af60dc420f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b312fd4-1a17-4960-b7f9-7f213e74c1e2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9a0aa5-76b2-4a14-a003-eadc8c78760d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48de08d4-5f5c-4b3a-bc09-78f06d2a5d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a8915c-5406-4382-b13c-c68c93c0650a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3afdab3d-316e-49ab-be02-7cc8212e9e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f4857f6-a53c-450a-a035-c5cfafdd4914",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d672e941-a9b7-4ffc-a0a6-7577d55c9f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc13f8c-254d-46f6-a7c6-ee61ed42f69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a644fb-7952-43e4-aad6-f6b7a832a56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7aa9ba45-14d5-482a-851b-c41713a4b233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbcd9e3-1822-409a-bfc5-29714ba34d9e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54aa384b-f44f-4b6e-8534-60749a2b7771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b1ff4b-9479-4c71-91dd-ce29381d488e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8aea64-e563-4f70-bc3e-131358c000aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ebcada2-9be5-4559-a587-7658cab49faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1166ab3-0749-4017-8cc1-d1e1c824da2f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612eb123-c176-4cdc-873b-f7c5db82efd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4beab94-fc43-4bc7-aa8f-44f84de06f51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f93a722-0b66-4743-8957-06487fb13adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba3c5bd-cd28-4bb8-a089-06648d4c87e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24e935e-afcc-4ca5-89a1-13ed9f5b3d3e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfcfa08-893f-4ab4-9b90-0b10e5e75921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d224c2e1-2c2e-4bab-b39b-ea15813fcec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b19697-ca86-41e0-b6f0-b18f204590e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d0187dc-7a44-459b-82f8-b4300ae88c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf536cad-32ab-4302-8fca-20be6d017d6f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e5be7a-9736-4520-bd40-81d5cc82f39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9badfd27-06ed-4a9e-a5ca-f283c7080f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b59e0a9-b817-40fb-9715-bba0ffbded55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f70c9ba-34d8-49b2-a374-0c3f1848a974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936d34f4-1187-4f6f-b9c5-3bbab3c99524",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c706e007-4d00-429f-ad13-ade2d7a4ba76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c08765b-c7c5-4246-8f3c-7e7764cb3287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e398e90a-7b7d-41a4-a26c-9d84f7149465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a34f961-5e4a-48c1-859f-87ab08c14ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a814482-8abc-4695-890d-1fd45058b637",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c301f2-27f6-4911-987a-be42bdf277d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "310fdbdc-d967-4d16-a76b-02086ff62917"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a1372f-30e3-4d83-baaf-87bade07985f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce9d909-821c-4c4b-984a-5ec0e045602d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba82d97-87d4-40ff-9f58-87cf7fd81306",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8e7cf6-d356-4416-ba91-4867735603e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9670077a-3d06-4c42-b0cd-eb1e2ae32a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aafc527-0d8c-4554-9aa3-74479d7ea76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1200e4e7-ac4f-4063-a2ab-905e74d2aa68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ea44e1-e1ed-4a38-b590-7e8a4ce329b2",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b78241-ad58-4398-a1f9-abb5a2816d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "769d4dab-639b-4d1f-bb9b-6d5c53a3e1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce72b869-78ca-4673-9ff9-502a5df7e5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "067e9176-d5df-4d2e-8206-80839eeb07b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9710dc6f-a540-40b9-acdb-05129969ecec",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a32e4b-8f28-4b60-a15b-84303004af9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd4f501-3902-4191-8608-aa9c791182f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2161ca-aae8-40bf-90ee-306c54d519f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1019b6ea-03eb-4d66-b9c5-003b1c83511b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7038cdfb-a80a-4a22-a068-d56fd1b91958",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71c6939-b4b4-470d-9a53-85764de3ebe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c510971a-5aed-46b0-828a-73dab2422b7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0cd322c-488a-407b-9874-1f22e6eb83e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d6b575-5b08-494a-aa7e-ded0e3c64460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b613c7-d6dd-4182-9c44-55c32b62756f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425941e5-2dfc-43b6-a00d-63dccd7759fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8e190ca-4dd3-44c1-8700-c3105f3b2951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57432e8a-ee47-4b52-b1c0-9119c4a75acc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e07dd739-3e91-4590-ab85-ca041575b821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587f408d-7e14-4a37-bce2-44322f09980d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "805eb001-7b37-4b2a-96fa-435e49c12691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "327dfdf9-bc60-4484-a265-9084a4c2d3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed44455-99e7-4125-b5d6-a6d0f98112c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe15e4c-7573-47ea-a376-9c7cb711b448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9be4ad-6f0d-4338-958d-19e553b8f089",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ddcec9-9680-479e-a6c4-2b95575bb2dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c1579ad-9343-4ea9-8cc7-453ecebb4162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f981561-ef2c-4df3-959d-5c71d423392f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "70172d09-1951-44be-876a-faf36f5a3c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdc6a1b-f70a-4278-b40c-89f1df5f32bd",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8277e60c-fd66-4546-9ecd-979374ffc82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488f45c4-83f9-4db5-946f-1877597d25af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679507fb-4644-49c8-9a32-d7248c334a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c665794-45d4-49c4-a07e-2fb72ca858ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c662f7e-7031-44ab-89c2-c8a8b67a8b18",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51048df-4e3c-49f4-8c3e-ad2ed50b75a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35eed0e7-f06f-4be7-9b80-9f142269ebd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6309e371-5223-4ce0-a2d1-eb41d6e49724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b575f1-37eb-457f-bfd1-458572cc1503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48084d39-b536-44ef-92f8-273e0ca60d6b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd543481-a9fe-407a-9273-bec4abff5fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8084648-8dad-4295-b693-4d519b83dbc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5885a913-51b4-4650-b50f-84bdfd83519c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34e8af01-f15e-49b9-96bf-2457d3023875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb81ae0e-19ff-4a19-af39-091bb7ae01e2",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afff16f8-0ab1-4b36-996b-9e7123851ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc53d5ed-db31-46cf-883a-bf1e41c48a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fd88d8-5988-4bf8-8628-43d1dfbbbd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00adbca6-75a3-4b3b-9943-002ab3fee8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f7c6b5-12be-40c8-b7c3-fd4c0ac43549",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d35c3e9-e9bd-480d-8708-1ebe47a09ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0286171a-10b1-40d1-b650-9414a45149cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c1cabc-e714-4ea1-9821-0e6c4813c4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f105c4c6-2961-488e-8bc0-78b3a453269d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b4e889-569c-498d-9467-fecbf9bd9363",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9be1486-5593-4db5-bdec-cc058afc0cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be5dd84-f99b-4740-9ce8-a9becc39465a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92349e1b-1b32-43f4-ab27-8e50c4c1c9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e18eb3db-1217-44c6-aae0-2995b75531b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6446eda-06d4-4ee1-8dc5-8bb1d608aedf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff724d0b-2d4f-40fb-871d-61bbfede5146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a802d29-a5a0-4d49-93b4-4a02634d2ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64aa599-ea32-4b14-b4d7-55cd65044e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "630143c6-21b3-4d02-b051-62b8ba5fd02d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086fd570-9452-44f4-aebd-f3b94ad27be6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9395563f-e065-4cfd-b586-a143f38f4147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98193665-195f-497a-af47-19b307a786a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfc65f55-7936-4002-b885-27a391328604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddd6bff9-7ba3-432d-8b54-81fe52dee486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba14650-ef98-4448-8e75-96b8b836c5bc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75206bd8-3fd2-4761-9c1a-9b45d7934190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd45d2fe-0ba8-41d0-b892-539ffae593fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f597df6b-d5b2-472b-b88d-73a1c8386e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d668222f-0bd9-4be6-bc63-2ca1a24d341d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89ef660-ce3d-41ea-b254-b35cbe4023e0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629adf46-99c1-460e-8c5f-c92725944a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e6b0c71-a6e4-424f-88cd-5202742aa77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62d8751-1508-407d-867b-0840d26851ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78c54e82-40c1-4679-a211-a0b069935333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b8d056-b686-41b9-999e-7d690579dbd5",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6360dfe7-fb63-4803-87ee-0fe3ae6394b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b593a163-690f-4af3-8548-0eb92ba965b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a904670-4bf4-4895-ae1c-dec76f89ceb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a85b6275-aed9-4d24-adaf-57fdee72cf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1f6bc7-e308-4a66-8779-6b4f37962654",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc8c507-1766-4a19-8abb-ba940f5072e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8057d111-5cd7-47ba-b8d5-3b8ca122df4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b4d361-ad5c-4a21-ad1b-22f45433f0e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef552e18-2e92-4624-8f33-4e2502b3b2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67a7462-6979-4371-a71c-b0e09e23dc4d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3007b7-3e85-4577-9913-2cb01086fb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2bad89b-1a49-4554-822e-2a17595272f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894f8152-15c7-429b-8440-0aa4b8d27baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce53f898-6f50-4d6a-9ab0-a1fcd667d1b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f8d1e6-8df6-4c34-92ea-6c9c78959f0f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d8e312-dc6b-4d3e-a3b9-a853b098a95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dfd3829-3c34-4ca6-9204-d0a400bd50c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c64a17-86a3-4d2b-a424-db03fa9df892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b2e042-9cc4-4322-bb94-a2b3f937ffa1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2110e903-76c8-4702-9125-7d07618ed7b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "634f8448-a1ce-497c-8c7a-f2fba4cac2a4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2c5244-b742-4928-b905-b2c25c5e5496",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "84fa3d80-a78f-4920-b5e6-5f144f9a04ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23143826-be7e-45e5-97f6-dc445d855e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4067210-c818-4e5b-86f9-e24cb618e905"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec01b099-f475-4301-aca3-4ec9af83cf53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "356c8662-4a1c-46f5-a15e-61ba37af9219"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f8175a3-659c-4536-a367-cd1574b023f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "781851a5-1d68-4f4c-8c93-2aa020b8b282"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "635b734c-8909-4cea-94e0-7956ec2b3f6f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78b053ce-bc58-49ec-9aca-76f75d31521b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd8ed02a-0652-4f69-acdf-f1d90edcf257",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc14f73b-d98e-443a-a307-953101650403"
            }
          }
        ]
      },
      {
        "id": "81b3e078-198e-4a34-bb89-63ad96f979bb",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "cac8ae9f-46f7-46f8-86e8-4e8ca6de056a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c762cdb-f2f0-4be7-b999-01f9f092a569",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "40ae81c9-aa24-4d77-83de-0efa2f21c4fe",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c504a3e7-18e0-40c5-a2c6-220624fcccbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c3c50a-1e1b-4684-bc99-883ad8a1fdde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39f11a6-68e5-4592-a701-e8b0d18ed5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfb31e7-b4d8-4645-bc34-abbe28e8a9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e9a337-dea8-4123-9d21-c84eea1cc05b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f552914-d6bc-4fe0-ba0c-fa15b4b6393b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ce52ff-b96a-4518-823c-8f9faa70f272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b545b4-bd05-452c-b117-2b90ed7feb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c41e01c-4e76-49b7-af09-23197cd3e8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18a1f9d8-3f1e-4338-8937-286b415c7047",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eccb4220-3062-414b-b7eb-ac5fb1844caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5a8211-06f8-4ff1-97da-b0ee8da422f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964bf05a-302c-4133-841d-1f94fb45a9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1d4b0af-821f-48cb-b1a7-38270117ea90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351384b9-09ba-40a0-9b48-84663b70a115",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fc83b7-c702-437f-978d-94898a50011f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b37ea58-85aa-438e-8f4d-768eaf3f49f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0f8a07-b1ce-4047-9084-49dfb59d9e1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86ba2e33-46c4-4c15-90e9-08f38b97ba34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8beb3a33-f070-4daa-a1c0-cc8ae39982dd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae88e36-fc28-4ccc-b25a-a1815f17f8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a14ccf-e9b5-4cad-930a-2972e01c70d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a07c93-2236-44f8-881b-02495bd7541f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "025f146c-b72e-4b05-b10c-bb6acefa1e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32451586-8bd1-4f94-aa67-a3d967b0ece5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ee4af2-0978-4ba3-a2a8-4e8732cb01c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab064e05-a20f-49ab-9b7a-3fb312e5334b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b47675-91d3-4559-a6bf-1b0bb90696a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b21c6fa5-9324-4e30-9fc9-5443d23bbe25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e8ce01-6c04-441d-b48e-b050bef02478",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad9efac-a64e-48ed-98ca-9a83bdd09a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76bf846-daa4-4991-b069-bd25781b53ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60b4b0a-a8f1-458e-a247-72b109c8cdb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f4bf2a2-55ec-460d-8bfc-8cbc72056f79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac9a337-359d-4fcf-aaa4-56fc58059077",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b10bfca0-be4f-4001-ac3b-b0c6003b3caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f22a28e-1bef-4bbe-af88-f9015f37c022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fe231c-9a60-41de-9286-f38b87dd9687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6139e056-5f76-412e-afaa-c751eca2b511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66ccca2-48e7-46d9-8739-185ad8508254",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ecd10c-2e5a-497a-a9eb-f1ae25918c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8327fd15-b5cb-48e3-930f-c1b4da2c29ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "268654ac-0d31-49bd-b21c-da2992a74154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c94e433-f776-4709-bb07-97b52122fbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fb02cb-cd72-46ff-a8a8-fa7be11cce99",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149e5c77-dbff-4857-a7a6-b5c14123ff5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2157fb32-c769-4b71-a8fe-3d547ef289e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5598a217-36e8-4823-913c-09325a9880eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5287c0b-30c9-4834-80a3-3a6056ebc3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbf5461-f483-4d2c-ba3f-9cac6d2ff173",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9b15c7-d2ca-430d-858f-48f4916482cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728ef9cd-ae57-4788-a626-3181065be72f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6bef99-7ba6-44f8-9946-292c1280bfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ecfe5a44-46c3-4160-9b7c-8fa8f7b9a0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb24a8ac-0232-4a25-ad9d-da97f46ddf4d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838b189d-c139-4d61-bb6c-59852bd14316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6c196e4-7093-46ce-ac6d-631673721308"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea841372-66bb-4bff-98da-88165def0257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a62ebbc3-1e38-40da-ac41-3c3e211c800b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27b6211-4ff3-4b10-8630-c25a296d87be",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c32cb1-4dbe-4515-83b3-071c45e49503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441e509d-e576-4be2-abab-6346fe5ee3eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "190d092d-4efb-433f-9545-8696c7b9c780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac6ba43-c5ef-4038-84d8-1bdb49b58a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9205a50c-56c3-4103-940a-c26fb1dcd56b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c293dd16-478d-4166-be81-d26d45cb59f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f78c59-4332-4aa2-8b58-b935eb17b3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2a0d8f-86dc-4e34-833c-197d4a77120a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e44811-3131-490e-ad71-c8cfa04a9179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59baf37d-c5ec-40ff-8fdb-bbbc3bdf79d2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be67bf89-614a-4b3f-b991-7c143f8440b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484d8684-977c-45c8-a427-97391bd24e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29b75c72-2a98-47cc-8d22-7088464a55e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c939fc84-abb0-49f6-97c9-2c2e0f232bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb4c2cd-027a-4bfa-b93c-d803959786b3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024e2b2c-76ac-43dc-b9de-c56414d34fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e2e442-5c75-4463-b83e-70f94815c3ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97cf6f31-c824-49d0-903a-84c23ba76cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "31852e64-be74-48d0-9183-012e10f37fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd94c3aa-05a8-4882-8e7b-092ecc330a1a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf0172c-dbfb-4159-b6a9-a784953d6226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cbdb003-4e21-4a80-a3dc-5437bcf1986c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2977b6cf-bb20-4d1a-9135-e93e9483d8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bdee790-a685-460d-9da8-bfcea4a3db47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfadfcf5-adbb-41ae-8ab3-c7d3c56885bd",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4670f8f-2156-470d-af64-9e502a719ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a1db640-9ded-4aa5-bb2c-ed8e67e02289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d194aafa-907c-40b0-ac9e-48f505d01169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0084b2e-3dc2-4396-b702-e06efabcbeae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24121cbf-daf8-4bb5-89ca-6cf93433a730",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fa17511-a4a2-4049-bfb7-401eb17fa771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9587c70-6fa1-4d53-a316-cfa16d774002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cff1da-f333-4555-8226-b4eb72fa4489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c171022-14d0-4216-b964-e3e7eaad1b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1386f8-c81a-4b58-9bf0-46d9a22e1132",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b765f2f-8023-43a8-94d5-02543ad1b7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "369ea854-fa1f-4cfe-ae00-5a29180df57d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2773dcaa-7b6b-4380-ad30-081b473398fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5ab36b9-a4b9-4bc4-a73e-5ce12541d9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52061f3-bee9-4ad4-bd3d-07f34da7e65a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5727ff7-2b5c-4b71-9eb8-6790f3d6642c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0bf80d6-3af6-4d92-a55c-2c526594a846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a31af2b-292b-4439-be9d-a6bd6b066bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e899fb4a-0bf9-4dfd-9dca-66b8ac811469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b2b5ea-f661-4031-b25d-3c04c89463f0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a8aed4e-b30a-420f-8994-3f58e4f4088f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23bad49-6362-47cd-a338-600bb3634bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f236ada2-2bbe-4e61-a66c-7a9b6779a764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c634b4-ba5e-449d-84f4-8a346165d4a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a62bf9d-95ed-4c15-b1ec-33a609faef46",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd88dc5-1e43-4276-9d5f-2a4c37c876c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c3adea4-e8c0-47da-bf29-533a0ab66a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38b242d-6285-4a27-9e75-4b597969b439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89280b72-5212-420b-88bc-8b46ae4c01c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5cde51-9018-4dc4-a8b9-2d4119551805",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548e3581-cf39-4f5e-8e0d-a45fd8482b0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1bfe0cc-ff13-4d76-9c9c-247c74711b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbdcb36-2d45-4d79-aab3-446df3f60861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2301000-c145-49e2-9ebb-20513a45fa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0364b47c-0e2e-41d1-aed8-9c48dd10ec64",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af4fabd-d093-4b87-bdd4-e8e7ec7491c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "101dccba-7576-40ad-b118-16ca6dd063e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f728d0-6a92-45fa-a2c3-27caf88986c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fccb0951-ca8c-4b42-847c-88e809b8d5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d0163aa-56d2-4360-af9d-e89e6112bb08",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7aa284d-2c96-4a93-a640-bbb522583e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1f6edd1-df26-4dac-890b-43b35e026af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14058a3d-d08c-42c0-aa60-362b96c64ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b6afe47-c851-4a32-b92e-dc10a57c5aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad402aec-0983-4993-9de2-f5106f05f18f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1b9a99-b494-4f31-8014-e2343429905e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f95e94-ebed-4ae0-b4e8-ea9b3198808e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34646dd8-c2d3-42dd-99df-bba82adfd820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82ce9684-a6a0-40ee-afb3-cec6fe2422b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3d2ff1-edce-450e-b08c-5dc025557171",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f39ac9-36ac-4a90-b03d-a2693a0a9286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c23684fa-73e8-42b1-baa8-3c3bee887ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fadf6da-4aab-4f9e-933b-30218b591f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4defba00-4f98-49a9-b538-e3c77d2da625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94856256-ee0e-45b5-a9f5-ab3ab67e6f97",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a195e44b-cfe9-4272-9d5e-e02de24ba304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c70c32-39da-47a6-acf5-9467e25c24b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02f3ab0-e008-410e-9890-f767a77f2656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b42158ec-6191-4867-9471-ffa94115f572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1600ccf8-d368-44d0-988d-045a59ed355f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94898ca-aa3d-4913-91c3-1e10c2f959b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5fef463-7c36-4ab2-acc0-2016dfa3f9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2617e0-91ad-4c1b-8a6f-62775ae9700e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3625429e-48bd-45b1-bd4a-e3a765ec5f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb63f40c-9f0c-4cc3-bb6e-4b4fdc635f45",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ceeb4d-f818-4b50-ae78-eba5563590bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4c877d-a652-422d-8627-42e6392e777b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d6f79c-c374-4ceb-9c39-8def8ae2e407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aae4f55b-e072-4819-a4c0-2d20b5f69131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b0b5fca-6cf9-4ca6-a484-d4beff0678b1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b4f9024-8764-4ab7-b316-d318cb2c87cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949a3bb5-b79e-4350-b192-8877f4d0fb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf20bca1-5373-475c-905d-ac1928ddcef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0533ee07-d1b0-4230-a830-c4118c432479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0641642e-bdff-45e9-8da7-e33c8d61bfd4",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18aab7b-6b72-49b6-a968-ff5574140c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110db51b-95b9-4b56-b505-a3305bad1d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a28d88d-c27d-41dd-b6f4-0872860c4245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45e5524b-019e-4534-a0c0-478aafbf1670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc22ec0-5521-4235-bab0-e0174317a9e0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3401c49f-2734-48a8-853d-62045030b7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0674e84a-f1af-41c3-9b2e-66e946a84a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0bb290-f191-4a08-8ce3-89e6bf55fdf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a109dd5a-1256-493b-8577-5ff0a33af9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b647078-b4c3-44cc-9f9a-7cc01d3ef765",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d14018-9d54-4f2f-857a-4555b9c4a636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3c3d55-6547-4580-9b4a-972426a1bd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8dc185-f1fc-4440-b005-3f948a4d9a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b02495ab-9a3b-4345-88d7-4a01f721ee01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2082c2d2-9eb7-4c45-9291-15dc410a5f28",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38648ac7-f839-4a4c-bb0f-cbe6f14be71f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c23e717-1056-4a24-ba42-37c89c9144ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1d2405-5869-4ea3-9cec-2196bac9c673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1422e093-3f9b-4db5-857a-36db2e47dddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab8d21a-eb6a-4aed-946b-8c77065f542e",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e81d9c9-f7f4-4785-a532-89f0736807cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5efd3be9-ee41-4c80-a52a-bbc517cd7285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c7170f-d762-4854-ac22-e89b70f99425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8693d36a-33cb-4882-9878-bcd0c5d6a096"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f12894d-5bcb-4d6e-ab3e-1eee9ed7d871",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "acae559a-2a2b-4853-96ad-fba7712aeb97",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ef6329-369c-4270-ae6d-197a3013b6a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf05b79-2a26-4d63-a4aa-bc2e94af801a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef3e295-0ebe-48ab-b58c-ce6f849efc36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f3f65e5-912e-4f21-96fa-6962bf0b177f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a25bc9f-b21e-4773-b6f0-2167fcebe4de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2b9ccc7-67e1-43e3-9597-63abd80a5281"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87bea293-ed31-4a9b-8afb-ad927bfbc9bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e03e554b-f26b-4b90-a5d1-bb78020a8149"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5fb8fe6f-2379-4701-87b0-8aea9caa4409",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "981edd3c-06e5-42cf-924b-29f824a4990f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c660e23-a059-4b28-9f6d-85b20916f365",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d16dd62-9b4b-4253-bdce-02952d83a707"
            }
          }
        ]
      },
      {
        "id": "d2e9e5fc-3ace-4961-82c4-05b3a65503fa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "43634b7a-0318-4f16-b31d-d0e4edaf634b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4cc26f27-331d-4ebe-94fa-3134001adc9d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "08b6a56d-789f-4006-abe9-1f6c8d4312d6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb47b608-0f82-4851-a2ac-e8fb93250e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e06013-6e22-4e39-b0dd-c2da4513c6ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55befadb-baa7-4252-82c7-dd1029d575fd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c8dc95-0a0c-4ccd-b87e-9db28ecd9782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52fa5c59-8ca7-4394-a822-42cb19871e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81890cf2-eabc-4b82-ac31-665ac4e952a0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b60773f-efc6-4b06-b8eb-6ebac995fc65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb41cc13-3063-455b-9d74-b10d1e0137a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d176283a-791f-4293-b451-2e0e46180720",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38a5693-7922-4dbd-a0f1-9236379badeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "746dc403-a7a9-47ba-9e2a-763379caa5a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb1de41-99a8-43a1-af63-c9d415bb6fd8",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcebb2ee-f5e7-4f48-a5c4-45a48d6d446f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6b3fc7-30e7-4fe8-ab7c-b7ad47739a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "901a6845-5d8e-4830-a341-d11780a51cf0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048987f7-4cfd-4159-94a8-b22e839e002f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e59c61-7d4b-458c-8236-4b1bcf749ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef63adb-653e-48c1-817c-3f85a67cf4be",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9805a4-ae27-4861-a5ae-4ecd2b5934aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818e47b1-64e9-4ed8-aa2d-307071bfbad5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fce6c4a-ee21-4434-84a0-c45decaaf986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f757a790-ce63-47b0-a97e-8f0aaa8e8106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d26f0b-6ec7-4c5f-b344-9b09419b60e6",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8640b384-67be-4ede-806e-dbacca49f12e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cebe31b2-2edf-4e48-9e42-3f99ed2524cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e6a2033-bd64-41de-a8b3-669cc787449a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8153e383-12b3-4636-aadc-c6a718c196f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1e0706-9fcc-4438-9b70-2ed34e544c22",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d66987-e2b5-4e02-be8d-20767015aafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b792a0bf-8544-4339-a68a-6294485b2cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "605d6208-4391-4fc3-a2d5-aafac7d3b20c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32721485-29b1-4e67-a864-47100d214983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4915ba69-7571-45ed-b48d-4099ac9b8a5f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2f73c77-281f-473b-90b9-95e99023ee22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4a9b96d-19ac-429a-b25b-aa8e43c5032b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6382f239-2841-4644-a9f4-29caba8e0b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7fc0145-5c78-49f7-850f-71826dd236d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce4f9f6-f6ee-41ae-a4a1-3360279f10fb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613dc4c3-7312-4d86-92d4-6f270450d3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bee9547-03db-4c09-abdb-a2fdd6e07b51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3a2b73-6ada-495c-ba28-c92717872619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "509764b5-b1e8-43cb-b7b4-fcc736cdf299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f67867-0f63-40ce-871d-49798cfcf8ce",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cf35526-59c8-46ca-b933-b243b740bd47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1af7756-814f-476f-ab77-01551c4e2057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca20768e-5cc4-48c6-bf79-4ee4d99b08de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b25ea58-94c3-41b1-ad8b-1da92b8e1988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bf15dc-bd0b-4b97-ac6d-3773f336c25f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cc64c2-33c3-49e4-a879-7ac17bbb0272",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcc440fa-0371-45f0-9da3-cea663d0d627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f2b71b-7963-4e2b-84ec-573c209a150f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231dcceb-7340-4c66-93e4-883367e8f6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ef3c38-f445-43ad-b4bf-d5e638d2c8c4",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ccc554e-f75f-4edf-9059-6733ba8e10f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cdcc4b1-2330-4e1a-a447-720fc69e9ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d1915d-5e57-4cd2-b1cb-f55f1a8ef761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0d63d4-837b-469e-88c1-7f5b97063b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6103f386-495c-4c48-85ad-937d4616b5b6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d0f82a-108a-4641-a295-5be4ae06bbfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f55a6578-a9c8-42aa-926d-212962bd5a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025dc905-0782-4649-ac2a-afc9918c2d83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c96d34e-ba01-4e0c-b3b4-04b493878bc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5dc142-aec0-41f3-bf7a-51ca3a49d72f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc68a41-1704-44d7-86f3-8f0585ded950",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c20a7652-4e0f-4e41-8ea5-05f6713cf572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f68d7b-9958-45e3-9fe5-9da1f3f1071c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04787436-d0e2-46aa-8e72-76bf81ce0f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59ecff1-7540-4c2b-b326-65538c6d3369",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986ab703-5ba9-4ca6-ad36-0b873c6ea0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611767a7-8536-4d88-bc75-f1a104a494c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a746f02-14e4-46ea-b2d4-d64451572384",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b9b2c7-ef45-4135-8d22-ba70ce711887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d5a501-f505-4eac-bc6e-a1ebadfc35d4",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ab59dd-51cc-400b-a37e-f8e1af416db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19135144-3426-4621-a827-661af312bfb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35eaf74c-09e2-43eb-ba24-7acc98ddb3f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e22f10-a80e-4ec5-92f8-c445fc9fa189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bbf3801-44e5-491d-87ec-4e051203f41a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350f31a5-64ad-46ba-9741-97a078277e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f2ca49-1751-4622-bcf1-9fa5c4faa1de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f388205-8aaf-445f-9140-fe204ad328e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a597113-77fc-4aae-85f8-a234dcf0c0a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc856ba-4e08-48d5-ae09-fe127ff9ab16",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7224ef36-0d65-4058-ab63-53f05b5ab4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "784f6718-5418-4a47-8e21-c554d51e5a98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39ad4db-7667-4730-afd0-5dc00ad5f20f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5d73aa-1170-47b6-8a8c-9bfe5b15908b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274e8d87-ffcb-4a38-8f7d-7cb0e7b4da1e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e92173-8ad4-4385-a0ca-8b80a7f713f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ce5ba43-353f-4d0f-b973-2ec3bb4531c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0548dd9b-4e98-427e-b143-761d56623744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379541c1-d184-4079-a3c1-d5912ad8eb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21538ae5-96eb-4a6d-abc0-005010252ec3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bdb502-d706-478c-9d8f-53f5ee4d60d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11bc70b3-ba0d-4207-bbc8-43815f50c69b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e076fec4-1399-4ed1-894b-f205274f3c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f48fe258-fbdf-49b9-8b20-703083e2e7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee8c9ae-2de4-479d-b68d-c0f9c61f7dbf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb8d310-0161-4473-8b1c-b5acb3f6f6ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ef8227f-c5c2-47f8-bb9a-9d3221b17f96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d2f434-e04a-464d-b3c3-f1e0081bfe2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9abb0df4-cc9b-49b4-b81c-0c73b96aff7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e4bcc1-946b-4861-a569-65af8ae6addb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1dc2f2-4214-4bb1-8fc9-230a8e73fdfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e109a1d-9142-47f4-bf85-5ba297711b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce68801d-3ba1-4f87-afc4-baab4de9a0f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d7dbd4-cc60-4d55-8a91-d013d222cc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bcc6f7-2257-4d10-9a78-0504977bd41b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6c2362-5c88-4019-b6b8-522a288539ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1418f404-e911-48ed-896b-ee2c08031c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c76c38-931b-427c-88ab-6c6f7ccfafc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96513cbe-afc8-4b39-9835-ae9ccd46eb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16983305-0aec-4921-86d1-c30aaf6b38f9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c086442-e9b0-47b5-94e4-6718031fdcef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97bb9b3c-9bbc-4a46-a5ab-e5eb27956911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bd0229-ef80-4aea-94ab-5d4945ddaadb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51c0277f-126d-49bd-a333-19aeb14790c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fddb864-9d4b-4ac2-b597-28a0362dc537",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c46bf3c-1bd8-45cd-841c-96f4af784cde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eda4588b-b244-4c89-b7db-4952725523f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e10a53-8ebf-41de-976e-136f6ba31423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562f5b20-6d19-4231-a2e4-3452c6cd013a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddf6b8e-063a-45a8-9c4a-f7176d8e2197",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9116ea-5113-44ba-9ce3-5170062a9b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38537759-fae2-4d7b-91a5-45c746c9556f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30463a83-73ab-4f27-b56a-57689ad865a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f8837a-9fe7-472c-b3a4-05c8e43edaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91dd15d2-d088-4b4c-b73c-8ecdb93f74b6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39491b46-0d7c-4a71-9ace-bfb7128d9979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d21ef16d-eda0-4769-bac8-0972eb7f164e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f94b31b6-34dc-4ee9-b2fb-d90ad0174134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4212db8a-c632-4dfb-b8dd-063a593da0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f21fe88-e351-439d-b767-f1ca967b39bd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f39ddd-c63d-4c99-9d8c-a678b5be78f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a31e772-a252-4d92-a50e-1c022b0defc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ced058-badf-443f-b02c-3604036aeab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30e93e0a-e675-4d59-b411-e8e8562bed32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29c3323d-246e-468c-aa37-32111c0d146f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaaded7a-0f1e-4482-b208-fd1eb56d37dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fc3574c-0149-482a-994a-6b69f8abc8db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d2bdd0-59e1-46a6-861e-fc03c259955e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df199b8-d78f-4114-95d3-bebb8b7546dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf272f0-7766-43df-a008-781f6372928e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e23ca2b-f0f4-449b-89e4-41c1dfaea364",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36036259-1d02-4713-9bda-4826b90a1999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a008b83-3a1d-4daa-97ff-1ec8dbebc113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0b83e9-e7db-4923-af9a-f9d1ddd71035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ac34ac6-702e-4090-9cea-2a113152e87b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fd61f6-de49-416f-8b56-11bb37f6bb8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "332a399f-b7e2-42be-87be-38f249f383ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ae4333-4ff3-414f-a62b-8eb1b193dcd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bad24f9-aed1-4255-9fc7-306e059ce6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0745501b-bf3b-45f7-85c6-562396499320",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3dde3ee-7875-4366-bff5-63a91fb2b3e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db5359e8-a209-485b-bb19-d54ecd973892"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a3cc37-df7d-4557-a047-a8e3cadf8bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "362be823-8f7c-476a-b9db-72cf3c9c00c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16423fa7-c35a-4b2f-9867-6fe246939888",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7917fff6-da9e-4560-b578-959cff9f1ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394d231f-b3a0-4a6a-8aac-7b0bd4a714a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d7bba4-8c33-4b60-8208-e95d62cc50bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61db403-262f-4bb8-931b-cf4ff4698a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28fdf1f7-b386-4cc5-b853-c27d21cb29e2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21764f3-3491-4e77-b197-f2517142206c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77374d33-3c03-48a2-a4cf-2562bf2eb199"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d88f00-b70f-47bc-9147-b05107166520",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4c6dca7-4a06-47af-a5f4-58e086fe039a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afca3fcd-68a6-490e-8d57-bf7957c60299",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd634bd9-0f4a-475a-8684-cd76d68dca9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c6e3e9-e7c6-45de-a7ff-b214211fd7ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c408702-cb73-473b-b7e1-4dcfaa095428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da845c66-5705-4b7b-b70c-74bbe40a1f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961a6aed-33a0-4f26-94ce-2ca707e46036",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b0ebb3-0439-41d3-95af-9c86c09f1fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2114ba-a2f8-4b2f-87b5-afd8e18673b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b390d452-9ef1-461c-a81f-913f351880fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2901a29-6050-471e-9174-f11f47367750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4340a2c-6dde-46b9-a1fb-888173affdc2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ea2fce-4240-4b66-a900-53e68f19c705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c459d24-a3cc-4d5e-8e24-0e0f9ba7de5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf653f9-885f-4a15-879e-88aa2e908dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2098f75d-c3f4-4726-8b33-e16a20ea21e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab95beb-8e2b-411e-814e-eff7a4c0042c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a8e8026-8572-451c-bca8-d7d9b3c3950c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a17cc695-f909-4431-8d80-b7f2adec1778"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2288014-0a71-4ec0-a86c-f9d2e3758fff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caaaa803-cb61-4ab7-8e56-1225632109b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac3b08c-a55b-493e-a4d3-7540bc42541e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2854b5-cba8-4e7b-85cd-a4b894497b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ec7a7c-04f3-4c82-b0b6-ef625aec2c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c910076-4af5-4f8f-bfa0-8936ffb2f719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a224b05c-efda-4cf3-952a-add0676b0b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02f48f7-2fbb-452e-a8f3-32caa3fd32ca",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ab5c67-6e84-4066-bf4b-014bf7ff1290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107ab73c-b207-4cd5-89b8-be52d43104da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574b3402-8314-41e9-8bfb-1ae10d9510c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d80c866b-e5fb-46db-bb1d-3e2b8d148320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8cb660-2bfd-45c4-945c-c6964aa58036",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4834375-f75b-4834-8758-b816cac46631",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0d92f96-3d39-445c-b8ef-498e420cec15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b58d51-2f7e-456a-8964-44698c822428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8682be5a-3bc6-43a5-8409-d21027f9e9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2877c00e-823b-4633-913e-b81d6434cca8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab78fca9-ec8f-4789-bae8-1ee985784fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d82801-443a-4a57-8f16-010d81a02c64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2342ee-6049-4d22-b488-12e4e2069a5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0fb523c-c4e6-4494-ba42-ddb042588650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0444bb1c-896b-4679-90e3-9caa26a58fa0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafd6c35-c8b4-457c-9f52-56ba799a47b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36995f7e-a2cc-422f-83e5-c0f36b103426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69c5be8-614a-4de4-be6c-5e59f9325322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443a854f-2763-4a34-bea9-0690cf0c6275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428e8452-30c7-4e0d-9ccf-bc12e729d675",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814e787c-8d86-4aaa-a8ab-d86683974a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17be209-78a2-4d39-abb6-52d2dfe773d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f25abff-d99f-4cfd-9a9a-336ee7f60adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df271779-1fe0-429a-900a-93f439710205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fcb073-5b39-449e-a57d-e501ce1f3a83",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbeb984-0f8d-4ad5-80d0-e2b6d7103e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739ec7a0-3658-400a-b79b-67a8a0a5bd6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "846663a4-cda3-4379-9248-8c3800b91b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7af4050-efdd-4b0c-87d5-2f1e73738e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af949542-4c61-471f-a639-2b7ae3ecf4fc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebc3228-9c44-4e7f-a4b9-a462c8b1ccc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b478ad-e2c1-4ae8-b223-9b6bf194db23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ec7264-954d-4baa-8f36-7beff978e207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1117459-8836-4c4f-9420-2ed7ebe69daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668f95e1-52bd-4ca2-bcb1-02ea9d5763bf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2e5eb6-7488-47e8-b4d4-8e3290ed49ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18b8acb5-ebaa-4e8b-8034-14ca00646758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a49a9d4-ceda-4490-9222-5307e5f38cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12499e2d-7129-4b44-ad36-2b171a4ce17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60314926-b299-4264-80c0-968ce27f0661",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551643d6-97e4-46a6-a3f8-f0f6b288067e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3132cd55-724d-42b5-b178-dc68f52f8f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78aa642-d1b5-4b51-b52d-8ec6e23c63fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd3b0de-6d16-4de7-93eb-7aef8df5d7c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537ce725-678b-44be-868e-35ce3d9757f2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83b7f36-4219-4db8-959f-ebb4ce27d49f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c9c98fc-3b36-4b24-98ae-648430051906"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab264a1-3457-4d52-93c5-8fafd922dbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13fe7eeb-4c87-46ae-9cf8-5ba0d7a12819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b380d569-1b12-4ae7-aa76-59e2af879e38",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0263d37-96cc-4950-a9e5-784ca8d95b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00b94a7e-e7d8-4d33-ac0c-d26c2289945f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b028b54-ae02-4678-a0f8-be5771d778b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5eae065-0f8d-4de5-9e00-d10c14b2d01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d95c39b-ddcf-43cc-b528-f873fce91e13",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21123330-ffb1-47f7-9ccc-c5cf936eb837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3239f338-ccf8-4ec9-8e3f-7e4275aab39e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8227d67-bbfc-4071-993b-9b9da61d35da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098a07ea-766d-4eca-a02b-6c4af6f138f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eaad885-dad4-4bfe-a550-41ce3229a923",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46181161-2a7c-4fd8-9c51-88e725ede048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1c97df-1a53-41fd-8d9e-1272a531e6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecca74d6-2e45-4767-896a-74cb869e68cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46d825de-e72b-4f31-b4bd-f84d9268deb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276617bc-40a4-4927-9bb8-1ece40ae727e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75df7936-8714-41dd-bb9a-d3c1a8fffaf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000ca248-05be-47d2-bc2a-8995859111d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89347bf2-05ca-4d91-a3c0-504c63216b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdc62c5c-f63c-490b-968b-79b5d4be4be4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "855579ea-3ad8-4a37-887b-f14e3541548d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3bca25-1cb0-40fb-99a0-a6f2f553b36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5fca324-1fb3-4c7d-afac-69c3641640c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab59dc2e-874b-4e09-bafd-339884e7db8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e0f9cbd-53a9-4260-9342-ee004dd802b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cc8729-94b6-48ed-848d-325f315d256c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548943b1-5c7a-4e4f-9db0-652b96147228",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caee10de-91f1-4b92-9987-4a559dc3bf7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf95a97a-ec0e-4632-ba06-4c8e4060ad7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "615b3783-2c53-44cf-b134-296d481d19ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c94130a-2abd-4062-82fb-2e1260036e24",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb37be4-006b-47a2-a7a5-0ab9d2278ed3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7112e0f-4e15-4c25-b592-36c512fa7695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "833f1731-9f04-43bb-85fb-72b204ef6bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85246aae-491a-4600-8e46-458dc161ee6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88252f19-a4fe-4db0-ad37-03094d24e963",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3731d4f-3124-4244-b1ae-d892108bc891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3fbba7c-dcd5-4fd1-b2ab-114cbe3ae676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e26edd3-1f5c-4151-8bcc-bf145500a34b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b72c2ba-408b-439c-a607-cf2ee8ca3a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebc6501-66a9-4e3b-a4f7-0c32128e9ab7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5114143b-8a90-47cb-93ad-6a21d8a30dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07c1f20-70ee-4284-beff-15f0cb6117e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753967f1-9aa5-40cb-aae1-0e4670c680bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d38e4b0-c515-4589-9e5f-c6ceeb959fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4b52ec-5630-4a47-af94-bbe5043cc86a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68c9ef5-ae66-4c6d-8e5a-c71fcac23bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb178c6c-99d1-4068-927b-29d1cdcc7b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebc7aa36-e466-4934-a30f-d222ca381cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e42c4fb-9ef6-494d-9beb-807c0fbb60d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18619e8e-3200-4f86-bb99-ab7fc80ddc2b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3995011c-78a4-4922-8f4b-b420ad29830f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2896481c-fd25-4a32-84cf-a875fb676f81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33824321-6629-4211-a4c3-7e0c7b1553fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f06309f-b7c2-408e-96ba-f4fdf00535eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1927b5-190d-4d0b-a6cd-7b3268cd3cfc",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bab5994-0f91-4615-b342-24e7c43178a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba3d89ed-981f-459e-bc7a-b44657f75c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a5246e-39c7-4e75-9fab-901cc6c6d02f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e3d95c-8470-487d-8ea9-f5c63c21ae50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a713c3-de31-419a-ad1c-0cb900dc7dce",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a564cd6e-d60e-4874-ad9f-cbde921794a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a21e862-4e09-4509-8563-070b9b3adfc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd678bfd-333c-46b9-96a2-60d754768adf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45ffd48c-b78a-4587-9d7e-7ac801eb20ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45dfc40-e25d-4f31-91b1-387e77c034c6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f61ae05-71df-44a5-9331-986bd0dd2292",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2822d6c5-899b-4798-9afe-13d5460c23a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6169d83-c90b-454b-8b83-2449346dd8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f26ed7-974f-48c8-a973-431b76bf85ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca001ef-70ae-4353-addd-1a5143a9b2cb",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6660a709-4944-4e0f-a524-217c27a06f9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94f096f2-f42a-42cf-9e72-be804f9399f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "424cae61-f48e-4129-8af1-3bb4762d3835",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1013aba4-150c-413a-a2fc-db7dc6e9e742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9eebb0f-358b-4779-8110-c970d3dd3851",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b127bcd4-de0c-4cc1-ae35-0f20eb3e1c04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f7c4db4-008c-48fe-95fa-76ab7efdfb4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61577ddd-1ccf-4d61-af46-aa95e16173c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265e6c65-f051-4590-827b-1f82cd3df68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de3ec98-b7ef-4c55-a445-64f9e41d9989",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2e6442-3d33-4345-81ce-83fd03011852",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d00d5ae0-8163-4418-936e-e5c384927a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c27e54e0-ae7d-4db6-a54e-37aea53fdb20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ee347f-4bf8-46a7-aa5e-34f38ec5e8aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e76800-5bc5-4759-a122-2562c33f6b7b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0bb71c-0c20-4235-8604-1b771414dbaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f41d67b-10c9-4794-bcf9-dedb6e071a59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc732eaa-1e95-4104-84a5-6cf96c8b169b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5952edac-0b76-4077-b39e-1532fba98b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a6b4be-81a7-4a4b-9033-4e84bd2c524a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a177da9d-2c95-49ef-801b-d9df4e818a36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f5fa317-c503-434e-bf14-794e5ff50ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc5b357-20af-4004-8bc5-13db5daf720b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7208c8ce-6492-4ea5-bc97-d46b0c0a6793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9a85441-398c-4da0-9a74-bbe0f297b458",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a3b4ef-dd14-4dd8-88b1-c453effe9807",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51fcbc78-84b5-43e9-a333-14c62fc31386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b280bfb4-2b22-4a91-a249-a4ae8b725131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf57b509-ce4f-429f-a62b-d08f6ac73764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ab049a-aa3a-4e2c-84e3-4a89a20b872d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2b181f-c332-409d-8dc6-7ea835b07e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2931315a-6e7b-4fc5-8249-2458d03fb336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089f6e84-4bf3-41f7-9df7-da001936514c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305b072d-ada1-4cb0-86bf-034152e188ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0b8d95-7801-4fb1-9aec-3767a8592111",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe93b30-ac6c-45af-a95f-f1ac80b5cb45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8bee80a-b5d6-495c-a898-521accc77f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1529ea28-52cf-449e-bf92-67a76a157532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1970e00d-283b-45d2-97ea-e19facef2de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c83c649-0c21-4f3c-ba5e-5a5c27d00b88",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0fb8a47-96ea-4eee-a6ac-90fdb5289e4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b88e4a7-93a1-4fa4-b59b-237038d4f8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ff58ed-144f-4862-977f-dc1dcfe0f51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e7d358-8f58-4b97-a038-a648358335c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3fa7fd-e400-4454-859c-3b368fb0f2c0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f291c8-f31e-4c5e-af2d-b5cb4a294f50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79fa4389-b253-4223-8cc3-41f63fc53277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa67cf71-0022-4df1-a098-df9aa31e191d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1af509af-d0fa-4440-a25c-e9570ba06f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0331844-727b-44a1-a860-7671eb380ed5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13883784-c2b9-4587-b79a-03c1c74c90d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9680cb5b-ccfb-4216-9984-e55525bda75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5a708f-4220-4a87-8269-3d0bacb3fc63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402f1eba-9e20-4f46-b23b-7cf7d100a8ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf89752a-009f-4efb-bd3a-27a8d1c7484e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f5f296-8e6c-4239-84d7-774b98cbedbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ce5bda7-38d7-45d3-99d2-4e6315596b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53891237-611d-424f-a92a-dddf114fab1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8cd345-fc30-4ae9-8284-745c2c0e2dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac92ed90-a1ce-4868-b9e6-0456c16e606e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235e9cb4-506d-4a8c-ab6a-4ab1b0d9e8c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d1b609d-bf80-40d6-a604-6d9386fe2300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f4803b-eb59-4e53-8efa-1e36db677ebf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c1078a-c6d4-4065-a98e-dde269cd0609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c59f93-099a-48ac-a6c1-213a0390af0b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ade2b2d-9643-45d3-9ced-d256cac928b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5091fca3-b371-42de-ae9c-58a7273ce1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18732bee-2a60-46a9-9ca7-361d6c1223eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5727f309-f195-4855-94af-ff75c76875ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c490be-2fd3-46e8-a2fb-1bae5ef34e57",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1787324c-2d08-4288-8c44-c0b648545a64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73595488-8a1d-4fd3-8d28-fe30dfeea4b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59041db-d968-4754-9e4f-9dd81b0daa0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acb0c08-782f-424b-8b44-96616d9a19ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107f0e42-74ad-42c7-af6e-0b14d05c935c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da03bbb5-1f60-4ea4-9c5c-c0062317e840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "110a260e-2b30-448b-aa7e-145cc38b5837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "655c2f08-c343-4244-87ee-0b7d29cb5de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48d3646-fef4-442a-ace1-4c7964fe8cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1146f70c-d4fe-4096-b7d3-179439d0b166",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7955ef07-1cd3-454e-afed-cc6effb49791",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a833081-e093-406e-ae4b-a2cbc85ef1a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c86dc47-4eac-444e-a940-5ef53e29a915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89db9d96-07cd-49a7-a036-b1fb7a670e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bf3f51-e1d3-4feb-ac40-e39701cc126e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6e30af-e0b9-4346-84a5-84ba5226231a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5c54802-2f27-4dc7-8e0d-9d5a94f2d522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "202b7679-9b9a-473f-a256-be73e67c582d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f1e7757-5284-4598-8a3e-853bd17fc7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981d8ca7-ab0b-4de9-b0a2-42d48c7e5d5c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd510f06-0604-4c46-add0-7f2db46493e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "249e6835-21bf-45e5-93e9-3b423ef2772e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db99561f-054f-4d6d-bf1c-a05be707b346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94685604-a097-4ef2-80b2-0ff010c19f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0532df62-d1a4-4316-8ac8-650686b2a81e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52b4a95-a9cb-4f47-a319-4fc15919eaed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5649d8f9-4f05-44a2-83b7-b6678c2c2bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c86a758-f371-4dcb-8227-f22751171fa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a151aa4-fd13-4994-9c82-fcf447f92e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a61df86-d392-4e83-8d5b-dd8404efa1f6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d9f214-b9a3-4962-ab4f-d3349196aba9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42faed01-d227-42c1-9c9d-ff94266b8634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42290a0-b00f-4e40-9bbc-b76206d99fc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc5f6d63-6cc4-4194-b02a-065ecfca15fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a8ccb3-ea92-4152-80dc-e60f642f15d9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76556bd-7f46-43c2-8fcc-65dfdfb0d2ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44e4980b-d104-42cc-9cd2-5f301d4acdb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77bec81-3f21-41e8-8549-1d1f32ecd805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab6f42f-6852-42f7-ae84-5866f277b732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99ef61d-3078-4fcc-9f81-64d2d43868c9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a3c24a-a9cc-4549-83e0-6793b7fcb613",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4994cb51-669c-4ffb-85c7-5e14cbd66c67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4e5084-6ea3-40fd-a779-e953f73c74f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7404f8-b311-45fb-9e4a-bde6254e9d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74881698-42dd-451f-974c-8bf13a940fd5",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6660b2a-f5d5-43db-809b-766b572a88ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0f40313-7e04-400c-9663-e248611dd0c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78086a9-471e-47f4-b075-c5a8c324562c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b932d0-9605-4b8c-b73e-869321231505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046c40f6-8903-4525-936d-f74570cc707a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b78cec1-9455-4073-a9f5-9302620aa969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b1c6177-2d5b-4b26-b4ca-eba0b5c40c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a9b40c-a89e-41f6-b784-7ba9151ec3f9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac5dcbc-312e-46e0-a938-ae67a6335e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca861388-8749-4e89-bda6-589cb8664b4f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d31109d-9de2-491d-aad3-0593623caca6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1b992e3-c5cd-4ef0-8ab9-23faaccb847f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca73a47-6d3e-4eed-9c5a-02ed45ac72e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7bbb4f0-5124-4766-a897-595563a09d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072c4392-a958-4ad6-b27a-12d64bb6b804",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0861b6-b2f3-4ab6-b1e0-9ff3aea470a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6097ca4e-79c0-4368-b713-c482910e16e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df74082-ada5-4c1e-8c6d-420150872d6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9642ef23-bab7-4e66-86f5-b0117492fce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e451df-f030-4bfe-861a-22471c8f96d9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d4598a8-30b1-4868-9f4a-96c003018ab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "914ad344-6925-4ed1-8c1f-297123de388a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b81413e-6baa-4be8-bb0d-f4cad8fb981f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a5f70d-eb68-4a58-a1a0-98aead084024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7a0920-be0b-4e6d-be13-da26ab845616",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93a20ef-d61f-4b98-88d2-63aea584de58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e207331a-394b-4f47-bc7a-c3c5d65d6f21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d17e2d-fe81-4f4f-96f3-005fe8f84550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0795ba74-e2ed-4e77-be17-426ae9576d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "680604b1-2573-4a9c-8f98-746bd816c066",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35fff3e4-8631-430d-ab90-7e74de8563f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3abb9743-cbcf-4ee0-a1b5-281ede8388be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9add48d-491f-454d-bb33-bd0b39dc4df0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "612c0650-f3c3-47b6-833d-668b83f258db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "025777c1-7d07-47e6-bbee-674bd91be2c0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ea9bb8-5261-4870-aaf9-8fdca643f705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a55220ec-fbe9-4854-ab55-53bf279f3a76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca31dbff-3536-45e7-9f22-81ccf5b45038",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af556db-45d5-44dd-9b87-435ad77163cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b142e145-0862-48fd-b84e-3f792e8dd775",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bee6a92-96de-4906-90fc-637ed6c2c5f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003a05b0-775b-4203-9a19-777014312bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aba9d93-4d23-4656-b44d-7f1afaa7366c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff1b13c-b0a9-4636-89be-51ccadb14655"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "322abb2c-28b2-4814-b645-04d8d2cb7fd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40d7d450-8184-444c-8ab9-a09aad88cb8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dffb4f30-44c9-47ef-8b1a-40c8c830f152",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55c7ea13-75d9-43c3-9f67-b475fb7e061b"
                    }
                  }
                ]
              },
              {
                "id": "fadfaa37-2736-4883-934a-2248156c4536",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8dc37d6f-9754-4e6b-9b5c-85da0f02730e",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ca0718-70a9-43bd-a9b6-2451ee957ed0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e7e6a6ab-3338-4f7f-910e-0afdb28f4ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932cdbc8-7158-4678-b0c6-9297d1d84832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0d25e3d-22fc-408f-b9cb-adb86c02fc08"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f9fd2af-0cea-41b5-9873-836a408cf332",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "499b6e0a-ba31-4e44-84ae-43f2d9bb8dd7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "476973e7-c4c0-4bf1-b74d-a6d719a77a96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "584032fb-a221-4b99-ba0d-4126348485d2"
                    }
                  }
                ]
              },
              {
                "id": "6f54143d-9baa-4f62-be6d-f26d70fc0598",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e6faa68a-ac21-4cbf-9f12-7138770844de",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae7a3f9-dfa2-4dd0-9b34-884bc5671fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "65b1f55a-b888-476e-a01b-4987ba5fee54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f16b90e-0f62-4663-b5ea-bde4c3d27cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f422ae-d4b5-419a-bb8a-596f3ed0940c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "68270ffc-ef25-4e4f-a830-cf28c98a7553",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d68c08d2-ec7e-4904-a85f-6a58269e0283",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4605ebe8-7560-4954-98da-5e45097ec1c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "364d9c4f-079a-42dc-9182-026fc833af70"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa280679-6460-4bc5-83d8-6592a66134d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aab86c4b-8f02-4263-9256-715fcc8e3b7e"
                    }
                  }
                ]
              },
              {
                "id": "5b40cb8c-b9ca-46ad-abef-9b47d8570af8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "537df920-368d-4ab3-9469-0559e181c502",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b38ca9cf-9347-40af-8cb1-aa700b0319e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6b05a27-ed9c-4d3d-bf07-5ff9043f09d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0609ace1-eeb4-4c43-95d2-70c2130780ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb2901a7-332c-4a46-8a6b-875572b3252e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3998b87b-2616-45a8-8df4-8e68b903b8bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb297ae7-6b8c-42dc-9453-983e9d65606c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89093b79-709a-4ac2-a4b5-66e3ac584398"
            }
          }
        ]
      },
      {
        "id": "85a6241c-6327-4e37-9ce7-1e7e691f88f9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "92bad805-961c-41a6-bf18-53fbf5e454db",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc3ac11c-2494-4e6a-9bbb-1b0400acb3d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0bdb25e-303a-42a7-ae59-0c7c8a5da4a2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2007310-64b5-429d-a60b-8a42f0f836ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "44c15958-c804-422d-87f0-b2265dbf3157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81ef6b0-c173-49c9-8d7e-d9d5227b34cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ef41030-450b-4107-b135-8db130e06d75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bec2fbb-6f4a-4076-856d-7b282784eea0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3c623ba-9199-4802-bbfc-b5a1db2d3f3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "579c2d9c-e869-4f9b-b171-bbbe1f9b7452",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd5a2056-16a5-4806-af84-607deb51ea66"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3d4d4842-4cc2-4dbf-96a6-e1fde3436df2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "31bbf919-0de3-4cff-b476-250fbe7844de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01405cee-8d25-4cf8-9609-bf2da1a07d0b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3edaef6f-ab6f-4d14-83ed-55d92c79a0e0"
            }
          }
        ]
      },
      {
        "id": "a6d4c7f4-e1b8-4cca-8597-07d90013adae",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2472fb2c-edcd-49d7-82e2-5781ad6cd745",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2a5b38a-91ed-42b6-a7b1-cb84191bbfbe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5fb52151-824f-4ae1-91d0-999599e29cf0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1f9001-c502-4914-bbfe-2e08a7156b8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f898c8f-aa1d-4fc0-986d-e339db1edb35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8903ff0f-6a6d-4418-b4fc-bf4d8534210e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "50ae843d-c983-495a-9a15-1437beccc4ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "862b4fb7-dbd3-4194-8bc7-ad5538c1f0d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a9d3727-765e-4f8f-ad54-d19ff0b989b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cfd547d-fbbf-4dcb-8c02-66d11c65721b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fe45588-cc6d-436b-9018-f096d48d272f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efe16c09-6d2d-4f07-9edc-23dbc2c47282",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4e1c77fa-ac39-4f95-b5ca-bfc3d36adf91"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66ef8e6b-e3e2-4e80-90a4-d62e172d0a30",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "415382c6-3b9f-4f78-8f48-bf834ae7c033"
            }
          }
        ]
      },
      {
        "id": "5ba63ba8-3c9e-42d0-9d03-acafbbc9d2e2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2ba34fd6-40cd-47a7-a44e-f01cf64e3e32",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d16f60e-dfe5-4a7f-900a-b076255caf09",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d0dc467d-a0aa-47f9-8d08-3a4088210fba",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6601f1ad-eb1e-4b05-b97c-9763d1d22236",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f57f1ead-d681-4a49-8b96-bbc2aeefcdf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c286f6-d5e4-409b-9a5c-c3972035c353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3de810ff-0c55-49ed-b46d-606c6b9c47ff"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f54faaa8-a35a-47f9-bfbf-e1f9a4e07540",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5270671a-8e47-4310-bc86-05d7c78789e8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "341c9ee8-8e5a-457d-9804-b320dc04e53e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bf12a76-7408-4cc8-bd11-20d18bff6755"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2cd22f2d-b8c7-411b-9af8-63b653ffb1bc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a96eb962-2e63-4d52-a1dd-b2780e09f78d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0649c0eb-bc13-4069-8136-8a58a2b35917",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "84ca9562-15d3-4398-9445-02db4cff9469"
            }
          }
        ]
      },
      {
        "id": "6682846b-19af-42b0-a507-c764ac4ba2bc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f51e0331-e008-4e2d-bdb2-22648ff26dd6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cc5d7baf-ed3f-46bf-af7f-ca8a0ad66787",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6322ec35-c7d6-438a-8385-a64040ce1855",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e81b5f4-3ca8-4ce5-ac6b-7e8abf6b19ca",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78ee42d2-9bb2-41b1-bdbe-100888a0cda3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.498245614035014,
      "responseMin": 5,
      "responseMax": 555,
      "responseSd": 69.53800548943322,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1704069577391,
      "completed": 1704069604177
    },
    "executions": [
      {
        "id": "c984446d-199a-46c4-9c31-0e2bde4305fb",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ed2efd5f-0025-410a-91b5-521e7e771f6f",
          "httpRequestId": "4a81e155-fef2-468f-970a-135a1a590724"
        },
        "item": {
          "id": "c984446d-199a-46c4-9c31-0e2bde4305fb",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "85ce6c55-a2e3-4e5c-803c-d1c6faa4a122",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "6f762f76-dead-4e7c-8548-41fc742cbcc9",
        "cursor": {
          "ref": "7428376e-4a3e-4266-bc1a-ee7e56e416c8",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c7aeb2bf-62ba-4f16-9e30-24b9acc2f291"
        },
        "item": {
          "id": "6f762f76-dead-4e7c-8548-41fc742cbcc9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "dc821c97-757a-490c-8511-1a6865b39eb8",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "834196dc-cac7-4fdf-8d29-6ebf368019da",
        "cursor": {
          "ref": "a01d5aa3-7c1d-48d7-96db-be2711399764",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a98f8baf-67a3-4ebd-82cf-f91c99a8d8d6"
        },
        "item": {
          "id": "834196dc-cac7-4fdf-8d29-6ebf368019da",
          "name": "did_json"
        },
        "response": {
          "id": "931e12f5-9b6e-47d4-89e0-5d0206a737d2",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba51ff53-f604-44e5-a9b5-e69225d36245",
        "cursor": {
          "ref": "7eb7834c-c142-4fe1-a050-43c1a5082136",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c8aa947a-5ac7-47ad-bbd0-f3563df3a300"
        },
        "item": {
          "id": "ba51ff53-f604-44e5-a9b5-e69225d36245",
          "name": "did:invalid"
        },
        "response": {
          "id": "ecfbf3e3-a0b3-4754-90bc-bc5794166600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba51ff53-f604-44e5-a9b5-e69225d36245",
        "cursor": {
          "ref": "7eb7834c-c142-4fe1-a050-43c1a5082136",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c8aa947a-5ac7-47ad-bbd0-f3563df3a300"
        },
        "item": {
          "id": "ba51ff53-f604-44e5-a9b5-e69225d36245",
          "name": "did:invalid"
        },
        "response": {
          "id": "ecfbf3e3-a0b3-4754-90bc-bc5794166600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893c0764-0ebc-4781-9559-fc66f521af9e",
        "cursor": {
          "ref": "5aa8da69-b9ba-4970-a9c8-a7685e6c152a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "26605dc9-14f0-4f4b-a4a3-348115ccb455"
        },
        "item": {
          "id": "893c0764-0ebc-4781-9559-fc66f521af9e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e351d565-36c1-4526-9fa0-ea2aeb66e243",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be469b33-0ae5-456c-aaf7-9ab807934d8e",
        "cursor": {
          "ref": "89cc508e-2e0a-4ab0-bef1-0d1de16ff905",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9e89c705-887b-4a7b-b7a3-a36d75673f61"
        },
        "item": {
          "id": "be469b33-0ae5-456c-aaf7-9ab807934d8e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "eba2e596-f905-42f9-9a7c-09482e177d70",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d38b4f1-5d62-4769-aecf-957f6be464f6",
        "cursor": {
          "ref": "121cb423-4efd-4e43-9fdf-7e3cc485d990",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7eda776a-24c2-4914-8110-dfae5e23749a"
        },
        "item": {
          "id": "2d38b4f1-5d62-4769-aecf-957f6be464f6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0346592d-fc14-4268-a51e-94cb04e808a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c1badc-25b3-4ca4-9ab3-ff8298294f85",
        "cursor": {
          "ref": "d12470fd-9eb6-45e7-95a2-6278dbec6383",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "38f41511-5ddf-4c2e-a96a-bb6e23da9299"
        },
        "item": {
          "id": "e3c1badc-25b3-4ca4-9ab3-ff8298294f85",
          "name": "identifiers"
        },
        "response": {
          "id": "c83f77a7-98eb-412e-818f-4d961ce7483f",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4363310a-7711-4785-98c6-91f2676b30ae",
        "cursor": {
          "ref": "7fcbb962-a7b6-4a58-a2f8-dd620c70e91a",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4f6e0063-4848-413b-afac-a61b87d836ce"
        },
        "item": {
          "id": "4363310a-7711-4785-98c6-91f2676b30ae",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "52c72c4d-2d94-4850-929c-b9e7500bbac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc32fa4-6853-41d9-a8bb-38d91ad396bf",
        "cursor": {
          "ref": "102fb184-4b59-4518-8afa-f676ebf8d09d",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "46610ae5-acb7-4ce3-bd07-772ce1dacb1e"
        },
        "item": {
          "id": "bbc32fa4-6853-41d9-a8bb-38d91ad396bf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e77a50fb-69a5-4b3e-9073-5277cf50565c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "325afa31-090a-4664-ba73-271a04ea5264",
        "cursor": {
          "ref": "0fa4a09d-2c68-491e-94e0-291dc5f4dc61",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1720ce4a-95e6-40b6-be47-0c23a653e383"
        },
        "item": {
          "id": "325afa31-090a-4664-ba73-271a04ea5264",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cdee5e15-fba3-4f52-9920-451909d58fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2a2933e-46cf-4978-bc2c-f30e6cb283af",
        "cursor": {
          "ref": "6bf10ac5-646d-479a-a1b9-c42a96d00260",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0363b798-0023-4a14-b274-d8cd38653b58"
        },
        "item": {
          "id": "e2a2933e-46cf-4978-bc2c-f30e6cb283af",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c2c9450f-183e-4e53-9e14-cb27843696fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e62abd-8dff-4d86-9f18-e799c5d59734",
        "cursor": {
          "ref": "c9c527f2-509d-4089-bc94-e5cafc88fc1a",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a85a7020-cf7d-411b-af06-dab59d9fb36f"
        },
        "item": {
          "id": "97e62abd-8dff-4d86-9f18-e799c5d59734",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "87483069-36ac-41d2-af08-c3a91f77bd3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae29ed99-81c0-42df-90e1-48c8161a79e7",
        "cursor": {
          "ref": "dd68d95d-3971-4145-8ebe-9207880ad05f",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "96012096-bb70-44c9-afc1-1e2a71056940"
        },
        "item": {
          "id": "ae29ed99-81c0-42df-90e1-48c8161a79e7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f72aada6-1b00-45ee-9a10-859f44763ad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcac6ae5-f536-494c-bce7-fd76e8084a16",
        "cursor": {
          "ref": "62dfb65a-2d93-4176-81ae-7593b1964a48",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "223f365e-424d-4e1a-996c-d3484d6bd965"
        },
        "item": {
          "id": "dcac6ae5-f536-494c-bce7-fd76e8084a16",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "50229418-6aa5-4d19-84aa-e36cc9076275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f514e78-25e4-4cdb-a05b-9c701995dfe0",
        "cursor": {
          "ref": "46f5739c-2ccc-4982-955a-9462129f3474",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1413c958-e058-4d8f-bae3-f28e2002ccf0"
        },
        "item": {
          "id": "9f514e78-25e4-4cdb-a05b-9c701995dfe0",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "902e491f-ea2f-406e-9294-833d147a0477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c5b48b3-0586-4c72-a12b-b043d49d001a",
        "cursor": {
          "ref": "39a29ba2-f5f8-4c2d-b2e4-66a40cfe997e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "818a13ac-6e47-4e0c-b93a-4f96e4248329"
        },
        "item": {
          "id": "8c5b48b3-0586-4c72-a12b-b043d49d001a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ccaae3a0-4251-4fc9-b85b-14a8979088f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5cbf319-dd2b-40c4-b204-dd5f8a08fb24",
        "cursor": {
          "ref": "00028199-f36c-4a6e-9d10-4730817ae267",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5558d636-232b-4a47-bd09-9574124f2228"
        },
        "item": {
          "id": "a5cbf319-dd2b-40c4-b204-dd5f8a08fb24",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "338f3cca-bd57-4e12-b603-41201520825f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816e35fc-a35d-4c5e-ab24-2bf90ed08c7b",
        "cursor": {
          "ref": "a6dd6b2c-4a3f-4acb-bcfe-f4c865b747d0",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "54be0f49-a00d-4aa4-ab06-14c967b62562"
        },
        "item": {
          "id": "816e35fc-a35d-4c5e-ab24-2bf90ed08c7b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9261731d-01e8-4f58-90d9-b6c48b3f8bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01f9c57-ce59-42c9-ad85-e21502a3e441",
        "cursor": {
          "ref": "bb53b18a-0be2-4a05-9a47-0b703eb5b92f",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8f877e83-35da-4da1-98c0-c17f40070537"
        },
        "item": {
          "id": "f01f9c57-ce59-42c9-ad85-e21502a3e441",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6db4d57d-3280-4ba7-babd-a97da0cb97ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e1dd9d-8604-47a2-be19-7c0aff80b473",
        "cursor": {
          "ref": "c1ce4fd7-c3c1-437c-874d-bbc8ccfbaf04",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "84fb4fd0-5098-463b-9708-d1d7c260a9bc"
        },
        "item": {
          "id": "87e1dd9d-8604-47a2-be19-7c0aff80b473",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a1f602e2-9f46-49e0-9cf1-391cf2e6bb7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11a7ba5-499e-427c-9769-502c2b75b8b0",
        "cursor": {
          "ref": "14759204-9931-4999-a4fe-40c371487125",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bd0b6368-9e5f-4238-b633-bccd2febe52b"
        },
        "item": {
          "id": "e11a7ba5-499e-427c-9769-502c2b75b8b0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b23f8256-404a-41e6-9a12-f8753b02e85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17fe4485-c056-41db-a26d-fbff83c8959c",
        "cursor": {
          "ref": "2053a573-f895-4ea9-a71b-05971d68eda6",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1db6127f-b3ee-473c-90bb-66680f0cc847"
        },
        "item": {
          "id": "17fe4485-c056-41db-a26d-fbff83c8959c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "9ec803e9-f3f6-4b2f-8f3b-0eed9a9bd11c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7befaff6-32eb-41cb-a396-97977ff96f58",
        "cursor": {
          "ref": "5f9bba99-5874-455e-9141-a70650eb6448",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "999ff48d-6e04-4587-8362-49bea1fd4126"
        },
        "item": {
          "id": "7befaff6-32eb-41cb-a396-97977ff96f58",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "eb888ba5-7a24-4836-8445-09f1955ed6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f734639-21e5-4fed-a0bb-fa66836d72ad",
        "cursor": {
          "ref": "62bdb9d6-1a06-48c5-b9f4-0eda14a2c97d",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a79989d2-5f79-40e4-a12a-3c5e18736bea"
        },
        "item": {
          "id": "1f734639-21e5-4fed-a0bb-fa66836d72ad",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5c3aa9c2-886e-4ac1-86cd-c14457a69dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be07f4e-420c-4a21-903f-1faa4d3e7856",
        "cursor": {
          "ref": "d98bcaf7-3248-4bf1-8f72-8a374257ed81",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e5f2819a-3db7-4b3f-8fa2-d517fd181118"
        },
        "item": {
          "id": "0be07f4e-420c-4a21-903f-1faa4d3e7856",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "81ae44fb-da7f-4122-acb0-e829a54bea07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e6d309-7a95-4587-acb3-ae7d15a403be",
        "cursor": {
          "ref": "4f1a48ec-e818-4849-9256-5664bb8b5f7d",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "43f34314-d985-4500-9415-38c30df193a3"
        },
        "item": {
          "id": "83e6d309-7a95-4587-acb3-ae7d15a403be",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a476faf1-8402-45d0-8d9f-cb1b8eaaa289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb7673b-1e59-4240-b7b5-a235179aab72",
        "cursor": {
          "ref": "61deb0f4-a057-4cde-92bb-648c6cae85ca",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d8627029-761e-46e9-b2af-b292275a37d1"
        },
        "item": {
          "id": "dbb7673b-1e59-4240-b7b5-a235179aab72",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "606918b1-de75-48e7-b779-b5b890eede1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3406b9-23f1-46b1-95cc-9fc17181e7bf",
        "cursor": {
          "ref": "a587a010-53f1-4951-a71f-e8366c3280e6",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3cef4e5e-e3f1-4685-ac22-35d12886f776"
        },
        "item": {
          "id": "ee3406b9-23f1-46b1-95cc-9fc17181e7bf",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "73a46c51-04a6-4041-8062-6b7d93779cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c2b4c7-01e5-4f31-a0fd-e1bfe99270ec",
        "cursor": {
          "ref": "bb7ef4c3-1f11-4ed4-a647-4acf461746d0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "19a0bb36-7b95-412f-80fa-3639988289cd"
        },
        "item": {
          "id": "f5c2b4c7-01e5-4f31-a0fd-e1bfe99270ec",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "28c8d8ec-790d-411f-a5ee-74f08683cd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0bb2e67-a17d-473c-83ff-1fc35e9a59d3",
        "cursor": {
          "ref": "435c80d4-c27f-4881-9ce6-b4f274be2b2f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0896dc62-a609-4361-9bb0-a3acd311ed83"
        },
        "item": {
          "id": "f0bb2e67-a17d-473c-83ff-1fc35e9a59d3",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "bfac295b-1398-4d42-8de7-97ca3e89fdba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edafd709-f215-422b-9973-7fc323358989",
        "cursor": {
          "ref": "17c1ef96-df4d-4f8d-8e4c-f4961687e8a1",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4b318492-2e88-4668-acb2-7ef0510e3368"
        },
        "item": {
          "id": "edafd709-f215-422b-9973-7fc323358989",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "24bcd318-4598-477d-97c6-2e7ff1e21d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c402ba67-c48a-48b1-8c51-f95c7acb5ab9",
        "cursor": {
          "ref": "11051399-e986-447d-bc7d-16f0cf2f97df",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "540b592a-8b03-42e4-9fd5-f53501d6a32c"
        },
        "item": {
          "id": "c402ba67-c48a-48b1-8c51-f95c7acb5ab9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "efd6a3f1-2a4f-473f-95e3-0f1bc429adb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e991447-1f07-4853-b492-41965b261ac8",
        "cursor": {
          "ref": "3c664e78-72a2-44f9-8ee8-e04e3858339b",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "4c194bad-8a18-430c-a000-ccf2e98c041f"
        },
        "item": {
          "id": "5e991447-1f07-4853-b492-41965b261ac8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c25ddfa9-b3d3-4a7f-9640-0db6fc65f2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773c9f0d-dcfa-43ba-8908-81725b1e622f",
        "cursor": {
          "ref": "febd18fd-abed-4a1c-b1bd-02c0d794e6c6",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f0e46029-15e2-45b8-867a-c7e7a3eb1273"
        },
        "item": {
          "id": "773c9f0d-dcfa-43ba-8908-81725b1e622f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e77efd1e-975d-417d-af82-c8d9a4bff973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21eeca2-184f-4b28-9989-1889bf20b827",
        "cursor": {
          "ref": "eeb3c352-de0d-40d6-9f2c-a686b880a9ef",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "429dfbc4-9821-4211-a0d4-acdbdec9314c"
        },
        "item": {
          "id": "f21eeca2-184f-4b28-9989-1889bf20b827",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "51368678-f6b0-4826-b6c7-fc377d715f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48a28b3-1897-4971-a1bb-8ce4ad2887d8",
        "cursor": {
          "ref": "b0aad3b4-f8c3-4f56-b4d1-a775a92dc6e9",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fbb58801-7580-4222-964a-3b49c8968a02"
        },
        "item": {
          "id": "f48a28b3-1897-4971-a1bb-8ce4ad2887d8",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "098657fe-30cc-4f06-9e8f-0a39d940b508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2063346d-142f-43d6-bdf9-4a962750a6c3",
        "cursor": {
          "ref": "89186692-100a-4ca5-8f69-b4057c6fe6bc",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "34254f17-537a-4bac-82bc-1446a8698f7a"
        },
        "item": {
          "id": "2063346d-142f-43d6-bdf9-4a962750a6c3",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "351cd03c-f36d-4ace-8b09-16033cd916d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a8e0ec1-7696-4f97-a529-e152d0fe4b4c",
        "cursor": {
          "ref": "21793c15-c8ef-473e-a19e-5c77701c4f09",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f7250012-2445-4fe8-a06d-f05f20073070"
        },
        "item": {
          "id": "0a8e0ec1-7696-4f97-a529-e152d0fe4b4c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "6b64c06a-4a42-4cea-950f-1db77aa40e3c",
          "status": "Created",
          "code": 201,
          "responseTime": 555,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b2a9b309-8145-4ec4-b171-0ec15f96bbc4",
        "cursor": {
          "ref": "464c16ed-ee46-41d3-bdf0-3d3ee67337f9",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "7cc2f967-a5f4-4cae-beed-f0f554618d40"
        },
        "item": {
          "id": "b2a9b309-8145-4ec4-b171-0ec15f96bbc4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cd880996-8d84-407a-baf5-e46a911bd525",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "bd9cd756-f73a-4ca1-b4d9-522a0b6326b4",
        "cursor": {
          "ref": "e61910f2-0fda-4d1a-a75d-9bdf4f76ecdf",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2f4ffba3-96a9-4689-bddc-7074d82e54ad"
        },
        "item": {
          "id": "bd9cd756-f73a-4ca1-b4d9-522a0b6326b4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5a50ad93-dd36-469e-95aa-6e0cb30966ca",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "7469458b-1103-4f5e-ac3d-f97d4659d318",
        "cursor": {
          "ref": "07693960-5d0f-42dc-bb32-3d9be9fffd75",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "44d8f9c6-9883-4e69-a93d-23769435c64f"
        },
        "item": {
          "id": "7469458b-1103-4f5e-ac3d-f97d4659d318",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "48b76e80-eec3-48c9-94f4-c35d27b5a628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd2b61a5-1b47-42dd-9015-52b6c4278768",
        "cursor": {
          "ref": "120acf0a-62b8-4120-a631-d95de1d524dc",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a88b3550-ba30-4b21-9d14-69f8e827fad8"
        },
        "item": {
          "id": "dd2b61a5-1b47-42dd-9015-52b6c4278768",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b07a4e10-ff18-4f6c-8955-8e19ed715bae",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1192deda-9d60-49d7-9e3b-8077420f827b",
        "cursor": {
          "ref": "a7a7c90b-806a-4e9d-a5d2-baa65b19bbb5",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a69945e9-12a6-45c3-b9cd-f7e7adfd40e5"
        },
        "item": {
          "id": "1192deda-9d60-49d7-9e3b-8077420f827b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4f9318b8-1ddd-4137-9475-95b59271ee11",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "49633da5-d4d7-4960-a090-c65b46ae9133",
        "cursor": {
          "ref": "70639311-fadf-4197-b1e3-e5a3129dedca",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1fac07f0-fd95-4074-a263-d5fd73727e75"
        },
        "item": {
          "id": "49633da5-d4d7-4960-a090-c65b46ae9133",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "a5ce7b6d-c1b6-494e-a84e-22ad8e806887",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a3d9b55e-39e4-4aba-93de-db495706b6e3",
        "cursor": {
          "ref": "f73635b8-cb3e-45d3-8cd3-0dd714c8e38f",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "168afd5a-dcbf-4d87-a4c7-bef563f9e2c1"
        },
        "item": {
          "id": "a3d9b55e-39e4-4aba-93de-db495706b6e3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "67ed49eb-8e5a-46b7-a6be-9c5e6131a2e7",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "acb3c2d7-2451-4991-ad6c-ea9a7e1a6c9d",
        "cursor": {
          "ref": "b668290b-9a78-406e-b3e9-46de8bae9a21",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "318145aa-5fc0-4aa3-afa2-f9c9ae98e054"
        },
        "item": {
          "id": "acb3c2d7-2451-4991-ad6c-ea9a7e1a6c9d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "90fc7b8a-0228-4044-a87c-28d06a02a17a",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "79c2a50b-fbba-4ef9-93fc-a70cb212cee5",
        "cursor": {
          "ref": "e2302c76-d30e-4871-95c1-05bae1c4b54b",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4e6d7c2e-db05-47fd-beab-2fd39aa17acf"
        },
        "item": {
          "id": "79c2a50b-fbba-4ef9-93fc-a70cb212cee5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e0e9397a-7632-4ac1-b8fe-09846ff5860a",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "27d7e143-71bf-49b7-9736-c2a3dfa8aa6a",
        "cursor": {
          "ref": "d62b6f5f-c93b-411a-ae25-2abae1c084b4",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "dd2232d6-a070-495a-b52a-e304e3b4a216"
        },
        "item": {
          "id": "27d7e143-71bf-49b7-9736-c2a3dfa8aa6a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4449d2ae-202f-444a-ab36-187a26f13393",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f68bc97e-be86-494e-8090-967612f064ae",
        "cursor": {
          "ref": "6021bdd9-91a1-45e1-9b85-163c0b7cfeef",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5de4fdcb-853c-4c44-b114-72641f6b3798"
        },
        "item": {
          "id": "f68bc97e-be86-494e-8090-967612f064ae",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "fea1c727-754e-48c5-9bee-e790ca5616bc",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "246e73b3-c26c-4704-842a-f3c7e8cf67bd",
        "cursor": {
          "ref": "47180839-d503-4ca7-acb5-28420f74d18c",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "24bb3bef-3190-43e8-88fb-d4fd0c477af2"
        },
        "item": {
          "id": "246e73b3-c26c-4704-842a-f3c7e8cf67bd",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "61cd4692-a34e-4046-a692-1e885e6d4495",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c619a90b-8159-48b6-a807-49a7456408db",
        "cursor": {
          "ref": "eed0a27d-58b7-4c01-82c4-e0eb84cce7ca",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c939cd36-b6d1-4081-ba3a-3631dc2e6bc4"
        },
        "item": {
          "id": "c619a90b-8159-48b6-a807-49a7456408db",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c3e6b8f6-136d-4098-b291-dfb0d6b560d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9270af-e62b-4334-8bf2-165287fc31f4",
        "cursor": {
          "ref": "4f0ea605-506b-4059-8a68-9caf7ede7858",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f61e0cea-4e92-4ad0-8264-88dde5dc4f2d"
        },
        "item": {
          "id": "9a9270af-e62b-4334-8bf2-165287fc31f4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "97c9a156-c8ab-41b9-9a4a-c280132588d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6b40c78-8123-47b4-977f-94e170675bf1",
        "cursor": {
          "ref": "200eeeb8-ad88-443a-831c-707791f9f573",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3b10dd24-68df-4bd5-9458-26960e84122f"
        },
        "item": {
          "id": "d6b40c78-8123-47b4-977f-94e170675bf1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "946c1610-72b3-46c6-9908-9ef9e3fe58fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "865030eb-2b9c-432f-8b25-88650a77beb3",
        "cursor": {
          "ref": "898491f3-e524-4b22-9a3a-072eac9a4f2f",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d5f6b6f6-acc7-4975-8021-1db956499f1e"
        },
        "item": {
          "id": "865030eb-2b9c-432f-8b25-88650a77beb3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "22e1ea61-7413-4b6a-a208-e7c4dbf3205d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61068ff6-1bb6-4237-9317-fdce506437f7",
        "cursor": {
          "ref": "4f32c076-d0b1-449a-8767-d2b71ef9bf8f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "44844e28-e8bc-48ca-a566-5e906f8ba256"
        },
        "item": {
          "id": "61068ff6-1bb6-4237-9317-fdce506437f7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "508fcb59-16fc-45e2-9d46-dc54e6207104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2079de8b-aaba-47fc-b508-d11bfebdf0bf",
        "cursor": {
          "ref": "fb9a3e3d-5eb8-4834-b4dc-873de414eb9f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "21b3fdfd-43ed-45c7-8903-c407208e343d"
        },
        "item": {
          "id": "2079de8b-aaba-47fc-b508-d11bfebdf0bf",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6d29ea74-c6bb-4d55-9063-46f4e700eedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "404ea9f5-d324-4b55-80d2-ca8a7c8a097b",
        "cursor": {
          "ref": "94c90b9d-22e0-4955-a7c4-2bc002f942d5",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8eadaf6d-9c1f-4f2a-ab09-a3b098bb9385"
        },
        "item": {
          "id": "404ea9f5-d324-4b55-80d2-ca8a7c8a097b",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "80d552b7-8566-4524-9100-e251c2bccc79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f09e607-c5d1-41e6-84b2-caa387d63241",
        "cursor": {
          "ref": "dc0c1825-1354-443f-8d4a-e8bd1c40f66a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "034335ba-e26e-45df-8576-037116db709f"
        },
        "item": {
          "id": "3f09e607-c5d1-41e6-84b2-caa387d63241",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d0eaa452-ca0b-4054-98ed-9c057cf6779f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b641e448-e351-4fb7-aa73-cfe893334d38",
        "cursor": {
          "ref": "865217bd-011a-4730-8275-a093c3e4d386",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d2d9ab01-c085-4f4f-ba39-16cc6f8f8acc"
        },
        "item": {
          "id": "b641e448-e351-4fb7-aa73-cfe893334d38",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cc0f93a3-720f-42bd-9e60-ad08c6164b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c80621-2e56-421c-8b1e-98014c979137",
        "cursor": {
          "ref": "ebc921c2-d8e6-4dbd-a72f-b20d815e1a6d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1f74d4a2-be80-45af-83d3-1fd19e66632b"
        },
        "item": {
          "id": "79c80621-2e56-421c-8b1e-98014c979137",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0c779d56-01a7-4fda-82dc-c463f1b15b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd69557-a15e-433e-8deb-c7ea9aec2413",
        "cursor": {
          "ref": "8338e6c7-c934-442a-822f-8a3a66f00c00",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "49ed4bae-ffde-422e-97e5-a1e384b1c9ff"
        },
        "item": {
          "id": "2bd69557-a15e-433e-8deb-c7ea9aec2413",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "55ba8fe4-d32d-4434-a6b4-0a2700379d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8b2030-dd01-40fd-b016-48bbd8b9f9ee",
        "cursor": {
          "ref": "1cca6bf1-828a-4889-a8a7-519e6c977de4",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "57e9f6b1-d954-47d3-846e-9e18fb255b28"
        },
        "item": {
          "id": "1c8b2030-dd01-40fd-b016-48bbd8b9f9ee",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e81f9024-5d70-401a-8f15-328629e7f055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f9e6cf-f91e-4e34-bf84-8f45ba0e7589",
        "cursor": {
          "ref": "f00c20dc-60fe-4154-bfc9-243a67c8e4f9",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "13b739ee-5819-4a82-b293-6d3f77647eb9"
        },
        "item": {
          "id": "40f9e6cf-f91e-4e34-bf84-8f45ba0e7589",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6fd465b2-7701-4fd1-987f-80d0b31d5e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5a2b3a-2aba-4e83-9874-3c54f37ef364",
        "cursor": {
          "ref": "36ffa4a4-bafb-42a0-994b-c2e43c6ea064",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c8bfedc0-fa3a-49f0-addb-c3fca3953bd9"
        },
        "item": {
          "id": "cc5a2b3a-2aba-4e83-9874-3c54f37ef364",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "76dc4f4a-09b6-4e04-9f1c-df6d14555025",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "78e0217f-ff19-4234-9f04-2f19a992380c",
        "cursor": {
          "ref": "ceb4208d-df29-4858-9cca-d46e321c278a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d08d7648-677e-410c-92cf-a8e0e3c36752"
        },
        "item": {
          "id": "78e0217f-ff19-4234-9f04-2f19a992380c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7760fa2a-6715-4119-b807-8555e73c6d69",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "8604684c-0903-4478-a829-8fb99f5ca73b",
        "cursor": {
          "ref": "d4933f27-e66c-4f23-bfc2-39be6091220b",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "83c89e76-94b4-4ad1-84d4-c78f7f82c3be"
        },
        "item": {
          "id": "8604684c-0903-4478-a829-8fb99f5ca73b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4afd553e-aa56-4a25-953b-2b4d0a6fc73b",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "52f6f94f-6384-4c1c-987a-a7e1a1547561",
        "cursor": {
          "ref": "83ecd822-d8de-4b21-9450-a79701ce2dbc",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ac260f82-156e-49c9-9e70-65d0e3be6c57"
        },
        "item": {
          "id": "52f6f94f-6384-4c1c-987a-a7e1a1547561",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0b3f4060-4d04-48bb-8a3b-599f23766cc1",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "727c1c23-d6bb-41be-904b-0a8a9d4fab44",
        "cursor": {
          "ref": "9c11dfb9-700a-4af2-9522-9ccb095813b6",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ff68beac-2d9c-46ce-b471-4c9bc2643fd4"
        },
        "item": {
          "id": "727c1c23-d6bb-41be-904b-0a8a9d4fab44",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9a265c07-2c2e-4411-9a0d-fe8d003fee32",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0419f0db-9376-401c-9665-8ed33c98e27f",
        "cursor": {
          "ref": "61e45721-8ed6-4690-9ecf-db314be96149",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "ad48a6c2-8e48-4646-9ba1-01e628d9d888"
        },
        "item": {
          "id": "0419f0db-9376-401c-9665-8ed33c98e27f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e0658d78-a90b-4e23-8f33-e2e4cc8a3b31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f65a0fd-a24a-4864-b30e-2f99c680d003",
        "cursor": {
          "ref": "3147f766-3b78-42b6-a97f-ed6e22b62f6a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f5b00d55-f4f2-4233-b421-070491a756bc"
        },
        "item": {
          "id": "8f65a0fd-a24a-4864-b30e-2f99c680d003",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "987ea644-5dba-4135-a176-92c48ab18648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598ec4b9-8949-4406-b9ab-b31e6d18166f",
        "cursor": {
          "ref": "4c3effe4-15ca-4e7a-873c-adc294bf13dd",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "acf31152-18ea-458d-bf3d-ce3c962ee188"
        },
        "item": {
          "id": "598ec4b9-8949-4406-b9ab-b31e6d18166f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fbeafd47-2af3-4d82-b557-b2f2e6fa98b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e84e720-5503-4903-a42a-b3a77e14f982",
        "cursor": {
          "ref": "17306c6e-5434-40b8-90a3-25fe17c86ac7",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d55883b7-3ae8-4327-80e0-29dccdf0b729"
        },
        "item": {
          "id": "4e84e720-5503-4903-a42a-b3a77e14f982",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f6ea6bd3-5088-4e40-b969-f44e477ad0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf6897a-41e1-4d30-b7f0-50e4f267387b",
        "cursor": {
          "ref": "758f4e4c-0597-48dc-a012-58d51ec81dd1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e05f1034-610c-4a5d-b086-091acf03be5f"
        },
        "item": {
          "id": "abf6897a-41e1-4d30-b7f0-50e4f267387b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "71fa08ba-6434-4239-99b5-894e6d37c0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9336ff42-d043-49e8-afee-48c96eb870a9",
        "cursor": {
          "ref": "3a028579-dedb-4656-aeb6-bcf9a325f483",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6f990ee5-8fda-4603-9174-512add954271"
        },
        "item": {
          "id": "9336ff42-d043-49e8-afee-48c96eb870a9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "1f119939-2bb1-414a-878e-f8a7edce157c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947aa639-1212-4eb7-9bbd-dde4a0734a4f",
        "cursor": {
          "ref": "03acc1b3-91ee-4ce0-9a1e-107a58733a9d",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "32338d65-763a-4f98-86a5-d7d6af4a1031"
        },
        "item": {
          "id": "947aa639-1212-4eb7-9bbd-dde4a0734a4f",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "5b788e86-2048-4e79-9d2e-2f2ca01cbce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3bdd25-7404-487b-9d69-975636a95003",
        "cursor": {
          "ref": "0e0524b8-dfdc-41c6-9624-ea417b91b39b",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "25f20027-f437-409e-bb57-f4eefa847071"
        },
        "item": {
          "id": "5e3bdd25-7404-487b-9d69-975636a95003",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c8b21f1b-8fc3-4d93-bc82-bfdc66a28622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783c09a7-ca3a-4335-abbf-25bf2598814f",
        "cursor": {
          "ref": "18e3f61b-0978-48cb-9402-4a5afa47b2d9",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "437c7f35-3ed9-4d03-9be4-b8c3399127ca"
        },
        "item": {
          "id": "783c09a7-ca3a-4335-abbf-25bf2598814f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "adfcf28f-65bf-40ff-8f59-ac9566934cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8572485-14a9-428b-b62f-cfebfd8781f3",
        "cursor": {
          "ref": "6e0f4935-7446-4da8-a550-85747956a0c2",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "881cd358-d4f0-4f06-b098-94351eb12790"
        },
        "item": {
          "id": "d8572485-14a9-428b-b62f-cfebfd8781f3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "706ea9df-453a-43c8-a462-99d095f03315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3be547-adae-47d9-8f37-6679929b361a",
        "cursor": {
          "ref": "08d00790-3d7f-4b02-a17c-b49c61d8a1bc",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6c2ee3e4-abe9-47c3-bcc4-50310892a727"
        },
        "item": {
          "id": "6a3be547-adae-47d9-8f37-6679929b361a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5f9843de-1f74-4f50-bb58-554ec6400ceb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a5e351-9ce8-4412-8ed7-d49ab870d82d",
        "cursor": {
          "ref": "7fed78ec-0e3d-48ac-b77c-1ee552bb2697",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2c7cd10f-6726-461f-ac2a-7a8444e4515c"
        },
        "item": {
          "id": "18a5e351-9ce8-4412-8ed7-d49ab870d82d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ecb072b8-88ae-43c7-87d4-2863cabaae9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a88c620-876e-4720-9541-6c011282c4a1",
        "cursor": {
          "ref": "5372620d-4715-48b6-a041-398ffddcbda3",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "15dc358b-a808-4b26-b7b3-d98da905ba35"
        },
        "item": {
          "id": "4a88c620-876e-4720-9541-6c011282c4a1",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "94c6a3c1-e47b-4638-90b3-39abae0a188c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a678d2f5-3340-487f-90fe-595ade2a15bf",
        "cursor": {
          "ref": "abda3ad3-88a9-43e5-a374-ed9ef5f60627",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8c6d2379-a4f7-4e20-81b2-e3ba106f9eb4"
        },
        "item": {
          "id": "a678d2f5-3340-487f-90fe-595ade2a15bf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "7ac8a4ff-65f8-43d6-89b6-56dba2b04cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bf4d20-ec06-47d9-a6ea-cc916e023ca6",
        "cursor": {
          "ref": "a70177a5-5f97-452f-8814-a72eabf88d58",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "84e811d1-aadc-430b-91cb-b95673a5b458"
        },
        "item": {
          "id": "b5bf4d20-ec06-47d9-a6ea-cc916e023ca6",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b67dd307-5add-4c41-b2ec-41e169dfec58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2026fc5-9aca-415f-b6ea-bf9997802118",
        "cursor": {
          "ref": "d5c85e86-aeae-460a-9bc4-b520bc2a1678",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9acfafe1-d262-45aa-afdf-8400e6db218b"
        },
        "item": {
          "id": "f2026fc5-9aca-415f-b6ea-bf9997802118",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "25ad06fe-0967-4099-9c4b-9e99d71f5f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a987a00-5a73-4479-b8d3-781c71731b3e",
        "cursor": {
          "ref": "576478e0-81f0-43aa-9396-9eb14e199fdf",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3df086ae-e09a-458c-8605-a09a47a2d954"
        },
        "item": {
          "id": "6a987a00-5a73-4479-b8d3-781c71731b3e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5526d6f5-d024-4ca1-aa33-272514df14ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f9eadc-9ab6-43b5-9cd3-6e49a1ef0798",
        "cursor": {
          "ref": "65152e3d-1aa1-4459-902a-ae577842d630",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "14137d86-8d1a-4727-a986-b24f8ccd2a8a"
        },
        "item": {
          "id": "c3f9eadc-9ab6-43b5-9cd3-6e49a1ef0798",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cf986219-d86c-4cf0-99f5-762a73dd4151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c806f93-57cb-4c7b-9421-a957408e3238",
        "cursor": {
          "ref": "c78d4f39-a26f-4adb-b494-5435730b5be6",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ebd13293-b00c-43eb-b5d6-8a5c5713cb5c"
        },
        "item": {
          "id": "8c806f93-57cb-4c7b-9421-a957408e3238",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2d66a154-d64a-420a-9795-94b1a45ff8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece49f2d-0589-4917-a35e-0c70e74dc416",
        "cursor": {
          "ref": "bb7aa950-6372-4631-ac39-84fc54819714",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f4424753-1019-42d5-a36f-4c649cd76211"
        },
        "item": {
          "id": "ece49f2d-0589-4917-a35e-0c70e74dc416",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "45c3036c-4c5a-4d17-bc03-90179c8d409e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7891f37c-995f-4abe-b1c2-369c3c7f7f4c",
        "cursor": {
          "ref": "74498f8c-6613-4f7d-8959-0052dc2ee29e",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "1eb0643e-9590-433e-a1c4-e0cf84d3ee45"
        },
        "item": {
          "id": "7891f37c-995f-4abe-b1c2-369c3c7f7f4c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d8942252-f74c-412a-a90c-21b7f77c0406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffeab2d6-c67d-47ac-a7ca-58fb8b5471e7",
        "cursor": {
          "ref": "d02609f0-2f1d-4a47-935e-1f70de53b1da",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "bceffd2b-abfe-48bd-b0c3-806622bd11c8"
        },
        "item": {
          "id": "ffeab2d6-c67d-47ac-a7ca-58fb8b5471e7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bd2146e4-73b3-4f6e-ba65-aec09211a083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19947497-2b39-4a6e-a499-ad68a590e42d",
        "cursor": {
          "ref": "93014309-cb98-4c3d-9b94-30f9f0cc337d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e7cbf890-f06c-4a4e-b315-1a112aec9c19"
        },
        "item": {
          "id": "19947497-2b39-4a6e-a499-ad68a590e42d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "aef4b6fc-905e-4a35-9638-73f0d50f64ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cea3c76-cfd2-4452-8334-4532c9599995",
        "cursor": {
          "ref": "4b269b42-448b-40c3-a37d-f61b75bda116",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "588257b5-d854-4533-812f-396f33629bc3"
        },
        "item": {
          "id": "0cea3c76-cfd2-4452-8334-4532c9599995",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "447a6e1c-71c7-40a2-97c1-179d99920d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062f5ebd-accc-4c0e-aec6-6496c632b155",
        "cursor": {
          "ref": "6155e298-eed1-4898-9a28-3357bbb9729a",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3c739033-53f0-4e8d-8dc3-75caf53cfa2d"
        },
        "item": {
          "id": "062f5ebd-accc-4c0e-aec6-6496c632b155",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b7804a1a-c9b1-4d8c-99e4-fa51796c4b6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a07566f-ceb2-4bf9-b9c3-ff7694a857c5",
        "cursor": {
          "ref": "0f82bd18-dcd9-4b0f-b8a1-552c25b80695",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5fc46e04-787b-4e58-95b9-5f42ca1b7fb0"
        },
        "item": {
          "id": "2a07566f-ceb2-4bf9-b9c3-ff7694a857c5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9aec1d6f-b955-4ee7-9177-c416db546c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93dedba-d2e9-414b-8b92-5d77a41c8ad1",
        "cursor": {
          "ref": "2cafc372-7d57-4918-b0e0-902fcde25ecf",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f3673556-140a-4710-96ab-f0155f06b555"
        },
        "item": {
          "id": "b93dedba-d2e9-414b-8b92-5d77a41c8ad1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "73c5f7de-ef58-4cbc-a6f0-56a75cec3404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e8c6f7-f7fa-4b8f-977d-7972e47f0566",
        "cursor": {
          "ref": "58fb40f7-86f7-49ac-a7b6-2eac2610fa9f",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a5811c77-1d56-41dd-90c8-efd7e66a91b3"
        },
        "item": {
          "id": "78e8c6f7-f7fa-4b8f-977d-7972e47f0566",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c98f5e16-3deb-44bc-97d3-8b7bc2466862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a305ed-f8ea-4832-b1e4-aeca7a404768",
        "cursor": {
          "ref": "f950cb20-c110-4afc-ae6f-22c9dc4fef7c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "508359bf-349f-4b3b-a7e8-569b7c798c58"
        },
        "item": {
          "id": "d1a305ed-f8ea-4832-b1e4-aeca7a404768",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "352cca31-1b3a-438a-ad92-6abdc708bce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1905c256-c2e5-4381-85a4-2ade829a13ce",
        "cursor": {
          "ref": "a90a1b79-ab63-4f26-848c-233fee29767c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2a962edf-6581-4eed-adbb-ae2c4ce6779e"
        },
        "item": {
          "id": "1905c256-c2e5-4381-85a4-2ade829a13ce",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "62054946-3a32-409a-8362-f20b2ce280d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95648db1-3442-4283-8c47-875db89ddbf0",
        "cursor": {
          "ref": "b249a117-a00f-4d06-9fd9-ca684e396417",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b91eb977-a43b-4e5a-9adc-d20a96741294"
        },
        "item": {
          "id": "95648db1-3442-4283-8c47-875db89ddbf0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "dd74ae0c-0a30-48c3-ae31-97cc5ff0dd19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0647bf4-82ba-4119-83ff-d56960bd1360",
        "cursor": {
          "ref": "71a0f416-29d0-4bf4-ad29-a3ba01da679e",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "35ae36b9-774b-4ce5-8173-5d5171f4c151"
        },
        "item": {
          "id": "c0647bf4-82ba-4119-83ff-d56960bd1360",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "24bca225-5a8d-486a-9c68-df72f7e8d8d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2b789c-d43d-4cf3-9397-f4eecb1b42e4",
        "cursor": {
          "ref": "fe45c4db-4010-490d-b8b4-bbfc6a649c04",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dd90a543-7802-450c-91d1-d9e23e55b3b4"
        },
        "item": {
          "id": "bb2b789c-d43d-4cf3-9397-f4eecb1b42e4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "2dc4c9c5-df15-4f54-83fe-c25c5cdcda2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c435168f-73d2-46c0-9b91-2f13f4677cda",
        "cursor": {
          "ref": "d5cf5d31-c8a7-4b14-b19f-fa1dcd901d42",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9a342861-53f5-432c-8bf0-d752883b6e8a"
        },
        "item": {
          "id": "c435168f-73d2-46c0-9b91-2f13f4677cda",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6b07e181-75c2-4a9d-89b9-3dc776b4b013",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "24641bd9-bb81-48b1-acae-60c6cd5cea16",
        "cursor": {
          "ref": "cd6e6662-234d-4b31-a52d-0688a8f15901",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9acbe708-bec0-4ea2-b821-15c22a787309"
        },
        "item": {
          "id": "24641bd9-bb81-48b1-acae-60c6cd5cea16",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b4b3e98b-8d66-4aa9-b8fc-7d0c2d53d6ed",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae3539b-14a8-47e3-b946-d03608bc353f",
        "cursor": {
          "ref": "485c1f5a-a0dc-401d-8b0b-a3ae3a084788",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3043e277-8780-4c75-8bce-9c7d630c94f1"
        },
        "item": {
          "id": "0ae3539b-14a8-47e3-b946-d03608bc353f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7fa26dcf-efbd-4930-8cdd-115ec38663bd",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f38d088-d393-4138-8636-cbc453afe121",
        "cursor": {
          "ref": "c1e362d5-fd40-485e-9ce5-c999202b0de7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0192ef74-545e-4e55-b9a6-f16d1a0fbad6"
        },
        "item": {
          "id": "5f38d088-d393-4138-8636-cbc453afe121",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cbbcf23b-1ca7-43d6-813f-c8c15bf0d83f",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9766cccf-92b7-4fcd-8f2a-84d87481b62d",
        "cursor": {
          "ref": "a1594416-aa8c-4751-985a-9951c2ef03f7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "891a8848-9516-43a5-b277-e56d22f9d48f"
        },
        "item": {
          "id": "9766cccf-92b7-4fcd-8f2a-84d87481b62d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bf1be622-06eb-461d-8572-73b35238e12f",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-01T00:39:50.780Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-01T00:39:50.780Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5e0e3551-ee17-4d04-b8a9-df9744b3d85c",
        "cursor": {
          "ref": "be28c197-15b8-4479-a7d9-cee3f576114f",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "19ab4a38-c819-4cf0-a601-0551277830b7"
        },
        "item": {
          "id": "5e0e3551-ee17-4d04-b8a9-df9744b3d85c",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8347a431-ef19-4cb3-8bd3-b8da1ccee4d1",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e0c5a46-f46b-4a7f-9f48-6e37a6166a58",
        "cursor": {
          "ref": "06fdc2c8-a341-420f-abb4-d8ca16328f34",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6b855cec-e866-45bf-b822-73d70c009584"
        },
        "item": {
          "id": "3e0c5a46-f46b-4a7f-9f48-6e37a6166a58",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "84739c75-a3a3-45a1-81c6-4f26521b4628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86af5aea-304e-4980-99bc-0a744d02bf58",
        "cursor": {
          "ref": "9b37b627-d76c-4cbf-b10f-bfabb00343e7",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2d35db24-490a-4db0-b79f-3482463a3463"
        },
        "item": {
          "id": "86af5aea-304e-4980-99bc-0a744d02bf58",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ccd7fb42-1696-48ec-969b-09e6209189f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0b87d5-dd06-4d41-a4c2-d8aad2f3a3c8",
        "cursor": {
          "ref": "b48c3441-7886-4704-a56c-3f4997193a98",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "be3a9fa6-acfe-4f16-a1a2-14df79b5b2a9"
        },
        "item": {
          "id": "7e0b87d5-dd06-4d41-a4c2-d8aad2f3a3c8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9849dd89-5ad5-4b6b-9a09-69e45a8ca641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b312fd4-1a17-4960-b7f9-7f213e74c1e2",
        "cursor": {
          "ref": "79960cca-4f6e-49df-a4ff-656fd9a13e71",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d7deae5c-9f7d-4d61-b737-96ad0d5d4ae4"
        },
        "item": {
          "id": "5b312fd4-1a17-4960-b7f9-7f213e74c1e2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6997426a-f0e1-4a5c-8079-f44c072624d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f4857f6-a53c-450a-a035-c5cfafdd4914",
        "cursor": {
          "ref": "c1b9464b-2b97-46a1-8e3a-2470b4f01084",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "174bdde5-284b-427c-85bd-192dd9326093"
        },
        "item": {
          "id": "8f4857f6-a53c-450a-a035-c5cfafdd4914",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "26f6a1db-72db-415b-9cab-37de56d637d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecbcd9e3-1822-409a-bfc5-29714ba34d9e",
        "cursor": {
          "ref": "f4681b6f-c659-44d9-9c83-1d3327c8a968",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4e285411-3e8a-4edd-8cf2-c3e64c4c8171"
        },
        "item": {
          "id": "ecbcd9e3-1822-409a-bfc5-29714ba34d9e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "600269ef-625d-438b-a9b5-3bea823762eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1166ab3-0749-4017-8cc1-d1e1c824da2f",
        "cursor": {
          "ref": "2449dfc7-f94a-4c86-9c13-5331d4d95625",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "02998e64-9d04-4c8a-9a29-5db362058c1e"
        },
        "item": {
          "id": "c1166ab3-0749-4017-8cc1-d1e1c824da2f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "62a01022-c286-4f48-99ab-fd689e96b4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24e935e-afcc-4ca5-89a1-13ed9f5b3d3e",
        "cursor": {
          "ref": "a3204b2d-61db-45d3-b415-621fb14e9881",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cb2e61bf-d173-461e-adf8-06c7f4e95b54"
        },
        "item": {
          "id": "d24e935e-afcc-4ca5-89a1-13ed9f5b3d3e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4bb46c34-dd7a-436e-bf46-ae8cc13f6dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf536cad-32ab-4302-8fca-20be6d017d6f",
        "cursor": {
          "ref": "bb0999b1-772b-44a5-8d92-1a0889813051",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "638cbe78-1e8c-4e93-b8a4-b0d5cf4d5645"
        },
        "item": {
          "id": "cf536cad-32ab-4302-8fca-20be6d017d6f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "444929b4-e518-4f05-b735-64b74b4af23c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936d34f4-1187-4f6f-b9c5-3bbab3c99524",
        "cursor": {
          "ref": "61568cef-d659-4ca4-9493-cae86661a15c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "09e5b775-c511-4e39-8121-7a4804889ada"
        },
        "item": {
          "id": "936d34f4-1187-4f6f-b9c5-3bbab3c99524",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4c4fd38c-23d5-4b31-aa45-f793b3cd242a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a814482-8abc-4695-890d-1fd45058b637",
        "cursor": {
          "ref": "3158a37e-1233-45a8-b0ab-5d3ae79c989b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "73d1ff91-acc3-47d7-94fd-8c45a6d4a2e4"
        },
        "item": {
          "id": "3a814482-8abc-4695-890d-1fd45058b637",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ff72f0da-5b7f-46c0-ba4e-fe1829b8ac8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba82d97-87d4-40ff-9f58-87cf7fd81306",
        "cursor": {
          "ref": "0404b67b-a986-4f4e-add3-733e23d5b72d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bef9b6e1-3d73-4e8d-b0e2-8555e71c19cb"
        },
        "item": {
          "id": "7ba82d97-87d4-40ff-9f58-87cf7fd81306",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "efc70f59-4134-4675-8f16-2c9b5c59f337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ea44e1-e1ed-4a38-b590-7e8a4ce329b2",
        "cursor": {
          "ref": "4ad41f42-57ad-47eb-8269-243dd68febe3",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7e37d6b2-46a7-4565-a0a9-80e508ab868c"
        },
        "item": {
          "id": "03ea44e1-e1ed-4a38-b590-7e8a4ce329b2",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4e5486bb-1319-4fc6-a3ed-87a05cb51c7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9710dc6f-a540-40b9-acdb-05129969ecec",
        "cursor": {
          "ref": "fc18a13d-2b7f-46b3-a4c4-06870a0a5c66",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "d79a5196-23c5-4192-8914-193231ccb558"
        },
        "item": {
          "id": "9710dc6f-a540-40b9-acdb-05129969ecec",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "54f3c0e8-f619-4010-b167-b81f562f27e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7038cdfb-a80a-4a22-a068-d56fd1b91958",
        "cursor": {
          "ref": "3dac07bb-82bf-43dc-a1c7-758d45d661ff",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2de8b47e-efcb-491b-9678-fcb837bb4ced"
        },
        "item": {
          "id": "7038cdfb-a80a-4a22-a068-d56fd1b91958",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e74f103b-6fac-43b3-93b5-67d7d34b75be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1b613c7-d6dd-4182-9c44-55c32b62756f",
        "cursor": {
          "ref": "f3a08c0e-d882-4d7b-98f3-f5875e0f577f",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b9588873-2f54-408f-b677-69e5aff039ec"
        },
        "item": {
          "id": "a1b613c7-d6dd-4182-9c44-55c32b62756f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ceb59939-f302-424b-90d6-c45b21d8ce2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587f408d-7e14-4a37-bce2-44322f09980d",
        "cursor": {
          "ref": "fba26151-01af-40c7-80ea-964464a122fd",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "bbec2a31-1537-494d-8659-d4b58cb80264"
        },
        "item": {
          "id": "587f408d-7e14-4a37-bce2-44322f09980d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "90aad2fa-7867-4c62-abba-cf0663373b16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9be4ad-6f0d-4338-958d-19e553b8f089",
        "cursor": {
          "ref": "5c9e0a8a-4fe8-4421-b032-97100872e8a2",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a0ccefbc-e710-4b99-97be-005d7b338620"
        },
        "item": {
          "id": "de9be4ad-6f0d-4338-958d-19e553b8f089",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "50e4ff9e-4965-4086-b86c-001b049ac234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdc6a1b-f70a-4278-b40c-89f1df5f32bd",
        "cursor": {
          "ref": "ab82fc8d-f42a-4903-8873-8dbbe63b15f0",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3a565edd-b86a-49ae-97b4-6898d4e6fcb1"
        },
        "item": {
          "id": "5fdc6a1b-f70a-4278-b40c-89f1df5f32bd",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6bf20be6-fc8d-47bd-b569-89ee24555e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c662f7e-7031-44ab-89c2-c8a8b67a8b18",
        "cursor": {
          "ref": "bdfb6516-e2d9-46db-9d93-031d4c869dc1",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "edc39c83-ab8b-49ce-8ba1-03990981d8bf"
        },
        "item": {
          "id": "9c662f7e-7031-44ab-89c2-c8a8b67a8b18",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dc93ce41-74ea-43be-b6ac-d3cc726316db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48084d39-b536-44ef-92f8-273e0ca60d6b",
        "cursor": {
          "ref": "c6f01b2a-bc18-401c-9d23-47987ee54698",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9e1e9bc6-071f-421a-90c8-3300d6d4c11b"
        },
        "item": {
          "id": "48084d39-b536-44ef-92f8-273e0ca60d6b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5bd0c99c-8f37-4f1a-b396-d684ee7bdf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb81ae0e-19ff-4a19-af39-091bb7ae01e2",
        "cursor": {
          "ref": "36e74169-d5e1-4464-abc1-70d3f672cf4c",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c96f8eef-36c2-4a92-8bb2-64f49dd254b4"
        },
        "item": {
          "id": "cb81ae0e-19ff-4a19-af39-091bb7ae01e2",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c22f786d-55dd-4220-8175-0f2643175891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f7c6b5-12be-40c8-b7c3-fd4c0ac43549",
        "cursor": {
          "ref": "690087a3-4844-47bf-ad5b-67febfa4834e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d2342c79-3044-4acb-98d5-831b72b447d6"
        },
        "item": {
          "id": "69f7c6b5-12be-40c8-b7c3-fd4c0ac43549",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "fbee10a2-5d38-4c5e-80c6-4fe58887857c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b4e889-569c-498d-9467-fecbf9bd9363",
        "cursor": {
          "ref": "0327a25f-0eab-46a1-9b73-99814d8e5a35",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fe20997c-f427-4738-b1b7-ce78bedc0b13"
        },
        "item": {
          "id": "05b4e889-569c-498d-9467-fecbf9bd9363",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "12249b2c-5162-49fc-8c9c-66c2fd7a03ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6446eda-06d4-4ee1-8dc5-8bb1d608aedf",
        "cursor": {
          "ref": "57a8aabb-d74f-4bf4-9c20-8cec2a4a43f0",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c539ac2a-d9f4-4751-babd-931e6e83b9c3"
        },
        "item": {
          "id": "b6446eda-06d4-4ee1-8dc5-8bb1d608aedf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b34486bb-b478-49cd-90cf-d6f44af5f8ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086fd570-9452-44f4-aebd-f3b94ad27be6",
        "cursor": {
          "ref": "efbfd7c9-d67f-43ce-ba64-f616737106ed",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4115e06d-245e-4276-962c-d321080f343f"
        },
        "item": {
          "id": "086fd570-9452-44f4-aebd-f3b94ad27be6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "179d8d8a-0131-414f-8da4-56bf897d99f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bba14650-ef98-4448-8e75-96b8b836c5bc",
        "cursor": {
          "ref": "0e1eb40d-c94a-40b1-8bcd-b5ddf9c51e79",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "90c73719-0cbf-4cd6-aed7-310e80bae931"
        },
        "item": {
          "id": "bba14650-ef98-4448-8e75-96b8b836c5bc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "121a853a-aadd-46b8-853d-1b5a15839c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89ef660-ce3d-41ea-b254-b35cbe4023e0",
        "cursor": {
          "ref": "1dbdb3e7-5a42-4352-be6e-b4f3b3dae7b0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c67229b5-d120-455b-b78e-43520c7735a9"
        },
        "item": {
          "id": "a89ef660-ce3d-41ea-b254-b35cbe4023e0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5f6af78a-0870-4b1a-822b-4fa7a1e35105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b8d056-b686-41b9-999e-7d690579dbd5",
        "cursor": {
          "ref": "b11cdb2a-ee5e-4497-a315-a28773f74eb8",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a7bf3407-fdb1-4058-9064-304fc3edade2"
        },
        "item": {
          "id": "65b8d056-b686-41b9-999e-7d690579dbd5",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cc2f0944-884e-4003-957a-873615ba2616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1f6bc7-e308-4a66-8779-6b4f37962654",
        "cursor": {
          "ref": "bf4f9071-d990-4b94-9e5e-88d32b7692d1",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1b94ec3f-44fb-458f-9e63-6c3988e84033"
        },
        "item": {
          "id": "eb1f6bc7-e308-4a66-8779-6b4f37962654",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bba06828-bdd1-434b-8798-fcc879aea957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67a7462-6979-4371-a71c-b0e09e23dc4d",
        "cursor": {
          "ref": "d4505d5d-f6c4-469b-bd93-cd785ba53f57",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1ba233b6-834f-4c11-9ad1-05eea96d6327"
        },
        "item": {
          "id": "a67a7462-6979-4371-a71c-b0e09e23dc4d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6f5bb0f2-d7bc-4133-913f-826f3b5d301d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f8d1e6-8df6-4c34-92ea-6c9c78959f0f",
        "cursor": {
          "ref": "47b018f6-f226-483d-ac39-59ac59dcbcdd",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c6b19d62-760e-4c97-addd-348efdceaaa1"
        },
        "item": {
          "id": "23f8d1e6-8df6-4c34-92ea-6c9c78959f0f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ba3d30f8-61eb-4a54-a4a8-2713687707c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634f8448-a1ce-497c-8c7a-f2fba4cac2a4",
        "cursor": {
          "ref": "6aa1d836-eccb-41b5-9c67-b72f220f7880",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c159d91d-34ca-45c0-817a-4674ab222da9"
        },
        "item": {
          "id": "634f8448-a1ce-497c-8c7a-f2fba4cac2a4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bcf9da28-92fd-4c2c-b5fb-fb8c14bb0e46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ae81c9-aa24-4d77-83de-0efa2f21c4fe",
        "cursor": {
          "ref": "031bdbbf-b986-401f-8e5b-68e3247d7562",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f4e3b843-d8fa-4d4f-8fea-e019310dff27"
        },
        "item": {
          "id": "40ae81c9-aa24-4d77-83de-0efa2f21c4fe",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ae7ca11c-d6da-4ddb-85cd-81599ede74a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e9a337-dea8-4123-9d21-c84eea1cc05b",
        "cursor": {
          "ref": "75474cb3-7092-43cc-8b9e-331ce6e91757",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f790e7d6-0974-4cf1-87c9-d2956548c2bb"
        },
        "item": {
          "id": "c5e9a337-dea8-4123-9d21-c84eea1cc05b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "24dda36b-303f-4c4b-8026-441a236af7ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18a1f9d8-3f1e-4338-8937-286b415c7047",
        "cursor": {
          "ref": "66c04595-70c1-4f4f-9ef4-9c2f43ad2e39",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f0474a51-fede-4eec-8453-2ea005a42b27"
        },
        "item": {
          "id": "18a1f9d8-3f1e-4338-8937-286b415c7047",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "107a4b88-0323-4ce0-b6a6-8d87560d4987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351384b9-09ba-40a0-9b48-84663b70a115",
        "cursor": {
          "ref": "b86e8ffb-ea4f-418d-b606-00c3d61c6f23",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4601ad5d-52b5-4b24-89a3-e4476b59a2c9"
        },
        "item": {
          "id": "351384b9-09ba-40a0-9b48-84663b70a115",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "159d376f-017f-4aaf-9ffd-a625eaaebd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8beb3a33-f070-4daa-a1c0-cc8ae39982dd",
        "cursor": {
          "ref": "160d0b5f-dcdf-459d-bff5-03c44e27b530",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a385d15e-fae6-420d-9086-0458fe97b0b5"
        },
        "item": {
          "id": "8beb3a33-f070-4daa-a1c0-cc8ae39982dd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "899af8f2-6b6b-4743-813a-57f6b5450e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32451586-8bd1-4f94-aa67-a3d967b0ece5",
        "cursor": {
          "ref": "3e50189b-b72f-4bc2-84a0-51b66e41bfdf",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1c492828-05fc-48c2-b85e-88ec8cb4134e"
        },
        "item": {
          "id": "32451586-8bd1-4f94-aa67-a3d967b0ece5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "167c0191-b6ea-4a6a-bb5c-f92ebf256ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e8ce01-6c04-441d-b48e-b050bef02478",
        "cursor": {
          "ref": "6507ab75-ae0c-4a99-a41b-7db9b3181ed3",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "e969009d-de27-466d-a09c-f6bc588c2f54"
        },
        "item": {
          "id": "75e8ce01-6c04-441d-b48e-b050bef02478",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e991dec0-c267-445b-9723-307db59a7162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac9a337-359d-4fcf-aaa4-56fc58059077",
        "cursor": {
          "ref": "ce3efaee-3cc3-4d6c-a224-04bc2301f140",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dce0eae7-7ed2-4c5c-937c-b071018c6a63"
        },
        "item": {
          "id": "dac9a337-359d-4fcf-aaa4-56fc58059077",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "69b50461-eb16-4e16-8c04-84248a5b3ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66ccca2-48e7-46d9-8739-185ad8508254",
        "cursor": {
          "ref": "2be3a7c4-f55e-4987-ad1c-86468e5249dd",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9295ee90-5073-4cc7-805e-34447f20aeb9"
        },
        "item": {
          "id": "e66ccca2-48e7-46d9-8739-185ad8508254",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "72a57c5c-400e-47b9-bec9-61b3561d178b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fb02cb-cd72-46ff-a8a8-fa7be11cce99",
        "cursor": {
          "ref": "a587cda7-46e9-4f45-a113-819828089058",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "500e3142-4399-4b00-bf0a-8ae47c9646d2"
        },
        "item": {
          "id": "f4fb02cb-cd72-46ff-a8a8-fa7be11cce99",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7c20cada-3393-414b-a25c-73175f67dcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbf5461-f483-4d2c-ba3f-9cac6d2ff173",
        "cursor": {
          "ref": "3c0d87bd-0677-49b0-a111-b44889cb4803",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4ba5986e-d63a-460f-82d4-e24548215387"
        },
        "item": {
          "id": "ddbf5461-f483-4d2c-ba3f-9cac6d2ff173",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6d6216a4-2e9c-45d3-bcab-0ea059a0aded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb24a8ac-0232-4a25-ad9d-da97f46ddf4d",
        "cursor": {
          "ref": "5818746f-f711-45c2-8beb-3d3426e03721",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d55d72c7-8294-46c1-ae9b-ecaa0f50f40e"
        },
        "item": {
          "id": "eb24a8ac-0232-4a25-ad9d-da97f46ddf4d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "33dc08dd-ab9d-47a0-9681-a51145641cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27b6211-4ff3-4b10-8630-c25a296d87be",
        "cursor": {
          "ref": "6a883913-138a-4453-a5ce-886793266a2f",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "69e09cea-d568-4b52-aa23-b45d1b49ea57"
        },
        "item": {
          "id": "a27b6211-4ff3-4b10-8630-c25a296d87be",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "86a430db-8208-43e8-9098-b59356159d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9205a50c-56c3-4103-940a-c26fb1dcd56b",
        "cursor": {
          "ref": "50088888-2072-42f7-a8b2-94511024da19",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5eb08f99-b355-4e09-a991-42fbdd910297"
        },
        "item": {
          "id": "9205a50c-56c3-4103-940a-c26fb1dcd56b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b87ddb85-66e6-4856-a49e-ef7312442cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59baf37d-c5ec-40ff-8fdb-bbbc3bdf79d2",
        "cursor": {
          "ref": "bd2645dc-bf5e-4fbc-ba6a-6955826387ae",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "136e1d0b-2500-488f-b654-dabf0632aa87"
        },
        "item": {
          "id": "59baf37d-c5ec-40ff-8fdb-bbbc3bdf79d2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "80739886-91e5-4369-b92a-1b3e089bb859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb4c2cd-027a-4bfa-b93c-d803959786b3",
        "cursor": {
          "ref": "b39c0c21-6b86-4993-9839-e220d78fa337",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cdfa5fc7-e51b-4da7-bbc2-bea60da7985f"
        },
        "item": {
          "id": "2cb4c2cd-027a-4bfa-b93c-d803959786b3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a088a10b-cdbd-4425-91bd-d88b584a6db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd94c3aa-05a8-4882-8e7b-092ecc330a1a",
        "cursor": {
          "ref": "cdb8c310-7e93-47f9-b6e9-4ae2b00de534",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "5699b2c7-dbd3-4aa7-8c0e-8479e82a7e9a"
        },
        "item": {
          "id": "cd94c3aa-05a8-4882-8e7b-092ecc330a1a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f0e4d44c-ae52-4273-aa97-c3b986844968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfadfcf5-adbb-41ae-8ab3-c7d3c56885bd",
        "cursor": {
          "ref": "065d9870-c0c5-47a7-97f1-4b1cd966ff10",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d121770c-9b36-45ae-97c8-ef55bc36bbfc"
        },
        "item": {
          "id": "dfadfcf5-adbb-41ae-8ab3-c7d3c56885bd",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8c1b7404-ddef-4735-9ba0-7c29281859ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24121cbf-daf8-4bb5-89ca-6cf93433a730",
        "cursor": {
          "ref": "995cdc0e-536b-441d-97de-23fa1a158c92",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a835b94c-56e5-4d1a-a2fb-d26dab863003"
        },
        "item": {
          "id": "24121cbf-daf8-4bb5-89ca-6cf93433a730",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "dade91c5-28de-4aa9-88e4-08b77ffdfdb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e1386f8-c81a-4b58-9bf0-46d9a22e1132",
        "cursor": {
          "ref": "dbe67ec2-7196-4a70-8076-54806d383cd8",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "114f77f0-ac0b-4456-966c-db0aa0bef944"
        },
        "item": {
          "id": "6e1386f8-c81a-4b58-9bf0-46d9a22e1132",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "588a20d1-b097-41a5-a7f9-afd70b227e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52061f3-bee9-4ad4-bd3d-07f34da7e65a",
        "cursor": {
          "ref": "2c07268d-0423-4013-a2e5-4f61a113512a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f99ae99b-3877-4f42-b2f9-485710212192"
        },
        "item": {
          "id": "c52061f3-bee9-4ad4-bd3d-07f34da7e65a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8f406e12-871d-440b-9239-3c3e07c9565b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b2b5ea-f661-4031-b25d-3c04c89463f0",
        "cursor": {
          "ref": "467b9164-92cc-456c-a163-6e8b7dabf118",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b6cb3d43-5123-4a64-8ff4-bbadd1d45e24"
        },
        "item": {
          "id": "86b2b5ea-f661-4031-b25d-3c04c89463f0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "cc182c33-f27c-4521-b268-b28348782d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a62bf9d-95ed-4c15-b1ec-33a609faef46",
        "cursor": {
          "ref": "59790d9f-b08f-49cc-b4f8-e5ad14e4b0b4",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "b9dea989-a33d-4cde-8d63-b7388f9d613f"
        },
        "item": {
          "id": "6a62bf9d-95ed-4c15-b1ec-33a609faef46",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "01f705b7-ff8f-49d1-b999-6be0de90306e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5cde51-9018-4dc4-a8b9-2d4119551805",
        "cursor": {
          "ref": "e01fd4f1-820e-4c8c-bbeb-0abdb8eeb541",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "89ecc266-75d5-4834-ae53-40e5abaf139f"
        },
        "item": {
          "id": "4f5cde51-9018-4dc4-a8b9-2d4119551805",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "19165460-74a7-437f-a05f-3f121221a595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0364b47c-0e2e-41d1-aed8-9c48dd10ec64",
        "cursor": {
          "ref": "49b583b6-0133-458e-a37b-f00432a5e8e7",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7b45554d-c4ae-438b-94c8-bc021ceff510"
        },
        "item": {
          "id": "0364b47c-0e2e-41d1-aed8-9c48dd10ec64",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a4dcc1a7-586f-4476-aa57-8c5488eae457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d0163aa-56d2-4360-af9d-e89e6112bb08",
        "cursor": {
          "ref": "efbef76e-2be0-448c-9f6b-c00681931762",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cdef5adf-5a91-47be-a64b-703729b93cce"
        },
        "item": {
          "id": "2d0163aa-56d2-4360-af9d-e89e6112bb08",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2781010b-079e-4fc0-a3c7-b5ffd38dbd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad402aec-0983-4993-9de2-f5106f05f18f",
        "cursor": {
          "ref": "0d1d6412-c41f-48af-842b-845a8ca6fc45",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "28fb7308-2561-4481-a26b-eb8146e8297f"
        },
        "item": {
          "id": "ad402aec-0983-4993-9de2-f5106f05f18f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0257d36a-c5b3-49f9-af73-e1e242adb6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3d2ff1-edce-450e-b08c-5dc025557171",
        "cursor": {
          "ref": "bcf89516-eff0-4250-bcd7-60e6d7980747",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3ee408b3-f9b3-403c-8586-9d696126634d"
        },
        "item": {
          "id": "bc3d2ff1-edce-450e-b08c-5dc025557171",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cf7c4f3d-bd9e-472c-b6ee-87cf9cce3fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94856256-ee0e-45b5-a9f5-ab3ab67e6f97",
        "cursor": {
          "ref": "09c5aab1-a5fa-42e1-910d-f98c0c0780b7",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "93575b49-4c54-4c8d-bd04-6492660fa4d6"
        },
        "item": {
          "id": "94856256-ee0e-45b5-a9f5-ab3ab67e6f97",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "72fee309-18fd-4950-b605-7644f31a0abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1600ccf8-d368-44d0-988d-045a59ed355f",
        "cursor": {
          "ref": "563fa94b-2da3-4a5d-bedf-d4696e224821",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2c582175-168f-49b3-80fb-c20c4808b434"
        },
        "item": {
          "id": "1600ccf8-d368-44d0-988d-045a59ed355f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2554e6d5-2001-4d26-a1ff-94f3b8b60cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb63f40c-9f0c-4cc3-bb6e-4b4fdc635f45",
        "cursor": {
          "ref": "feb33d34-10da-4347-85fc-bbebf8b5da0a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d8db92b7-472d-42c7-b696-a031041c0480"
        },
        "item": {
          "id": "fb63f40c-9f0c-4cc3-bb6e-4b4fdc635f45",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e582892d-3ebb-478d-be9f-0522ee4064e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b0b5fca-6cf9-4ca6-a484-d4beff0678b1",
        "cursor": {
          "ref": "af5c9f8d-b9fc-4eb7-9dc9-5fa4f21ab0b9",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "959c4f9f-7373-4317-9672-bc5624b66f28"
        },
        "item": {
          "id": "5b0b5fca-6cf9-4ca6-a484-d4beff0678b1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4bcbc243-c2b9-45eb-ba9b-9d7f6c56072e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0641642e-bdff-45e9-8da7-e33c8d61bfd4",
        "cursor": {
          "ref": "0f99c622-6b71-4c80-9988-c60865244310",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ca1ffeff-7b92-449d-8a9b-e24bd3b91b03"
        },
        "item": {
          "id": "0641642e-bdff-45e9-8da7-e33c8d61bfd4",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "034f9c17-f878-4c20-ad3f-00dd6e294538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc22ec0-5521-4235-bab0-e0174317a9e0",
        "cursor": {
          "ref": "64f7f9c1-a26c-48c2-b323-ac22bb555f6d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fa4e3c22-93d5-481d-adc3-a27bcba07038"
        },
        "item": {
          "id": "cfc22ec0-5521-4235-bab0-e0174317a9e0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8afd7733-0353-4a14-a37f-aea6662ddd0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b647078-b4c3-44cc-9f9a-7cc01d3ef765",
        "cursor": {
          "ref": "ee2d9bfa-66b9-43bf-9090-e37c918e7f0c",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b5754036-014f-4be8-bbaa-eae392d4d160"
        },
        "item": {
          "id": "4b647078-b4c3-44cc-9f9a-7cc01d3ef765",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d3f8f0ea-7b31-45ec-a08d-d5670d5e0f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2082c2d2-9eb7-4c45-9291-15dc410a5f28",
        "cursor": {
          "ref": "17d54d1b-9972-4cba-a6b2-9c60167630c8",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "43c21418-d676-4b95-99d7-353d96c91db7"
        },
        "item": {
          "id": "2082c2d2-9eb7-4c45-9291-15dc410a5f28",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d1011479-d65c-473a-af79-45d12175a081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab8d21a-eb6a-4aed-946b-8c77065f542e",
        "cursor": {
          "ref": "72ca7d7e-b2e7-4278-ba3e-055b105cbb7c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "84085556-ad56-49e7-a12f-d807c760b6a6"
        },
        "item": {
          "id": "6ab8d21a-eb6a-4aed-946b-8c77065f542e",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d90a1246-8709-4210-aadb-2d43dd0e38a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acae559a-2a2b-4853-96ad-fba7712aeb97",
        "cursor": {
          "ref": "457cd169-4877-4469-91ed-7d2a5b1948d1",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "63f11091-b8f4-495e-bfdf-63076d31fb12"
        },
        "item": {
          "id": "acae559a-2a2b-4853-96ad-fba7712aeb97",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c3a5db41-a570-49e5-a039-b986966dd22c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08b6a56d-789f-4006-abe9-1f6c8d4312d6",
        "cursor": {
          "ref": "0afcc88f-6c44-4bdd-8e39-22c92c451df5",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4158f3fe-bda5-41e3-ae86-06a1b897f6e6"
        },
        "item": {
          "id": "08b6a56d-789f-4006-abe9-1f6c8d4312d6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "97effd21-df26-4a50-b274-e47e361ff419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55befadb-baa7-4252-82c7-dd1029d575fd",
        "cursor": {
          "ref": "ae025fd4-d576-48b7-817d-661be5cfe015",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "219f8864-d071-4a60-875d-809a831ec1cc"
        },
        "item": {
          "id": "55befadb-baa7-4252-82c7-dd1029d575fd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "299773a7-5865-46b3-be24-c04fd36dc69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81890cf2-eabc-4b82-ac31-665ac4e952a0",
        "cursor": {
          "ref": "463b72d7-9c87-4ff1-a914-e88945eb7541",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "585ed51a-aaa6-4275-bd15-e1370ad1e8a2"
        },
        "item": {
          "id": "81890cf2-eabc-4b82-ac31-665ac4e952a0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "5ba9c6f6-c509-4b49-8553-360e7e569ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d176283a-791f-4293-b451-2e0e46180720",
        "cursor": {
          "ref": "5b4df0e1-98b3-4ce3-b682-8802771c2efb",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "67f01431-cabb-46f5-ba3e-4590886719f9"
        },
        "item": {
          "id": "d176283a-791f-4293-b451-2e0e46180720",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "eec66a03-c9d5-4f02-9c65-b48a68a9e724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb1de41-99a8-43a1-af63-c9d415bb6fd8",
        "cursor": {
          "ref": "f54b1a27-a140-4b27-97c7-a4d07f978012",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "53bd9e53-9058-42b6-aba0-6dd3a18afddb"
        },
        "item": {
          "id": "7cb1de41-99a8-43a1-af63-c9d415bb6fd8",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "34501ef0-abd0-495e-b358-310d482c8b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "901a6845-5d8e-4830-a341-d11780a51cf0",
        "cursor": {
          "ref": "09febd77-ec86-4b7b-9db4-c331a13027bc",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "296d63cf-a924-48aa-8d88-4a67681d86bd"
        },
        "item": {
          "id": "901a6845-5d8e-4830-a341-d11780a51cf0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9f6c15e2-745f-49e1-9a0d-d605d3a14a14",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "5ef63adb-653e-48c1-817c-3f85a67cf4be",
        "cursor": {
          "ref": "ba74a1df-08cf-45e4-bfe1-53b6f459eab2",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "89aa3b50-d2ba-49a7-a22d-6aa53fd493ea"
        },
        "item": {
          "id": "5ef63adb-653e-48c1-817c-3f85a67cf4be",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "ab120f3f-52ac-41b2-bd1f-6d73d8867fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d26f0b-6ec7-4c5f-b344-9b09419b60e6",
        "cursor": {
          "ref": "32c3e120-c21d-4ed7-bc1e-258db7577f8d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "61eb5ac0-2336-43d5-a3da-0b812622be0a"
        },
        "item": {
          "id": "39d26f0b-6ec7-4c5f-b344-9b09419b60e6",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a767afc3-3c51-49a1-8c85-9f528267c0da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1e0706-9fcc-4438-9b70-2ed34e544c22",
        "cursor": {
          "ref": "37b47f9e-6348-4259-8f1f-c091f812f25b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d6c4f4ad-e597-44fe-9d28-4832ea4752fa"
        },
        "item": {
          "id": "3d1e0706-9fcc-4438-9b70-2ed34e544c22",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5e7005a0-b2ba-48a5-a2e4-17a7e0161482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4915ba69-7571-45ed-b48d-4099ac9b8a5f",
        "cursor": {
          "ref": "4edf1458-274f-441b-ac1d-a828317cb40d",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c62003c6-1308-4972-b84d-e574542b2a54"
        },
        "item": {
          "id": "4915ba69-7571-45ed-b48d-4099ac9b8a5f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "a176c71c-e842-4aa9-a05d-62b833e06d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce4f9f6-f6ee-41ae-a4a1-3360279f10fb",
        "cursor": {
          "ref": "bb854770-ea06-468f-8201-e5d72d2f0a0e",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8b7b2edc-d4b4-4c58-a219-06a686a0e6cf"
        },
        "item": {
          "id": "9ce4f9f6-f6ee-41ae-a4a1-3360279f10fb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a21d473e-24e2-46cd-b173-ce4b948f22a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f67867-0f63-40ce-871d-49798cfcf8ce",
        "cursor": {
          "ref": "f5a74ac7-ed60-491d-b279-4f6600f737c7",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b17a1af9-d480-4da5-a189-11f53ca288c9"
        },
        "item": {
          "id": "a2f67867-0f63-40ce-871d-49798cfcf8ce",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cb33337f-599d-40cf-bf60-94a411b0837a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bf15dc-bd0b-4b97-ac6d-3773f336c25f",
        "cursor": {
          "ref": "51f3d23a-c73d-47e4-b5d5-4825c208c2d5",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ecfda42f-d417-4fe7-bdd5-667b9f5b5af4"
        },
        "item": {
          "id": "a9bf15dc-bd0b-4b97-ac6d-3773f336c25f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "bcded556-baa3-45b9-a46a-f03d23ade71e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ef3c38-f445-43ad-b4bf-d5e638d2c8c4",
        "cursor": {
          "ref": "0bedcbab-7fd3-4ffc-ba55-2867e0858d39",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1f118923-a922-43ba-8e95-0f058ad11937"
        },
        "item": {
          "id": "b8ef3c38-f445-43ad-b4bf-d5e638d2c8c4",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c18ddb73-e433-43e2-9e89-26b5ed96bf42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6103f386-495c-4c48-85ad-937d4616b5b6",
        "cursor": {
          "ref": "1fedb3ca-cd8a-4fb6-84b7-559deab9a878",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b63fefdd-af3e-48f3-ac0a-c8c4caecc90d"
        },
        "item": {
          "id": "6103f386-495c-4c48-85ad-937d4616b5b6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "841a4f19-d721-4686-964c-7c0b964ddb0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5dc142-aec0-41f3-bf7a-51ca3a49d72f",
        "cursor": {
          "ref": "79c4a465-3f65-49af-b670-8ff6106912c4",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "023ad579-54de-4228-8e94-7d2b8e8c7534"
        },
        "item": {
          "id": "8f5dc142-aec0-41f3-bf7a-51ca3a49d72f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "10a38a04-057c-4a76-999a-ec53a469942e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59ecff1-7540-4c2b-b326-65538c6d3369",
        "cursor": {
          "ref": "4c6f6dfe-ab1c-4c08-8e82-124875f44037",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4eb1de9b-f681-4307-8869-a06468955863"
        },
        "item": {
          "id": "a59ecff1-7540-4c2b-b326-65538c6d3369",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "27ba7836-b64b-4b22-8e59-1869c5706738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d5a501-f505-4eac-bc6e-a1ebadfc35d4",
        "cursor": {
          "ref": "79e2b7e3-1bfe-4edc-b989-d2790531be81",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b67c29be-c82d-4efb-be31-3b64f4760308"
        },
        "item": {
          "id": "30d5a501-f505-4eac-bc6e-a1ebadfc35d4",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "acf455c4-26d7-485a-a8ff-a6e06abeceab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bbf3801-44e5-491d-87ec-4e051203f41a",
        "cursor": {
          "ref": "379120e9-d219-4d92-93ae-c779109fd591",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0f3ce131-190c-4da3-a9ec-6afc24f53da5"
        },
        "item": {
          "id": "7bbf3801-44e5-491d-87ec-4e051203f41a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0866cba3-8c24-480d-a7ec-9d3d114594c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc856ba-4e08-48d5-ae09-fe127ff9ab16",
        "cursor": {
          "ref": "24961888-c8c7-46fc-b81d-8b3fed70cba1",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "84b15a10-9c9f-4340-9036-17413c2c2402"
        },
        "item": {
          "id": "4dc856ba-4e08-48d5-ae09-fe127ff9ab16",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "8effe295-7100-4c2c-926c-0e2f5deec1c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274e8d87-ffcb-4a38-8f7d-7cb0e7b4da1e",
        "cursor": {
          "ref": "c6d7f541-ffc5-4160-bd40-e289dfe62c4a",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a614c364-9b6e-483d-a547-02f8969929f8"
        },
        "item": {
          "id": "274e8d87-ffcb-4a38-8f7d-7cb0e7b4da1e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0be670d3-ace8-40d0-8e88-c33d1c1224ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21538ae5-96eb-4a6d-abc0-005010252ec3",
        "cursor": {
          "ref": "463dfd15-7cd4-4356-9e06-b3aecae59400",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0ba7f5c0-5390-4d2a-b2c4-66f4a4c00312"
        },
        "item": {
          "id": "21538ae5-96eb-4a6d-abc0-005010252ec3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "67fd5168-8096-4afe-80c9-897ec6c8dc0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee8c9ae-2de4-479d-b68d-c0f9c61f7dbf",
        "cursor": {
          "ref": "2ca38ef4-dd4b-4244-a956-4de2e7bcbaa2",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b7d76e1c-25a5-408d-8014-5de12f182c33"
        },
        "item": {
          "id": "5ee8c9ae-2de4-479d-b68d-c0f9c61f7dbf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "60bffbff-be7a-462e-8027-4937b8afb818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49e4bcc1-946b-4861-a569-65af8ae6addb",
        "cursor": {
          "ref": "27af495f-079c-4689-8a02-1c3c0e1c9da8",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7642cc67-889f-40e3-aeff-0bd4673f18bf"
        },
        "item": {
          "id": "49e4bcc1-946b-4861-a569-65af8ae6addb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d6946e64-203a-48ef-a51d-7afcda9d1959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bcc6f7-2257-4d10-9a78-0504977bd41b",
        "cursor": {
          "ref": "3085b4b1-8e7f-48f8-ad5a-4c52d4044a91",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7b017d1f-04cd-4aa8-a03b-164ea6648fa7"
        },
        "item": {
          "id": "b7bcc6f7-2257-4d10-9a78-0504977bd41b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dd1b692a-0673-4b78-9207-6691ee268f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16983305-0aec-4921-86d1-c30aaf6b38f9",
        "cursor": {
          "ref": "dfbcfcdf-b689-486e-b61a-20b8ffaea400",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4e42d9ce-c0ab-4458-bd14-50341a514f23"
        },
        "item": {
          "id": "16983305-0aec-4921-86d1-c30aaf6b38f9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "e6c58969-0f0d-479c-957d-b03a7b89471f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fddb864-9d4b-4ac2-b597-28a0362dc537",
        "cursor": {
          "ref": "ea075bec-a0cf-4da4-806a-7d9c512b7f86",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "afa22082-3820-424f-8e56-3a0b1af9d0b6"
        },
        "item": {
          "id": "6fddb864-9d4b-4ac2-b597-28a0362dc537",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "93a16225-89cb-4569-a810-2f4724518aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddf6b8e-063a-45a8-9c4a-f7176d8e2197",
        "cursor": {
          "ref": "c390cad0-566d-4ef7-9a9b-5dd839e68f8a",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a578a0c7-797e-4324-adf0-aad5355baf76"
        },
        "item": {
          "id": "5ddf6b8e-063a-45a8-9c4a-f7176d8e2197",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9407b737-fa3f-4d7c-82e9-2d244118f31b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91dd15d2-d088-4b4c-b73c-8ecdb93f74b6",
        "cursor": {
          "ref": "7fea2664-b11e-43e6-a25b-44a46df6bf5e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0bfa8abd-9dec-44c4-8f0f-8a1fae0a88a9"
        },
        "item": {
          "id": "91dd15d2-d088-4b4c-b73c-8ecdb93f74b6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "84d94e7a-c5bd-4bb5-b866-23dd1f31d76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f21fe88-e351-439d-b767-f1ca967b39bd",
        "cursor": {
          "ref": "3e1ae581-98a0-4c93-8ba8-2e55d3c38f34",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a8c0e839-9ac3-4a1b-a493-cd555342d6ec"
        },
        "item": {
          "id": "8f21fe88-e351-439d-b767-f1ca967b39bd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e7173311-6bdd-4778-ba44-60a166332e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29c3323d-246e-468c-aa37-32111c0d146f",
        "cursor": {
          "ref": "dddbe017-7a3a-40e6-8704-384345c19d7d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0a143ab8-8822-4a20-84ad-402572ada4cd"
        },
        "item": {
          "id": "29c3323d-246e-468c-aa37-32111c0d146f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "aede7605-77b2-46c4-925d-38f0e152d97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf272f0-7766-43df-a008-781f6372928e",
        "cursor": {
          "ref": "0e8505e4-0e84-4a17-bff4-20cc8c1c4fdd",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "f2469d90-20d0-465e-82d4-c31a660432bd"
        },
        "item": {
          "id": "3bf272f0-7766-43df-a008-781f6372928e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "47ad26e0-2aac-4a4f-94b2-b606f07da4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ac34ac6-702e-4090-9cea-2a113152e87b",
        "cursor": {
          "ref": "649a0beb-c72d-440e-9a2d-692cb36ecfcc",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b8387f29-54e0-415f-b225-1894d59cef7a"
        },
        "item": {
          "id": "7ac34ac6-702e-4090-9cea-2a113152e87b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "8bd5ad4a-3296-4428-92d1-379376e55303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0745501b-bf3b-45f7-85c6-562396499320",
        "cursor": {
          "ref": "db85d0ea-0182-4d8e-bb8a-0eb877442399",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d7f56bbe-14de-4648-b0cc-fcc8ce36a8df"
        },
        "item": {
          "id": "0745501b-bf3b-45f7-85c6-562396499320",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c82ae700-99a9-4939-99f8-77cba49b2c4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16423fa7-c35a-4b2f-9867-6fe246939888",
        "cursor": {
          "ref": "0be69b62-db7d-4415-9b43-fe20c99a0a9d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b7acf1e1-c3f9-4b78-b545-af6e35f61a89"
        },
        "item": {
          "id": "16423fa7-c35a-4b2f-9867-6fe246939888",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "07463eee-3033-4931-9640-304bf31c4dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28fdf1f7-b386-4cc5-b853-c27d21cb29e2",
        "cursor": {
          "ref": "0bb2c54d-bc0f-4101-9144-0db7d6c0bdd9",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5296bd9f-6594-4416-a161-d84304d027d7"
        },
        "item": {
          "id": "28fdf1f7-b386-4cc5-b853-c27d21cb29e2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "edbbc0be-c30d-4143-b889-ec4b31033eba",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "afca3fcd-68a6-490e-8d57-bf7957c60299",
        "cursor": {
          "ref": "3405c6ed-39c1-4a76-8011-5145d0cb6d70",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c43f0892-2778-4f72-a2a8-5509a0d6b370"
        },
        "item": {
          "id": "afca3fcd-68a6-490e-8d57-bf7957c60299",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3fe4d01e-4ed6-40e4-b3a1-8bbe7dd0e0bd",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "961a6aed-33a0-4f26-94ce-2ca707e46036",
        "cursor": {
          "ref": "28a78382-39a8-4727-aeb4-3af0da85d5a4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ea4efd7e-ac52-414f-9b2a-ae0ea787073e"
        },
        "item": {
          "id": "961a6aed-33a0-4f26-94ce-2ca707e46036",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6dc21eb8-d598-4442-ba6a-83afa7281c44",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "d4340a2c-6dde-46b9-a1fb-888173affdc2",
        "cursor": {
          "ref": "21b1883e-9eea-4ffd-a9d7-a7a622410890",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "62c6c0f5-ac83-4ae9-b5de-223c8d222929"
        },
        "item": {
          "id": "d4340a2c-6dde-46b9-a1fb-888173affdc2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8d31fd93-94ba-405e-9fe7-e9fc19ff2273",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bab95beb-8e2b-411e-814e-eff7a4c0042c",
        "cursor": {
          "ref": "8cff6237-98aa-44d9-8cc5-2fda32e950c5",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "aa0eda54-66f2-4abf-b6ec-e06170e1b3b8"
        },
        "item": {
          "id": "bab95beb-8e2b-411e-814e-eff7a4c0042c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ce0f40a5-789d-49d5-b279-06cc16c8a258",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4ac3b08c-a55b-493e-a4d3-7540bc42541e",
        "cursor": {
          "ref": "6adf7a4a-b5d6-4e1b-9efa-63067d689f98",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "32ad06cb-16dd-49c9-ae80-c7154fb5d438"
        },
        "item": {
          "id": "4ac3b08c-a55b-493e-a4d3-7540bc42541e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "69866d7c-d876-4ac3-9518-9a644825e120",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "e02f48f7-2fbb-452e-a8f3-32caa3fd32ca",
        "cursor": {
          "ref": "1799098e-8995-4b47-9403-2f61d079503e",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4e18eda8-69fc-4b48-b3a8-5ec3e2fb6751"
        },
        "item": {
          "id": "e02f48f7-2fbb-452e-a8f3-32caa3fd32ca",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f62302db-a746-4816-a0a2-6888a236afc5",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ac8cb660-2bfd-45c4-945c-c6964aa58036",
        "cursor": {
          "ref": "81f88966-b62d-41cb-8f9f-5f145f7acf19",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dc1293e5-c71c-4068-b0f3-39aea83417fa"
        },
        "item": {
          "id": "ac8cb660-2bfd-45c4-945c-c6964aa58036",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9575787b-7651-47bd-829b-cc0b6d5daeac",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "2877c00e-823b-4633-913e-b81d6434cca8",
        "cursor": {
          "ref": "fe7ed84a-bdf5-4894-a41f-9fb3c67c7cfd",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "25a40f07-7887-4071-8e9d-c8b2bb96f295"
        },
        "item": {
          "id": "2877c00e-823b-4633-913e-b81d6434cca8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b6bbc069-1bc0-4e87-a642-5ad5909a4938",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "0444bb1c-896b-4679-90e3-9caa26a58fa0",
        "cursor": {
          "ref": "bafbf1ac-09ae-4c12-a048-963e087bd1c8",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7b40a75e-825a-40fa-ae0f-d3529445ce1b"
        },
        "item": {
          "id": "0444bb1c-896b-4679-90e3-9caa26a58fa0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2986e0db-df83-493e-996c-dfc4a5993f59",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "428e8452-30c7-4e0d-9ccf-bc12e729d675",
        "cursor": {
          "ref": "78ad85c2-23a2-497d-b897-ff4df23ce19a",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "86c1a240-fb81-4829-82c4-36cc684e3345"
        },
        "item": {
          "id": "428e8452-30c7-4e0d-9ccf-bc12e729d675",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2ea01c40-8947-49c4-b6d1-96bba9074d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fcb073-5b39-449e-a57d-e501ce1f3a83",
        "cursor": {
          "ref": "2b599140-ed79-4827-a579-d3437bb78366",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bfe5c3a3-3711-4fca-b857-88579c9c0df1"
        },
        "item": {
          "id": "80fcb073-5b39-449e-a57d-e501ce1f3a83",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "6258e47a-0060-4773-8774-395bcc2f1a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af949542-4c61-471f-a639-2b7ae3ecf4fc",
        "cursor": {
          "ref": "b6d6c81f-33a3-42ed-950e-f04ff3e44dff",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "59deb996-8a82-4adb-89a0-0aafb96dd179"
        },
        "item": {
          "id": "af949542-4c61-471f-a639-2b7ae3ecf4fc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "154bc896-4ee2-4f4d-a871-c7666ebb148c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "668f95e1-52bd-4ca2-bcb1-02ea9d5763bf",
        "cursor": {
          "ref": "3c2e47b6-b963-461e-960c-b8b7577602ac",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cfdb9c7c-d756-4cd7-9dc7-b37b24240557"
        },
        "item": {
          "id": "668f95e1-52bd-4ca2-bcb1-02ea9d5763bf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e6d61c37-0551-411c-896f-84b973a0795c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60314926-b299-4264-80c0-968ce27f0661",
        "cursor": {
          "ref": "2a18ce17-910c-4e8d-a038-532989c08407",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fcbbc0c6-d014-4926-9c3e-593d42bf0d7b"
        },
        "item": {
          "id": "60314926-b299-4264-80c0-968ce27f0661",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d920ec82-6901-426c-bf62-b6ae0740c6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537ce725-678b-44be-868e-35ce3d9757f2",
        "cursor": {
          "ref": "c35561c1-9eed-4f82-8ac0-4a42839b1417",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a6f9a0a2-3ba3-407e-8bbd-a90f27630e60"
        },
        "item": {
          "id": "537ce725-678b-44be-868e-35ce3d9757f2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "55f7ec5a-fa14-4e15-a532-9a4e1dc5158c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b380d569-1b12-4ae7-aa76-59e2af879e38",
        "cursor": {
          "ref": "74e16efd-e931-4feb-9a51-7698080fcd40",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4f262a3e-fdfb-4495-be5e-92fcbbb1425a"
        },
        "item": {
          "id": "b380d569-1b12-4ae7-aa76-59e2af879e38",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "58e0c91d-c001-49df-bcc5-168dd491a1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d95c39b-ddcf-43cc-b528-f873fce91e13",
        "cursor": {
          "ref": "b9ee684e-a359-4ce7-82ec-448a80203d77",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "771aa942-0658-4943-8ba0-7a7ef678f0dc"
        },
        "item": {
          "id": "2d95c39b-ddcf-43cc-b528-f873fce91e13",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "3124638a-5ea2-4253-9b62-4af114026107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eaad885-dad4-4bfe-a550-41ce3229a923",
        "cursor": {
          "ref": "ff89a921-435b-46af-a818-66db6c7955c7",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2189c6ee-2fdf-4564-8a21-de30014867f9"
        },
        "item": {
          "id": "2eaad885-dad4-4bfe-a550-41ce3229a923",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "e628dcd9-c1ce-42ac-83c8-32aa45cc7bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276617bc-40a4-4927-9bb8-1ece40ae727e",
        "cursor": {
          "ref": "7f1fdaa7-8681-47b9-9114-0dffa2ef1c5b",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3d354773-c8cb-4d43-a2b1-f180a04f08d3"
        },
        "item": {
          "id": "276617bc-40a4-4927-9bb8-1ece40ae727e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "c3840b33-c431-4052-9df7-f6616c7089f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "855579ea-3ad8-4a37-887b-f14e3541548d",
        "cursor": {
          "ref": "16154369-229e-4736-89b1-e8602cc062a0",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "2e1a21bb-87fe-4fc6-8d5e-6bb9d3177673"
        },
        "item": {
          "id": "855579ea-3ad8-4a37-887b-f14e3541548d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e602465a-d7ef-4d45-8733-5b2e053d8115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cc8729-94b6-48ed-848d-325f315d256c",
        "cursor": {
          "ref": "25f846da-1c6b-45d6-b93d-fddc57ffcc3c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "df0d68f4-3107-4472-8b94-538b28c2b88f"
        },
        "item": {
          "id": "56cc8729-94b6-48ed-848d-325f315d256c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "4896fe48-f8a1-44fb-bc14-ad699452c790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c94130a-2abd-4062-82fb-2e1260036e24",
        "cursor": {
          "ref": "2b3b8d37-60ef-4667-a6c7-5cda7bb92b4e",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ed4603f8-9bc9-4834-9f99-aa00a111ba46"
        },
        "item": {
          "id": "8c94130a-2abd-4062-82fb-2e1260036e24",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8908a88f-9f11-4a6b-a659-786cbf3ba7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88252f19-a4fe-4db0-ad37-03094d24e963",
        "cursor": {
          "ref": "50241ce0-8a4e-4a06-b320-94845e245e8a",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f21d9d95-9e76-4f26-a6fa-27ccd31a74eb"
        },
        "item": {
          "id": "88252f19-a4fe-4db0-ad37-03094d24e963",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "58595824-5a98-4c03-a0ae-34c8a00a2cfd",
          "status": "OK",
          "code": 200,
          "responseTime": 169,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "eebc6501-66a9-4e3b-a4f7-0c32128e9ab7",
        "cursor": {
          "ref": "03ade86a-e549-408e-95fd-67b4cc211c0e",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "cf59c33e-88a4-4879-994f-0a85d8e6f220"
        },
        "item": {
          "id": "eebc6501-66a9-4e3b-a4f7-0c32128e9ab7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "dce432b0-0c88-4233-8367-26688908f86c",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "8b4b52ec-5630-4a47-af94-bbe5043cc86a",
        "cursor": {
          "ref": "f5ff1ea8-ed3e-48c7-95c0-9f8e3480c5e0",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1495c10a-0de8-405f-bb6f-8fab8877faf2"
        },
        "item": {
          "id": "8b4b52ec-5630-4a47-af94-bbe5043cc86a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "43693f81-5ab2-4777-a65e-4948f991a973",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "18619e8e-3200-4f86-bb99-ab7fc80ddc2b",
        "cursor": {
          "ref": "1c0a1a39-7d55-4eb8-8803-b6c7796bc1cb",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b4d69a50-a55b-46a8-badb-0409b0aff054"
        },
        "item": {
          "id": "18619e8e-3200-4f86-bb99-ab7fc80ddc2b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "311835ab-18aa-4e15-825a-0d9336217d10",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9c1927b5-190d-4d0b-a6cd-7b3268cd3cfc",
        "cursor": {
          "ref": "b64cb209-4002-4baf-9a64-587fc8db04c4",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a5315e03-4700-4611-ac3b-a53c93926904"
        },
        "item": {
          "id": "9c1927b5-190d-4d0b-a6cd-7b3268cd3cfc",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a1a21b8b-2947-4db5-9f94-1e82c9e84489",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "34a713c3-de31-419a-ad1c-0cb900dc7dce",
        "cursor": {
          "ref": "19f527a8-42af-48ab-b3fb-5e7903e5b3d3",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1deef755-d4c8-45c2-85a0-4b7cf27726ea"
        },
        "item": {
          "id": "34a713c3-de31-419a-ad1c-0cb900dc7dce",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ec34a737-2a7f-498b-85a7-3581cd63e76f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45dfc40-e25d-4f31-91b1-387e77c034c6",
        "cursor": {
          "ref": "8ee6a4d7-e5cd-438d-b1ab-a90066fbb810",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "6a5845ad-f52a-4c6a-81f6-38fbdafbf2f8"
        },
        "item": {
          "id": "f45dfc40-e25d-4f31-91b1-387e77c034c6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bce53bf1-8bdd-408b-b3c1-33af93a1a8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca001ef-70ae-4353-addd-1a5143a9b2cb",
        "cursor": {
          "ref": "833afb6d-3b00-481a-bcee-1b005afd07de",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1993ce88-3679-4af8-bbc7-8a778c51fb53"
        },
        "item": {
          "id": "fca001ef-70ae-4353-addd-1a5143a9b2cb",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "99b37a4e-3315-4b2b-ae45-b0ee85e2656d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9eebb0f-358b-4779-8110-c970d3dd3851",
        "cursor": {
          "ref": "6344701a-fb96-40f3-9157-cbc5a29bf765",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "0e3f1c69-5880-4c21-b4d4-9e2ea5089eab"
        },
        "item": {
          "id": "b9eebb0f-358b-4779-8110-c970d3dd3851",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "053d2566-6a61-4f1f-8ad3-eb45334e801f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de3ec98-b7ef-4c55-a445-64f9e41d9989",
        "cursor": {
          "ref": "3be41c0d-1cb0-412f-a611-37597a32e16c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "3ff088f6-0529-4690-9ece-31c3b74695a0"
        },
        "item": {
          "id": "1de3ec98-b7ef-4c55-a445-64f9e41d9989",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6cd5e483-b790-408b-9884-1f1d90521706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e76800-5bc5-4759-a122-2562c33f6b7b",
        "cursor": {
          "ref": "b3badbdd-10dd-4900-96b3-d853d791ece5",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "742546f1-da91-49e3-b59b-a0d5665f28e0"
        },
        "item": {
          "id": "b9e76800-5bc5-4759-a122-2562c33f6b7b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "07093f0b-d06a-4461-b4c6-a456b2e94885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a6b4be-81a7-4a4b-9033-4e84bd2c524a",
        "cursor": {
          "ref": "a48039d4-1b58-40b4-9604-cf64c65b0e7c",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c81c1fca-6e6b-43f4-9ec2-400236252d83"
        },
        "item": {
          "id": "b2a6b4be-81a7-4a4b-9033-4e84bd2c524a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "24fd7f92-bc24-4b3f-9a7f-28ea68f10807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9a85441-398c-4da0-9a74-bbe0f297b458",
        "cursor": {
          "ref": "99cc80c8-aa13-40ce-a856-1e25bbfee0d8",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2ff8357e-5d0b-431c-857c-9d04d516152a"
        },
        "item": {
          "id": "d9a85441-398c-4da0-9a74-bbe0f297b458",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "eb4e4c71-8e15-4c2a-a46f-b03c7f9001d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ab049a-aa3a-4e2c-84e3-4a89a20b872d",
        "cursor": {
          "ref": "5f3fba84-5f1d-4a9d-9618-5c56adb5e7d5",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "cc4588ea-038a-4f07-aa37-0890de9346af"
        },
        "item": {
          "id": "07ab049a-aa3a-4e2c-84e3-4a89a20b872d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "effce041-ef38-4165-8d19-45cec04c7f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f0b8d95-7801-4fb1-9aec-3767a8592111",
        "cursor": {
          "ref": "7521166a-6e65-465b-b823-9a36be3a776f",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b2f63f71-a340-4972-87be-95c7c793b36b"
        },
        "item": {
          "id": "4f0b8d95-7801-4fb1-9aec-3767a8592111",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8abae520-adec-45c8-bcf9-202c062e19f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c83c649-0c21-4f3c-ba5e-5a5c27d00b88",
        "cursor": {
          "ref": "a96e3f4c-d883-42bc-a6ee-a33da97462dc",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "ec8c4952-a5cd-4e3c-bded-a6f18d1ddedc"
        },
        "item": {
          "id": "9c83c649-0c21-4f3c-ba5e-5a5c27d00b88",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "1798a2af-e1c2-484a-a2be-86e175b5569f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3fa7fd-e400-4454-859c-3b368fb0f2c0",
        "cursor": {
          "ref": "690b8b9f-9bc8-44dd-ba3a-89e2a5a15a50",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9c047a93-179f-47d6-93ec-b2114fd3fc4d"
        },
        "item": {
          "id": "4a3fa7fd-e400-4454-859c-3b368fb0f2c0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "79df131e-a8da-40c7-b84c-46ea5fa8732f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0331844-727b-44a1-a860-7671eb380ed5",
        "cursor": {
          "ref": "5f8100e2-a0f7-4a88-8817-fe81fe7ae6ed",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "602e43d0-13d2-4b9d-a0c9-8bd41bf7edbe"
        },
        "item": {
          "id": "d0331844-727b-44a1-a860-7671eb380ed5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b65f8751-1576-480d-9c8d-c690bba71aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf89752a-009f-4efb-bd3a-27a8d1c7484e",
        "cursor": {
          "ref": "8ff59069-e484-49a4-99c9-a60e27a536ee",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ad50c3ca-48fa-4f0d-8a67-c45afffee1f0"
        },
        "item": {
          "id": "bf89752a-009f-4efb-bd3a-27a8d1c7484e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f1aba092-ec8e-437b-92da-f458cdf690d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac92ed90-a1ce-4868-b9e6-0456c16e606e",
        "cursor": {
          "ref": "10c08222-7b2d-43a1-86e5-8159dcd04856",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "12a7f8d0-0fbe-4028-a5aa-ef85290f9ef5"
        },
        "item": {
          "id": "ac92ed90-a1ce-4868-b9e6-0456c16e606e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "d66e7d7d-66ce-4718-88e9-b7a217268621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c59f93-099a-48ac-a6c1-213a0390af0b",
        "cursor": {
          "ref": "b1e9a2df-b23e-4930-9788-88a7903ffa17",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b544ef5f-1f99-42eb-a2b8-879100708cff"
        },
        "item": {
          "id": "19c59f93-099a-48ac-a6c1-213a0390af0b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c203f24a-dfd2-4678-99e8-9f8962e1468e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c490be-2fd3-46e8-a2fb-1bae5ef34e57",
        "cursor": {
          "ref": "f6c7c32e-bb01-4a77-93ff-d536de1d8adf",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6f95c6f0-c95a-405b-9fe6-b3a449ac72a6"
        },
        "item": {
          "id": "f1c490be-2fd3-46e8-a2fb-1bae5ef34e57",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c49f37a4-4402-41d6-b75b-9224a1e08672",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107f0e42-74ad-42c7-af6e-0b14d05c935c",
        "cursor": {
          "ref": "0aed9f1a-6ee3-425b-9d08-d3945b3cdc54",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "4550c68b-8345-4e9d-8089-8b5a28f68e0b"
        },
        "item": {
          "id": "107f0e42-74ad-42c7-af6e-0b14d05c935c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c2a24fc4-f2fc-4e15-a7d9-148985ffa16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1146f70c-d4fe-4096-b7d3-179439d0b166",
        "cursor": {
          "ref": "439db545-ee41-4db1-b350-45f6e5002908",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "460cd1a6-37a7-42a4-beb4-d73912f26085"
        },
        "item": {
          "id": "1146f70c-d4fe-4096-b7d3-179439d0b166",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "4ce48dcd-c7b4-46da-a50d-8c1942d43063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bf3f51-e1d3-4feb-ac40-e39701cc126e",
        "cursor": {
          "ref": "2832d16b-262b-4ade-9ecc-0ad7f31ec190",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "fe189617-e304-4a90-9c43-8daa7a95cabf"
        },
        "item": {
          "id": "64bf3f51-e1d3-4feb-ac40-e39701cc126e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f5b16622-63f9-41de-8192-a8a5b1518a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981d8ca7-ab0b-4de9-b0a2-42d48c7e5d5c",
        "cursor": {
          "ref": "4323f90c-d669-42bb-b890-55c7358bef8f",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "eb6e8b3a-ab36-4250-ae47-5bef1917ec69"
        },
        "item": {
          "id": "981d8ca7-ab0b-4de9-b0a2-42d48c7e5d5c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8280129f-de68-454e-9e35-6fc9995adb8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0532df62-d1a4-4316-8ac8-650686b2a81e",
        "cursor": {
          "ref": "e6ca49d1-3201-42a6-8654-b308f28ae5b5",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "438525db-95e6-4410-a0fa-018a0962c4b2"
        },
        "item": {
          "id": "0532df62-d1a4-4316-8ac8-650686b2a81e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "77befd86-a830-4af8-9333-356cb8805d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a61df86-d392-4e83-8d5b-dd8404efa1f6",
        "cursor": {
          "ref": "772dc5a0-aab1-42fd-85a0-c3170184f44c",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6ec5d560-e1e3-41ba-bf9b-b5e699a15e44"
        },
        "item": {
          "id": "5a61df86-d392-4e83-8d5b-dd8404efa1f6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9dd8bc78-ee95-4009-b838-f7e80499e1db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a8ccb3-ea92-4152-80dc-e60f642f15d9",
        "cursor": {
          "ref": "ea66526f-5e22-450c-a010-c6d9cb1d6ef1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e898017c-3d99-49b7-8395-4f92dbc242ba"
        },
        "item": {
          "id": "b2a8ccb3-ea92-4152-80dc-e60f642f15d9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "89f77731-7d1f-4ccf-9cdd-be1312cb91e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a99ef61d-3078-4fcc-9f81-64d2d43868c9",
        "cursor": {
          "ref": "f77b950d-9777-46a4-b5dd-66dd78d0c5b4",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "32f7a34f-8a4a-4c55-b0b6-6281409820b6"
        },
        "item": {
          "id": "a99ef61d-3078-4fcc-9f81-64d2d43868c9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "469a1b2a-78a9-48d1-ab38-6b1901b80799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74881698-42dd-451f-974c-8bf13a940fd5",
        "cursor": {
          "ref": "7ef3de55-19ee-4624-ba03-8e0e3f15443c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d58e76bd-8fa4-437e-a518-6f62b97af8c1"
        },
        "item": {
          "id": "74881698-42dd-451f-974c-8bf13a940fd5",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4ec3298b-e958-4222-a5c0-132618dde5d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "046c40f6-8903-4525-936d-f74570cc707a",
        "cursor": {
          "ref": "c065c7ab-bd52-4dab-8727-28030be56f66",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "bff57a55-e7e5-4f5e-9a2e-d2966f18f522"
        },
        "item": {
          "id": "046c40f6-8903-4525-936d-f74570cc707a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "554878f7-fcfd-47ab-abbc-993ba66cf073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca861388-8749-4e89-bda6-589cb8664b4f",
        "cursor": {
          "ref": "d532ed1c-dca7-49a8-9846-7e86b3425091",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "27d852d0-e76d-427d-b605-4f2ba9bc563a"
        },
        "item": {
          "id": "ca861388-8749-4e89-bda6-589cb8664b4f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a54ccaef-8f68-4bf5-b072-d61ae4763f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072c4392-a958-4ad6-b27a-12d64bb6b804",
        "cursor": {
          "ref": "08981f7a-ae55-4a23-90ad-f5d748d46cb7",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a4423701-9f08-49f9-8d53-4d197e867207"
        },
        "item": {
          "id": "072c4392-a958-4ad6-b27a-12d64bb6b804",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1a0ca25f-78a4-4b40-a0a7-dee09745a24a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5e451df-f030-4bfe-861a-22471c8f96d9",
        "cursor": {
          "ref": "25ee0b6e-1598-4ba5-9600-7c8798bcb4bf",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "adfd9b77-f07d-419e-910c-f7a6501ee84a"
        },
        "item": {
          "id": "c5e451df-f030-4bfe-861a-22471c8f96d9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c44c2a6c-b84f-45ae-aaaa-cac5a767c96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7a0920-be0b-4e6d-be13-da26ab845616",
        "cursor": {
          "ref": "c9775388-0490-4c35-bb23-acfff7bdedac",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7abdfcfd-a6b8-4930-a4df-9e674ca11343"
        },
        "item": {
          "id": "3c7a0920-be0b-4e6d-be13-da26ab845616",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "05f7dd7c-9c71-4b09-b7a5-f40353191e57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "680604b1-2573-4a9c-8f98-746bd816c066",
        "cursor": {
          "ref": "9f010b0a-b85c-48d6-8323-db36997e55a0",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "6f47a004-5600-49e1-bcb8-9051394e9b04"
        },
        "item": {
          "id": "680604b1-2573-4a9c-8f98-746bd816c066",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b1050c21-9897-475c-8685-2d721af02992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "025777c1-7d07-47e6-bbee-674bd91be2c0",
        "cursor": {
          "ref": "ecf21919-97cc-4e6b-a9c6-39711014fbec",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b9cdb9b3-18de-431f-9dd1-5065e3a3e054"
        },
        "item": {
          "id": "025777c1-7d07-47e6-bbee-674bd91be2c0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e3dff359-b623-4447-b666-0e21b81d4794",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b142e145-0862-48fd-b84e-3f792e8dd775",
        "cursor": {
          "ref": "24f864a8-fb36-45f4-b26f-39d41355da07",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "dde9e526-fa5f-4064-8257-b704c0c3c15e"
        },
        "item": {
          "id": "b142e145-0862-48fd-b84e-3f792e8dd775",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0709d22c-8cd0-4e09-aa6f-a0e490ed50d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc37d6f-9754-4e6b-9b5c-85da0f02730e",
        "cursor": {
          "ref": "58613184-4f65-4321-b4be-79b0f541394d",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "797af088-951c-4a3e-a721-02bb04ea8650"
        },
        "item": {
          "id": "8dc37d6f-9754-4e6b-9b5c-85da0f02730e",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7741335f-d57b-40c6-a30b-8cd74ca5ea08",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6faa68a-ac21-4cbf-9f12-7138770844de",
        "cursor": {
          "ref": "35414f82-eae4-4928-8b41-71a394b04e12",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "43a80103-06db-4778-8319-93b3eed333b5"
        },
        "item": {
          "id": "e6faa68a-ac21-4cbf-9f12-7138770844de",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "aa81126b-4e95-48f6-b95b-6309957681cb",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d68c08d2-ec7e-4904-a85f-6a58269e0283",
        "cursor": {
          "ref": "d39eb8ea-5f01-45af-acbc-7866d464498c",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b9f995b9-1423-454f-b780-26b2e03d3f24"
        },
        "item": {
          "id": "d68c08d2-ec7e-4904-a85f-6a58269e0283",
          "name": "credentials_verify"
        },
        "response": {
          "id": "dcbf0410-1ad2-4be4-aecf-e9cfb306e8e4",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b40cb8c-b9ca-46ad-abef-9b47d8570af8",
        "cursor": {
          "ref": "aba400c4-7015-466c-a301-0364aff20bff",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "45ff01d4-1fa4-4e76-bd54-7dadad868e83"
        },
        "item": {
          "id": "5b40cb8c-b9ca-46ad-abef-9b47d8570af8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "98ead2c7-95d3-4510-9aee-cbc94bf93de2",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bdb25e-303a-42a7-ae59-0c7c8a5da4a2",
        "cursor": {
          "ref": "3f60a106-f6ef-4170-8e3c-4cecc4220119",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a3e122c7-c1a9-4920-8d45-ef8d1764f69d"
        },
        "item": {
          "id": "b0bdb25e-303a-42a7-ae59-0c7c8a5da4a2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "edc7166f-5462-47b5-a013-ac580b52aa63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0bdb25e-303a-42a7-ae59-0c7c8a5da4a2",
        "cursor": {
          "ref": "3f60a106-f6ef-4170-8e3c-4cecc4220119",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "a3e122c7-c1a9-4920-8d45-ef8d1764f69d"
        },
        "item": {
          "id": "b0bdb25e-303a-42a7-ae59-0c7c8a5da4a2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "edc7166f-5462-47b5-a013-ac580b52aa63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb52151-824f-4ae1-91d0-999599e29cf0",
        "cursor": {
          "ref": "193aafe9-1bb7-4afe-baf1-9e34d15ca996",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "74d96f03-b381-4e11-b2b6-4979ba03a952"
        },
        "item": {
          "id": "5fb52151-824f-4ae1-91d0-999599e29cf0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "477a0aa8-f0bf-470a-be4e-221d0396bceb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0dc467d-a0aa-47f9-8d08-3a4088210fba",
        "cursor": {
          "ref": "b30ff179-4dc0-4f81-9f23-238b35e06116",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "c771be00-89d7-45bc-8422-6457a761e631"
        },
        "item": {
          "id": "d0dc467d-a0aa-47f9-8d08-3a4088210fba",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7a7bd342-c122-461e-8481-b536db3587d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}