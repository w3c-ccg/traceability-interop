{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b4d7fcab-62a1-4267-a8d7-d0424591a6cd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "756d2cfa-9b90-4c40-b225-18c3e26ac02c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e7d16a7-05cb-4e0f-88e1-2d372e2ad5d3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e07bc781-3f4e-4bbb-a3f1-37001b2cb04a"
                }
              }
            ]
          },
          {
            "id": "54436bad-2552-428d-a9b3-d37d7ae4793b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a2715eb1-126b-437d-92cf-78f3c9517f0e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "66182b67-af4f-4c52-ab5d-44916e074f4f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7c1d95cb-dd3e-42d5-9b41-b9ee26b4a4e6",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "eb2c756c-8f0a-418c-9d8d-83cc67904634",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b57349a5-6d9c-4ae4-9b31-b9423b126c6a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af8ae8d5-60de-4a2d-b496-395170550024",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "08e59579-10e2-4a15-9c59-86869b205d30"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f45ded8-e579-4a29-87fd-341896a070b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1bc281c8-efba-4a4f-bc38-a9c919b17d8c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0255a851-d86d-4eca-8ea9-defaeabc4ccf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f61b753-f373-4014-8c2d-504ebb68fde7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f1e5338-c1a6-4515-8449-3f7bb91e8da1",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4cfffd75-fe54-4783-ac95-48cc4212ff80"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fa27441c-09e1-4cfd-97f2-779d41d7e327",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "efc7173b-7dda-44f7-b21b-03231469fc96"
            }
          }
        ]
      },
      {
        "id": "d296228f-b1bd-4b16-a15e-f3c5b153d5a4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e508b0f0-73e3-42a6-963b-7515b69d3d83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "00509330-d4aa-4f87-aa7a-40906d676393",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a295f759-a6f1-42e7-85fd-54ee79c6f002",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f76dab18-452d-42c9-8e4b-cc1143144af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f9a7bce-319d-4a77-8868-d7e9dd2ece2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26d65cc-79fa-4855-8f12-1b76cac8059e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4952390-2fff-4805-b699-0feb3fd0973b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5e08951-f7b8-4714-97d6-612fde4da665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82289527-7775-420c-8f45-d4b7e4dd021a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fa66ee-4a21-4d86-b5df-a966150ced7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9df6553-4c0e-4941-9810-552400aaa861"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "52c13d3e-580a-482c-8e0c-dc67eba0e4e4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1d7abc7c-c0fb-4400-a0fc-4382577651ea",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1407ba53-4bd8-4ba1-be9b-aa909f41a55c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2d05280-f236-4361-9e36-23a104c88b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b1ad05-d926-4304-aaee-3a96673d5f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7526f289-3fc0-4508-8d95-2e166776d6ad"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "034e736b-17a6-4c82-a2ba-a1ad9735184a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a4cb1f64-03b0-43fb-bc2b-af660faec132",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b6b9aa9-f608-4ab9-9292-4c2e78217123",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9dc099a3-44cf-4354-87ea-d07a67685578"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f8019bd-1e94-4865-b59b-f4ae1c4b0928",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e63ad81b-f513-4ba4-9e60-f587fe353098"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9650907e-3d75-47de-b74c-96cbf76c8193",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a77a8fd-c1ae-41b4-bf33-ca6bf1416cb8"
            }
          }
        ]
      },
      {
        "id": "ed88065d-f7a0-475e-b217-320810d776ab",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "385417e2-3bd2-42bb-99d4-c47c890a0d54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25df4607-6558-404d-9c40-322e38674759",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "bdcb52b4-d7e3-4f62-8569-46b8e4de9580",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f6e8bb-5c98-484b-99b5-78a2381e9d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "594e58ad-cddd-4bc0-a151-44632528d131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef21aee9-e7e0-47e9-9323-e2381b87d5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbc1912f-fb51-496d-b838-9c04d75d63a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d96613-2d6e-4f40-b3ee-0bd48f56bf06",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47957e5c-7694-43e5-8e59-05522111a1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6803d773-8ffa-4be1-b998-73570cf3a44a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d71e5aa-a898-48b4-9d7a-cdfcb4a6f38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "09b90487-b121-485f-be4b-d37c9ead02fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb973ec-45bf-47be-b276-74b526c63253",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8a35df-c1a2-4286-a2f2-d90e1ad4cedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84d690e-ddd9-476a-9e7a-5ca6f1a84047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7eef2b-b7c3-46c3-a056-c2875b59a6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbe38b8b-3e20-42b6-992f-5cb4a07f3c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258d1090-5daa-472e-bd95-39f7684843c7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733e123d-1fac-4e16-b922-db8a532fe077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ba4eae-3e4a-42be-913d-90d5fa9b9dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d67d19-ee53-462d-b517-736271bb7fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b027379b-649f-4ae7-9521-1a0064653efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e688bcd-7964-434c-9eae-78e158763e39",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82573619-29be-449a-ba6b-f1d1ef463031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40bc4461-f11d-4aed-a946-7535ef55e00a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bd809f-22af-421c-ab73-fe44d33b0f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a50479f-1e4a-4a2b-9978-ad8d21ca1353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078b5507-d772-45d8-82aa-155aba61c6e5",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ce8306-6204-4cda-ab25-02c833a75abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc45468d-3955-4353-b339-5d96a780ee2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d214b8db-9fb3-48b0-aa14-b4e9c4fafd77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7eb8d9ea-1058-4333-b08e-a9e4202295dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91b8551-42c5-4a0a-80be-a590de2968b9",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d08776-808f-4ed0-a7f5-d5a656df849a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459b0780-6bb1-4c29-8dd1-3bec0a09ce69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6d4ca9-d717-47fc-8772-1c32628be253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "703745e1-8680-4186-a104-0f163c84e5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b4b1ba-10e0-4d25-8943-befd5cb0b086",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025b3fa7-34be-4f55-a040-ac8f22feadb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "386eb12a-7f0a-4a30-b2ba-cf1168b9cdef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d1d9e1-30e3-47d5-99b7-ccaa8159281e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aefabedf-3de1-409f-be34-49b06ad9b66d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50362af-06dc-4ad0-9469-1d202d5b5d74",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580adc30-ba73-4bfe-9257-5968ffe29297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e9be66d-3f03-48b9-9f92-1ff4b8d91250"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83119e43-9698-452b-80b0-205a5a2fe14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3ac4daa-b1c9-46a3-88a9-681c5cd9f8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3cc5ce0-6c16-456c-bc86-739ba71ff7bc",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f1b71d-b94f-42eb-a5de-37e04b536a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75385d4a-119e-4c39-9fd6-8208a05bca65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cfbcda-440a-4eb9-8f58-100371e8cdbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72529618-aa79-460a-aa79-b38c26a7eeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1cc56c-6949-4e7e-916f-8eccb22a3fe0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea43c63-1ee5-40dd-bd2e-3b553eb0a237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a95d49-ca04-4111-affd-243218eca863"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04ae619-2f04-4b17-bb2a-e08d7b94b0b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93b0e6ed-2707-4be0-a7e7-9804c8d32e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9994d8-9696-4f77-80de-c3974117bbed",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca26899e-ef2a-46cc-ab79-6b50b07440a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e815e7ce-ad9a-4060-80ae-8130e6cdc679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6050f1ad-7232-4e1c-9e2c-840c053f11f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a615f1d3-9681-40f2-b183-da254e3c5764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3330e4c-4cba-4555-8067-a9371287b497",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80be0314-4281-4a16-8956-c700837f95f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c413e683-908d-4462-929e-98ea70fe2813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c0b08b-65fa-44fd-9a02-8523d37c1b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38e7f72a-4753-459a-802e-99f14532774f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe507c23-45dd-478c-9a5b-d055c6caab76",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1118e0c-d27d-4ed6-8f65-b16e5890615b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a13f8f1-068e-4046-bc27-4784d482a2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a312a422-e9f3-4b78-95b2-ce26e3989b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "255fe0df-0710-4a21-9745-0e5022ea57ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa235de-f198-434a-891b-9fda3e042e9b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da75f97-3758-49a7-8186-f8f3424562ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a609d335-c590-4209-86a1-2852e93da9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec53e387-654f-40c8-b9e7-69dc499720cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6e3e88a-8c56-4e0d-94ab-afedb97a7a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d1135e-d1f4-40fc-9dee-477907f4b57e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6830195e-0028-453b-909d-6f88d4cfe8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1e52511-e454-4adc-b457-bcd4953162c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18914c4-b666-421d-98fd-d273e27581f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7500955b-51f8-49d5-83cf-8f33114fcc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db63fd2a-eb62-44d1-9c53-943f3f52ce71",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb902157-2f73-491c-9b71-fd37cc4d00bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc361935-09a0-4dc6-905a-ba946254ca5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900ea9d0-77d8-4da8-8066-17e609f29e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "733b4d7b-e75a-4d34-bd2c-fbdb6521de19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b43a9c-9d50-4c2b-b3bc-69619468e9f7",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebf160f-d28a-49d2-893b-b2fcb3541370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d19002-cb85-404b-95bb-faa2ab385329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15c7a23-399c-41ca-bdab-619a74de6786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9cb00f8-ec6b-4650-ba2d-51707e698755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2d3c6c-41a5-4a8c-beb5-d5a250a6cc3d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c8ad93-ed04-4051-96d3-8d65de8c55e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63be0fa2-cb8d-45c0-a352-c43a18275c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a46d00-dcd6-4d53-8cf6-2cccd3271bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "992ec7f8-9693-4ab4-abbc-88abd32c3a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8001d56f-599b-48bd-9570-b9dadb8a518f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc0b20d-f0cb-4c9b-a07c-b110e7cf039e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8081b05c-da39-4bc0-967d-b50ddf6b7a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5ce636-e3a0-4fbd-8262-51603c4ef522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63a160c0-d40f-4ec4-ab0b-5c4c7b556304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff50f1aa-dcf8-48d4-9f70-6af91d9bb4b5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28696d9d-2989-4652-9c67-67270db0ec35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "215e3d6a-24c2-434d-9a49-5026fd3fada8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce96f1d-f144-4260-b771-fa6a5ea67e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b079a6f7-7251-482b-84db-442dbb74b404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb897c2-0c8c-4fc4-a22a-2a2ed0d826d9",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a59d371-4714-4886-9229-90c36b906aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fc0a01f-4b93-4dc7-8fc3-37a1833c94b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ff33b6f-3bc8-4282-ae67-221dc0ba4013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e8891df-2745-4bc1-8dcc-626f0ffd8216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6854e248-0504-490b-a05e-3f30bb81bbc8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5341e64c-a6b8-4331-931a-63069465aa24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705f9d6b-6cf8-4a65-be71-605327287ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15aa8c31-ddc9-4c2b-a831-6ea63b96728b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0e70d32-0627-4e9e-9c0c-ba1c91bda511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7b84df-1cd6-4e0e-b066-fd834a24f7ef",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d3f6485-94a2-453e-87ca-7de47d2e98f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046776be-926a-4f94-b7cd-b149d2272387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b36e3cb4-b9b0-41f2-ae4d-9a3e39a87b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "28ca2dad-6e1f-430c-9dde-b7398b3477e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359d2898-129d-4dba-ad7f-3e3722a6b237",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c3ecab-1444-4ab6-b1cf-b404e8924a02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df9edbe-59c7-48cc-ae0c-394a928b2ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5876690c-96cb-482c-8fe3-c8394963ea8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d53b829-c989-4d92-9bd1-65725c48f815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b09544-4a2e-4aab-a1d9-1ecf15dddd6c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a0ad3e-5b91-4c71-9788-582720aeffc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd8fd56-2375-4c14-907c-4838fdecdb4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4dfe2c4-c38e-439e-ab5a-b29547b3c74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f41b76be-d32d-4a59-a3b1-7de4e752e860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a91c39c-2ff7-4a44-a604-0b824621ec2f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9371e3-b5e6-43f9-b46f-b5c763a94536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d98261fc-f2e9-480c-bb39-acea649d4d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee93493-d516-494b-9cd3-c190b3ae844f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5fcd02-e8e0-4554-9f2a-e7ea09118cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced0a333-f1e0-47fc-b6d6-d786f5507068",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924d70f1-5b17-4410-b971-38c17d896fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84010721-8705-4a5d-90d9-7fedf18ea5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2796bd12-4afb-47c9-885c-9c659abd4845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c01fa3b9-68ff-4359-8a23-0dfef86dfbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daebe0d7-4fb1-4da5-bf71-ae5453232322",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c26998-1d74-4b7d-b4f0-f692de36c62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4087e46-c3ab-4a74-9a14-690b2366850b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2da787c-6b35-4f86-bfff-00adbaf1ed64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6980a9-72bf-455c-877b-0f58c257c7a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbdfec0b-9cd3-46ec-b3e3-d2c0469a9b8f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800f6126-5af0-463b-8e00-0ff7d1677848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52467e0c-39c2-4e4c-a336-59fe71f12f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe67404-15a1-40f7-ab40-790abdb387c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "56104969-bdcd-4c7c-81ee-65ce5a686a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c6faecd-8c76-4771-9760-55037138f356",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c775bf9-f89a-4c5d-994a-917617a708df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bef4b7d-b430-48c8-8800-e892e772680d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4573b1cf-a402-4a1b-855b-f2cb533a872d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bac82bf5-669c-4d48-849f-b53208a467da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad323c8-25f8-45de-87f5-4af3cbd0763c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86dd485d-8d5a-496e-8151-55a2528dc24e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b641c6fa-370f-4893-bf2b-49aa54146015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e306f9-965c-4595-96f8-6d0248de2aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2833bfcc-1191-4a20-af8a-275bf72c2048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e229c881-33be-4189-8ba6-b9a1e34c0588",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c491e376-974f-439c-b7d0-607cd19d7fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d83c305-6d9f-43a4-9cfa-028601c7009f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a72fe29-1969-4692-bde1-d806c5205019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8093d138-a781-4e99-85ff-b6ae5673f9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98fa3736-189b-4c2b-aa8b-cda74ab010e3",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07b2c9e-c547-4dd1-bf76-c21662e29c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81220f88-4e56-4366-8ada-b40a044f7f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56a478a-b410-417e-b324-11650d665375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1fc3e2-0de7-46c7-aaed-b858318bb309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a67f0731-cd3a-44eb-b752-6687c4246279",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0bc615-0457-4a7c-9328-0be4bfa95662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783d19e6-5ed7-4d1e-8a07-eca24001d61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f85a3b1-0c0c-42ee-b4bc-d80a91b68f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "dfe4702f-62cd-4a4a-b3c3-a20a14a46880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03b6a5f7-0694-4e7e-8852-5c4c0e4d186f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537cf66e-a51d-43c4-b772-6f0b9dd157bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44f955a5-8f97-4159-90e2-c3089d3e78a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08599075-4035-43b7-b2d9-e5795992c2ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "146f7efe-1c6d-447b-85d4-c7af384d303f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c438cdc-c993-47c2-8fc7-d8d9c19a72dc",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1942859d-fa6e-4c32-9c6f-364b7b315a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0522766-8506-4af3-ab36-c4ff97190b4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f5c9d3-c2df-4d5e-be2d-4ef779487e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c123c7d-7340-40c9-84dd-6a85999a9e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a852b35c-8352-412f-8caf-8d3f48d6df2a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5edd94e-4d57-4371-a1fd-35fe52444c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf59159-d268-4c10-ac02-55d497638cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64497842-7696-4c02-84a0-1955ea74c1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1029a0a8-6d22-48d0-886f-2b6e7c811db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b92380-640c-498a-8aef-ddbb4ad56d5d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12a7367-15f0-4760-93bf-cf58f1d89dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8016f43d-54fc-4dc9-82af-494bc35318d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb733f4-3901-4782-b292-cf146d1ba0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b34a58c1-4f53-414f-92ba-a2352684c9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60947d97-ea65-48a2-abfc-c4cadd21b532",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8894bef3-cc8b-444b-a0a4-19a9944569f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a8d24c-b3ca-45f0-b8ed-73dd5cb3345e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a7cdff-9270-4aa0-aa8a-3bef176ac5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c14525-166f-406a-85d0-e73cf9ab1463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00cf743-737a-4d2f-8fca-d5929f03026d",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49bbbce-72e4-468e-bb40-c8cb02262174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9870ce-ea03-4f72-b090-578e354e6473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aba18444-2759-4440-ae9f-71b5c5a10698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b2aa33-366f-4c69-b93a-ed970a0fbbf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f6b1ad-4000-4604-848f-746ee31ea018",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61f0263-48a1-4f3e-b4a2-b921fe33f69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfe23aa-da2e-4fb0-8212-ae4156b57c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b8c8ea-4c35-4a8b-9339-ff681926b1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f8a9c82e-37e6-4870-aa77-d9d427aed0a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac38dcaa-29ef-499e-9b73-7646fcc54b4f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb546cdb-5140-4453-b428-33742896b30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c7e320-cb43-4f10-873a-5caa00a607e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cd2757-aaf4-4bb5-82ba-e93aa7b44619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a5400c-bc6b-4323-944e-20248bdb255c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78735002-b3f8-4e7e-bcfb-58e9af09636b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baefe053-e49a-4ddf-a8e1-3ef1da5d7b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c7a766-fd30-4912-a8f4-c6ae6fd47732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20b7436f-5dc8-4969-9556-fd6f51e90808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6f41d1-0c73-413d-a010-2ad6a5f3b662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a11fcb-06c6-4e3d-8e6e-8b87b5535d78",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7f2283-55fc-49bb-a7fa-f2f713b9cbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb5584a-5384-42db-b6f6-8481a04ebd66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930e228b-468d-401e-bf76-1bffd71e4e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8745d03-468b-4407-acbc-4f825669107a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67790eca-795a-49f1-8165-2d12cb1564ff",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4621168f-39d8-4993-b492-abeffa4aabab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbfa195b-a338-4cce-8b65-34ba5dfbe696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8b65e85-f1ae-43c3-89ad-10455b872f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9caa55a-a053-4670-8dd6-1882fc76e8ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1846fa12-c4f0-4c8d-a4c1-0a34993ab4b9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83227d35-712d-4a9b-9fdb-000293b4c37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a99603fe-7ae6-4583-a47f-c943a07f4cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5aeb8e-bfca-4caf-b750-f9a9635f94c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9df7ab1-becf-4c46-9eb5-c5515803cf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864a9b7b-302b-4c14-93ce-b94c4a8e2058",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b606e0b6-3d64-4913-a2a3-1c8b44aecda9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d41804-b152-4cda-b179-2a759f7d0a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dba0302-e852-41c5-8286-c351f0a8a2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "38e11b7b-60f0-4700-8bf0-ab7b4f103c6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88182223-e96a-46da-941e-16b4299d3b38",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93af43d5-fbbd-4c4c-8393-b360ed4ac031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70f4a458-a939-4a74-bea0-79f44f87af23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d553d6-aeb5-4990-8bb3-595bc9261875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4499ea65-eb53-4f9c-8ded-2a0f04c14344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf8c70c-5119-485b-a80b-a1276db18a34",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bd6394-8784-4b94-9285-3add76bb0b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e6fb4bf-c9ab-442d-843e-71a0ae49a052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9712a453-bc49-4d56-be38-01ae6567fc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27fc6b5e-70d3-4dd3-918f-13c4866db772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c33a11-baaf-47c5-9189-ce816896f4da",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6793a093-67a9-49c1-82b0-bd2ae0318ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9c8a7d-2b82-497c-8726-806e435d77db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42554aac-7bf2-455d-b253-e4c1eddca418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2543614-efcf-4365-9e25-302011c7f6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f376e7-3bd6-4024-aaac-bd3675f1ce45",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2afe28e9-90e0-479f-853d-efa38cdc1cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6e7dca-fcd1-40cc-b90c-c8734ec9390d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d12a2b9e-2116-45e6-afd2-4abe2f2aff32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7767f34-9219-484a-b50e-a01835393bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583ed44b-d096-43d2-9061-e68fe43edc36",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e355a3-f23c-4478-a0a1-6fafe0b61d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc65edc3-3d5c-4e60-9d83-882431ce89b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5808e668-0cbe-47e5-a1d5-aaae01d722aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "efefc589-b117-49d6-9b7b-84d4444e8597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b8ec16-a348-47e5-8a6d-58bd74ae2c2c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a854d93e-84d6-4eee-b5d1-406cb28b0deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "712a5155-b949-4719-a413-3149cd7f8830"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2605c1fa-9acc-41e2-8233-a5d4f1fad1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "250af825-368e-44a7-8ff0-c6162fe126cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bfb272f-5498-456d-8df2-519970a40c90",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e29794-32ac-4431-b1d7-4c288f534ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc0565a6-90a1-4780-b0a3-95772cc46e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557169da-16b5-4638-ac68-42086b9b30a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5964f78-1954-4623-8a65-dc2f7ff5eccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba7f202-261a-4320-bf3b-a912fd6814b8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b4b6ba-ba01-400f-ae84-6f7c85428771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1de34d-da3d-4765-bead-4c3d4c51dfcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bf05df-33c2-4712-a82b-1907389098ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "10df9eba-19de-4de0-be55-30cac11b6d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31bb67de-9ded-4119-9f68-0f499abe7244",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc517d01-5cf1-4fad-bbdc-f96b1c2547ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580c9485-427b-49fa-8682-33b9d7d21402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983fbbec-3669-4158-a6c6-eb5816a5cd8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "87ddf4ba-e3f8-4034-8180-7b68040e7d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9779455-ba94-4e63-b304-56f429be065d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f24293-f599-4d53-9191-60547a93d296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ccf07dc-379f-477e-a072-cafc515fbff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdc4740-cb55-43dc-9fbf-089f5f20546a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9991e5c1-c1a1-4a6b-a67f-8343aa265027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7d4683-f154-4f7e-81cf-a2322e438a77",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88967b54-ea7e-44dd-8566-786212206deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54d060f7-0267-4acb-b149-a98ca3e79a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a77bcd-0647-4678-ad75-c32aa488905a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "26b19162-131f-40c1-91aa-4b25c2b46ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61fe483e-fd35-41a7-a485-fde190815a74",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f59e00-a48d-4789-9dd6-c20fea8bbb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "124a7a27-9a28-4d5b-af87-e994cd65a881"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45c945e-79ae-4258-9aac-121452bad7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "01f29d61-298c-4e87-9faa-83c078355e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b8de94-6f82-4f81-a91c-83b03236f3e1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ddcb59-06b5-42e7-b637-ac78ca57c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5310d8-8a21-4aac-9c44-438367a0d7a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b91dc0e-eb19-4c73-a34a-556d2aa56ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef450bbc-9fdf-4911-9ce1-568a74f90ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163853c1-78de-4e6e-9a12-6f55e1fd4bbb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14794bfc-cafa-4f3a-8dea-01cc02c726d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46dcc34-bc5f-48ab-9899-3c49e9ea001a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e2aff1-65fa-4ccc-a30a-bb0f509d7ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0643a8ad-8a06-4047-ba6d-bb8192f0e5ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d61999-42a2-4b80-ae5f-f3f18ee28ed2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682adfe7-7596-4ecc-906c-225fbfd832eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f5a168-f674-4a58-85c6-3628292388f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e07b20-7083-4a1e-af32-6d63bb873b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f79089ed-990b-4195-a106-cbf9b4afe940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552b821d-e0fb-4fa6-99f1-946d1aef706e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676123a1-d2ce-4ea8-bf04-7793de970ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8132539b-4ee5-4e4e-b3c9-c562a39a8791"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8101e75d-5cea-4d62-951e-a90d59757d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c461f390-4bbb-4afe-bec9-0dc07319feef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8d4613-8700-4493-ac0e-d86744abf7b9",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baddfb8d-780b-4540-b960-ea2a6bf30ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac04bce-ef58-4506-a0f3-cdebf8065834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb19168-d68a-41b7-a20f-3b93d9ec4a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0899775b-61d1-4292-ae59-f60f4f880501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6603fe48-4d45-4119-b634-e010e5141e5d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1aef488-50a5-4338-92b3-5e94399081e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52585143-87f0-4fc5-a278-7a9375541ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83af3d72-733f-402b-b55f-645d6c622f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2de98da6-12a2-45bb-a3bc-4ee4e859dc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2b4361-476d-4464-9ae5-d7aec9f4ea7b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d25ea63-7898-4378-913f-075aaca7a205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ddf1a9-db06-4206-8eab-38a438c7508f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38806cc0-3710-4443-89ca-16fb45657fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48ac8d8a-d830-4b52-9cf5-558549f0b094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63908607-c889-420a-8058-924c76ae0265",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cc0b07-a426-47da-9474-e436c170959f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "451fe9fd-a18b-4324-8496-1cb1f736acab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b86d3b1d-8a5d-41a7-8f01-662a1ea5873e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "59e5f022-b82e-45f6-8b0a-d48eaec8e660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6e2382-277c-4a25-ba07-7c20cbb35cb0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edc983c-e943-48a3-8277-2d9eda4dc34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a72097-01a2-400b-9fb4-457e05ad0c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20975520-47a2-45bf-a93d-35802e69710b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d84ca99f-5fad-4283-bf67-400e2cb87c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd9b2dd-35e1-4610-8b89-9a5f252ff9cb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c19d00-dc5f-4443-92a2-ad21b251648b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f4b6bb-22b2-4dab-865c-d0cba3c9786d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2eade6-fe28-46fa-9587-ff0df2a4eee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd6c7cae-fdac-44e3-9ce0-bad9762c25f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3a9b991-757e-40fd-a55e-fd387fc8bcff",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28beb037-08b6-4758-86d3-c13be9e122af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41636037-6592-41c2-84e8-d9255d690a97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d6db29-f48e-40cc-b20a-9016273c4abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee96d471-fe6a-4efc-be42-9270fe17d076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdcaa7c-d8c6-4fda-8bdd-5295c92fe424",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd3888f-92c8-43ff-873c-1f665652983e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a9bc76-001e-4dcb-98f5-bc1de1d95e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ccfe52-ec51-4f91-aacd-fc96c9b7b60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ab74eb-fefe-4294-a9b2-ff1889c40abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75b8c97-e014-4955-91ff-dc1f5f9dfe56",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4af3748-9a12-4326-a7e0-15827de3cd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f3680d-9be0-4d9b-9904-fe6c6c26ff34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aea96f0-9054-43b2-869a-4273442d2bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "58bb0788-1dfe-4fc3-9800-b3718377f9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2c0057-2b4d-4ce9-b95c-31680cdb580a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e7e664-09a4-489d-8b6d-4900a0ee9b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16538436-8d01-49e0-93b9-b35653b57439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eccf3274-3007-45cf-99d4-05748ed9c579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "afa64ace-2eca-4037-b55d-99dccacaaee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba009d2-d4e3-4477-99b0-786d55433acb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dca3492-875e-497c-b23e-737ff4ee9a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466c00b1-ccd5-4a02-8d22-484102935ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f454ba-1b86-436a-b932-847b9c7f3671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e1d22be-20ed-4c29-adfb-598f546ca86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91486b3-90f7-4f81-b634-91947ded9e6d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d1112f-c558-4343-bd5e-ce5adef317b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a357ecf6-b65a-4371-9942-db68bd446386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78132066-c578-4d65-b387-6d4a2c1bbfc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36d72aa8-7119-48ca-98f1-0327c5d0e526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69130ee8-40a4-475d-a1d3-daf7fd54c124",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84989bf-d9cc-43be-a99f-f6f126b8884a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a516d80-bb4a-4fb3-856a-d2e3075a73e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "998fa6d6-4b99-45e2-a553-b1ada03d2e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39888c70-8013-4668-91a1-5901a5e4703b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b9ce39-75df-4ee2-9856-a97685c1008e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "824d04f4-2302-442d-9216-4301b1f8adbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df9ab39-9b68-40ed-b9f1-07acb7846cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb36465-924a-48b6-b5dd-470b7a590ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2753bce-4b09-4b1a-a22d-6e5a133b62c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d4cf55-8dd9-4326-a63d-903e7e2325bd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1af27ab-fed8-43a0-abb0-4d288a4bdeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a899d715-c8ba-4605-bd1f-188c4a2ec01a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07a6a49-6f2d-4e96-88a3-5e52f5e37679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a13c3925-b398-4e6c-95e2-f89cc7485000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f923fbb-0f7f-4646-ace2-0e3ebb25884f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b015cf-e7ae-40c0-8eaa-86da80bc0674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73b8b5e-b245-4aa9-aae1-c55a9286eaae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd636302-b243-42ec-b705-0800c0f824de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5bd4ea84-2d90-4190-9fdb-61a0073fe9da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68ca885-3de9-41c1-9dc0-59aa78d87bcd",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669b5dde-9f42-4974-9b6c-2616177c9812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfaa6620-e4d5-4f66-953b-b566160fca5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079d15a1-4615-4917-9256-7919ec5b2ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da67bd6-a6d0-47ee-ab9a-c134bf149187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4d143c-076b-4c85-9c8c-1f26f0e8c737",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f500da8-73fa-418e-a4ee-f45df7423b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea4e6820-e46f-4284-8839-85c102d264fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b421fbb9-0ec5-456f-ba1c-8a2cd2f7c284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36c45126-9f91-4500-b68c-4e0b8541f565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ce8727-34a0-461b-a10e-5be6e308f046",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2a0e5a-3911-47c5-826c-62d21860c3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4749ebd7-a555-411a-9ef6-b4ef95c18620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b3b56da-7bc9-4cb0-9fa4-cdbe70880e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a1a2aa-6425-4159-9ddd-3a7dc203465b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b2a94e-c864-4ab3-a617-758924275290",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd75903-8766-4453-bb06-37ccdfcc8a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e0638c5-7057-4674-a11f-97354ba7d9f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1b8b0d4-f87b-4039-bb25-ec01508ff76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "285dda9e-6303-45c6-a254-791d2ae0344e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "917d5f62-5a67-4123-aed5-6d73c5d25e1c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f88e4cf-d127-4ed9-af05-7d0017e8d291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc17cb49-cc0d-4b69-a1c9-5a7c02070017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141d893d-d2fc-41c7-a405-154323211111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b6964a-23da-41f1-852f-9e98d0d2f7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b47194-f047-43ec-bb9a-53534c62d3e3",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a33f65a9-369e-440e-95b2-9938e0aae807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f8fb42-866e-49ac-84fc-2e7f1e794de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548680f8-859c-4a4e-ac56-38ee84d44cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "85f50f0a-a089-434a-a8d9-f22cb107b18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ff071f-aee2-4a9d-a342-470448d8e082",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73835bb5-6fd5-4878-be5e-1bd00b7dd150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c1f8d4-6fb5-402e-983e-2bc87ab6f039"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c57f01-e50e-4952-b2f5-2911037b191f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "661a2a2d-da39-47f3-99b8-5c51c65bc81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f434a08c-7486-4b74-be0a-5c7a949131b9",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167f8b51-6706-4cf2-a38f-123e076dd82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e6f29a-6692-44d8-99fc-ec142ac9e324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "751832ff-ea9f-4c35-86c4-95a60e7f598c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4b7e8e8-372e-4372-aeaa-ccbcb9576a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e023e2-86aa-4639-bed0-e1639a609f72",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cf3a4b4-5508-4057-aaf0-b6dfee86e85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8822b44c-36ac-4c8d-9ed5-5a6987bdb3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fe059f-aa3e-4ab8-b073-991c86656ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f75706fe-c26f-4354-89fd-45aa9f98c7f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8158e14-2213-4635-988c-da09e913be69",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d9ad70-8b3a-4f0c-8bde-36e1999faffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc40189-a645-495a-a091-11a5eb05ca01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64575586-ebcb-4e05-8e85-6a8037079c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8910543-6e7f-49c9-a945-79f2c066619a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a25741b5-41da-46ad-b476-58dd784d0a78",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2996f810-0829-4d1d-a916-dded2a892a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcda94e-2a7c-47ae-9436-e74d1c752684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fc6f5dc-cc09-473e-92d6-4db362e5ab39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "11868c74-be91-4312-a04b-810285bc8fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425583e6-646d-4999-aedf-a730ba355f16",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c34090f-77ee-4e66-89b7-766546d97b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3653458d-08fe-43d8-9131-828d9970af86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0906cc-5c83-4eab-a3b5-6a21fc34fff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "34e0be4d-c31f-4868-8cf7-cf8f26566c64"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1728a354-7f45-4ab1-8f40-1310d99158f5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c05bd893-3a22-4e5b-a8ce-55952b0b9499",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f12c65-146f-4b1d-8767-ac2f49098437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b630db76-df63-4233-a0a9-824f45002683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cda07b9-ee15-494c-91eb-a1787b1d96b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1b2b022-bdf6-4152-b5d2-a9710e1ca730"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a2e3f49-b829-428e-915c-3eea1d1af8df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "871cb4a9-36d2-489b-8e7f-c5c52e82fbd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb974e4f-b2e7-44b6-8003-e3e0e8ded274",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "279f69c7-8357-4328-a43f-a539674039c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d6b36f4e-ae7b-45b7-9423-161cefc504c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33fa44a1-62fb-4e1a-9d80-1a5e4f08a0df"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "44aa7a29-ec75-41d2-9771-8619fdafdffc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26309790-05b5-4e5c-886f-2452a57f3b35"
                }
              }
            ]
          },
          {
            "id": "7b6daa98-ec75-4267-bfb2-4171c4774434",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4660ffa6-c11b-4588-b968-44c2a94950ee",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "e8640b36-8a7a-472c-9579-a4ac702af476",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcc5475-4d34-48dd-8dad-a9adededc8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "720d663e-bf19-4927-8985-f17aabd7687a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7932bb66-49fc-4519-8bdc-ee85f03c3b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f7fccf-3289-49ec-8598-f1983df4a032"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db038f92-bc96-474c-9ee2-184d7b0f060d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc631be9-ba80-4bfa-a836-3e32441a9f86",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2555cc29-051a-4cfc-a279-26a45a9b7904"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b29dc3f-7b7b-4154-9d37-3e463b0d81d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "13b7f210-f4ab-4be9-9378-9a0c82a23f71"
                    }
                  }
                ]
              },
              {
                "id": "b5dadfd0-8cb5-4eed-bd1c-3502019aedbf",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f99e44f2-b501-4d54-b98b-8752eb15ca81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cbe5c4ff-4d91-4212-92d5-b995f20f07f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da58da62-2e6c-4229-a140-06f5795247db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c86770ba-a719-4a41-8914-e3aa0edccd62"
                    }
                  }
                ]
              },
              {
                "id": "5cfff1b8-9b35-4b05-8b22-8bbab0505fbf",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b35d5a3b-c962-4390-8680-d311354a5abb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c6cc4c7-e235-4e12-89dd-a0af2317eeb0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0812f896-357e-43a0-ac02-a0cc4a6cc3d0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "21d03378-c04d-42fb-a251-b6fa3354edb2"
                    }
                  }
                ]
              },
              {
                "id": "5b9cba07-13a4-415a-8f97-6fbf57079eee",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1de69cad-0519-446b-8293-65ecfe42d7a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e81d160-6b13-42cd-825f-7ac6281ece81"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f692ace3-f619-4710-b730-40c55761c1ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "56241759-589f-4d2f-9df4-d2806ebaf5f6"
                    }
                  }
                ]
              },
              {
                "id": "0c3fdafd-ca6b-4a27-a19f-a4a261377edf",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b67307f-6642-4ec0-a5da-2098015551d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12332938-9c12-4d91-96a1-5c4ee632e19a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a62dea75-6995-4475-9187-c278da2959d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7fb11a74-8d9a-43ac-ab3c-80daa26e65fa"
                    }
                  }
                ]
              },
              {
                "id": "94689b79-122e-44cf-bf36-44e1b4103538",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6994af3-5314-4478-a114-6f85c3f73979",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3092291f-e3dc-440c-8dcf-24956a5d4aa6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1894e87f-acdc-4696-ac37-2e2aa086770b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe707487-e248-4da9-9fa3-aff16f32c0d8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b413ff92-7ef0-4232-8a41-ce3303206869",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bd7a87dc-6342-47f4-8e47-f92cbed5c55a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ba1b8275-e79f-40ea-af55-8d656b02536c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e6a772ec-f038-4a3f-aead-f6e423d4cdcc"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa607daf-50f7-43ed-b5c4-b607e691ba39",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "369590fb-4035-42eb-bbfb-3bf7999b9d48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5df97c22-4466-4243-9598-a4606ee92f3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b0cf0e3-fcde-43ba-9d78-000c97de9e64"
            }
          }
        ]
      },
      {
        "id": "3f126f1c-e023-417a-a91c-95a8ccd93704",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f51f1a34-dfd1-439a-bc75-8d1dee447171",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2cee877e-2428-483c-8b82-60ea5ea84959",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "62af18ea-e74d-47fd-83cb-0de981090bdd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c202d8-f227-41dd-a120-42f8c37c02ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e202cd-2f2d-4c38-8c2f-f958b4d31bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc5983b-033e-4e4a-b20f-973d32175017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "2df67597-039f-448f-9493-f83e2062f9a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d445189-3e71-4d98-87b8-c8d6d48bd22d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e37b2d5-c6c5-4af6-9cd9-012a52535270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdaa77e-77b2-4338-a65b-727ebd462665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576da06f-8ff6-4cd8-add0-fe440a2b3dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7826ee35-22f3-40c0-ac04-5acd2176dfa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235855b3-ab6b-43e8-ada4-93722f97cbc8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd390d91-0bbd-4a2e-9559-ba32322fa13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f1daa9-9692-43a6-abc7-47d8f9713154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294c54cb-f8d3-4a52-bb84-5d1cbe1aac64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac4e9ef-76a3-490a-890d-edef03542f33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4c36dd4-23c7-4cc5-b711-5857f64c88f6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930a336a-3710-4172-b74e-e0ef1a335938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625d2f6d-625d-4b6a-9f39-9c5a0198e4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e997f2-a282-486e-873b-513dec6dffd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12dabc71-ee87-4c98-b949-13adbe881241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791958ba-c962-4bd2-ba42-40b3830bf6e4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "782a13b5-5dd0-4093-93f4-5e48b1647b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c38c4a9-ca71-4968-95c8-957bbeaf8c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bba8e6a-5e59-4426-9a71-e6a92ddff8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e10f5cc3-9649-4a10-9f18-d00deabe56f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f281fd8a-37d3-4ed1-836a-e580875380fb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adadbf53-1b91-4440-986e-7ab32565cfb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc8b195-a4b6-4b16-8a78-5fe058dde06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f83f74-6ef4-477e-b4da-b30bf46be195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6cafacb-26be-4327-94f6-1652d5ea5cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8dc3de-6e78-4770-a9b1-f7ec9f8fa7bb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7aaf02-9aa0-4896-bb42-e1efee3d70ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e31f505c-71d4-4710-8c8f-5cfa40b88b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a19085-5d18-4814-9b83-1b378f935bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdd18161-2bc2-4f2b-8b60-a599dae0722e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d380a274-1bba-4d65-af6d-4bfb8c83566c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14bbc275-2ded-47f1-8f66-792e41fafcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f897650c-90d8-408b-b69a-a8e4940bb56e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00c7201-dc62-4577-bab4-d68c2c946543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a833fef-f306-4379-91a9-5b2753d7ea7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61067b55-dc4b-4bbf-9d04-14aaca23f3fb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be9adf29-bcea-4720-8e80-cd71796dbf7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5768849b-952e-4e21-bb8f-0deb6ae6a414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56cb1c8-904f-4da6-9b45-4dfc64189dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf12e90-d479-404b-a5ea-ceae13a938cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de71c98-aadf-4b5b-bf54-02a47bdfdd68",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308748a9-3c3c-4b77-9b5c-a399b7b537fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6eff896-2975-41b1-bc51-d1b9c7096796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e847eca-5f63-426a-995b-6f06fc76ee78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd3c8bd-63a6-435b-91b7-3e05113fe974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17165e79-e060-4dc9-9743-47bba2a685e6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59df21e-9f5c-43a0-b494-f7a8ac23e73a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a48287-416b-4058-9678-80730efdc03b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ee7243-a7ec-4323-b166-a909c17047b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ced7d883-2e88-47ed-b063-3b2350e23296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d971c7bb-eb76-4be7-9023-6016c7b43620",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b740e58-e6cb-4cb9-b06c-4728ac363286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348e020c-808d-4d0b-97b4-1fd11c222206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea38fb22-e8d5-4c2e-8684-e15600097a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e32f086c-9672-4bf9-b6e9-ee635be6592e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0149207b-be46-4594-9844-2c1f73cd54a3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bcacb4-03c4-4140-9f6c-8c0d01e0ee3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f40b891-fd25-4b5e-a51e-39a5f34b1630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401fdb1d-97b8-4436-9414-c5a28ed61bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cebcd2c6-97aa-4b45-a668-cdbd00e27a29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c72ee8-c021-40b5-a291-111db6f65330",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "716f02ba-25f8-4351-a390-fc079bccbe00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e22388bf-b0d2-4ce9-9c5b-0fea68d794a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db00e6c8-587a-463c-b07e-05864247ad34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "faa3a5f6-d4ce-406c-8336-c222a8ed17a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1be476-5b46-49fd-9cbb-359390921af3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237b332f-8ce7-41a6-8fc3-489e54c5819c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb27d61-74c5-43a3-b9c2-201e06ebf746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "284cfeb7-0ce4-41f1-966b-60611b836da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c77f9eac-0dd0-4edb-8039-d320d4446e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528a5309-37e8-4d1c-a39e-4ce56597021f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955dfed3-c816-4d02-b4f6-eb7d05eaa84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f88f935-5904-4fc4-9db6-5d00ac8d91a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9862b892-d452-4c35-9d29-ffc4e2303ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a694803f-66ae-4968-9e45-ae74cead6f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78856ead-e27a-4da8-a2ec-c10fdef99832",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c6f65e-ded5-41b1-861e-887adb98ec60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c790276-b5a7-4b32-a61c-8df3b36aad74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814f5197-706c-439f-b957-963235b9ea05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aeed1b8-5e29-4c5b-9ba5-f218e7580c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ffc7cf-57fd-4575-9564-162e8c42da8a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed5a8f7-3c6d-4568-b6ef-d9d405b3c54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b95559-acde-4b87-b442-d19caec5e232"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79d0f15-000c-41ea-886f-6c5623d012ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "145add35-7614-4691-8828-04ba35576f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34158884-3076-4db1-bf71-51c4e4548dcf",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a3f856-85fe-4b2a-84f4-f415ca6a50df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da29951f-1664-40b9-b319-ee0dc40bfeb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b9a6bf-50ad-4a60-b4b4-b6b73acdd7ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c474b1-8ef9-4c79-97f7-3860f83547d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d44485-521f-477d-8505-87f7f9053457",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7954716b-f27f-49c1-88c7-b35f10dafbe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93eae0fe-3647-44aa-898e-50d4135c82bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3db4291c-ab2c-423c-a02e-f2f872be98e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d70ab240-0a88-454b-828c-7d0094f83642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d836944-65d7-444a-a95e-c0b578df1f72",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c1d912-d3cc-4820-9fc0-8367f87fc43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2902cf1-dbed-4eef-810e-2560313b1144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb19516-ca1d-4b45-a72a-1b7bca393eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ee8b38-c962-4c76-bf73-769ed6b1a9c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0414536d-53da-4498-a74a-cb07814731b9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439383f7-d00a-4213-9ae3-93934a94f170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ead2c4-3318-46e9-9ba2-523bbf50c43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c8aa20-1c77-4a4a-b207-32d80178a651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3dcf8987-7b60-4f27-8878-5620c9a04de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "448ef6fa-e59e-4eba-b72d-bab5e4493092",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae7e07d-00dc-49aa-a304-7a9e46f46adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75bb1447-5eb4-4eee-bb4b-1f9161abf8c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7590cc5e-e992-48e7-a016-6e9ad3c5c5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eebaf37b-e3de-45d3-a293-7e2bbfd8e4f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0daa4577-cb18-4d20-8606-3e3d50e73dca",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffca88a-6a67-468a-979d-f7baea879859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7aa206-256d-4e85-af7e-c51572cbb3d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66962260-cd1d-43c8-acc8-038c74e72f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7876e24-c072-4740-98c4-b255210999c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357c220d-cf5e-48c2-801a-648395b4759e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f3e961-df58-4ee1-9d4a-4b5d2ff4196b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee4568b-9ecc-4bb6-abe2-6e38aee0e43a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b4962e-d1c1-4770-9f56-8bd63c08c267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e15f3121-bac7-419b-9df1-368e71690511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bb39b6-d4da-4942-9949-fb9eec912811",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac8b01d-0cc2-4393-8ab0-e82fc4bb7f9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f23a3da-29c5-4fb5-a20f-22678bc13497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e007a853-56ed-4709-9432-b1dbd1470402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38dccf58-4a6d-462d-bc8c-6b498ccf47ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e51650a-aa58-44ad-ae18-407a45919410",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86094cc0-e4ec-4edf-84ae-ab0f73f20fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16ae896-4c5b-4a3d-b7ab-2dd4cd49db1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38050cba-f066-4ba9-8731-801aa669ff0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c43ab16-323f-48d5-ab74-b50d9c65f93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e4662c-9702-4be8-a935-44abf7e4d167",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab4a7f8-c089-457b-a9c4-b110aa29f374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a36c9d-a7eb-47a9-810f-29df00e9e3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2da491-5010-4c82-beb9-e9d42dfe64bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8ce9f1-77de-44dd-9f52-7570bfcf6a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c15ad3-c4cc-4afa-892e-c1cd50f5001a",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80eb2437-0290-4d23-ba8b-9c3fa1c1fa81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5678b5ed-9e5b-4f9d-abf9-17bcfddf4215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ab57b5-0605-4cc6-8b97-a3063c17b5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "084f29b8-90cc-411e-ba5f-c9128ce2f758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429ac77e-1415-49e6-a96d-c558b5d1487f",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd38c341-83ef-4e3d-9aa0-193e68c996e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97585187-75a7-4164-b228-1f78c029677a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e365d2cb-90e1-4cb5-a561-44033b928662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9113ae-4e23-4bf1-a261-c24df19bd111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c821bce6-6cd0-4dba-86a6-2509e0acdd40",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c98ea9-6d57-4e23-a085-3d1ace8a95ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aad3bfe-2ece-40e7-9055-22bd0c549603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdea5a0-268e-4321-a040-f7e8e41aa6f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b07f9a71-2cc9-45e0-91eb-1e3b2286e39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89406ea-8b08-4509-80f2-afc5b34ed3d2",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a607b55b-ef9e-4161-8c4b-9e6b037077f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb3d08e-917c-4d7e-a434-6595ef96727e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b62b396-29a1-4b63-9888-cfcbd73f34fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06b47f91-76c5-40ae-9002-03532669ff56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11019438-4d03-4e30-b81d-f682d18e98c6",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a187b405-ef77-4f36-9bcf-1f520b1cb7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75309fb-7aee-49d5-96ca-15f91ecaf150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ecd461-95a1-46bb-843c-8cca11c46875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "589286a4-98db-4220-ae61-6541bb10425c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40061ea5-4a25-47a1-b8a5-c857fa0da6a5",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e93cf061-b237-4bfd-af36-455bfd3b07ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1690f482-1092-4676-a5a5-80bbb53109f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6051859-5677-48fd-8c1a-87bd1028742a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea48f9b-3332-4504-941a-62719c6892c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c45d77-30f4-4e04-bc01-bfc371d63ca8",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f874119-c91c-44bc-916b-727fa1a71433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd0c644-429f-48ad-886d-e9e6e45e5eed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34089e8-2fa2-4a2b-9d8f-be71c0292a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9838b8f4-4eb1-4f9c-a4d6-d37381bf9d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "676656f2-1268-4292-a324-91d01a779078",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dce8bd73-dd3a-47ec-86e3-693fe3958a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4e93287-d0c6-4efc-a470-9662213a8b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "effbae76-f8ae-426e-899e-9dadd79b7033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8ac8f64-8d0f-4be5-b11e-59e7d568dac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799d1587-bbdc-497e-9617-42de2da168c8",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00d3406-560a-456f-ae0f-c4f39883c0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd20949-a79c-46fe-971c-51df48621d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff592df-7540-4b8d-9b59-8f1e4b2b610a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71bdc336-5a44-4ee9-bd01-1bac69336377"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4aef9b0d-82a3-43c4-b674-c9f9dca4971b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bf45170-232a-455a-8ee6-bbc3ebfa55ea",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b716235b-4040-45f2-afa6-a204eba7e2ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b3752a5a-2e9c-460b-af98-b558575c846e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ee9bdb-7dbe-49fd-932d-9e7c6aa0ba35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d14f3e2-aea8-45ed-9d94-a82d35c1628b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7a72c4a-b798-4af9-ae85-4c34609d0d20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25c09e7b-16e1-4416-96db-d2189e8f5c38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "548f8156-255f-4e0e-91b4-2f14f42d40b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d022b39-4511-453e-ba5e-ed07a6fabd73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4e61ebdc-1e64-4ba2-a88a-430148600c16",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f582d87e-2aa9-4509-b252-1592d128e29b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b6203fc-6ea2-40b0-af66-4395e6730e45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "899b7e10-71c3-4518-9317-d99db5613f07"
            }
          }
        ]
      },
      {
        "id": "1bf3f899-8388-4369-ae46-3c551990b08b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "142400c7-3b97-4c5a-98ae-43fea81844d5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8861a7af-681d-4679-a2df-19c7526df8c2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db2f8f04-fd75-421b-80ea-3ef51d5caf52",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3883abad-3c25-4c2f-9db9-2c28d173cc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8c5d086-3553-44b9-9cdf-78c9287f8d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b72a90-ec47-4aaa-b46e-289a75f337b6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced65bc6-4668-4a43-ba3e-649e730380e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "150f0d43-0349-4f03-8fdc-89640e0ff4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38618772-64dd-4d5e-81c6-7ca4009c7ba3",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e39e50-406e-4a32-b03e-d95a13bb08a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1d46d6-8f82-48dc-93fe-008a6317740a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4663b786-0864-4e3b-a512-f63c9b6f0fa5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108287ef-fab9-471b-b17d-860ce18c1fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78428ef4-0e7d-4f7c-b8eb-504b99d77f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c69591-6ede-420b-9033-a4b7820fe0e9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a397b48c-2348-4935-83b1-6888df311cde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18061e1-fe72-4a82-bf9e-d2f235bf1f57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b138d2d-4c79-428b-a16f-d2a649f3be16",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c3d76c-4eea-4395-b701-f5a9a1731803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd322d07-c3b6-41ba-a252-0ef2449ce0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5548b40c-2cc1-4046-8976-afe83d5c62df",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358fc36c-8ea2-4e14-b09c-aab365110e85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4810bd-2b1a-4567-9208-b3e2daa81a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d93f6ae-c269-42a4-b099-8267f62ab1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8fbdea-69fd-4b11-a9ff-ea26b9282311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ab75e5-3d06-465b-9c17-c2653f0b07b7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b43255f-6c92-481f-bbce-957b13653beb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed4944da-1a26-4c91-8514-4614119c69fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca39d85-3f51-4762-b8bc-3f5653e64d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff63cb17-b652-4036-855b-387f16fa51b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbce0e7a-bdbd-4f3c-a6aa-0f060db2e3d0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4c10c0-b0f6-47b4-aa9f-a60a2069d416",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c89e3da-1afd-4922-9022-086fcad14519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "205eedf4-e6e1-41b8-8f99-6c86b06467c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b960f1-4085-4e6a-bd95-8fb8e0a9e14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294405ec-9edd-416f-a000-73cdfe106482",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafeaf43-5f7e-4a51-aa74-1dc976812ae1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2680c69b-2aa5-43a2-b9c8-687f00d30bcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f34c5df-874b-42be-a381-d89d44c5414b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f041ddd6-bc5a-470d-bbae-c762ae16523f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b3aaf4-bbca-4fe4-b0dd-43e98e47afa5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b131a235-00dd-4a5b-8caf-f966040330d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3585bfb6-6638-4577-9c45-27559741743d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "936ff6aa-804e-4a79-ba4d-0a0ca557c2dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77c87ff-ff1a-4f74-9e4c-71962cbb22fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d231ade-11cf-4d5a-a6f9-e5da7ebadb45",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41a65c1-5884-4a48-9526-87a3ed8dce70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b3f75c-ca4d-49b3-a7d3-e31ad1c4778e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b678f036-5793-4289-a97f-8e6e10325b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf41cc84-f2c1-427d-8d79-98740d124157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ce0200-1722-48c8-8775-6bafbda2c73f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234909a6-5ef5-4239-9c01-217e1cca6a33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "957dbb0c-af6b-4a0a-9365-cead1d0932d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0daeb45d-0c84-4dab-b5db-29b6dedb6e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5234cafa-4abf-4c26-b80f-1c517613a87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34147201-ff50-4532-aa83-efc25ef2b4ad",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60111ff6-a987-47fa-aae5-1d81bf0b5961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "121c4a6d-c842-4a1b-9eb8-e255b05bb214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9062e5-9edf-4352-bfee-5af9527cef3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34acac24-82a0-4409-ae1c-a264082a8c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c50cde-cc2d-4864-b657-a2b570329365",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e1679f-364d-4c22-9084-4ef1534313d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "584f3d90-3ae7-49c5-a21a-a67368d7a507"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a99c9a-60d1-4216-a3ad-7e164176695e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f94429e9-9731-4fc9-9c6a-947b52d1124a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db59337b-7ba9-4e2a-826e-0baefdc2ea65",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aacc602a-cfa8-4220-977d-37367961dc7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dea0cb2-adcb-4af9-af37-8455261d6790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4beda9-2da9-40d6-b6f8-c186c884c464",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154c08c7-6ab5-4a33-8feb-b2b532950843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc945454-ced9-4c56-8f37-748df906ffaf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb4337a-36f9-4716-9e4e-5b28dbb6dae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c192d4-8506-426c-93fb-04e87a6f51ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c546dc7f-ba36-4e0c-8dae-10041e9d1f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428a70ea-d95a-4e30-812a-c067352d7ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d20c15-941f-491b-9a43-31081f91b3c6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325f34e9-9582-440f-9369-c7766d9b2a77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e04de0b6-8a92-4b99-9bea-30d279845d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8edf0b78-097f-468c-89ed-e1dbb5025bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2b41888-f8bd-4bfa-91f0-206f570b9155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93789dc-f3e5-48b0-ae1f-4396b0121e0a",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6bd674-2614-46fe-90d3-3f8bb6bd3142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df21e305-ba81-4934-808f-1249235ff0bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d75c17-6754-44e8-9c04-30fae3ea9eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1800a85d-cf69-4632-8330-eaaab472e2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd7e36c1-eed4-4fc7-a536-99502997b7e6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ded0e2-6857-4148-ab96-16f462aa1aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d328c53-5106-4e19-9c7a-b1b288e4f060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4345856-ab47-43aa-a243-72d24a20f22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f5e568f-a0a3-4293-8077-c941168ea665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cd1523-0d46-4b64-9fd4-212ac3905e64",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf19508-81f0-4025-8383-6053fb3c2829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53219eeb-b945-4af2-8d3e-039f66768fb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a96de4-59a5-4aef-a495-cf4e18f4f68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9124de11-448a-4568-93a7-5298d3e8940e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb37f362-40cd-4385-a9b3-cba8258ab237",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9adf33-fb68-4077-964e-3d2cbbc8196f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1136d0d0-2caf-4fb4-b54e-28f62420e163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c196c8f5-25d0-4ac9-8631-5d36eaa07f66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b94199-fbd4-4ce6-8bfb-ac16c66958c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58a10b1-a2ad-41e4-ae82-3fb40eb95a09",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1c3fd2-179b-4108-a3be-2d3f7320b359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d401e5ba-cb7d-45ab-8fad-4337f499ae41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8788471d-f4ca-460c-9199-b1cc8ccc34a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57191618-4608-4bc0-9328-44b40619dfab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "472c2786-6a2d-4286-953e-1f089bf247ba",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f836a540-a68a-46e7-80d7-196f03f9dbf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de1608df-d924-4934-8ec6-fc7b4a5b610f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f3b43c-6b80-4e4b-863c-431063443a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ead6d67-2534-4ccc-ba24-0052ba8079ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ef9c7e-a200-4ff5-8e6f-595de38dbbaa",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0b6a04-ecd1-4327-b111-fe7d82d99aaa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c4c6f13-883a-491d-8f4c-47447abb8dca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468ee44f-1566-464a-a141-348d2b096c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00da6ff4-35a4-4035-86ec-9d8f31918e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "935ce01f-e09c-4d6f-af90-2e3fa4332b66",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9713dd7f-d41f-4b50-b2e9-16354178a8be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "519260d9-1000-4aa7-84a4-dc7e66ca9cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b721befa-fd61-4f04-9d14-cc9edd25e95a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6721155f-8918-4f92-8d13-6f20f25443a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "897d0ef1-1af5-4d5f-8338-08fe4d06d826",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7789e6ee-b864-4b20-b288-b63444810d81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d85f0b59-d880-48f1-9b15-7700a2f86ce4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f84f3c-9e4b-4cc4-81a3-4094b40f363b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d77a377-eed2-465f-9eab-c2568e862706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c7c086-a467-4ba1-b26e-4285c19166e7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded6d2fa-94e8-4b82-ab48-871494a04f59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a0575ed-59fc-4d00-9deb-f41ff64c102e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44365dce-7ae7-42df-a53f-7ab62721dfc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ff5a00-0f7b-4957-982b-a28fb33c0cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762caf12-9130-4a60-a6c2-977d3994a81f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a43ee3-daf4-41a9-8c1d-2c275c2f652e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b25aaf32-dffe-4075-a31c-608dd5ce46fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e3c6b91-6f3e-481e-8b68-9f460052daaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6b917d1-9646-43a9-9d83-62a161daf755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f19c2d0-5a85-4432-9b79-dca13a3fffd1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c098ff2-88eb-4490-abc9-03f90c3ff092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "216dd437-4430-488a-81bf-b2438b0d6217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2259bf99-5fc1-40fb-b374-b0aa75d52a6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97188b4c-961b-4c03-ac6d-85da98553680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c25cd44-9fed-4e72-bf81-713d7059a54f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1eff0e-d615-4e1f-8b7f-a9e38b3a50f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0844ddf1-13a5-4f24-9233-e17ad1f8fc7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fa21c0-f1fd-4660-bbe3-8b8c181c17c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28a300b-a1a7-48d3-a80f-0994dc14cd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278c28c5-d670-439b-8eb3-84ce5c43175c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee75481-39be-46c8-92af-39625a4b754b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "302ac662-70e7-4bee-b04a-a6796d7b7b0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656f3186-ba43-47c9-80f7-22439eae2c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c46127c-49d2-4ed9-9f19-38acf19fe3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff14e89-d0b6-48ee-858a-9de81d5a6f03",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922f0284-e0f4-4803-9a15-2c8ffc874698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "137334af-eda0-4aea-8f73-efd4e7adf6e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86386812-c775-471b-9c8f-04f5eaeeba0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf024ac5-f174-4e2c-8290-17605440c20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a61000-0dda-4942-8134-707f25810f8f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57d9a62-0acb-4d59-9bda-50062e29f1c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac181d67-9e19-4e0c-801b-2d461398cc4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b832847b-7579-4656-a2df-cd747cd24c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a88dd6-451a-4238-ac26-fead5ed0f10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47455f66-c034-4c71-87c8-b64f1bf7077e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff43610-503e-4e7b-8b12-59604ee66afe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e5f26d4-4e88-42d2-adcf-b2507f458bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d53b233-f2a3-44fa-9c04-2b7efbd33189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e39d43c-beba-4f8a-b745-51b6743a2842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5620f2e-c6e2-49d9-9008-593ca598b4d3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d79ae7d-657b-4b28-8ebe-9b392540fd6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75827e45-052d-4d4e-a263-d984019b7ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "337c5da0-5de3-4e9d-9e7a-936c2d6e47bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a9bba6d-1972-46fa-9438-cdff7104e3c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e4761f-980d-4b1c-82b0-d39adfd6dde8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26e08f6-6862-44b3-aac8-77b3afce9f40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80bf56e3-ed6e-4e15-9d3a-56c057ec54b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d29de54-51c6-4314-94b0-1a917dad31de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1256d8a8-0972-40ac-a080-66aea515bf69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1672e842-87a4-4bc2-a9bf-a1ae2fd27b3a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81d652f-0dbf-4cf8-8993-b841847db6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46dbfcdd-f483-423f-9f15-0c71246e87ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798912fd-c12b-4984-b79f-cd1bb0fc48b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e9396e-9296-4e48-958c-d75a9368ea00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1453302c-f4ab-4a6c-a2bf-06827d960ac6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60bf7508-f5df-49f4-aae5-4319d53e4244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2575e34-6734-42ff-92a8-beee81da2f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50373006-a5c5-4e40-a60a-6a9e90c819b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29b74229-9b54-4f5a-9c20-5f831c569c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32dd304c-4280-490f-af27-217e99a38e56",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab640561-4a6f-48fb-aec7-601a94eb988e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb42937a-df60-4d93-b02b-6615482dfc3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7075afc1-da7c-4383-a418-3994e7d95630",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e06663e-1822-43c9-b2f8-a70abc2369f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "487ac9c8-1794-4d22-8d46-d496c4687186",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2edcd9c-868e-43e6-bd50-80b5337cf8e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacb0eeb-cb91-414b-af97-57191577d922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "608631b6-f1cd-46e0-8c30-a7f596ba44e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07a9199b-88eb-4817-bf08-91593e3dcb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa52888-5aa4-486d-b7aa-2744558c475d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20dbb1c8-5941-4b28-8ffa-3f8f960db023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90c3e534-382a-4251-bb69-251d417a95db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b682f5-1a6a-4fca-91bd-8df8eada2ca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc3ea5d8-af73-4307-9912-e1a8a7551558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9b099b-357c-45aa-9874-baccbf37d022",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06a83966-1d10-46e2-acb5-3a8e3a95ca36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e643ba-bb5b-4e04-863a-30541513acc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a4cd6d-f9c2-43bd-b952-faf78a096abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1955d630-2f7d-4252-a5b7-a2fda65ce03a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f074b1e-9741-4c57-a8fe-e877062e81a6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a4cf62-5493-49c9-bbd1-c626aaf4e180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3234c051-37be-43a8-8ec8-46501cd293a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddb8118-7a57-4804-8722-f38071e03403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a447e079-ee0e-4584-aa1e-4e47311094b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9485e4-e39f-4b91-95f0-9410c20bc094",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea074ab2-ef56-4230-bb8d-6246beb4bb6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319f0471-42e4-4cea-9f84-dbd58401605e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a893821f-862a-42d5-8671-cc66ec38dd2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64b42518-9fef-4968-a29e-21dcc20a7df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c265e1d-9061-4fa4-ae4c-01bd2e60f367",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49418b5a-5d28-4b7a-bf29-41a19385a765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef08a36d-f8b9-4b5e-bd6e-e93677d20e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b12114ec-9c07-402f-9921-938fd33b4551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1df35e7-e2e3-4c95-a890-6c75b09d1565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a7d838-aab0-4627-9288-4d3c1372fca5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0adc4a2e-58ad-43e5-9c89-756edc88d120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5d25e5-ebfd-497b-9d6d-7c8d0d051996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8ea670-c409-4f2c-8e79-1b4e3393f9df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5b5efc-7c37-489c-998b-622c2398f242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6886c5-8f2e-4f56-8686-ff946c9ef338",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a8b03ad-a6c4-4b41-b52a-01b67c45dedc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b006aeaf-d872-41e1-8e30-097dfe74e293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b816190-0ae4-408c-b2c1-b1b656ae7a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdf4cf25-e4ca-4b8c-b849-a02e69b1ebc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de967048-ed19-4c1a-ae0c-907f0ad8d5a0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9b6bd7-89ff-4351-9fc5-31701e9cfbd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636c61ae-0470-412d-a0cf-ba5f8d02d97e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4504c2c4-faab-4a54-8a0b-8d106b606581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e48f84f4-eeb0-40b1-84ee-049e3c6b2c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c868aa1e-3af9-438b-b118-4d11a3d82ac5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b2c57f-c982-4e64-96f2-ea04d1793321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed94a3ef-0fc4-4f9e-a0d0-eaadad7b1c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b103ceb3-1708-4c00-9d22-a97715bec412",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d000c03-184b-442b-b9ff-2fd1715dcd40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea30bf96-e1df-4f88-86e6-5979daf0427e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f35029-4a31-44fb-aebf-a46a9db2e3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0aafc89a-a86a-459e-8cd0-4cc1588af42f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0af461-26f5-466f-990e-688626d4c135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b601db63-e21e-423f-b8ef-541d7a91d333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d567df9-55e3-41f1-824d-1cc51eed831f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "720b5aa2-d0f0-456c-a834-0da5d47c093d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9be4cf5-65c9-4297-a4af-1748de1e211f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a90d4b9-5586-4f43-9e1f-a266ad1a937c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bab188-8688-4fe7-9060-1450b447e207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ee1304-11a4-4fa8-a8cd-c9aa75ab45bd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd56b52-83ad-4643-91db-b6309246b1ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8fbb40b-e38a-405e-b5d4-ad5ea7f582ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a16136b-0c27-408f-a30e-7d0f489415b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f674b5bf-e1c0-4de7-bfdd-3762ae347b6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "711e05da-6ee9-45d0-adf6-cdc2d3992f2e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2c25ea-d2e5-458f-8494-294b841d9e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51af4f6b-1c82-4ccd-bd68-c6ad6659f5db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1bf7ea-bc0a-4947-a90a-12ebbc7a3087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96ab8bfc-c8c0-424a-b515-703ef53462da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca0d78d-72fb-4be3-a19c-fd480d53552b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659988d1-fca0-4609-a6c7-b50999214e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255432f4-3abe-418e-99c1-d5aab84e1227"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545c40e3-4727-43ee-b3f7-079004598f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6144eca3-fee4-47d3-867a-141494218356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d60115b-3ae2-4276-a57f-806cd5e211d5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53946724-f31a-4689-9e78-bae9c5c21095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4308acc1-af33-450e-b762-f3e6cb232be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fba213a-c9c0-401a-80cb-8587b90dff7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a165fc-731a-4cd4-8427-31774b75ec96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cc2b31-3117-467e-8ac1-a15e9e515cbe",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33708f66-4260-4105-9fa6-1e4bc7e9927d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16633606-3a60-46b7-9902-9d6f0a37038e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfaa8fb-e5f1-478c-8f48-4a52b41b4c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39864d6c-243e-465d-b50b-42821828dfdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06063081-e38e-495c-8939-affb3109eac5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84127503-d5a1-41b3-a957-fce28f4fb2b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06bbb53-a304-4ef5-a670-b90ca201045e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae4698f-64b3-445b-bfac-8afa59fbef63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cac24524-6a81-4146-917f-77cc5514acc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a485692-1bb5-42b6-8233-1309acb1905b",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a00d3e-a023-43ec-9af5-ff17d4dbdfe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34e384b5-0bae-4f89-9d4a-5dffef0429b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6393dcf-b742-4610-b6e2-238d1835faa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f5ae8c-3c25-49b8-92c5-ecd38f4116ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea924ba-4307-4c42-9959-214646741127",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b3b34e-912a-474b-956d-19b1f1fc32da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5fe83cd-248d-43ae-b87f-a201d451e23a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d7eea67-ba4f-43a4-a973-3142ae0c2c5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33ad4bb5-15a9-4448-a90e-93e5cc584b06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7350b282-d6da-4ec5-9903-ab093d1a1e45",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af7ef230-2d1a-4349-8814-ebf82f572a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65803237-8ad5-40aa-a2dc-f0febcaf3a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f240bbaa-62f7-4166-ba75-d1dababf608b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7f1903-56e1-48d4-9ea3-d9ad71328fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b181fb-071a-4e4e-95e3-2d2ee9154783",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d08bd674-2ad6-47b2-843f-21aa059caed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6376d599-1383-4b6c-8335-fea85ca22e03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb4f999-c510-48ca-b7d7-ef6877ea3eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a206b6-e326-4c7a-ba5e-ae90966e9e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafd5d82-4417-46f0-b26a-11a76ef330cb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028a9238-01d3-41a9-94c5-d823056a94bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "552eb726-2e5c-431d-8a45-a88ed8bf52ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37ab9e5-3331-4e95-af40-827fbb9de6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a29b34-bfbf-476e-bec2-05d32c970b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef28499-df66-4b67-b9c1-833456be4b8a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fa83e8-3333-4daa-aff0-22cecef67544",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a380f1a0-4428-4415-b3fa-cfadd83f6087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56214a6f-4677-42a8-b2e9-8b6a42a411f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18187ed5-e356-436a-9b83-2744c27baee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4cde939-a78b-4d5c-9284-6ca3c9cec625",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e9676d3-9773-48aa-a634-86dea0e98a79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdfde9db-f3e4-4fe2-a564-419e6701a31b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "808f6ba0-a7fa-441e-b7d9-3ebf90c1182b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04708b99-b385-4952-a6f7-778f248fa144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f264f76e-618e-4308-a44d-d6602194f989",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65aa8005-fa72-4d60-bd67-e20c54981fdc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "733786aa-1d0c-4374-b5ce-066536274fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d16853f-9abc-48a0-83c1-1b803521cef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "526e5c03-7497-4118-9e54-bed1cf511f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4af584-50d4-4a4b-8403-73bf9aac32fd",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac6c9a7-8bde-4fc3-90f3-c32da44f7528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9012dd2d-335f-4a96-9f73-f6c1254c5098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9609b290-611f-4bbb-816e-df41ea7b9ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81dc2f54-d33f-4278-b37d-f167d1644848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ad3c25-23b9-4c3e-85d3-27ef831aa7b8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961f2317-0cb5-4e23-87cd-546f1b0f5c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35d32c0e-854c-4e65-9bc4-4b58d84d3a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1a03c5-acc7-4a5a-85db-122b0d6f53f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee84b2f1-ac2b-4e9f-bf0d-28740bb89798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a71b9380-c6f4-42bb-8bfe-5f17d19e54be",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea1357b-110f-4c27-81d1-533e8e1bf67a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89e6118d-c515-4c3b-ad61-750d50b2aacf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "689aea69-c4d1-4f68-992f-edb847f8c14a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76634d1c-0362-4910-9c96-3e08679dba54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825d8bf8-b998-4856-85b9-5684aa2442b6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b67dfbf-21a2-46d5-b2e2-88c31dcfe1fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bc51ea7-4069-4507-8e93-08f231225fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8aae0b4-4b95-4428-93f1-d1ad5e9dc06d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7caf31-32e8-44c7-8202-07edcbd3a94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b3c8f4d-4fe9-49a4-a0d7-28e91e1931b1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dba35f-6f76-4a42-af01-70f4f8a01da9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b88bb249-457d-43ff-b0f2-4b8e9fc3c1a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4300813-d43b-42f4-8ae1-5f4f05bab72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88dc5146-6410-4237-ae51-8a9af85f6ffb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be8a20e-c2d4-4d3a-aa02-3edd4d0eccee",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7c89c6a-ea1e-40b2-989a-8a759b797ef3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b412d9bc-e57a-4068-b69c-fd1a10dc53f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a6c1bf-ad62-45c7-b2a0-53a3deadac5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e9b0a4-5da7-49f8-9368-3ad34f1c7436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc40e6f-6876-4445-a069-0e7b5b879550",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f74480-adb9-4115-9e9d-da3a86133297",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb0084d-0773-4b23-b1a4-35a41f132afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d21734c-9573-4236-99d6-fd6209af240c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab979d2c-3f3a-4a2b-8050-469d8fa40024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9b82ce-3cd6-4e0f-845a-1435f9884c64",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434c23d1-b76f-4691-bf8e-b0a7cfb20c6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0f5908d-3016-4d97-ac35-7d789c7bf48e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b85bc3-0056-4ab8-b811-cd187c8ecff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e35278-09a0-4022-aae4-17f0e379a40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ffd394-e604-4a71-94b1-b63466b5ff51",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067942b8-978d-44fd-b2c9-857195829745",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa9966be-7d73-453d-8fe4-eff8f7e4efa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece26bd1-e9fd-4913-8006-2ee014f2c678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4977b1bc-a3d9-45dd-8e34-e63efabb0ee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8887045-85fa-4269-a649-4c9700d47c08",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a03910f-7ab7-4641-9ce6-2add2fbd61b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2bafad7-9e85-4f73-8a75-28582d4032d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e17ebef-7884-4794-8a70-62d12d43573e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8422431a-c59b-40e5-b523-7869368d95af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6358ac73-0bbf-4ace-a153-1d106e3cfb07",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f4588c-35ae-43c5-af68-9d1a1129f19a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fcbcba9-5d35-46b9-a5f6-5f17e85e4734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba681965-0a4f-4fe2-a7ff-a907aa8339b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f29b66b-75d2-4d1c-9394-12eff16990eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a7c4b0-f8a8-4d48-8953-48089f49a64e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e3029d-0651-4f58-87a0-240b6dfeddcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07b899c2-b1aa-4193-ba84-f6d49b3cd39c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c1611d-473d-48ed-9446-35f86ee72fed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d0bf14-8353-41b6-a222-1c15ffc84993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d74156-4bf6-444e-aadf-e6c9a8a37cf8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7290ad82-5f8f-49c4-a90e-2b2aa97eec69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecb2295b-a175-4028-a263-6b51eb7e9801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73d3e6f3-908f-4edb-9670-1b554c547f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6acc0a3-3943-46d6-a4ab-10ad0eea0885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce348dd-e6e0-4263-86ba-ede5ecae59f8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66bbdbb0-065e-46da-ba61-152179effc45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0375dd66-acf0-4275-b4a7-4a730eed0e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "341b6e32-539a-4fec-9629-106bce53d96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554cc00d-7d99-4ddd-9b0e-9d079dd46743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb399d1a-d2bd-4f61-b0f1-1ad387f32c6e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab7cabc-747f-4c93-a07d-02db0b5f397f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afb5878-4c5b-4104-b30d-ed228a64da31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af960ce6-e20a-4723-a6ba-545eb904c68b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa048d2a-7a02-4223-8377-977ba089426a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f710d9-8aa6-4f8e-a5ca-a0c221f517ff",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f0a7a31-e91b-4bee-b764-31c00ecda456",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "925c98ad-b338-446f-90b1-71fb5308a181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3ae27b-1ba0-471b-b8ef-0eb3eb0f6d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2407a5c6-b92e-4c0d-94c7-f937fb9ee251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad6be4d-6e39-4100-9381-dd26eddd65a1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c992284-04d7-4d69-b663-64b3612c6dd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc137f52-839c-4748-8941-92001260598e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae53282-898d-4426-b554-3d21ccc97949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c38e24-63a5-4b25-8725-25505123ad47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0576b42-9c7a-433b-a1b6-4142cea2fbe3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aecb17d-0180-4c98-a019-ce35f393e42a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59ac07e2-0cb4-4dfc-ab4a-e042603ba4ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06da1494-a30f-4f49-be1e-aac323c6351e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c418ebe8-b0c5-47df-9526-a76510a79c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b80bf09-ebd8-4573-9227-27dec6bcea11",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b89eb2-5c15-4bbf-bd1e-b74255c29105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08e2b219-14d9-4a05-8bb0-937d63461ca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9999f6-2b47-4fd3-8ab5-67db6bcb9d94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05e39896-6a5b-4a00-8b52-3008ffb98054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab572bf4-3496-4afa-9f49-f53f04fe64f8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "505d3597-2a5a-4d45-ba57-376a3e72b22d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fad1b87-7770-4cc3-9ea9-98145d40b484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e5529d-81bb-44ea-b2ac-279bbd9317e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03e68ee-14bd-4d43-9bee-3ef822f96d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9d19f5-3ca2-4e28-84dd-36ee1bf027c9",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dbd72e0-695f-4633-8d2c-faad52e6a1d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96fc3db4-738c-4cc4-9787-45174bf95281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a708ccf-7079-47f1-b4fc-4ede65aa0717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d69fe3-43c3-43eb-b10d-0c8c11995ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e142b9f5-5582-4ebc-940d-eef7dc9ff869",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b4296e-ad95-4d5e-b5a8-b03c165da503",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b15bad-fe38-49a3-8a43-dffd6d744609"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "044e5814-b9be-4ffc-add9-495d10f8fddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef98b45-4c35-4b6f-af66-c93a7355ba5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de393875-cb73-4bfb-9d6d-07641556f879",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90272e61-5f56-440f-8895-8c1d17b2d589",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7c149e6-adea-4726-805f-910143cd003f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c14bda-d19d-4487-bac7-8f5d955bc87a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce32294-136e-4aea-a467-e07ed7ef054a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8c20ee1-6b56-46f0-a9e7-8f979d6755e2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b869067-7865-4f0f-b244-9a3268466b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e84037f1-7f76-4059-a7c6-2da8517fe382"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5b89b7-9412-4a09-8886-3f8b407118bc",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63c3ac0-3a0e-4fbe-a1de-a7aed1505332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3be2f9b6-0bdf-434f-b565-d9ef81f83dc7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43115ff-77f0-4cce-bf04-62d643899e90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf07ec57-16e7-43f6-883b-f678f600e361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfa9c15-d30d-4bdb-a7d2-4e735d0dfc26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7c7bd6-2708-4bca-beca-2bcb70328880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3a584a-a881-44a9-b380-b7dc34b1b56b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12b8d24-4c5c-4d4c-a098-e47558dcd0e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "635e0312-0c4d-45e2-81f2-4a5354e77348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d1f475-12de-432c-af92-bca0ad686544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f402fe-c5d8-47f9-8f10-581ed6162379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "628ae40c-f24a-4c9a-b45d-e7f9a12d4241",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62e64f4-ac3e-452d-a6b1-ccbd053fbe42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83766467-f779-4d74-8761-1917edac17db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d672dcd-4c50-471b-8902-1cc192acaf16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac86333c-5cb9-4a6f-84da-4e7fd24b6886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c567f52d-3da3-4b52-a081-4486eaed99c7",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f73a3f-823f-42de-8163-c1cc52520f8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "442300cb-e2f9-4879-8e3f-f375a5791586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "594b0e99-c611-443b-9163-5e470e566e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3d15ace-b3d9-4177-933b-ebb89e48c223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb4ea2e-5a4e-45d0-a6a6-9726563e5d58",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4948613-14f3-4d6e-aa9e-2a34543571b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "869cf735-9802-4491-bfd8-e3c04089cce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaac94a5-2843-4946-a9e2-4edf14dc7a8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb088b1d-2ff3-4248-af83-edeba3d40a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e7e315-1e9b-4d5a-ba25-1dd48731a447",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddb5598-fef5-41f5-97de-fc863cf370d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6f4c771-cfa8-494f-9d2e-6229355eeae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd7c7f2-8ad1-40a2-9f58-422ffd823096",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f875cafb-1e28-434f-928f-66ae6a3277c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013efba4-14de-47fc-b345-e303639186bd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761e1d2a-51fb-4110-ae08-a42b21498609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9f5ee41-5322-472d-a566-2a240b1c6b2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30750e61-49d9-48b8-bd3e-a46b093ad4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a292c000-c48f-4318-b88c-f14911d35ec0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7426190-23cf-4b58-95e0-d39567f0dd96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa99a469-05f2-4042-b7ca-9a9baf8ed2ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5aa35a54-ecf6-4e9c-9923-c42648e0e504",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b38a22ce-be00-406f-8c4b-563d5c294afc"
                    }
                  }
                ]
              },
              {
                "id": "e4ef6b31-f739-4b04-bb89-625580783b83",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d8f7bff4-75a6-4c2b-a7aa-2101d8f4383f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4925c092-3a32-4dad-a66c-b546775e1bac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "025c0df8-8159-443e-901e-b594fc1ce49d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13922d5b-42a7-41be-b30f-154f39f24473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "111d5b27-ecda-41bf-890a-310e1c6198b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "899e972a-22b0-42e1-adee-95fc1ef927ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87f104da-d210-472b-8614-b4a2158bd414"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e2ea092-5a2c-4c1b-a007-e42902a1d090",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6948845c-fff1-429e-8b52-e5557f5c2def"
                    }
                  }
                ]
              },
              {
                "id": "6db79e40-066e-4945-a192-a3a7bf4cb06b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b7b70e20-5e38-4e79-8043-daa909de321c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886be789-6ea3-4430-b579-455f5932f651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7993a6c6-3116-4a94-a009-50d84aeda31a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91dcf147-bc94-431b-a5e1-b176323b926e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26de5c00-5fd4-4f22-b0f1-a429ba40fd0e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "acafc1e7-692c-4e30-a1d0-a2f4f14414df",
            "name": "Positive Testing",
            "item": [
              {
                "id": "376f419b-77d8-485a-9939-b1e6c886b72e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed46af4f-1b4b-48a0-af3d-1493cccc2ccb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ad730d2b-e757-4667-9741-0ac67f457e0c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83823e8b-9ec2-4561-b27b-bfa1d67ea981",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b255303b-4937-4f43-a30e-df3d65ca3f85"
                    }
                  }
                ]
              },
              {
                "id": "15d20882-e6dc-4186-991b-7384f48af00e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1ab05f0-d81f-45ed-8505-6dc0db1ab649",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cb1199de-848a-482c-bd69-7e5e144d17c7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9472e36b-904e-4be4-8858-22beb75ab981",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6747a1c-54be-4577-bd40-f2233b841425"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48d669e1-7a5a-4733-a078-28ae90ef91fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3337cae4-281a-4871-ba40-c285b741dcae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6456f26-bd35-4796-9895-dd3520462111",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ff534016-2f0b-4f04-bd1e-14af944e0118"
            }
          }
        ]
      },
      {
        "id": "c97c0159-1d81-4b93-b1ff-baf64caedd13",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "30c3461c-4123-43f3-b28b-012d62f406c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e5cc5bcd-79e2-4f8b-bad4-5ef92b70fb7a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e52c77fd-c907-4b4c-a4c4-f3b527311abc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26819aa-6b25-47d7-b398-7ecd6ec601e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f876b928-73bc-4bbf-a76b-4b6243419185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13483db-3839-4186-976e-917ad4f5cecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ddfe81ee-859c-4f17-85ef-bbd610f5b434"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43c02c85-b435-4047-8166-b7dc330da06c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dea118d2-f2e0-4978-8928-f91b202d899d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "54ff2463-f40a-4d26-acdd-eb5f672ea435",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3845b90a-4c08-401c-9a47-83549d7faa98"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51627ba3-3555-446f-a905-b547b4fd2295",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9efb0b70-01ca-4b48-9250-cbf9aa05078b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aa0a6eb-30c1-42e5-9404-0e4b77d67847",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d8e6ba1-4230-454c-9ce7-b92330addcfe"
            }
          }
        ]
      },
      {
        "id": "47c62c6d-cc1c-43da-9ff0-a85bb88ffb4a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "abace4d3-f7c2-4df6-b7b7-a33e8f47201a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13486cec-bd2a-4410-bf49-dc7c9f30b1d3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96fe32b1-e81b-45b7-8b56-9e66b6fd7c62",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472148ba-db98-432a-8bc9-e50bc7178f6c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dcc41e0-a924-4753-9436-c7cdb3c7016a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3535d748-b979-4b6f-95a4-6059b63dce78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "74ed2213-cf7b-43ca-b09f-4ddc94ce47c0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "716187b4-f8b7-4b6f-a78f-146f1327b713",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae0da2ad-a9f9-4e80-b063-8655bc6206a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9095716-a89d-4242-abfd-8d9b968d14f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c03b374-6858-4a7b-b9e0-c15443f2ff06"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d327636-b5cd-4020-99b6-adde78a2e5f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64797646-d32a-49bc-900a-5f55898322eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cec15a58-5ecd-4141-8322-cf0b11d1c9f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0aad197b-c73c-4ccb-b6be-f19ea92edd74"
            }
          }
        ]
      },
      {
        "id": "50c2df8a-c20e-45d2-b5da-cf61085aa9dd",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "59143915-1157-45ee-978d-f0fbc8487f30",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4217c289-6176-4ee8-99f8-b6de81a1d6ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "65a50d77-b795-4759-96bc-96a0f31456e5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "896d711e-b557-4032-a09f-aab7278b9c85",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a21d81c-c301-472e-9a16-5a5c70662e4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cab4295-7a91-43d5-9c8c-e20d42245dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "672a50ca-b3e9-4145-8108-991a26d38f09"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4091e15a-a9ba-40bf-a969-2d01166b4593",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bc783e48-e18d-4066-a5df-6a70f5188498"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a87a681-a745-4015-a982-819ab7455794",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd1b249d-4c5d-4fdf-a7e1-90e4d85dafa4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d1957e4-38a2-4c8c-94e4-748543ac23c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "269f3f73-cfd1-4d1e-94a2-3b9051295572"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2ad7940-0d08-4c57-8c2a-c50222d69cc3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8b06d5aa-f817-490f-b98d-ed6d523ede8a"
            }
          }
        ]
      },
      {
        "id": "83905857-59fa-445a-9518-45e3dcf2cc3b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8181384f-9ec6-4845-8357-1caf147377f0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "827e3313-fb50-4d1b-b44e-dce14f715731",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "374221be-f121-492d-b350-3b8535ffdf45",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1d0927e-0c9e-4094-bfca-29f4a8dbf3da",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5957d9c-08a2-4cba-949f-602c08041623",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.238095238095234,
      "responseMin": 21,
      "responseMax": 305,
      "responseSd": 27.477820369252314,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716338205996,
      "completed": 1716338228626
    },
    "executions": [
      {
        "id": "756d2cfa-9b90-4c40-b225-18c3e26ac02c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "300627fb-9b74-4a95-af05-fc5c40c2099b",
          "httpRequestId": "0ebc6e5f-604c-4e0e-90a0-a69e906be8f9"
        },
        "item": {
          "id": "756d2cfa-9b90-4c40-b225-18c3e26ac02c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "9b47f420-0a4c-46b4-ba0b-d31e4b0f37ce",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 0
        }
      },
      {
        "id": "54436bad-2552-428d-a9b3-d37d7ae4793b",
        "cursor": {
          "ref": "3eedd1be-8aa1-4f7c-81ac-76e5a6b4637e",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9a994fd7-2fcd-42c5-b333-89788f2b7e55"
        },
        "item": {
          "id": "54436bad-2552-428d-a9b3-d37d7ae4793b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "251d95cf-beaf-4251-9135-582eb2898a21",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "b57349a5-6d9c-4ae4-9b31-b9423b126c6a",
        "cursor": {
          "ref": "db623fdb-3dda-4f95-9541-e8d7d685d92f",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a9b011c1-342f-427c-a6e4-70d01578fede"
        },
        "item": {
          "id": "b57349a5-6d9c-4ae4-9b31-b9423b126c6a",
          "name": "did_json"
        },
        "response": {
          "id": "f39fb35d-45de-48b4-af44-888a7d5a1b52",
          "status": "OK",
          "code": 200,
          "responseTime": 305,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a295f759-a6f1-42e7-85fd-54ee79c6f002",
        "cursor": {
          "ref": "7ca9c9a6-953f-4837-9fa7-140e184ccce4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8b19425e-8cb9-46c3-b256-277be359109e"
        },
        "item": {
          "id": "a295f759-a6f1-42e7-85fd-54ee79c6f002",
          "name": "did:invalid"
        },
        "response": {
          "id": "4bde4a56-592d-4575-b6ad-51d7241d9d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a295f759-a6f1-42e7-85fd-54ee79c6f002",
        "cursor": {
          "ref": "7ca9c9a6-953f-4837-9fa7-140e184ccce4",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8b19425e-8cb9-46c3-b256-277be359109e"
        },
        "item": {
          "id": "a295f759-a6f1-42e7-85fd-54ee79c6f002",
          "name": "did:invalid"
        },
        "response": {
          "id": "4bde4a56-592d-4575-b6ad-51d7241d9d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26d65cc-79fa-4855-8f12-1b76cac8059e",
        "cursor": {
          "ref": "000ca65f-6ebb-4cb0-8a3a-cb07f808ce25",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c1253134-4acd-453c-9d28-5b59f0bc4eb3"
        },
        "item": {
          "id": "d26d65cc-79fa-4855-8f12-1b76cac8059e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1a03004c-1087-4947-b133-5ef859c235ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 182,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82289527-7775-420c-8f45-d4b7e4dd021a",
        "cursor": {
          "ref": "54f33983-cfbd-4aca-ad57-fac03ced4883",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4dcbcc6e-d1a8-497d-858d-910672139469"
        },
        "item": {
          "id": "82289527-7775-420c-8f45-d4b7e4dd021a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8581778f-ba38-4926-b7af-f76967b60e64",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7abc7c-c0fb-4400-a0fc-4382577651ea",
        "cursor": {
          "ref": "3f9a44f0-00c5-4256-8c2e-f5af7d96441c",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c8596030-cec1-4ada-aad1-f12e80dccba3"
        },
        "item": {
          "id": "1d7abc7c-c0fb-4400-a0fc-4382577651ea",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "72364d1d-99a5-4ca4-ae57-cb618753c82f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cb1f64-03b0-43fb-bc2b-af660faec132",
        "cursor": {
          "ref": "22564c24-9739-49ae-be35-b6b4828f54c1",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d880fcaf-2070-4d2d-b7aa-9e4e4d4d033c"
        },
        "item": {
          "id": "a4cb1f64-03b0-43fb-bc2b-af660faec132",
          "name": "identifiers"
        },
        "response": {
          "id": "18813904-7bc9-458a-a3a3-611768408bc4",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcb52b4-d7e3-4f62-8569-46b8e4de9580",
        "cursor": {
          "ref": "140b5415-46c3-4096-a90a-6259a0df786d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b09778fc-6cff-4f89-8442-d81bbd64a08e"
        },
        "item": {
          "id": "bdcb52b4-d7e3-4f62-8569-46b8e4de9580",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9ac2d9f5-02ac-4c10-b71c-bff7660dca50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d96613-2d6e-4f40-b3ee-0bd48f56bf06",
        "cursor": {
          "ref": "af4d3a7e-0ac3-4d3c-819b-0afa3ec56e54",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "73140727-f1a6-4a4a-a7eb-d329d2046a06"
        },
        "item": {
          "id": "28d96613-2d6e-4f40-b3ee-0bd48f56bf06",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "92ba9862-abb5-40c7-a7d6-11038dfaa475",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb973ec-45bf-47be-b276-74b526c63253",
        "cursor": {
          "ref": "b7c02eea-0043-4bda-8be1-1c0c9095b45c",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "022397fb-cb6d-4ef7-8440-ba4d9fcb19fb"
        },
        "item": {
          "id": "3fb973ec-45bf-47be-b276-74b526c63253",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "f8e42976-e57d-4a5a-82c3-e36a094a9a4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258d1090-5daa-472e-bd95-39f7684843c7",
        "cursor": {
          "ref": "82169c76-fe99-47cd-b8a3-79b254832e40",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "22af9c70-2c10-453b-a125-2d8bd49a05f6"
        },
        "item": {
          "id": "258d1090-5daa-472e-bd95-39f7684843c7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8486af6b-199f-4759-82bf-fd443de2e607",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e688bcd-7964-434c-9eae-78e158763e39",
        "cursor": {
          "ref": "fdc95a44-52aa-449a-a5e5-0098ccc61c80",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "57885ec2-65f3-4dc9-9395-88f203811035"
        },
        "item": {
          "id": "5e688bcd-7964-434c-9eae-78e158763e39",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "61e949ac-b688-4ae5-a27b-a817067bdc19",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078b5507-d772-45d8-82aa-155aba61c6e5",
        "cursor": {
          "ref": "95ffc8cd-37d7-458d-905b-66c1e9835b8d",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "497004de-a59b-4ce6-ad78-bc6cc1911f68"
        },
        "item": {
          "id": "078b5507-d772-45d8-82aa-155aba61c6e5",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7efb1c6b-393d-430e-8a48-977316ea6c6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91b8551-42c5-4a0a-80be-a590de2968b9",
        "cursor": {
          "ref": "fb684612-c477-4312-b82d-cd96a98ea6ae",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "854a1e2a-b3f3-4325-ac6d-7828fa7d1dd6"
        },
        "item": {
          "id": "f91b8551-42c5-4a0a-80be-a590de2968b9",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4fdf4c6c-6d42-487b-a0bc-c1034275d841",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b4b1ba-10e0-4d25-8943-befd5cb0b086",
        "cursor": {
          "ref": "423cec4a-05cc-44a9-8a58-ce6ee876e482",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fa3b6165-14b2-44ff-a2c0-19fcd410de1d"
        },
        "item": {
          "id": "b1b4b1ba-10e0-4d25-8943-befd5cb0b086",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "774893e2-ed03-459d-95d8-1b9079330cc8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50362af-06dc-4ad0-9469-1d202d5b5d74",
        "cursor": {
          "ref": "0da427c4-2185-4d6e-b97e-40c30cf281a0",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "4cb58dec-2a38-4ee1-bbf2-019ea649f3f0"
        },
        "item": {
          "id": "c50362af-06dc-4ad0-9469-1d202d5b5d74",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "59a0f4f9-f6d9-4950-9270-b24bd85e7378",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3cc5ce0-6c16-456c-bc86-739ba71ff7bc",
        "cursor": {
          "ref": "d400cd80-aa61-4800-ba67-3dcebd491398",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "cdd04e33-e2e3-4de3-926c-2c233d5b4853"
        },
        "item": {
          "id": "b3cc5ce0-6c16-456c-bc86-739ba71ff7bc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e8a9d995-766b-43a1-9d3e-aa6cf7f06cb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1cc56c-6949-4e7e-916f-8eccb22a3fe0",
        "cursor": {
          "ref": "5fcedce4-5b06-4c3e-b53f-08a65c0ce0da",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "469e6fe6-928a-4746-b7ff-3f628ae0cf8a"
        },
        "item": {
          "id": "4e1cc56c-6949-4e7e-916f-8eccb22a3fe0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "46e07788-5dfc-4121-8fb4-038dd043aa49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9994d8-9696-4f77-80de-c3974117bbed",
        "cursor": {
          "ref": "4e757df2-817b-4260-a509-f60c3fa48263",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "08ea0513-9864-4f26-9039-5e9a46575804"
        },
        "item": {
          "id": "ca9994d8-9696-4f77-80de-c3974117bbed",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "172ba40c-e147-4962-bfbe-c660d0d6dd26",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3330e4c-4cba-4555-8067-a9371287b497",
        "cursor": {
          "ref": "958a9ed6-e201-47ef-b156-02468dca5d88",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "8e4d2fad-d74b-4d34-930e-3db67b89d44b"
        },
        "item": {
          "id": "d3330e4c-4cba-4555-8067-a9371287b497",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "2c20357a-24ca-45fa-97e2-b138d866a755",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe507c23-45dd-478c-9a5b-d055c6caab76",
        "cursor": {
          "ref": "ae5427a1-3d7b-4400-aa3a-162963c32184",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a0089802-f49a-4da9-af3a-57434b0fc9f7"
        },
        "item": {
          "id": "fe507c23-45dd-478c-9a5b-d055c6caab76",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "40654ae1-5740-4b47-ae49-59e567a683c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa235de-f198-434a-891b-9fda3e042e9b",
        "cursor": {
          "ref": "1b871737-1f07-4b0a-986a-ae186940df19",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "567611a1-fe25-4b6a-be40-35a5599e0301"
        },
        "item": {
          "id": "7fa235de-f198-434a-891b-9fda3e042e9b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d1e189fd-d8a4-4eac-9908-0b980d2ec8c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d1135e-d1f4-40fc-9dee-477907f4b57e",
        "cursor": {
          "ref": "cfcf8965-ae07-464b-bec3-e80af103d365",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "47827928-8516-46d2-ba7a-b30ba72e5484"
        },
        "item": {
          "id": "82d1135e-d1f4-40fc-9dee-477907f4b57e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "613dfea1-34d3-48d0-a0d7-163797479b40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db63fd2a-eb62-44d1-9c53-943f3f52ce71",
        "cursor": {
          "ref": "ec95117b-bd81-4f7d-88d0-14dff2544d25",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c1023b19-93dc-42aa-aa29-65efa7762e51"
        },
        "item": {
          "id": "db63fd2a-eb62-44d1-9c53-943f3f52ce71",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "19bd22d6-bde1-4b50-a12c-0b0757ab7e0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b43a9c-9d50-4c2b-b3bc-69619468e9f7",
        "cursor": {
          "ref": "6000bc89-d927-4414-999c-df7c1d5b89f3",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cb24a438-8453-406a-a051-d746459186c9"
        },
        "item": {
          "id": "05b43a9c-9d50-4c2b-b3bc-69619468e9f7",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9214ed39-e633-412b-a562-1076f29f916c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2d3c6c-41a5-4a8c-beb5-d5a250a6cc3d",
        "cursor": {
          "ref": "a4291bc6-e997-47b4-8ac0-2ee8d59f201d",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0655940e-7fbf-4214-b595-74d7c996ed45"
        },
        "item": {
          "id": "0b2d3c6c-41a5-4a8c-beb5-d5a250a6cc3d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "66636ff4-6a64-4550-98dc-01f39bb3a889",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8001d56f-599b-48bd-9570-b9dadb8a518f",
        "cursor": {
          "ref": "bf2b9d55-450e-4f7a-829d-b67ef2c77551",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5e4517ca-fb92-435a-88e2-0bb9c2060623"
        },
        "item": {
          "id": "8001d56f-599b-48bd-9570-b9dadb8a518f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5d04e3ca-6993-46ce-b069-4c3708460d61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff50f1aa-dcf8-48d4-9f70-6af91d9bb4b5",
        "cursor": {
          "ref": "02e7e899-2638-4270-affc-eaf7c6f373db",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ac32ae7e-93a7-4850-a2eb-081eea595675"
        },
        "item": {
          "id": "ff50f1aa-dcf8-48d4-9f70-6af91d9bb4b5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0142a892-761f-479e-ac0f-b646058c07ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb897c2-0c8c-4fc4-a22a-2a2ed0d826d9",
        "cursor": {
          "ref": "df683716-97be-4805-b7e1-9d22ea8fd68b",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "85d3e7aa-0bd5-4f02-964a-5d5bd426f599"
        },
        "item": {
          "id": "beb897c2-0c8c-4fc4-a22a-2a2ed0d826d9",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e6e8ea81-3060-4236-963d-188989fe2cbc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6854e248-0504-490b-a05e-3f30bb81bbc8",
        "cursor": {
          "ref": "29d91e2b-daa2-44ff-a8b1-9bbf54cfc4ff",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "6f754a9e-dbd2-4f28-8f00-c196d5fcbb0b"
        },
        "item": {
          "id": "6854e248-0504-490b-a05e-3f30bb81bbc8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "429e1d7d-5f81-40cb-bde9-e45b5b29190b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7b84df-1cd6-4e0e-b066-fd834a24f7ef",
        "cursor": {
          "ref": "73c0b18e-0c73-40e6-95d3-e20135180f4e",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "aac43678-f19f-4bf4-a9be-7209eeca9b0d"
        },
        "item": {
          "id": "9e7b84df-1cd6-4e0e-b066-fd834a24f7ef",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f4306f8c-6fa7-4849-be75-aaf6bf822cec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359d2898-129d-4dba-ad7f-3e3722a6b237",
        "cursor": {
          "ref": "fd0b7402-3333-4b79-b472-183cb05e6ac4",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "73e8309e-27c2-45a7-8621-a4a8bc1b1b43"
        },
        "item": {
          "id": "359d2898-129d-4dba-ad7f-3e3722a6b237",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "990e5d9f-eb99-41c5-9eb9-fe05835bb8cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b09544-4a2e-4aab-a1d9-1ecf15dddd6c",
        "cursor": {
          "ref": "e82319a7-076b-402b-9461-2bfe0bf411ed",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ef970ba3-8d8f-492c-8253-cd342940a7b3"
        },
        "item": {
          "id": "53b09544-4a2e-4aab-a1d9-1ecf15dddd6c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "96ff25c3-2af5-4b88-b0f5-66ca808e4892",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a91c39c-2ff7-4a44-a604-0b824621ec2f",
        "cursor": {
          "ref": "078f3967-07e7-4d72-9079-4a2bcce95b69",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "df5e8a68-5da6-427b-9f51-d9e7fb8a4572"
        },
        "item": {
          "id": "5a91c39c-2ff7-4a44-a604-0b824621ec2f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "91d83656-23e9-4d50-8eb7-65d20664b554",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced0a333-f1e0-47fc-b6d6-d786f5507068",
        "cursor": {
          "ref": "cc501c00-6472-4d0d-a770-c497bb63c45b",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0b24de7d-2289-4760-b1e2-fd46fcf79992"
        },
        "item": {
          "id": "ced0a333-f1e0-47fc-b6d6-d786f5507068",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ff1b8f11-f40b-4b25-8729-2e14a593c654",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daebe0d7-4fb1-4da5-bf71-ae5453232322",
        "cursor": {
          "ref": "f9d89b30-f036-43ca-9b4f-0606c79bb511",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "718ec7e5-3482-4746-b39e-2e3b00bdd4da"
        },
        "item": {
          "id": "daebe0d7-4fb1-4da5-bf71-ae5453232322",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "86093cce-5c84-47c2-827c-73e61475a306",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbdfec0b-9cd3-46ec-b3e3-d2c0469a9b8f",
        "cursor": {
          "ref": "fd7a473b-75f6-44d2-a749-8e00d0455920",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0e12094d-9d0b-4505-a8d8-b60b9a4f37f2"
        },
        "item": {
          "id": "dbdfec0b-9cd3-46ec-b3e3-d2c0469a9b8f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fa0518fc-62c9-4485-bcc6-b8f29381f9b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c6faecd-8c76-4771-9760-55037138f356",
        "cursor": {
          "ref": "39348823-19d1-46a2-9a97-6241810e0a7a",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9a1c1e54-a763-46e8-acac-67cce7dbb675"
        },
        "item": {
          "id": "3c6faecd-8c76-4771-9760-55037138f356",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "bcbe0745-0927-43c3-8e0a-1492c0215f0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad323c8-25f8-45de-87f5-4af3cbd0763c",
        "cursor": {
          "ref": "2a23289c-0831-49a6-9614-ef1ea1cf0cc5",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "db8b0990-e1c5-46ac-9873-b7030a62881f"
        },
        "item": {
          "id": "6ad323c8-25f8-45de-87f5-4af3cbd0763c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "86aea42b-e2a2-4966-8de3-a6e39f18bc6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e229c881-33be-4189-8ba6-b9a1e34c0588",
        "cursor": {
          "ref": "e9d6998e-7011-4b63-bd80-009f6fd1de60",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "97c491b5-e244-4ebf-8955-c3d3e7ddb645"
        },
        "item": {
          "id": "e229c881-33be-4189-8ba6-b9a1e34c0588",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ac2dd2f2-3d34-41d7-9942-872c0bea76d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98fa3736-189b-4c2b-aa8b-cda74ab010e3",
        "cursor": {
          "ref": "40ee6de5-3993-4703-8147-46b23a55fb9b",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "62f61c6e-670a-44df-a383-b1e702867333"
        },
        "item": {
          "id": "98fa3736-189b-4c2b-aa8b-cda74ab010e3",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "7164526e-7c85-46d2-8cea-eb2ca2b90738",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a67f0731-cd3a-44eb-b752-6687c4246279",
        "cursor": {
          "ref": "ac661981-ec46-448b-830e-94dd6e5ce2a8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7a70dc91-7a9c-468a-87bc-7d6f051b1635"
        },
        "item": {
          "id": "a67f0731-cd3a-44eb-b752-6687c4246279",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "01a2db7f-1ddc-4949-bc58-943773eb89f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03b6a5f7-0694-4e7e-8852-5c4c0e4d186f",
        "cursor": {
          "ref": "24b6689b-de94-4d2c-abe4-ab8116fc800f",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "079470dd-1198-4c7b-a47e-586a21094626"
        },
        "item": {
          "id": "03b6a5f7-0694-4e7e-8852-5c4c0e4d186f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "04607fdf-cda2-4efe-b786-7617da634f0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c438cdc-c993-47c2-8fc7-d8d9c19a72dc",
        "cursor": {
          "ref": "2b44c269-c71f-44d1-acc4-b44128e9e7c8",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "9f25d2a5-5abd-4717-aa98-7b1873f235f7"
        },
        "item": {
          "id": "9c438cdc-c993-47c2-8fc7-d8d9c19a72dc",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "83d4d30c-29bf-40f6-ad89-bca0646befbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a852b35c-8352-412f-8caf-8d3f48d6df2a",
        "cursor": {
          "ref": "80e0c8aa-bb13-4da6-8755-ce431e325e44",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "22bc09c4-0d47-4f14-ba6d-97d35a4e9a3c"
        },
        "item": {
          "id": "a852b35c-8352-412f-8caf-8d3f48d6df2a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "27cca8b5-49ab-49ec-9a7a-08e7b59b17ee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b92380-640c-498a-8aef-ddbb4ad56d5d",
        "cursor": {
          "ref": "81585557-1818-4473-9ac2-11c6a7a65c0d",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "43acb912-96e1-4d88-9f41-0b5816b08cfa"
        },
        "item": {
          "id": "74b92380-640c-498a-8aef-ddbb4ad56d5d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b322c4c2-62a5-42ee-bd98-a99692f61d04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60947d97-ea65-48a2-abfc-c4cadd21b532",
        "cursor": {
          "ref": "f8865406-0325-4484-910f-336372c560c7",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "58182cdf-3547-43b5-a082-2a0be470f904"
        },
        "item": {
          "id": "60947d97-ea65-48a2-abfc-c4cadd21b532",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "e2f05dcf-e70c-46e0-9113-433354f1aba6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a00cf743-737a-4d2f-8fca-d5929f03026d",
        "cursor": {
          "ref": "40b91d1d-3e32-448c-ae6d-fb26ab92d9e0",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "639e5896-5bfd-4b20-9cfa-76065fb76bb4"
        },
        "item": {
          "id": "a00cf743-737a-4d2f-8fca-d5929f03026d",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d651cc9c-0e31-4d18-b5b9-be75171aff44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f6b1ad-4000-4604-848f-746ee31ea018",
        "cursor": {
          "ref": "511f68f9-dc62-4899-ae8b-c159f9812b3c",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9a98fc95-d3cd-4427-b3a8-669faf503f70"
        },
        "item": {
          "id": "53f6b1ad-4000-4604-848f-746ee31ea018",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6fbabe0b-729b-4fdd-b0d3-3f3940060202",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac38dcaa-29ef-499e-9b73-7646fcc54b4f",
        "cursor": {
          "ref": "6f471d8b-4bc6-4f91-89dd-25518e5cb573",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "056db4bf-f1d9-4d82-99c4-d938f76bb4a3"
        },
        "item": {
          "id": "ac38dcaa-29ef-499e-9b73-7646fcc54b4f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4e88889b-f11a-4f51-8575-2b595983c38a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78735002-b3f8-4e7e-bcfb-58e9af09636b",
        "cursor": {
          "ref": "75068a27-7bf1-4c3b-a8df-1416f8dd7df8",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "00621116-9dd8-4854-b830-d36e6f261848"
        },
        "item": {
          "id": "78735002-b3f8-4e7e-bcfb-58e9af09636b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b9a06278-4f25-4f0a-bf49-1df69e932955",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a11fcb-06c6-4e3d-8e6e-8b87b5535d78",
        "cursor": {
          "ref": "c0bfc067-ba9f-4e74-9798-75989201c1ae",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c25356d3-a290-46bc-a3bc-403c490faa0d"
        },
        "item": {
          "id": "03a11fcb-06c6-4e3d-8e6e-8b87b5535d78",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a1549681-3929-4ef0-a35f-6db520a23740",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67790eca-795a-49f1-8165-2d12cb1564ff",
        "cursor": {
          "ref": "559ef4c9-b5b9-4417-b3d4-bb6717b927d4",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ccc8d78e-1b64-4c86-8f6c-8bbcdd931377"
        },
        "item": {
          "id": "67790eca-795a-49f1-8165-2d12cb1564ff",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cb80f2e6-6933-4fdf-9e90-26a5f6e16565",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1846fa12-c4f0-4c8d-a4c1-0a34993ab4b9",
        "cursor": {
          "ref": "cb50e9ad-609d-4289-b797-c8f5ad789fa0",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "de0b4f55-9592-44b2-b6cf-0254d7d17f6f"
        },
        "item": {
          "id": "1846fa12-c4f0-4c8d-a4c1-0a34993ab4b9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8f00301d-7f20-4758-b0d6-15824f440475",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864a9b7b-302b-4c14-93ce-b94c4a8e2058",
        "cursor": {
          "ref": "9ed18f4d-cdc2-4e7e-8548-d942a12ada4b",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f459d6c0-71dc-4096-a4a1-5c783f069da2"
        },
        "item": {
          "id": "864a9b7b-302b-4c14-93ce-b94c4a8e2058",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "644faf4b-1531-4ffb-b107-c06adbb99969",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88182223-e96a-46da-941e-16b4299d3b38",
        "cursor": {
          "ref": "e71e39f1-81f0-45d1-a656-c5c7c356fa90",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a173a526-b531-4f8d-a523-eb5a63e3dbe5"
        },
        "item": {
          "id": "88182223-e96a-46da-941e-16b4299d3b38",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e2eb1692-268c-4011-a987-a04d31aa3a7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf8c70c-5119-485b-a80b-a1276db18a34",
        "cursor": {
          "ref": "48e26f1f-5783-4a84-8d78-3001f4cbda9f",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0b8b9536-d9ac-4404-be4a-9ff042b5ca8c"
        },
        "item": {
          "id": "bcf8c70c-5119-485b-a80b-a1276db18a34",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "08700bf9-4477-4e22-9e05-2ade8b86d4f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c33a11-baaf-47c5-9189-ce816896f4da",
        "cursor": {
          "ref": "3355abc2-1951-46e6-84af-e43174536070",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "59af1548-e949-4aed-a9c3-f5918deed92b"
        },
        "item": {
          "id": "34c33a11-baaf-47c5-9189-ce816896f4da",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "85d682a2-f9e9-46fb-902f-a7ebd4d4eb8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f376e7-3bd6-4024-aaac-bd3675f1ce45",
        "cursor": {
          "ref": "65455e1e-b0e7-48df-a22e-e4584bb1e32f",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4ac4c956-46f4-4996-97db-69ebf297ba40"
        },
        "item": {
          "id": "50f376e7-3bd6-4024-aaac-bd3675f1ce45",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4c5b44a6-719d-4563-b421-eed95bd5c735",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583ed44b-d096-43d2-9061-e68fe43edc36",
        "cursor": {
          "ref": "32535096-ec72-435f-aaea-5dc40b553b40",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "127078b4-5c8c-4367-8f8f-ec1e5c1c2a1c"
        },
        "item": {
          "id": "583ed44b-d096-43d2-9061-e68fe43edc36",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e9f42558-e1ef-4b38-9948-76bcd2896a64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b8ec16-a348-47e5-8a6d-58bd74ae2c2c",
        "cursor": {
          "ref": "25fe89fa-d78e-4d82-ba3d-bb3fdc16b421",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "449cc991-fdbf-42bd-b036-bc7ea12998d4"
        },
        "item": {
          "id": "b9b8ec16-a348-47e5-8a6d-58bd74ae2c2c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "91f2de5d-100c-43e3-bcf5-5129680bb7a4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bfb272f-5498-456d-8df2-519970a40c90",
        "cursor": {
          "ref": "4b7cb13d-a505-4913-88c2-c4681c840259",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d64fe165-1a0e-4d6d-a495-b92d16082364"
        },
        "item": {
          "id": "8bfb272f-5498-456d-8df2-519970a40c90",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4b2874a8-990c-4571-ba6b-2302ae39c3c0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ba7f202-261a-4320-bf3b-a912fd6814b8",
        "cursor": {
          "ref": "4b7ed447-e8a3-41cf-a4c1-ac7e98256429",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "942b1315-eab8-45c5-9fe1-bb9897ed4dfe"
        },
        "item": {
          "id": "6ba7f202-261a-4320-bf3b-a912fd6814b8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "42f1bc11-9483-4f08-8e57-57eb855cafd1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31bb67de-9ded-4119-9f68-0f499abe7244",
        "cursor": {
          "ref": "330a36a2-f479-4dcf-8008-0f22f65fe692",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ab40cf70-a94d-4023-abb8-a9cde3afa76b"
        },
        "item": {
          "id": "31bb67de-9ded-4119-9f68-0f499abe7244",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "088b22ec-8d66-4126-b105-cf46d3269a03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9779455-ba94-4e63-b304-56f429be065d",
        "cursor": {
          "ref": "7a5bf23e-fe3a-43aa-b682-3ef470512cfc",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "23d8d1e5-022c-4cbd-8a30-5f4804d80e5f"
        },
        "item": {
          "id": "e9779455-ba94-4e63-b304-56f429be065d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d3c3a27d-8f59-4cdd-b3d2-9c053f176253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7d4683-f154-4f7e-81cf-a2322e438a77",
        "cursor": {
          "ref": "c55d1cca-feae-4d2e-afcb-24c01278fd32",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "405f03a3-f24e-4c9f-b4f7-cd497d4d27fd"
        },
        "item": {
          "id": "5b7d4683-f154-4f7e-81cf-a2322e438a77",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d1474d37-bf49-4116-ad93-1e3f1bb7eaba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61fe483e-fd35-41a7-a485-fde190815a74",
        "cursor": {
          "ref": "7660c874-8d69-4913-a125-c3fa3cdb845a",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6fd8b19a-00a5-44f4-8be9-eb17a178a156"
        },
        "item": {
          "id": "61fe483e-fd35-41a7-a485-fde190815a74",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9e908eee-0a11-466f-a1b4-16217cd42dff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b8de94-6f82-4f81-a91c-83b03236f3e1",
        "cursor": {
          "ref": "5f90aa6c-97b3-40ae-8edd-f5f54785117d",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "764532e7-1cb7-465a-8f16-2e0a320a9256"
        },
        "item": {
          "id": "24b8de94-6f82-4f81-a91c-83b03236f3e1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "de7e8cc4-9415-4d1e-96e6-1579d3658787",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163853c1-78de-4e6e-9a12-6f55e1fd4bbb",
        "cursor": {
          "ref": "af0f39a5-4f73-419d-93c2-d17b66890c5d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c7da43c2-d3d8-4bf6-bc6b-81fe3d803d24"
        },
        "item": {
          "id": "163853c1-78de-4e6e-9a12-6f55e1fd4bbb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4de05e66-6370-4e38-8cfc-2ec8eb84ef31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d61999-42a2-4b80-ae5f-f3f18ee28ed2",
        "cursor": {
          "ref": "bd98f3cd-9dc5-47ca-baaf-5f3402fbbb06",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ee95a445-97eb-4df1-b61b-2049b14c1061"
        },
        "item": {
          "id": "58d61999-42a2-4b80-ae5f-f3f18ee28ed2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1b0b310f-2a8c-4db6-9d9b-ccf093f3f2f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552b821d-e0fb-4fa6-99f1-946d1aef706e",
        "cursor": {
          "ref": "5e3e97e9-8f89-420d-bcd8-2b02950f3077",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2fa20b33-a4fc-4e31-a65b-80fb34de634d"
        },
        "item": {
          "id": "552b821d-e0fb-4fa6-99f1-946d1aef706e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "eb04ab33-8057-4baf-8914-a420ea7b50e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8d4613-8700-4493-ac0e-d86744abf7b9",
        "cursor": {
          "ref": "cf1ac613-7c36-4794-83ec-75438dfb2c37",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "025d82b2-d52c-4f2b-a56a-9c2e19e1bceb"
        },
        "item": {
          "id": "3d8d4613-8700-4493-ac0e-d86744abf7b9",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "6f3bec88-493a-4b65-885e-f098238964f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6603fe48-4d45-4119-b634-e010e5141e5d",
        "cursor": {
          "ref": "11963045-c14d-46a6-b0df-41721572e81e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ad114e76-71cb-4e0c-b5fe-61160abeba43"
        },
        "item": {
          "id": "6603fe48-4d45-4119-b634-e010e5141e5d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a01973b4-cf6a-4127-938f-028085f53361",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2b4361-476d-4464-9ae5-d7aec9f4ea7b",
        "cursor": {
          "ref": "05b534a5-3da6-48e3-bc1e-2b21e230cba2",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "07867e2e-420a-4be4-89ba-d58d46ab4bf3"
        },
        "item": {
          "id": "ff2b4361-476d-4464-9ae5-d7aec9f4ea7b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "815847ec-2806-4d68-ad57-7beddf21679c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63908607-c889-420a-8058-924c76ae0265",
        "cursor": {
          "ref": "50cbbcd7-9cbd-45c9-bca8-a3849bdfc872",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "da010c0c-9886-4139-bb11-3169ef36cd4c"
        },
        "item": {
          "id": "63908607-c889-420a-8058-924c76ae0265",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "145ca290-249b-49c8-a1e2-16d9c0436eb3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f6e2382-277c-4a25-ba07-7c20cbb35cb0",
        "cursor": {
          "ref": "c180297d-c725-4619-a9ff-7678d4d0122d",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "0bf046de-04f3-40f6-8ac0-02dc9953c1c0"
        },
        "item": {
          "id": "1f6e2382-277c-4a25-ba07-7c20cbb35cb0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c53ea28c-423f-4a21-80fa-4f68ddc66012",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd9b2dd-35e1-4610-8b89-9a5f252ff9cb",
        "cursor": {
          "ref": "5440634a-2a67-43ea-b0d1-18679acea234",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "91c1bea5-90a9-442d-843b-9a12ad5dd233"
        },
        "item": {
          "id": "9bd9b2dd-35e1-4610-8b89-9a5f252ff9cb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "38bf6d7f-e529-44e6-bf28-83597547d8be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a9b991-757e-40fd-a55e-fd387fc8bcff",
        "cursor": {
          "ref": "0dc39205-7a68-46b0-b37c-06c93c235563",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e877a837-4360-489b-a21b-aa882be3bcdd"
        },
        "item": {
          "id": "c3a9b991-757e-40fd-a55e-fd387fc8bcff",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c4d6084b-a380-4456-a58f-a1f5a5459388",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdcaa7c-d8c6-4fda-8bdd-5295c92fe424",
        "cursor": {
          "ref": "18da7f59-ff6c-425c-9ef8-bd54a56602b4",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "be3d5354-d3e6-4c06-8516-e78608929540"
        },
        "item": {
          "id": "cfdcaa7c-d8c6-4fda-8bdd-5295c92fe424",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "96abf2c5-47d4-4575-915e-86d94899e6dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75b8c97-e014-4955-91ff-dc1f5f9dfe56",
        "cursor": {
          "ref": "802610e6-3623-4208-9b84-7bab59ce101b",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "25f66ed2-ee85-479b-a3a9-e378d907c653"
        },
        "item": {
          "id": "c75b8c97-e014-4955-91ff-dc1f5f9dfe56",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b7a845bc-4ce1-4460-be8a-0e2f087f55c1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2c0057-2b4d-4ce9-b95c-31680cdb580a",
        "cursor": {
          "ref": "1291529c-1b37-4b4f-b138-5993c5eb307f",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "578fe140-9ef7-4038-8710-d53b0d9cbd57"
        },
        "item": {
          "id": "ec2c0057-2b4d-4ce9-b95c-31680cdb580a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ecda0063-edcd-41df-b6ff-cb21a36a1561",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba009d2-d4e3-4477-99b0-786d55433acb",
        "cursor": {
          "ref": "3abbf14b-ccfd-4e64-b95e-59cac7173cf1",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f49fb08a-e2e1-4dd6-82dc-0802a5594c00"
        },
        "item": {
          "id": "3ba009d2-d4e3-4477-99b0-786d55433acb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f8505ea4-0cd4-435a-8b61-2f357a4857c5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91486b3-90f7-4f81-b634-91947ded9e6d",
        "cursor": {
          "ref": "b3d03423-0a14-4d69-9584-598232245253",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7bf420df-73a1-4d7b-a7a9-d5843b8dff31"
        },
        "item": {
          "id": "b91486b3-90f7-4f81-b634-91947ded9e6d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "11b8adba-e87e-4fbe-b8ce-c840f8e872fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69130ee8-40a4-475d-a1d3-daf7fd54c124",
        "cursor": {
          "ref": "7bf169e2-a4fb-4212-ac56-125cae3c9c45",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d9ae462b-7c8f-4a4a-8a92-2c4a8f3aff3c"
        },
        "item": {
          "id": "69130ee8-40a4-475d-a1d3-daf7fd54c124",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1c0094f7-a36f-4c9f-8ede-a2bf5b0df574",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b9ce39-75df-4ee2-9856-a97685c1008e",
        "cursor": {
          "ref": "44010b75-55de-4c0e-b872-64b2a7e94807",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d07221c7-cec6-4e74-b80e-fb9c1f5743ac"
        },
        "item": {
          "id": "95b9ce39-75df-4ee2-9856-a97685c1008e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "169f56e8-26d8-4f0c-ad48-a7f75906f308",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d4cf55-8dd9-4326-a63d-903e7e2325bd",
        "cursor": {
          "ref": "d18e7f5b-112d-44d7-bad4-be50d32efb13",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8a689231-7fda-4da9-aec4-fda2360ae7ba"
        },
        "item": {
          "id": "98d4cf55-8dd9-4326-a63d-903e7e2325bd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "efbae6e0-4d41-48ff-aee3-cbc9fa6f65cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f923fbb-0f7f-4646-ace2-0e3ebb25884f",
        "cursor": {
          "ref": "89ceb327-1231-46ad-9321-202e5d4e4998",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "503490a5-6c41-48b7-825d-beba670a2e35"
        },
        "item": {
          "id": "5f923fbb-0f7f-4646-ace2-0e3ebb25884f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "83595636-7a78-48e4-9fb7-1f6bcd391eaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68ca885-3de9-41c1-9dc0-59aa78d87bcd",
        "cursor": {
          "ref": "6107a260-5778-4772-9e33-99aef6da3f08",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "61fae4ce-b579-48c1-bce6-1bff87d07cdc"
        },
        "item": {
          "id": "a68ca885-3de9-41c1-9dc0-59aa78d87bcd",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0124f56a-4151-41c3-ae81-370cd5f5ffc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4d143c-076b-4c85-9c8c-1f26f0e8c737",
        "cursor": {
          "ref": "03dd097e-9288-4662-8d83-cc9bd5d83a9a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f1ed113c-8acf-42f7-9a51-a451de203f06"
        },
        "item": {
          "id": "df4d143c-076b-4c85-9c8c-1f26f0e8c737",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a81912c9-d672-4eea-9494-d823c8c9b250",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ce8727-34a0-461b-a10e-5be6e308f046",
        "cursor": {
          "ref": "bc1248fb-1e38-4f2e-92d0-0914c657f6f5",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d508711e-a7bb-4d9a-be71-b61e30acbd0a"
        },
        "item": {
          "id": "d8ce8727-34a0-461b-a10e-5be6e308f046",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "47d4a323-8a46-41d4-aaaa-bd372c71983c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b2a94e-c864-4ab3-a617-758924275290",
        "cursor": {
          "ref": "72fe18c9-7ce6-4daa-8303-c41a70352158",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c35ebb59-04a4-4ee6-8c0c-01a91de97eba"
        },
        "item": {
          "id": "71b2a94e-c864-4ab3-a617-758924275290",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "c4a29e0b-6a45-4f34-b6cf-b770769545b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "917d5f62-5a67-4123-aed5-6d73c5d25e1c",
        "cursor": {
          "ref": "bde779d2-be3a-44cb-abb3-271af12ee42b",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6182ceb2-1e07-4978-baf9-44104b7f38e1"
        },
        "item": {
          "id": "917d5f62-5a67-4123-aed5-6d73c5d25e1c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b77bb3d3-8cf9-4761-9a23-01339c01dda5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b47194-f047-43ec-bb9a-53534c62d3e3",
        "cursor": {
          "ref": "9281478c-a422-4635-80cc-9adda7f75554",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c9035a81-c01a-42f5-bf0b-5ed0e841b789"
        },
        "item": {
          "id": "89b47194-f047-43ec-bb9a-53534c62d3e3",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f980524e-b74a-4741-beb7-7b6b693903f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ff071f-aee2-4a9d-a342-470448d8e082",
        "cursor": {
          "ref": "1d61cb8c-3135-4c6c-a6ec-84de2cdcaa40",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6edcc432-3b7b-4c89-a11f-05d4fc3a9455"
        },
        "item": {
          "id": "e2ff071f-aee2-4a9d-a342-470448d8e082",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d92b9f55-63b5-4e65-a0c9-d739739c6aec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f434a08c-7486-4b74-be0a-5c7a949131b9",
        "cursor": {
          "ref": "81fb83a6-bc41-47b0-80dc-04b794fe66da",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d1dfe91d-f8f3-4113-afa4-12501f853186"
        },
        "item": {
          "id": "f434a08c-7486-4b74-be0a-5c7a949131b9",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "22771156-b11f-484e-9aa4-ed34b29dab5d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e023e2-86aa-4639-bed0-e1639a609f72",
        "cursor": {
          "ref": "869336f9-0ac1-4623-b84a-64624ae6b7e5",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b5b8314a-9b5c-47d8-ae33-25a4e2a07843"
        },
        "item": {
          "id": "85e023e2-86aa-4639-bed0-e1639a609f72",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e10365f5-d6d1-43e1-b3d1-2f20caffcab5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8158e14-2213-4635-988c-da09e913be69",
        "cursor": {
          "ref": "6395aaa9-879c-41e5-81d8-c1d11a9481a2",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "ceaa9184-7c70-4c93-a841-9c1f8393b6fd"
        },
        "item": {
          "id": "e8158e14-2213-4635-988c-da09e913be69",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "34612e00-ac77-4cb4-8126-61d160f93585",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a25741b5-41da-46ad-b476-58dd784d0a78",
        "cursor": {
          "ref": "90937d4a-9358-4810-92cf-2cf605c0aaf3",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0eb78773-fbab-4425-879f-ac80b78cf5ae"
        },
        "item": {
          "id": "a25741b5-41da-46ad-b476-58dd784d0a78",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "28a9a6f2-17df-4112-8d2e-ab4c7a264719",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425583e6-646d-4999-aedf-a730ba355f16",
        "cursor": {
          "ref": "6952d5e9-9e5f-48d4-aa23-a52b6027d6fb",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5cc6fb7c-2795-40dd-8291-ad90a8ccbc35"
        },
        "item": {
          "id": "425583e6-646d-4999-aedf-a730ba355f16",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "10033314-0775-4217-8992-4884cc543697",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05bd893-3a22-4e5b-a8ce-55952b0b9499",
        "cursor": {
          "ref": "ddf4d940-8645-4532-9ab4-ad5d68f859d7",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d9642bfe-8b4f-4129-bc2a-5504ab573491"
        },
        "item": {
          "id": "c05bd893-3a22-4e5b-a8ce-55952b0b9499",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "23f7f1f9-56c8-4230-a599-b9213afb1122",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8640b36-8a7a-472c-9579-a4ac702af476",
        "cursor": {
          "ref": "809d7f90-3d38-43d6-87db-882f64692a42",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9089b8b2-8186-426a-beae-40bc1ae2d792"
        },
        "item": {
          "id": "e8640b36-8a7a-472c-9579-a4ac702af476",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "da963391-aa64-4665-9e0c-473b47ac240c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "db038f92-bc96-474c-9ee2-184d7b0f060d",
        "cursor": {
          "ref": "8f60074f-3594-49a3-9716-353cf6488cd3",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "4c3a748f-19ec-41c6-9e9f-6ddd29196d66"
        },
        "item": {
          "id": "db038f92-bc96-474c-9ee2-184d7b0f060d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "bdda8f95-4fd4-4862-b2a1-42c7f6a2b8a6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 250,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "b5dadfd0-8cb5-4eed-bd1c-3502019aedbf",
        "cursor": {
          "ref": "3559d9c3-80f0-45fe-ac28-344fc7f7dfd4",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f18906c4-ca1b-411b-841a-bcf48d2aeb47"
        },
        "item": {
          "id": "b5dadfd0-8cb5-4eed-bd1c-3502019aedbf",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ff4395d9-0fdf-433a-8241-f83bb1933a4a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 67,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "5cfff1b8-9b35-4b05-8b22-8bbab0505fbf",
        "cursor": {
          "ref": "5dcaf622-ec7b-40f5-b76d-3482a50cc13e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "73de00c2-0de7-42df-9b75-1fb50ebf8def"
        },
        "item": {
          "id": "5cfff1b8-9b35-4b05-8b22-8bbab0505fbf",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "722f4997-7c7c-4d94-ac7d-d78b0ba97dee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "5b9cba07-13a4-415a-8f97-6fbf57079eee",
        "cursor": {
          "ref": "a904c16b-6ce3-4bca-9548-19694b7b8122",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "65006c74-8de2-4853-9c78-87e3e36dfc78"
        },
        "item": {
          "id": "5b9cba07-13a4-415a-8f97-6fbf57079eee",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "510a6016-f53f-4186-ad05-d39ac73b89a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "0c3fdafd-ca6b-4a27-a19f-a4a261377edf",
        "cursor": {
          "ref": "222361ff-dad6-4724-839b-d758534a3557",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "5b8e8679-efdd-4b9a-ad58-0cf67b96b78a"
        },
        "item": {
          "id": "0c3fdafd-ca6b-4a27-a19f-a4a261377edf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "98e64a81-f28e-4d82-a06a-29faa6ce0a56",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "94689b79-122e-44cf-bf36-44e1b4103538",
        "cursor": {
          "ref": "ea5466d8-b0dd-428f-9058-f62832d0e3e4",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "1d9ec2e8-7a44-4178-ad9a-cce040b80a54"
        },
        "item": {
          "id": "94689b79-122e-44cf-bf36-44e1b4103538",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "530a49dc-a34a-4a49-91a0-9b9fbca7ed50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "62af18ea-e74d-47fd-83cb-0de981090bdd",
        "cursor": {
          "ref": "c6e341a6-59be-421d-8592-e32accd44717",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "494cb950-3b4c-49e5-868b-2ea20c9e1671"
        },
        "item": {
          "id": "62af18ea-e74d-47fd-83cb-0de981090bdd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bdb25e06-ceb3-4f0f-ac73-53c65edb2117",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d445189-3e71-4d98-87b8-c8d6d48bd22d",
        "cursor": {
          "ref": "252c1850-ac2d-4b69-aaa4-305995931d17",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "302d0be2-0f7e-4a3f-8b17-15b4414a5693"
        },
        "item": {
          "id": "7d445189-3e71-4d98-87b8-c8d6d48bd22d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ada7e123-4d60-44f3-8be4-e23c1cbc363f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235855b3-ab6b-43e8-ada4-93722f97cbc8",
        "cursor": {
          "ref": "cfe0081a-df55-491c-b69e-85d66bd5bc92",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7deebf0d-a8a3-481f-b7b2-daf6b76f2e54"
        },
        "item": {
          "id": "235855b3-ab6b-43e8-ada4-93722f97cbc8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "dc0c8387-797d-4a50-8fd5-c5ab53f6b2ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4c36dd4-23c7-4cc5-b711-5857f64c88f6",
        "cursor": {
          "ref": "d2ec3274-44fa-4fa7-a8a6-24dd8e6f0421",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "343490de-38e5-460b-99a3-50fcfbc1be5b"
        },
        "item": {
          "id": "f4c36dd4-23c7-4cc5-b711-5857f64c88f6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "afd406ca-48b0-4b4e-998c-17402c48ad28",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791958ba-c962-4bd2-ba42-40b3830bf6e4",
        "cursor": {
          "ref": "5004f6e5-bb2b-47c2-a505-c7caf8126814",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0574e881-e0cc-4588-ac61-53108bf3edba"
        },
        "item": {
          "id": "791958ba-c962-4bd2-ba42-40b3830bf6e4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "44c13ba9-8bb0-446a-ad12-8e43320aa548",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f281fd8a-37d3-4ed1-836a-e580875380fb",
        "cursor": {
          "ref": "cde2c3d1-0152-4cd0-82bf-d69591d5cfa9",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e687fead-5d76-47df-9f29-0119f941019d"
        },
        "item": {
          "id": "f281fd8a-37d3-4ed1-836a-e580875380fb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a0ab6a47-35d3-4092-8d03-59f9ae63c4dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8dc3de-6e78-4770-a9b1-f7ec9f8fa7bb",
        "cursor": {
          "ref": "9feaf5cb-f1c7-412f-b585-3b8b9c6ba3c6",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "786bf788-200d-4e58-bbe9-71ee9fe8af27"
        },
        "item": {
          "id": "8a8dc3de-6e78-4770-a9b1-f7ec9f8fa7bb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "938ea1f6-aa2a-46eb-99f3-2bf2a0bf135e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d380a274-1bba-4d65-af6d-4bfb8c83566c",
        "cursor": {
          "ref": "52db52df-36bf-42ed-a935-36f11fd86199",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "984fd77b-4281-49ef-9827-30a82f43c96e"
        },
        "item": {
          "id": "d380a274-1bba-4d65-af6d-4bfb8c83566c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1c3abe20-bf27-4259-adab-2cc75c16254e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61067b55-dc4b-4bbf-9d04-14aaca23f3fb",
        "cursor": {
          "ref": "ac8b9cb7-4dc3-42e4-83bb-c2f11b0c43c8",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "14639749-0040-438c-b91e-c88991e5408c"
        },
        "item": {
          "id": "61067b55-dc4b-4bbf-9d04-14aaca23f3fb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "36d457f5-ec74-4faa-8236-52084272950d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de71c98-aadf-4b5b-bf54-02a47bdfdd68",
        "cursor": {
          "ref": "513478b9-9b94-44e2-8147-2f6f0fd05fc2",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a407b2a8-2137-4e6e-988d-8e498f184459"
        },
        "item": {
          "id": "3de71c98-aadf-4b5b-bf54-02a47bdfdd68",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "104521f1-38c9-474c-9771-edf7fcff9bff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17165e79-e060-4dc9-9743-47bba2a685e6",
        "cursor": {
          "ref": "68891101-96e0-4b52-98ba-ef707008a0f3",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8132df8f-ee48-41c1-8e9e-dcac069d1602"
        },
        "item": {
          "id": "17165e79-e060-4dc9-9743-47bba2a685e6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d6ea7548-e23e-43e1-b8b0-e2d574061a64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d971c7bb-eb76-4be7-9023-6016c7b43620",
        "cursor": {
          "ref": "cb9531cd-6e65-47a5-bb9c-53e7f1acde5e",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c51a76ac-9928-4786-8a94-2af07072ef63"
        },
        "item": {
          "id": "d971c7bb-eb76-4be7-9023-6016c7b43620",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "82740714-7722-40a5-9fc3-14162e3267a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0149207b-be46-4594-9844-2c1f73cd54a3",
        "cursor": {
          "ref": "4595e818-6589-4ae1-a952-e50249b8cbae",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "41e5d4f0-df3a-4911-8cf0-f9080f4c8550"
        },
        "item": {
          "id": "0149207b-be46-4594-9844-2c1f73cd54a3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "344feef7-47b5-4cbf-b821-ab489c1c93b7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c72ee8-c021-40b5-a291-111db6f65330",
        "cursor": {
          "ref": "f2ec4103-5bea-422a-9a2f-2e9a162f0806",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "624356d2-f293-4193-8be4-7d6127bf5544"
        },
        "item": {
          "id": "94c72ee8-c021-40b5-a291-111db6f65330",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a18b03d1-d31d-4e9d-80b1-eba3b53e940a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1be476-5b46-49fd-9cbb-359390921af3",
        "cursor": {
          "ref": "d321ff2e-4476-4bd0-abac-f1e5076feea9",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ce522ff3-fcbe-4101-aabd-9de3bcfa4df6"
        },
        "item": {
          "id": "3d1be476-5b46-49fd-9cbb-359390921af3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0b815a6a-6caa-48ca-9d58-9bdb517e3c35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528a5309-37e8-4d1c-a39e-4ce56597021f",
        "cursor": {
          "ref": "baecf009-2a0c-41a9-8927-ab16b246bfcf",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "21a80604-7711-4740-b978-d493f06342ad"
        },
        "item": {
          "id": "528a5309-37e8-4d1c-a39e-4ce56597021f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2e8ad955-ffcc-41ac-b787-cae9e3d9c633",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78856ead-e27a-4da8-a2ec-c10fdef99832",
        "cursor": {
          "ref": "64ce9809-4798-4907-ace5-20cf197cdd83",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "864efe24-04db-45d6-bdba-c95d8f4f8cb7"
        },
        "item": {
          "id": "78856ead-e27a-4da8-a2ec-c10fdef99832",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "535c96de-edc3-4c47-9eca-77379bb56b4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9ffc7cf-57fd-4575-9564-162e8c42da8a",
        "cursor": {
          "ref": "1902d4ea-943a-4e08-9234-570e37a0e551",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b452e332-9d8f-439e-a04b-6d8e2521e4d7"
        },
        "item": {
          "id": "d9ffc7cf-57fd-4575-9564-162e8c42da8a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "49a17bdd-cb1d-41fc-abfc-f92b0503472e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34158884-3076-4db1-bf71-51c4e4548dcf",
        "cursor": {
          "ref": "3e8258e9-6b51-45df-a3dd-ab7c50398604",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "1862ae6f-23a4-4b9a-a831-61b8268a57f2"
        },
        "item": {
          "id": "34158884-3076-4db1-bf71-51c4e4548dcf",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "46ac8261-c23e-4d7b-921a-2d590c49b00c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d44485-521f-477d-8505-87f7f9053457",
        "cursor": {
          "ref": "5016dd3a-341a-4c72-b60b-e4dc0a50212e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2e6ca0f3-fb85-411c-8de8-498ccc27dcbc"
        },
        "item": {
          "id": "91d44485-521f-477d-8505-87f7f9053457",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "747c587e-b074-4496-b3b7-f5fe318f610e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d836944-65d7-444a-a95e-c0b578df1f72",
        "cursor": {
          "ref": "e215fb4a-51b7-4e3f-a9da-e3fe4790fec7",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d582937d-aabf-4b1c-bdc3-0a8ece6b1113"
        },
        "item": {
          "id": "4d836944-65d7-444a-a95e-c0b578df1f72",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b18b7afc-d037-4fce-a1a1-c416af996ee8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0414536d-53da-4498-a74a-cb07814731b9",
        "cursor": {
          "ref": "77ae4c93-69bc-42f5-b6c4-2f80c372ebd7",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0064e23a-329e-4fce-ab60-0ad4e69676c2"
        },
        "item": {
          "id": "0414536d-53da-4498-a74a-cb07814731b9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "80a3b7cf-b677-4519-80ae-47a5ce20ce5c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "448ef6fa-e59e-4eba-b72d-bab5e4493092",
        "cursor": {
          "ref": "a7d01fbc-0c0a-445e-a65c-1131f653602e",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f1a5fb56-6cf8-4834-bbac-3950911d0616"
        },
        "item": {
          "id": "448ef6fa-e59e-4eba-b72d-bab5e4493092",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "71f48e33-2423-4d61-b7aa-62e90dc3fe23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0daa4577-cb18-4d20-8606-3e3d50e73dca",
        "cursor": {
          "ref": "23c493bf-92c8-4189-bd11-66cc1304eb04",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4c247c7a-4baa-48b0-b07a-b11a60dac34a"
        },
        "item": {
          "id": "0daa4577-cb18-4d20-8606-3e3d50e73dca",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f78a23e2-d6fc-420b-9b76-c5a2a2a6a66f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "357c220d-cf5e-48c2-801a-648395b4759e",
        "cursor": {
          "ref": "5ad962c4-ec76-4d75-ba1e-65dcd2b2fbf6",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "110be4f1-2536-4be3-a94d-86d27e59d895"
        },
        "item": {
          "id": "357c220d-cf5e-48c2-801a-648395b4759e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "12d001e6-e600-49f0-848c-81b125012bca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bb39b6-d4da-4942-9949-fb9eec912811",
        "cursor": {
          "ref": "e98fae36-4902-4ba6-9ec1-c7b76c674f78",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4fe4f7a3-ff05-4572-af8c-2a66b873d7c8"
        },
        "item": {
          "id": "17bb39b6-d4da-4942-9949-fb9eec912811",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b6d99a9f-2d32-4f40-aaf6-bba15accfef1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e51650a-aa58-44ad-ae18-407a45919410",
        "cursor": {
          "ref": "ed813997-6d7d-422c-b1eb-354c6805e4c0",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ea8a50c8-e271-4af3-a452-af42b7154685"
        },
        "item": {
          "id": "0e51650a-aa58-44ad-ae18-407a45919410",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c206e7f8-def1-43d9-ac8f-0d384c1b33dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e4662c-9702-4be8-a935-44abf7e4d167",
        "cursor": {
          "ref": "d62da122-a297-4611-ae61-b259202355fe",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4d74d08d-5fb9-4591-b62c-5b234224ec9f"
        },
        "item": {
          "id": "96e4662c-9702-4be8-a935-44abf7e4d167",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3db0faa9-c8a6-42b8-b183-837d54aff2aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c15ad3-c4cc-4afa-892e-c1cd50f5001a",
        "cursor": {
          "ref": "f738f891-ed59-4792-9746-6b244eae407b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "de913d3e-9679-43ec-8e30-0fd4f05e52ab"
        },
        "item": {
          "id": "86c15ad3-c4cc-4afa-892e-c1cd50f5001a",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "4d15bb17-cba5-42c0-a779-5dbcd59e7205",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429ac77e-1415-49e6-a96d-c558b5d1487f",
        "cursor": {
          "ref": "dc6af243-8dcc-4ea7-8bbf-61a7cc0cb658",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "be25317d-c85f-42f1-8234-5b86c8445ad1"
        },
        "item": {
          "id": "429ac77e-1415-49e6-a96d-c558b5d1487f",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "b2c6bb95-1bc1-49e6-8f3d-3e074a4e5f2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c821bce6-6cd0-4dba-86a6-2509e0acdd40",
        "cursor": {
          "ref": "b647cbd3-813e-4496-9053-2e0935e9115f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "93f5c9b8-6786-43f6-9ccd-04db3ecc2d1e"
        },
        "item": {
          "id": "c821bce6-6cd0-4dba-86a6-2509e0acdd40",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "67ab8008-0491-41f1-83ae-4c402d4f313d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89406ea-8b08-4509-80f2-afc5b34ed3d2",
        "cursor": {
          "ref": "33e7e0a8-2c19-47be-9bcd-5e9e46de7e41",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "58e0e14e-6f63-4e1d-9b55-6bdc3d5d3264"
        },
        "item": {
          "id": "e89406ea-8b08-4509-80f2-afc5b34ed3d2",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "033cb5c8-d2d7-4e27-a197-1f9448c3f087",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11019438-4d03-4e30-b81d-f682d18e98c6",
        "cursor": {
          "ref": "d19e1cab-a944-46d5-a788-3eab1f664cf9",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "ba5649c1-f5cf-4103-ae54-d9b430a68793"
        },
        "item": {
          "id": "11019438-4d03-4e30-b81d-f682d18e98c6",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "10697d46-6857-48c2-b0e9-8426d4fe685e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40061ea5-4a25-47a1-b8a5-c857fa0da6a5",
        "cursor": {
          "ref": "4bc7761d-7c90-4523-96d2-c175f187dadb",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c191ace3-fe2b-4355-8d0c-955315308eb3"
        },
        "item": {
          "id": "40061ea5-4a25-47a1-b8a5-c857fa0da6a5",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "025f4a10-4cbe-450d-b918-d1f986850cc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c45d77-30f4-4e04-bc01-bfc371d63ca8",
        "cursor": {
          "ref": "84ed455b-de75-47d0-a26e-86f996c2bc06",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "d809ab6b-c4ae-4a4a-a943-46c9131051c9"
        },
        "item": {
          "id": "c5c45d77-30f4-4e04-bc01-bfc371d63ca8",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "cf5cfce6-b912-4f81-932c-60df05364908",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "676656f2-1268-4292-a324-91d01a779078",
        "cursor": {
          "ref": "950f2ac0-c11a-4418-9a65-c83a3e32760b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "62ccedd3-6e60-4e2c-915b-f5a595225d75"
        },
        "item": {
          "id": "676656f2-1268-4292-a324-91d01a779078",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "25ac8b1a-fe8b-4c2b-a66d-ac274d2a4f99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799d1587-bbdc-497e-9617-42de2da168c8",
        "cursor": {
          "ref": "35e96c1d-4645-4a69-bfd8-0b8ced8070ef",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c680a163-056f-4b55-a239-984f479b5a1e"
        },
        "item": {
          "id": "799d1587-bbdc-497e-9617-42de2da168c8",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "09730e45-0a89-44de-becd-b7ba636e6085",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf45170-232a-455a-8ee6-bbc3ebfa55ea",
        "cursor": {
          "ref": "6a3e2805-07ea-4266-bb75-57407f2f6782",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dc29c677-528f-4021-aaee-32478ded7f54"
        },
        "item": {
          "id": "4bf45170-232a-455a-8ee6-bbc3ebfa55ea",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "1dc1e5c8-c880-4e81-88fb-1e13433e9e5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2f8f04-fd75-421b-80ea-3ef51d5caf52",
        "cursor": {
          "ref": "3a1fbef2-c92b-4c1f-b529-4b987e1f3591",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "cb42432c-e073-40b9-9d7e-bc45dab82c84"
        },
        "item": {
          "id": "db2f8f04-fd75-421b-80ea-3ef51d5caf52",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a7187a66-b59d-4b2d-aef3-9a094e482feb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b72a90-ec47-4aaa-b46e-289a75f337b6",
        "cursor": {
          "ref": "86a37588-ebc9-4cc7-a21c-c32596c838c1",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f299c3df-2fec-4ea4-afb2-e032f1f0d233"
        },
        "item": {
          "id": "a3b72a90-ec47-4aaa-b46e-289a75f337b6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "99864bc4-b746-4e37-a2c3-89ea90466e4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38618772-64dd-4d5e-81c6-7ca4009c7ba3",
        "cursor": {
          "ref": "b9c4eabc-e598-4331-953b-3a88571eab82",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8d2381d1-f546-4ad5-b3d3-3d2419c70206"
        },
        "item": {
          "id": "38618772-64dd-4d5e-81c6-7ca4009c7ba3",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "57a9530c-9452-4084-8fbe-0e9b897e0252",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4663b786-0864-4e3b-a512-f63c9b6f0fa5",
        "cursor": {
          "ref": "edb3869c-6a85-4e85-a210-45672ec8890f",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "28d8170f-4801-42a0-a60f-84e7cbc5fdb5"
        },
        "item": {
          "id": "4663b786-0864-4e3b-a512-f63c9b6f0fa5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a1a23a0f-b4b1-42bb-b3b6-4ec20116a4c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c69591-6ede-420b-9033-a4b7820fe0e9",
        "cursor": {
          "ref": "6a24529c-1cb5-4387-b4bb-96b05face659",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e4872e8d-63d7-48b7-a4e4-eaa8fa0bbd08"
        },
        "item": {
          "id": "88c69591-6ede-420b-9033-a4b7820fe0e9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e414bc3e-df3c-4f9e-bbca-b76c5c4d4ab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b138d2d-4c79-428b-a16f-d2a649f3be16",
        "cursor": {
          "ref": "e53410e2-750c-41bc-a9f7-78e9cf50e314",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7e68b9ce-1c90-4e92-bcb3-5e2377cf2be0"
        },
        "item": {
          "id": "6b138d2d-4c79-428b-a16f-d2a649f3be16",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9bdfd1f1-6d0d-4390-9d24-d8f033e5a203",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5548b40c-2cc1-4046-8976-afe83d5c62df",
        "cursor": {
          "ref": "66dfadc3-d3ea-4ce4-a738-99a170895caa",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "35f2930b-b44a-4d6c-8b73-f7ec5e82f126"
        },
        "item": {
          "id": "5548b40c-2cc1-4046-8976-afe83d5c62df",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bcfd3c8a-290d-45a6-b8a9-6c2e239f6de5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ab75e5-3d06-465b-9c17-c2653f0b07b7",
        "cursor": {
          "ref": "399b81aa-1759-4b30-b8da-7c4f8c147d5e",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a818ff87-67ab-4461-846b-cad698f6f540"
        },
        "item": {
          "id": "92ab75e5-3d06-465b-9c17-c2653f0b07b7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "43000836-481c-459f-b198-98e1169ad02d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbce0e7a-bdbd-4f3c-a6aa-0f060db2e3d0",
        "cursor": {
          "ref": "71c4f322-f5d0-466e-99a5-1b9a6babe991",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "75faf4fe-ac95-4dec-a055-363ccdd2f7b5"
        },
        "item": {
          "id": "fbce0e7a-bdbd-4f3c-a6aa-0f060db2e3d0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "12583aaa-9bb7-4e18-a54f-0195745cd6ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294405ec-9edd-416f-a000-73cdfe106482",
        "cursor": {
          "ref": "a79837e6-6216-4261-9b61-d585328acd95",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c424aa25-ac60-4e47-819e-95d0cf74a260"
        },
        "item": {
          "id": "294405ec-9edd-416f-a000-73cdfe106482",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7f9c4ae4-9ce8-4e07-a3a3-57e9221b09db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b3aaf4-bbca-4fe4-b0dd-43e98e47afa5",
        "cursor": {
          "ref": "81d134f8-06cf-45d6-bc51-61ca9a757b78",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9345f698-f4ad-47d9-8bf4-ec6ea52ac323"
        },
        "item": {
          "id": "24b3aaf4-bbca-4fe4-b0dd-43e98e47afa5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6a4b8799-21f4-40db-a04a-17cc27f591d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d231ade-11cf-4d5a-a6f9-e5da7ebadb45",
        "cursor": {
          "ref": "b607668b-fc6f-46af-bd76-c39771f1de50",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0fb90e75-d4a0-46b5-8f9d-5a5b091fe3d0"
        },
        "item": {
          "id": "8d231ade-11cf-4d5a-a6f9-e5da7ebadb45",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9656fedf-c415-4c09-9fee-8bba9707e5b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ce0200-1722-48c8-8775-6bafbda2c73f",
        "cursor": {
          "ref": "578ffc20-f838-4d5f-9a11-417363d8b5b8",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b980dbf7-ac6b-4f9a-9bcb-a91701039b13"
        },
        "item": {
          "id": "36ce0200-1722-48c8-8775-6bafbda2c73f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6f8fcb19-0e18-48af-a170-74fee8c9adc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34147201-ff50-4532-aa83-efc25ef2b4ad",
        "cursor": {
          "ref": "75061223-ea96-4b72-88af-79fda835184c",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fee51dda-ab22-4314-a0d5-590745696d56"
        },
        "item": {
          "id": "34147201-ff50-4532-aa83-efc25ef2b4ad",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2fc380eb-feed-4d8e-aea7-72bccaad5cd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5c50cde-cc2d-4864-b657-a2b570329365",
        "cursor": {
          "ref": "18796738-89ea-4f0b-a994-b782440bb6fd",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b1ef0fae-6c1d-4555-a28b-1031daaaef93"
        },
        "item": {
          "id": "c5c50cde-cc2d-4864-b657-a2b570329365",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f3a416d4-950c-4122-9c8d-127db3805d83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db59337b-7ba9-4e2a-826e-0baefdc2ea65",
        "cursor": {
          "ref": "bae27058-780d-4d84-b446-f086c63451af",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "59827e2a-091b-4c5b-bad3-5559255ee2bc"
        },
        "item": {
          "id": "db59337b-7ba9-4e2a-826e-0baefdc2ea65",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9d9a5629-8811-4663-b375-281fdaf7a245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc945454-ced9-4c56-8f37-748df906ffaf",
        "cursor": {
          "ref": "ee4fa9d5-c507-48af-b7db-5220fcbfdf03",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a7e9077d-ed7d-4720-9ff3-bb927cbc615e"
        },
        "item": {
          "id": "bc945454-ced9-4c56-8f37-748df906ffaf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bbe821f4-4562-42e9-afd5-ffb44180975a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d20c15-941f-491b-9a43-31081f91b3c6",
        "cursor": {
          "ref": "60cdd73a-428e-4d63-8e3b-49ba6fa6aee2",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a63059ed-6193-4965-91c4-3b473b28213e"
        },
        "item": {
          "id": "e1d20c15-941f-491b-9a43-31081f91b3c6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "f5701440-3e5a-4033-8df5-1a779db85a21",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93789dc-f3e5-48b0-ae1f-4396b0121e0a",
        "cursor": {
          "ref": "c625dbaa-9086-4845-ba1d-d59459767d0c",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5faebf96-8581-4d87-a6ef-8bffeafcbc02"
        },
        "item": {
          "id": "c93789dc-f3e5-48b0-ae1f-4396b0121e0a",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "556f6ca7-6c6d-45f2-bd74-74e2f9ae90fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd7e36c1-eed4-4fc7-a536-99502997b7e6",
        "cursor": {
          "ref": "c3c8d79b-8966-4111-b712-7d1d4a75ed5d",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ac2ff751-96bd-4ed2-bec9-ca257a6ae1d7"
        },
        "item": {
          "id": "bd7e36c1-eed4-4fc7-a536-99502997b7e6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "39b0b840-6e8b-4109-ae72-70f4dcb0b4f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cd1523-0d46-4b64-9fd4-212ac3905e64",
        "cursor": {
          "ref": "85b27797-5e76-40e9-8108-eb4bf82a7300",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7f257a47-92f0-4fc8-b335-c89775df5006"
        },
        "item": {
          "id": "a3cd1523-0d46-4b64-9fd4-212ac3905e64",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1e06a4fe-3747-4589-9a08-ce10b89115f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb37f362-40cd-4385-a9b3-cba8258ab237",
        "cursor": {
          "ref": "17f9dbf9-cb2c-487a-8839-3658ef9cae05",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e31ed314-b868-4170-a428-eaf00a7c99f4"
        },
        "item": {
          "id": "eb37f362-40cd-4385-a9b3-cba8258ab237",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e0d3e49b-aa80-4230-878c-042348287bd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58a10b1-a2ad-41e4-ae82-3fb40eb95a09",
        "cursor": {
          "ref": "b15f6e43-fb08-4eea-a9a0-0cd66d852ac1",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "78ab51bc-9bde-449c-a11a-27187797d60c"
        },
        "item": {
          "id": "c58a10b1-a2ad-41e4-ae82-3fb40eb95a09",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "aa942d21-d92b-4569-bb88-ca7f7341ae4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "472c2786-6a2d-4286-953e-1f089bf247ba",
        "cursor": {
          "ref": "1da97818-724a-4f50-8547-487bd9821027",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "608f1ca5-b6a3-4f77-955c-8c3136619dcc"
        },
        "item": {
          "id": "472c2786-6a2d-4286-953e-1f089bf247ba",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "71e81b78-8f04-48d3-b06f-b9083d789dc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ef9c7e-a200-4ff5-8e6f-595de38dbbaa",
        "cursor": {
          "ref": "345ffebd-7e7d-4bfd-8f2b-788291c800f6",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3a0e28ec-70e9-4d8e-93b7-d25feae19192"
        },
        "item": {
          "id": "89ef9c7e-a200-4ff5-8e6f-595de38dbbaa",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "6e19c5b3-8c34-4150-899e-c1143943b7ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "935ce01f-e09c-4d6f-af90-2e3fa4332b66",
        "cursor": {
          "ref": "de7cfb27-ceba-4bd8-afa3-6535e59dd719",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2e895d59-107b-4ea8-b8fc-f5a141e0c49a"
        },
        "item": {
          "id": "935ce01f-e09c-4d6f-af90-2e3fa4332b66",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "76bef960-1ffd-4da7-9490-6f7df03eb8b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "897d0ef1-1af5-4d5f-8338-08fe4d06d826",
        "cursor": {
          "ref": "a77a54e7-7a21-4e19-b059-2a2deb58b103",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b891dd05-41e6-4ea9-981f-dd934327a8b8"
        },
        "item": {
          "id": "897d0ef1-1af5-4d5f-8338-08fe4d06d826",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "64544566-167a-43a1-89b0-050899548dfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c7c086-a467-4ba1-b26e-4285c19166e7",
        "cursor": {
          "ref": "804f910a-d718-4654-b145-5fe2354d0e45",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6c0f6956-005d-4e32-b45c-ca46f12909d4"
        },
        "item": {
          "id": "55c7c086-a467-4ba1-b26e-4285c19166e7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ad6dab1a-0ac4-4036-9263-00ad1a43fe95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762caf12-9130-4a60-a6c2-977d3994a81f",
        "cursor": {
          "ref": "11522066-9a1f-4b0e-82f4-bea8a0118a83",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5299754e-7695-4f1e-accd-ce5d83ddf964"
        },
        "item": {
          "id": "762caf12-9130-4a60-a6c2-977d3994a81f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "26ac1dc5-c3bd-49a5-bc00-b15ffecb51f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f19c2d0-5a85-4432-9b79-dca13a3fffd1",
        "cursor": {
          "ref": "70beb714-0bcd-4b5e-85a8-8df9b3fbcd7d",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0a770d15-ceda-445c-95cd-5ac3c6b0decd"
        },
        "item": {
          "id": "6f19c2d0-5a85-4432-9b79-dca13a3fffd1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0e1500e5-88d1-42cc-86dc-7d7d65c47083",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c25cd44-9fed-4e72-bf81-713d7059a54f",
        "cursor": {
          "ref": "bda5f9c4-a179-4eda-bc09-0514ccd35ee1",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "98a60cdd-ab6e-41d7-bfa3-522f4041d022"
        },
        "item": {
          "id": "0c25cd44-9fed-4e72-bf81-713d7059a54f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1c2bbc32-0d88-4748-9b9d-611eb4689523",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c28c5-d670-439b-8eb3-84ce5c43175c",
        "cursor": {
          "ref": "b6107abf-ed98-4cc1-a9bf-653106234f91",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4b627a66-2668-47f8-8c02-fa29c47c23a3"
        },
        "item": {
          "id": "278c28c5-d670-439b-8eb3-84ce5c43175c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "294261f7-384b-4979-8843-efc6994948b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ff14e89-d0b6-48ee-858a-9de81d5a6f03",
        "cursor": {
          "ref": "80786315-451d-4fd4-a02c-7bd9444fb5dc",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "dfce2d4c-92f3-4953-9d2c-99c126f0208b"
        },
        "item": {
          "id": "3ff14e89-d0b6-48ee-858a-9de81d5a6f03",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a6cd2093-d1fd-424b-885c-881e7bdfb3d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a61000-0dda-4942-8134-707f25810f8f",
        "cursor": {
          "ref": "602d1cea-620e-4a42-a6ff-8a744ed9cf3d",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "14f87932-c5b6-47ae-b027-03ca9e56cde1"
        },
        "item": {
          "id": "f3a61000-0dda-4942-8134-707f25810f8f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "14607997-c076-455a-966d-9f07c3f79a2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47455f66-c034-4c71-87c8-b64f1bf7077e",
        "cursor": {
          "ref": "a4e5450f-63eb-4a85-bbf5-5212b0dad540",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e909c187-93d4-41db-afa6-44b641cd1b0c"
        },
        "item": {
          "id": "47455f66-c034-4c71-87c8-b64f1bf7077e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fee3a00e-a152-46f7-9222-23e734e77ab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5620f2e-c6e2-49d9-9008-593ca598b4d3",
        "cursor": {
          "ref": "53799abc-8807-4544-89ac-13b534441965",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c4021e1a-b2dd-47f5-9f15-80b6817fb42e"
        },
        "item": {
          "id": "d5620f2e-c6e2-49d9-9008-593ca598b4d3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "308a00b8-199c-46b5-976a-5797df029f01",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e4761f-980d-4b1c-82b0-d39adfd6dde8",
        "cursor": {
          "ref": "3636e7a2-3644-4b42-a6aa-dd2393fbbbd2",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "36e8e09d-ebb3-431e-93f2-57054ecfa9db"
        },
        "item": {
          "id": "94e4761f-980d-4b1c-82b0-d39adfd6dde8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3098cd82-c5d9-4fef-bf76-bbec65960380",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1672e842-87a4-4bc2-a9bf-a1ae2fd27b3a",
        "cursor": {
          "ref": "f5a68d50-0aff-4cad-9232-cf9c2cfae2b4",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bb4eec63-b23a-4b7e-83da-c719849a2bf0"
        },
        "item": {
          "id": "1672e842-87a4-4bc2-a9bf-a1ae2fd27b3a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f7b34e39-23c0-4bcb-a03e-16fd29dcfb4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1453302c-f4ab-4a6c-a2bf-06827d960ac6",
        "cursor": {
          "ref": "30bf41cc-2a31-4c44-8935-e1a92df6ebe2",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "045c6b2c-1cb4-4ea5-8e34-93ac2408d9a1"
        },
        "item": {
          "id": "1453302c-f4ab-4a6c-a2bf-06827d960ac6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5130bb59-b45d-42b4-8318-53f3be6ca22d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32dd304c-4280-490f-af27-217e99a38e56",
        "cursor": {
          "ref": "7a9d6216-210c-48ae-9c81-783202aae872",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f7c752bf-bdd2-49f0-8e1f-0bdcadcb8ae6"
        },
        "item": {
          "id": "32dd304c-4280-490f-af27-217e99a38e56",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e6ff7de0-8d0f-419c-baad-c5a2f2cd0618",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "487ac9c8-1794-4d22-8d46-d496c4687186",
        "cursor": {
          "ref": "f7ce3027-fd71-4555-aefb-ab23d81979b3",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cddd387e-c3c1-44d5-90cf-205563219677"
        },
        "item": {
          "id": "487ac9c8-1794-4d22-8d46-d496c4687186",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7b95a2dc-d6bb-4cf2-8c32-b2ffb55427d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa52888-5aa4-486d-b7aa-2744558c475d",
        "cursor": {
          "ref": "e411dab6-8a7a-4c59-a646-60cda3e1bcf2",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cf895789-0439-4582-91fc-7b857390d221"
        },
        "item": {
          "id": "faa52888-5aa4-486d-b7aa-2744558c475d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9963c15a-78d7-45d5-ba3c-5418cf29667a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9b099b-357c-45aa-9874-baccbf37d022",
        "cursor": {
          "ref": "ef82f340-9800-4c19-889b-a725374abb1d",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0dbf7667-f271-4903-8e9c-6ef598379af0"
        },
        "item": {
          "id": "cb9b099b-357c-45aa-9874-baccbf37d022",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d347f0aa-4f4c-46a9-8b01-c07130767846",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f074b1e-9741-4c57-a8fe-e877062e81a6",
        "cursor": {
          "ref": "f1fd0c85-2a4c-4cfc-97b7-764dd2ff3251",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3dd1a590-8bd1-4645-82fc-fa3b04116cb6"
        },
        "item": {
          "id": "6f074b1e-9741-4c57-a8fe-e877062e81a6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "521fb2ef-0188-4f68-8c24-ec80e86383d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da9485e4-e39f-4b91-95f0-9410c20bc094",
        "cursor": {
          "ref": "52186861-bb6f-4fad-96e2-094d9c675be1",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b527207b-ddfa-42c6-9766-4fe59125cac5"
        },
        "item": {
          "id": "da9485e4-e39f-4b91-95f0-9410c20bc094",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "eb521398-bb5c-4ec7-b397-8f94934ad45e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c265e1d-9061-4fa4-ae4c-01bd2e60f367",
        "cursor": {
          "ref": "f1be8a19-2a3f-4f7e-91f7-0d838ec3d4aa",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f7e97f9d-5d0e-4a90-9568-4a4cd612f03b"
        },
        "item": {
          "id": "1c265e1d-9061-4fa4-ae4c-01bd2e60f367",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c65c42f9-beb9-4b63-856e-0154f9eda55b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a7d838-aab0-4627-9288-4d3c1372fca5",
        "cursor": {
          "ref": "60a974da-9e89-4ba9-8e38-04da7c90d816",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "eb716d7d-4240-4275-a392-20605955c2ee"
        },
        "item": {
          "id": "82a7d838-aab0-4627-9288-4d3c1372fca5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "56401fce-dede-4059-aa79-f79e50e38a68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6886c5-8f2e-4f56-8686-ff946c9ef338",
        "cursor": {
          "ref": "21ae5e22-b7e9-4f0d-a775-88f6610b81cf",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1571642c-9365-462b-be54-9e1cbeea8ef9"
        },
        "item": {
          "id": "fd6886c5-8f2e-4f56-8686-ff946c9ef338",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b466421d-4636-42ca-9fb5-5bb8cbc25e41",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de967048-ed19-4c1a-ae0c-907f0ad8d5a0",
        "cursor": {
          "ref": "326ff7fa-5eff-478a-948d-31b84ab19fd7",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fb4b8826-4497-4ab6-b02a-bb7298441f53"
        },
        "item": {
          "id": "de967048-ed19-4c1a-ae0c-907f0ad8d5a0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a8b2beab-772d-472e-a187-745aa7fb5f55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c868aa1e-3af9-438b-b118-4d11a3d82ac5",
        "cursor": {
          "ref": "140edd9b-bad1-459f-b5e8-4d5ffe26b2d0",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "95c947bb-6f73-4a06-8f6e-b209520f5205"
        },
        "item": {
          "id": "c868aa1e-3af9-438b-b118-4d11a3d82ac5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7b6fafa9-04f5-48f1-a3d5-9f81e1759f53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea30bf96-e1df-4f88-86e6-5979daf0427e",
        "cursor": {
          "ref": "5d99cbef-3ca2-4345-ad9a-fd330a8e66e0",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d2bdbe00-6839-4eb1-8744-0ed836dae260"
        },
        "item": {
          "id": "ea30bf96-e1df-4f88-86e6-5979daf0427e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "69f841b3-50af-4e0e-b427-2a93df8b953c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d567df9-55e3-41f1-824d-1cc51eed831f",
        "cursor": {
          "ref": "df3c2dde-4f50-4181-b540-11e103a9d109",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5d05d661-1fcd-4e83-90c4-e61c47bdf17a"
        },
        "item": {
          "id": "1d567df9-55e3-41f1-824d-1cc51eed831f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e4bdced2-d773-4bfa-84f3-9aa8035ccb8a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ee1304-11a4-4fa8-a8cd-c9aa75ab45bd",
        "cursor": {
          "ref": "35cedf34-3d82-4252-a4ee-a555bb0a058c",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f11de5ad-0077-4170-a2cc-53bb92388258"
        },
        "item": {
          "id": "68ee1304-11a4-4fa8-a8cd-c9aa75ab45bd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f9a1cb5b-5e81-48cf-9846-14691daf6e4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "711e05da-6ee9-45d0-adf6-cdc2d3992f2e",
        "cursor": {
          "ref": "35998801-6824-491e-8099-99c5e48ad211",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4bb6dd63-935a-4563-973b-3388af9cf1b2"
        },
        "item": {
          "id": "711e05da-6ee9-45d0-adf6-cdc2d3992f2e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f69b2f65-02ee-48ac-8b30-783b7fd6f61a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca0d78d-72fb-4be3-a19c-fd480d53552b",
        "cursor": {
          "ref": "57310ec8-2121-4c93-9565-ab0f03213673",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "511666c4-29e4-4a1c-917a-a10802de20e9"
        },
        "item": {
          "id": "bca0d78d-72fb-4be3-a19c-fd480d53552b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b7579eb9-1fbc-4f62-95c1-85e96c973ead",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d60115b-3ae2-4276-a57f-806cd5e211d5",
        "cursor": {
          "ref": "99a7d9b4-23d3-456e-befb-5bfc4e6e3f20",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "80c9c216-8608-4da5-b4d7-413d1dc63f9b"
        },
        "item": {
          "id": "4d60115b-3ae2-4276-a57f-806cd5e211d5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "17934c30-9e3b-4944-bbfa-8394b00e52bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cc2b31-3117-467e-8ac1-a15e9e515cbe",
        "cursor": {
          "ref": "4724392f-b056-4152-a92c-e72427fe620e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5bb80cbe-23ad-4737-a2d5-23cab2f98f5c"
        },
        "item": {
          "id": "06cc2b31-3117-467e-8ac1-a15e9e515cbe",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "633c702a-69ea-494a-97a6-09751bb70114",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06063081-e38e-495c-8939-affb3109eac5",
        "cursor": {
          "ref": "9c6e84d3-259e-4c42-9b8a-a5bd050ff89a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "82eb7e13-6ac9-4880-a73d-54d7969d363d"
        },
        "item": {
          "id": "06063081-e38e-495c-8939-affb3109eac5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5ef76484-0301-4553-af9d-2b7ed2f7b60d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a485692-1bb5-42b6-8233-1309acb1905b",
        "cursor": {
          "ref": "fcb1b825-10f1-45e2-8904-b3d7126cd39d",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "15f6fcd9-d5ac-4444-8207-7023d6c8c36e"
        },
        "item": {
          "id": "5a485692-1bb5-42b6-8233-1309acb1905b",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "024a392a-47ee-472e-9152-308e7f2320e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea924ba-4307-4c42-9959-214646741127",
        "cursor": {
          "ref": "5caf1acd-1f0a-4433-90af-816979acb34f",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e65942e7-30f0-4366-b3d1-a6ee765f58ef"
        },
        "item": {
          "id": "aea924ba-4307-4c42-9959-214646741127",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "aae5883e-9cc5-401f-ac03-9ef5b5142d96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7350b282-d6da-4ec5-9903-ab093d1a1e45",
        "cursor": {
          "ref": "e4e49356-e6a8-4125-b278-7990e107b53f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a331f8ae-5b9a-475f-b1f9-ef60ecb2ff97"
        },
        "item": {
          "id": "7350b282-d6da-4ec5-9903-ab093d1a1e45",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "aa424e1b-bacc-4ae9-8613-7ddc306ea077",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b181fb-071a-4e4e-95e3-2d2ee9154783",
        "cursor": {
          "ref": "a94d32f2-e92d-4a2b-af4c-fc8ba36d9264",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "13feb261-67d2-41bd-824e-c3b0abfa46f8"
        },
        "item": {
          "id": "55b181fb-071a-4e4e-95e3-2d2ee9154783",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2b4b18a0-3f56-4d38-87d8-1ee4374ea28b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafd5d82-4417-46f0-b26a-11a76ef330cb",
        "cursor": {
          "ref": "0d179165-6b44-47e1-8a5b-a8d1bb27873d",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "15962401-d9e5-4c1f-b995-40358f9b3999"
        },
        "item": {
          "id": "eafd5d82-4417-46f0-b26a-11a76ef330cb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "37522475-41e5-4d85-9ddd-8502b69c54a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef28499-df66-4b67-b9c1-833456be4b8a",
        "cursor": {
          "ref": "4fb3de78-d89e-46ba-adc7-0a667e421995",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ddd57e9c-37a6-4a1e-b3b4-6ccca3c345a4"
        },
        "item": {
          "id": "8ef28499-df66-4b67-b9c1-833456be4b8a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9c63c1b4-0ba7-41b8-b403-330fc53c68e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4cde939-a78b-4d5c-9284-6ca3c9cec625",
        "cursor": {
          "ref": "4acb515b-2da7-4af3-a013-2412862d58b6",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dcb3435e-ddbf-4e52-9e49-ab839f1515aa"
        },
        "item": {
          "id": "c4cde939-a78b-4d5c-9284-6ca3c9cec625",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "093b4cad-0fa5-4ab4-95e2-8e2423e01138",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f264f76e-618e-4308-a44d-d6602194f989",
        "cursor": {
          "ref": "53429bae-3745-4616-9dea-c0e9899213b4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e9f57d85-7439-4c5c-9430-b7f2f5529b5c"
        },
        "item": {
          "id": "f264f76e-618e-4308-a44d-d6602194f989",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9b8e603f-d312-4d33-8f56-76331c897795",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4af584-50d4-4a4b-8403-73bf9aac32fd",
        "cursor": {
          "ref": "0dcb1762-4e68-45c4-ae2e-d6b20427ed0b",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1d9accb9-620a-45bc-bfff-98e228cae0fa"
        },
        "item": {
          "id": "9f4af584-50d4-4a4b-8403-73bf9aac32fd",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f8c065a4-1196-42e3-89bd-4f539f46b0b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ad3c25-23b9-4c3e-85d3-27ef831aa7b8",
        "cursor": {
          "ref": "e35a2795-60f2-4153-b42d-d6e4f082882d",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d9e1367b-1bc8-417b-9503-719a060d7fa1"
        },
        "item": {
          "id": "38ad3c25-23b9-4c3e-85d3-27ef831aa7b8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e43b6224-8668-4db4-ad61-f34e183764d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a71b9380-c6f4-42bb-8bfe-5f17d19e54be",
        "cursor": {
          "ref": "1026c0d1-d946-4d82-b525-4b9c922dffb0",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "33d029fa-01d1-489b-84fc-e742c6e18291"
        },
        "item": {
          "id": "a71b9380-c6f4-42bb-8bfe-5f17d19e54be",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "af193df6-af96-407e-9466-570efbdebf9a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "825d8bf8-b998-4856-85b9-5684aa2442b6",
        "cursor": {
          "ref": "400be1a6-b948-494a-8044-b38ca307f22a",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a036d7c2-af08-4688-866e-3249b5389ec8"
        },
        "item": {
          "id": "825d8bf8-b998-4856-85b9-5684aa2442b6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "409f11a7-0918-46f0-b6d1-bc044d995eda",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b3c8f4d-4fe9-49a4-a0d7-28e91e1931b1",
        "cursor": {
          "ref": "8b4361d2-1a37-45ed-a48b-f2fce8b0a833",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "128af498-492a-46e9-9254-a78268f4c551"
        },
        "item": {
          "id": "3b3c8f4d-4fe9-49a4-a0d7-28e91e1931b1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "47ce1ea7-2e45-4e40-b159-a73f73420f0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be8a20e-c2d4-4d3a-aa02-3edd4d0eccee",
        "cursor": {
          "ref": "76ca1bd5-c6fc-4da7-bdbe-59662a0a3584",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0215b8ae-8742-45da-b374-258240ea40e9"
        },
        "item": {
          "id": "9be8a20e-c2d4-4d3a-aa02-3edd4d0eccee",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1301ed30-4012-49e1-ab54-a0b193d3cf44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc40e6f-6876-4445-a069-0e7b5b879550",
        "cursor": {
          "ref": "e16a604f-f8bc-4c67-a72e-bb1ffc71f4c8",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "750e13cc-2cd2-44a6-84dc-4a0fe5392a74"
        },
        "item": {
          "id": "9cc40e6f-6876-4445-a069-0e7b5b879550",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bdc56483-bfcb-43c3-9a08-2bb8671a3006",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9b82ce-3cd6-4e0f-845a-1435f9884c64",
        "cursor": {
          "ref": "1e61f5e4-b80e-4de9-8dc3-c66cd8b50245",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3dc229c9-dc44-4dd0-8d2e-cdbcaf3213ad"
        },
        "item": {
          "id": "4f9b82ce-3cd6-4e0f-845a-1435f9884c64",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cf7cc99c-adc6-480a-9421-a6adca4b4e90",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ffd394-e604-4a71-94b1-b63466b5ff51",
        "cursor": {
          "ref": "99a1e933-694b-4418-bce5-47eef83dc9b3",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "310c1776-989c-46ab-9457-cb04c3e250cc"
        },
        "item": {
          "id": "15ffd394-e604-4a71-94b1-b63466b5ff51",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9968977c-67d5-4c08-9973-5785bd6c9412",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8887045-85fa-4269-a649-4c9700d47c08",
        "cursor": {
          "ref": "fbdcd79a-4061-4b1d-8d08-53559703782a",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "70070325-9537-4bbe-ae8c-bf46fde734c1"
        },
        "item": {
          "id": "c8887045-85fa-4269-a649-4c9700d47c08",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a4f71d9c-6f4d-4551-b009-5e4328ea0284",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6358ac73-0bbf-4ace-a153-1d106e3cfb07",
        "cursor": {
          "ref": "fdebb310-30dd-4f4f-a077-2dd3574a9743",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "bc4e8e25-1959-45a3-9023-9e8653b464b0"
        },
        "item": {
          "id": "6358ac73-0bbf-4ace-a153-1d106e3cfb07",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "26997d01-08eb-4a6e-8898-ca8d175ecb51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a7c4b0-f8a8-4d48-8953-48089f49a64e",
        "cursor": {
          "ref": "91fe1a09-2b0f-4038-9847-7bce5593360e",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "6b5ee642-1cff-4c8c-a460-6aac3ba19c12"
        },
        "item": {
          "id": "f8a7c4b0-f8a8-4d48-8953-48089f49a64e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ac66494b-4396-42f9-bc93-0f6f789b02be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d74156-4bf6-444e-aadf-e6c9a8a37cf8",
        "cursor": {
          "ref": "784456be-3693-45c1-a966-64a87ce3d9ad",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0e79c458-f5b7-48bb-ad27-54501fcf6c57"
        },
        "item": {
          "id": "a2d74156-4bf6-444e-aadf-e6c9a8a37cf8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "116ced7f-4c6a-44d4-94a1-545fd7e090f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce348dd-e6e0-4263-86ba-ede5ecae59f8",
        "cursor": {
          "ref": "e368c9b1-bad4-46d2-b3fc-7d25bd3b10a0",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "9c86697f-1f9a-4d4a-801f-eccda2f6f2fe"
        },
        "item": {
          "id": "cce348dd-e6e0-4263-86ba-ede5ecae59f8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "766e93da-75bd-493d-964b-a4dc58a71291",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb399d1a-d2bd-4f61-b0f1-1ad387f32c6e",
        "cursor": {
          "ref": "2bcd94a4-f0fe-4224-ace3-77faea843f0a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0dc19504-1eae-4693-bb4f-b8c03c9a66e3"
        },
        "item": {
          "id": "eb399d1a-d2bd-4f61-b0f1-1ad387f32c6e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "d49b926e-ceed-4c5e-9113-5c8d8a096fcc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f710d9-8aa6-4f8e-a5ca-a0c221f517ff",
        "cursor": {
          "ref": "0ec8a86a-8dca-4795-9cae-14336fc60846",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e5080944-aec4-45de-bfc0-111851da52ee"
        },
        "item": {
          "id": "96f710d9-8aa6-4f8e-a5ca-a0c221f517ff",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ac8d3559-4d62-4024-a06f-a78ef2cd7bfd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad6be4d-6e39-4100-9381-dd26eddd65a1",
        "cursor": {
          "ref": "80a35238-4dd3-4066-8597-1dd9b45f9252",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "429292f6-c9f3-40bd-b797-3a0b9ca148dc"
        },
        "item": {
          "id": "8ad6be4d-6e39-4100-9381-dd26eddd65a1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c835513e-00a2-4bba-8444-7b6ab0606825",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0576b42-9c7a-433b-a1b6-4142cea2fbe3",
        "cursor": {
          "ref": "cd31667b-abb2-4671-9cd1-d35120d9ec44",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a3c49935-5ed4-4bdc-9a25-6b5a0404102c"
        },
        "item": {
          "id": "e0576b42-9c7a-433b-a1b6-4142cea2fbe3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "807dd2ce-e3d3-4acc-817b-ac67dd81ff63",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b80bf09-ebd8-4573-9227-27dec6bcea11",
        "cursor": {
          "ref": "3529d2c4-f904-47fa-88f0-c147e58b7ffd",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e8b470fd-3a53-4e70-baae-26332afd0ade"
        },
        "item": {
          "id": "2b80bf09-ebd8-4573-9227-27dec6bcea11",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "85c6f961-a1d4-410b-8c2b-89057b6a77f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab572bf4-3496-4afa-9f49-f53f04fe64f8",
        "cursor": {
          "ref": "ccdd6e71-c4f1-4a42-87d2-eb4df09077cd",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7e2c97a0-1d78-4407-ad02-5768303299a2"
        },
        "item": {
          "id": "ab572bf4-3496-4afa-9f49-f53f04fe64f8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "688f7298-2142-46ed-8876-f12b0d2264eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9d19f5-3ca2-4e28-84dd-36ee1bf027c9",
        "cursor": {
          "ref": "7554f2df-9aff-4364-9d32-9a68455365bd",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "d83972e1-1926-44a6-95df-b22b2a3115ca"
        },
        "item": {
          "id": "4f9d19f5-3ca2-4e28-84dd-36ee1bf027c9",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e1dd64c2-4a59-47c5-acb7-ea947986295f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e142b9f5-5582-4ebc-940d-eef7dc9ff869",
        "cursor": {
          "ref": "9c30c949-849c-46ae-9f3d-31291d1569f8",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c879a948-a82e-48c9-b3ba-d17eb0c21a65"
        },
        "item": {
          "id": "e142b9f5-5582-4ebc-940d-eef7dc9ff869",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "81c1ef74-45da-4ba7-92ed-f3de7600b872",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de393875-cb73-4bfb-9d6d-07641556f879",
        "cursor": {
          "ref": "ef45b0db-e6dd-4d9a-a2e7-27e9f9d80469",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "cf38af37-9409-4ded-a4f5-13ff2d439cdd"
        },
        "item": {
          "id": "de393875-cb73-4bfb-9d6d-07641556f879",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fd26fa26-8ad3-4862-a8b0-0e92392baafc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8c20ee1-6b56-46f0-a9e7-8f979d6755e2",
        "cursor": {
          "ref": "5ad13de9-d7c9-4bbf-ba88-c54e57fd1e55",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5c2c576b-b65a-4dab-bbb7-38eeee1b8c62"
        },
        "item": {
          "id": "c8c20ee1-6b56-46f0-a9e7-8f979d6755e2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "f816b278-4d59-4de5-81d7-c2dd2f58e33f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3be2f9b6-0bdf-434f-b565-d9ef81f83dc7",
        "cursor": {
          "ref": "e4bd8ecb-5f39-47df-870a-cda03a17d030",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ab725264-5d7a-4b1f-9fce-719bf2696891"
        },
        "item": {
          "id": "3be2f9b6-0bdf-434f-b565-d9ef81f83dc7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e7405fae-1cca-4b35-bd3b-f3c58bc8813a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3a584a-a881-44a9-b380-b7dc34b1b56b",
        "cursor": {
          "ref": "7c38532d-c1a7-4035-88a2-a9f1715fa852",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "73c85e6e-76ff-4ce0-a6a7-7e4f496ac167"
        },
        "item": {
          "id": "cd3a584a-a881-44a9-b380-b7dc34b1b56b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "68a3a953-64a2-4897-84b7-6cbf8ff34b51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "628ae40c-f24a-4c9a-b45d-e7f9a12d4241",
        "cursor": {
          "ref": "3265f772-c2d8-4857-b43c-29c8ddd929bf",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b9c05759-9c0a-45a6-bd94-7abd1aa7fb55"
        },
        "item": {
          "id": "628ae40c-f24a-4c9a-b45d-e7f9a12d4241",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e8dcd3bd-d284-423b-a7e1-5916c4a1c59a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c567f52d-3da3-4b52-a081-4486eaed99c7",
        "cursor": {
          "ref": "ed81fb88-5aee-4a4a-92a9-1dd289fc145b",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7f32977c-b950-4059-b04c-2d4744f16d3d"
        },
        "item": {
          "id": "c567f52d-3da3-4b52-a081-4486eaed99c7",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "830131c8-28c6-44b6-b769-5a227fd2d38e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb4ea2e-5a4e-45d0-a6a6-9726563e5d58",
        "cursor": {
          "ref": "f4716f71-c3c5-4e98-9bb8-fef0099632d3",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4acd17c5-ea82-4e74-b5fd-e9968737f62e"
        },
        "item": {
          "id": "5eb4ea2e-5a4e-45d0-a6a6-9726563e5d58",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "47e18ee9-5068-4d88-a2b3-5794bfed9e8b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e7e315-1e9b-4d5a-ba25-1dd48731a447",
        "cursor": {
          "ref": "9234bd2c-88b5-4251-92ab-63c8c8bea8c6",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "98443d96-24b6-4220-8f4a-88d3f11af02d"
        },
        "item": {
          "id": "24e7e315-1e9b-4d5a-ba25-1dd48731a447",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6eaec1ea-54ec-4041-afc4-e1d444a02316",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013efba4-14de-47fc-b345-e303639186bd",
        "cursor": {
          "ref": "a77dc877-d0f6-43cc-860f-e3f9a18dc98a",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d39a5c30-3c59-48bc-80a6-83944765b057"
        },
        "item": {
          "id": "013efba4-14de-47fc-b345-e303639186bd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7532378e-d068-43b1-98d8-99dea709034e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f7bff4-75a6-4c2b-a7aa-2101d8f4383f",
        "cursor": {
          "ref": "861391b5-1fd5-46a5-b276-4fdcdad8224b",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a1d934ea-8f08-40d0-895a-7a97067560c1"
        },
        "item": {
          "id": "d8f7bff4-75a6-4c2b-a7aa-2101d8f4383f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "daa33116-ab28-455b-86bb-c2b80f5d836a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b70e20-5e38-4e79-8043-daa909de321c",
        "cursor": {
          "ref": "699326e5-59e4-4853-b55f-9e348a3e063c",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f22c0405-b9ba-4558-8a70-bf992799d950"
        },
        "item": {
          "id": "b7b70e20-5e38-4e79-8043-daa909de321c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3e779254-08f7-4a86-93e4-d73676ff1c1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "376f419b-77d8-485a-9939-b1e6c886b72e",
        "cursor": {
          "ref": "f70f4478-41a9-4a66-bfcb-ebbe93325aa5",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ade3aea7-0824-4408-b52f-393d4bfe45c2"
        },
        "item": {
          "id": "376f419b-77d8-485a-9939-b1e6c886b72e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ebcea94f-b361-4aba-91b7-b029549cb235",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "15d20882-e6dc-4186-991b-7384f48af00e",
        "cursor": {
          "ref": "d3a9d12f-6fb7-41cf-a039-bf56ebd750ba",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "04f22344-f7a4-4027-a2a0-82932d02ddf4"
        },
        "item": {
          "id": "15d20882-e6dc-4186-991b-7384f48af00e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3e988a88-05f9-42b8-8ac4-a071dae60a9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "e52c77fd-c907-4b4c-a4c4-f3b527311abc",
        "cursor": {
          "ref": "6e87f4ee-a401-42cd-8fb6-c2ad7c7727a1",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3fc27d6a-f396-47ac-b7a1-bd61e0388fff"
        },
        "item": {
          "id": "e52c77fd-c907-4b4c-a4c4-f3b527311abc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fe76f212-5770-4414-bb27-d7756889e199",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52c77fd-c907-4b4c-a4c4-f3b527311abc",
        "cursor": {
          "ref": "6e87f4ee-a401-42cd-8fb6-c2ad7c7727a1",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3fc27d6a-f396-47ac-b7a1-bd61e0388fff"
        },
        "item": {
          "id": "e52c77fd-c907-4b4c-a4c4-f3b527311abc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fe76f212-5770-4414-bb27-d7756889e199",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fe32b1-e81b-45b7-8b56-9e66b6fd7c62",
        "cursor": {
          "ref": "4e6fc360-bd21-41c1-b54e-fb9942f03385",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5c37bd97-ccd1-46a1-9db4-ed57fbb43334"
        },
        "item": {
          "id": "96fe32b1-e81b-45b7-8b56-9e66b6fd7c62",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1cf53c84-77c6-46f8-b210-394fe7070154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a50d77-b795-4759-96bc-96a0f31456e5",
        "cursor": {
          "ref": "62d8c5fc-6f58-4bb3-8812-4b9e57397a75",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "0b21ab27-260d-4487-b8de-bd6583755019"
        },
        "item": {
          "id": "65a50d77-b795-4759-96bc-96a0f31456e5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9d91e64e-4c80-40ee-9b54-aac2cbb21e69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}