{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9c97864a-564d-40b2-9949-21a8715ca47e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "51fbf2d7-8bcc-4901-9377-963f27af3b10",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7e8a5129-a60f-4370-bfd9-d750695bce21",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "27b4477f-bfc3-4976-bc6d-3b06c084509d"
                }
              }
            ]
          },
          {
            "id": "c48ac420-50b2-4b1d-90f6-b860e2b441c6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "220b21ce-56d7-4f65-8e86-37d9b2402b3e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "98786980-a34d-4e66-ad3a-8ece50db6fe8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "eb9b9cc1-6cb5-4b2e-8bdb-bf9e41483ba5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "97dfd855-6441-49b2-8a4d-9014eb1833c0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8097bbe0-e4e1-4c30-8d5b-2d73a7304241",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff9d362e-e2c0-4650-b8c1-16208162312e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "302dde09-5321-4500-9dd2-6a827b265441"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8e5146cd-34cd-4358-9b6e-7f1f78858367",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "beff27dd-a3dd-4c50-a9c1-87513f8915ea"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6c53488f-9130-40b7-8ca5-8b9128a8ed39",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1fe24d0-72d5-4919-9986-7d73d8c7dac5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ac55669-63b8-430c-9a71-53d4f78fd843",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fdb2f0e8-f380-48df-8d19-7c4e94e922e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a70b66f0-43b9-4da7-a067-e276d4dd5238",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc884235-9601-474c-9563-9f3befc66011"
            }
          }
        ]
      },
      {
        "id": "11ca5eef-046f-4f84-ab3c-0ef30dde33c1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4dd8c1d8-6fa1-470d-a972-f465a2af3b49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d917169-f27d-4c74-b0cd-45245439ed34",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bdcedc49-aaea-4649-bf00-f0e255f2dafb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73eb73d3-af99-4a92-a8f6-511595e103f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f632fb18-7ac2-4391-8d27-0421b02b6837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a585e5b5-ed28-49c7-a2bf-ec2b5cd876d0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac771ff-80a4-475c-a4b2-72215101ec5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd5b25e8-684b-4946-9c94-690eeb6c9143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff03cbf-8e36-46e8-9d61-974e3e96dd22",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6149a6e-3eca-4038-9ad3-cdc6d1209570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4509ddbd-b1f7-4ce3-bbea-4565f01f94eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "01ff21db-b34a-46a7-9220-9e94e6a26d48",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d4bd048-294f-407d-aef7-7e2c566668ff",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8356a5b6-9de0-419b-9fed-e0bad65b13aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb8d73f8-d29a-417f-8cbd-6eeca0a0f449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ce535b-80b5-4894-822a-1cfd8ca82d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed804e29-068f-4e06-b2b0-abeab5c82d35"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4808342c-91c5-41d4-8030-d713dfdaa029",
            "name": "Positive Testing",
            "item": [
              {
                "id": "766b3787-7b19-4933-bb57-1bb414b42b87",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ac07985-b201-4992-a1bd-5799f325ab0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f9e40d47-0325-4ae0-a468-636b5f731f2d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9064388e-c70c-455d-bc71-85e008066225",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "6e86b18e-ad20-4442-9dca-d258d5261ea9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83821cad-f829-40a4-ad44-c38685ca79f6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7df10e8-2885-4eb9-bbe7-b32bac1ad72a"
            }
          }
        ]
      },
      {
        "id": "fdf2a63e-22a1-4e87-976c-c9c8bddbe431",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "afa5a2cd-4fc9-4de8-9e8c-de652b11c191",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e480dd5c-d39a-4e58-a15e-61ab02f5897a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6c90f4e8-69f0-430c-99a3-e5a8751293e7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680c006c-ec15-44b3-9998-78fbc7f6f312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac31eb5-1f83-4db1-b949-8549d8f6b33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe439bb1-96f9-4b4e-8fec-fd37158abb94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "457f222a-ac70-46e6-91cf-bb81870ce87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950fc332-d2d5-439b-9542-e6330a705098",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b006a4-b3c1-4095-adc0-a09a094fc4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd389ef9-bd14-4d5a-a093-5280e7c2f532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234adcbe-3ef1-4c36-b0fb-17c35f35e673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "988dcfe2-6c5e-4e3c-baf3-a0d45619d0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ce94a8-6805-4fad-b0a1-5b912b98056c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85be8bae-4334-41fb-884a-5d7f78b2cb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6afa2d3-ce34-4f41-9ba1-0a1f8b7997cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a1bb08-50a3-4126-b798-d114531483fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e98b734e-9cba-4f71-8783-edce93b6b92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18532182-90ad-41ab-a725-dd6431c7fe62",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a6b55d-25ba-4b77-9375-3e7c274cc9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e75b84-d774-45c1-8c7a-62b6b8fc4f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7b7ba4-7c36-456a-8998-1fe49b69571d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "030cd1e4-40d5-490d-aa39-b45f60840f8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca74893-e51f-4f1a-9691-7b2632432482",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81c37a0-c49b-40ae-8641-a781a47dfd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c8eb2a4-8d92-4ee6-baa0-1d7bbdaf0034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e490535a-6158-40b7-b923-17939ebec41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e516975d-ac6d-4016-b200-aff66c24742a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd2260c6-e3c5-41d8-b66b-ef2675df158f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47af7e16-9154-4f5c-bfff-f91eb379f68e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030cb630-eeba-4b36-b932-9696aaa77c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b330218-3032-40bb-a4cb-116214a07d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a168e796-3755-4d42-8d87-e5763eda5713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b08259e-9668-4902-b6b3-71361ac654ea",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a676eefa-dd1e-466f-9f4d-76279d1d774b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89af2da2-692f-4a41-8c14-07561ceedbc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c39b4f-0132-4aad-80ce-8c0781b2878c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7121f8ae-389d-4f4f-9537-8a7b6889e710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95082afe-097d-4809-b0fe-35893dbf588e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e7638c-dd88-4a57-ab4d-33338ce63d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2262ec13-1655-4b70-937d-1c67a2f77d94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b748d8-82d3-4610-8bbc-7a69f1f31b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "041b334a-4e3d-4782-87a5-3bed84107550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c242fd-4c3a-4fe4-8329-96a3445815b2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c05ff56-b5fb-496d-b7d3-ee9a7df0a520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c03f40e-4f9b-4cb7-a1d9-1df7f3cdac56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cab6788-f784-442b-ab49-7c342ce71846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c96a8f6e-dc98-4106-b28c-34b6e5fdc437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274b33b8-fa4d-4581-b7f1-b126ff0a21f2",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d69cdf-5340-4400-bf00-b32766a5fc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69197327-55b3-4bb3-b96d-585015b1d753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a5f45a-82cb-40e5-9ca7-2c0558885749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31e4ef61-7b73-4f99-9931-e906cec63fc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37cfd414-c7de-4749-847d-a457636d76d1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bafc9e91-3598-4019-a80b-4ea92467ca24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1cb56d4-1321-4830-a828-923a31e674bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdf6aba7-54fb-464b-aad5-5f5769c93751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "663603e6-581c-4134-9c6e-f6bf6cfd7b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84338cd5-295c-4d03-a077-4cc43256480a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50cef5f6-90d1-43bc-8cc2-00f9d2681c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325fb659-556f-44ee-ab49-221e1463a45e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800577be-c4ea-4633-8d9b-21f55ea784e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "982790c7-67c4-4096-b269-82e73f2a94f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3fbeb2a-99bf-4b67-a67c-fc9e5509be41",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dcff5c5-440a-4d52-a1af-507405f51350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f0c9a1-35d5-4c12-93b4-def74ecb8e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2985f06-6cd3-4441-b095-de1a7d4a500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97a9aacb-f71a-44d3-a3b6-d4f1d8db0004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46854a86-86ea-4a80-b230-f79e2ad5b5c6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac0ef43-f59a-4d85-82ed-45def98ff68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad73a0d8-b190-4aa5-bf92-4ad577e7fc9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5f1e76-1562-44c4-91c0-0b799212cc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b47031d6-7f7c-443e-9543-8a3314e411c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f275a0b-fbe5-4547-94f3-a98d4ceeb97b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b02b85-0dc4-4f25-afa4-a25a2d6c60e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cd8600b-094b-41a2-93e6-0ac6ad29d145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5e45cd-5826-4248-88db-49ba761e8d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b817db6-6010-48e1-9511-c634b4bedeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78a8082-b77b-48a5-b4bc-268a24d57159",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0a0c000-1b7d-4567-b688-0b050cacb7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c524af-aac1-4eb2-8ee9-f3277bfd0c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24b908e-b37c-4938-ac04-edb17f688138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2d96897-2a3c-4335-9755-392d0224c9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc161c74-d57d-492d-a483-ec194dc73ee8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15311ace-7b25-4069-8318-544313656e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1131c83-473a-41c8-8971-a8da003d6266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "515605b9-5030-4691-8c8b-db6a5e02be7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52ee0ae4-edc3-412c-bd1c-7ed6ce953379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70177e31-9eb3-4296-a080-dc1c141599f1",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac94206-50de-4c9c-bf19-3351c37f7d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a0e676-a28a-4429-8ddd-504b63702364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a280bf9c-8bca-4817-9a1e-e1ceb0b67821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "98180f90-fe8d-451a-818e-22f8e36c0781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda1a612-0a04-4bd5-8c7c-1249222b01d0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9b1c5f-c131-4fa5-a16d-ab4fc413eb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d77857-1333-430a-b187-2ca3068e5c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77507492-74b6-4be3-abe3-3e0ee2d24878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b0e494-b1fa-4a35-afc1-3f3ef98857b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c515f6-4c49-49a5-8051-1426493dfec1",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e56ca1c-b629-431e-b497-b43afaeae22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b08833-2ab4-4f4a-b489-23462bdb3c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f414b9-9e84-4c1a-b4a6-f2ba3871e1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d62c1588-72a8-4780-ad8b-9d268eac060e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00aa1cb1-c790-40a9-b6b0-6c9c0bd87eb0",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e661a60b-b05c-4dfb-bb5e-d43030b46ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18bc312d-1121-4ed2-b4d5-58fafea0a61e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9357e08-bc1d-4e02-8dca-90796d69ae6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f57822fd-9972-4d47-9bfb-38424dc6e564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ec1888-12b9-4646-88ab-358e05b28b70",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f22a9847-9b24-46e7-bb5c-d64a23bad532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6929dabd-9f3a-44d4-bf00-c053ed685ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4583ceed-ba9d-468a-bcfb-c3f6d71f40bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8ce5f6a-5de5-4f5d-9051-7e411e7c41b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1667590b-fd83-4702-9785-58960defdccd",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "018d7a0f-57fc-47b7-ad88-36360f1d1335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c597d9-c50c-4863-bdb4-6020a29eecee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae7d697d-a152-405b-a3b9-db846a314318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80d5594b-873d-4290-ab5e-b6d672e0ecde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af3a92e-3f7b-425a-b274-1e525f3440bf",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc05857c-37ca-43ef-a3b4-e494340bf2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3354e549-fcc1-466a-902d-fb4f220e8e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135da2b3-bb04-4e3c-a739-c15114b0952b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "598252d2-b04f-455c-9597-abf7c39fa788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3d560b-4b25-44b1-a737-0075e41ef85f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee7ca66-843b-4fe7-8cbd-feeb8ba85609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a5bbc5-ba44-4455-8f70-b1dd3855f567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30d6420-915c-4c4a-ad6a-c7c8031fa50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "280b6c0c-2cdf-4893-b023-c1256f772092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fba6ba4-3457-491d-bef2-215c0981e68f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19571657-0210-40ef-891a-5027e3108c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe722eaf-9638-4769-9cb3-ef0e1211868b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a508069-2af1-45b2-9fc8-505c103edb47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0d0e27b-84de-4004-9c85-4f571226e2c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5039a2-6df9-4c70-b130-5004e06e4d3e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33c277e-733d-4323-ad02-631d8707607f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf220e0-49bf-4ba0-9604-be573858e8e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea088cea-21eb-41c2-842a-1704bbbc3398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa5c7154-8bcf-4a1c-830f-21496abba615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916a3e94-a6cb-4efe-8a53-10b6b1538725",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7436f06-3a91-4770-b3bb-507be55d6e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7b5dc91-9eda-48bb-a6b8-be12bf9151b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b90d0ee-9955-44e3-acfc-9ce55b60df88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4794584f-5c02-431a-ab17-c2927a7cc376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6bad138-7b77-4ed2-b9dd-91def2aae3e3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562cdfe8-c17c-461e-adba-9c434fa8142d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d4ff7d9-2ebd-4813-9fa8-89e3ee259e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc8abf1-ba28-4c51-875a-b194f5b7db0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf03aa47-db05-4666-ac9e-ba8a594f5073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e387497-e832-4739-b625-ee2e138a04ea",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2d0f80-4406-415b-8b63-4e831b4738ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c502314b-6a34-4450-88e6-6d87ef971d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605f2967-56d6-43d1-b4f6-87398ae6b02c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a80791c6-eb1a-433e-9656-e51c2b659333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275ef2ee-4821-40c8-88c8-c6834d01b813",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c63ed54-b578-4d38-a588-79a7993750d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "548c121d-c128-43ca-a4ca-40563e9d3b88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f7b7327-e223-4792-bba1-aac6cc8080ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "057b0f75-47e5-43ea-9cfa-450fe1e895f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9a320a-8400-4ef1-b6d6-d908fafede10",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64f6b20-1e1c-4d79-9411-60565c23b62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c25a1116-2f76-40aa-ad4a-aa8b9862e1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab7872ee-a908-41af-8325-69344b166e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c34653d3-5c37-49a6-81ba-e064f9c05a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6592580-98a0-416b-a576-d77eda3b2cdf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26beb776-fd23-43c2-a683-dde3dd1a601b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8118d67e-186d-4e42-80c7-fb75a15c2446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4253215-f605-4485-984e-9312db4981e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62cc2b93-f98b-4bd5-b183-bc002c24d0c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514e1759-3fb3-4d97-b61c-71f527ec37f0",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf44eaa-154f-4ceb-b694-4ade655cfebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc050a0-8b16-4a86-9629-5212df9743c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "614cb937-015b-4eb0-b43b-b48f0a78f52f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da4c5a48-65d0-4058-bd2d-ce000817fb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9d089b6-4898-415b-aca1-65ac98eb0d94",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6881c58b-ee85-4057-b0af-b8f5c1ef99ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2ef7a3d-9b0d-4e6d-a8ea-bbb27d7c523f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caecbefb-01e7-4a51-bd63-ec4347cfb0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2fa69eca-e981-4478-8dc7-e8af84bf917f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f094c6e0-9284-4cec-935c-3d1f5bb5a93a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3052b88-d978-4ba2-b163-af3fec968114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c54bc72-8efd-4324-8f07-9a7a3ed93e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d418ba75-268c-4a3f-a903-276eae3e81d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb36bbf-aad7-4d2d-8701-a67e160f3c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da13e30-268d-4682-8f48-e0ad22b378dd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ac25cf-0ae7-42ec-b72b-4d28d44772de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf35bac-2576-4b5e-80b8-5eeeda645de3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e99059-0864-4bcd-a895-651c46fef860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "72bb6769-2b2e-415c-a9de-3f40b7d7efa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184b270f-38e4-4661-9cba-9ddbda22852b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0b3fe6-8a14-4928-a14a-7fa19391b415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334ecee2-abaf-4119-b19c-7237dc85b598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480cca5b-628c-4ed8-80aa-8b89c5a1d40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7222131d-74de-4a43-b273-68c3dc480f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe69952-626b-4a1f-9b46-77dd0dfa0642",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dead328-b2ac-4cac-b699-90640c31e464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c1b813-7b55-4d11-aff0-f7b2f4c07db4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f2861f-de1b-44da-af69-d168ea6abd42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b0f0f0e-0b86-442c-b930-950ac03a6759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e4742a-4d35-47aa-b595-b4d0f721b3c4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e3e2a7-28a2-4d6c-8b09-8029ffaf09c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ef43ab0-0105-4116-a854-911efa60e357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1631ed73-5298-423a-a77a-81dc3c1e7781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa05604-fd61-4bbd-8a9f-08a9ae80adb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63d9af6b-281d-4cc6-81a0-7e6432a2dbf6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a52b81-f1cf-4b7d-8169-5eee448f7a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e76581-0fb3-4ce3-9022-14c1da6baa96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5583b5d5-44c1-4d6f-bf3c-ea4067541b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a2bbb6-cbea-407e-89f9-bf5adca2923c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6274b02d-a76a-4a0f-a5b4-18059db5c8c4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38082fa1-ad52-48fd-ba3a-4ef9d6d1d911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213c0e11-c43e-41c7-8c41-cc425c16d20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09c2397-448d-419c-8e94-32b89336e929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0974c579-1f19-45b5-a8da-ff9ec7561923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f064d8-4bb8-4a2a-a135-a7ed6c65ecbb",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5152764e-cebe-44fb-a0ed-80dc0910b472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dbb7c68-335c-438f-9067-61fb2fd87038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e9d103-7dae-4b7c-89f0-3e5c38b2319d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed367241-4cea-476a-b179-fa9794cf9e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f002d3e0-140e-49b5-a82d-cf8afa96b41d",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe5a03c-a98a-4358-adbb-2d7f2f0ae300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75212b4-23ca-4fd6-9e8a-5f5628c93e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d15f376-36cd-41cf-b5a3-a7adba0d12e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "832855ee-454b-4981-9459-2fa8dee3e9b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1476262-d741-4df0-933c-dcf0692c0653",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6415ed1-3b55-4569-a86e-5cf9c898ff98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39be38e2-2d04-4bd9-945c-a3db0ffa6a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44e83fa-b63a-4491-a89f-b6b3256c8480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aefca6b3-4e07-4582-83dd-3d5983991c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c968b7-4cb8-491b-9885-943fa9cdd2a6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b3f3bc6-ed76-4d14-8839-4e0e39d72cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0536860-f590-403f-8149-4959d42dca78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec2eef2-2e84-4825-b226-ff45821d38ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e765ef37-f562-4612-8f64-809b17844013"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0c5368-d454-4955-8ca4-1945bd910a5d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f891e63-8e29-4a76-b01c-a8bd53b5e621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "523aa430-1f10-4c41-bf56-460e2ab22ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18bfddf7-f87d-4c64-82df-0babbd038296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f73e41-5bab-4a95-960d-804f4cd34eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "821ba713-2a85-4774-a04c-862a63b3c8a0",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fdd98b-71ff-4167-a6c2-f6ec28893ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7477a0-a552-4b5e-b290-14999bb72a86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4cd8236-9fc3-4efc-ae66-ad2c55eb43c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bc524e7-f8f2-4b07-bbee-27ad77a60053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f595c109-f0be-4be5-84d6-aabca77c2840",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c803ac-62d4-4498-98b1-9051cee9e5e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f02e1f-3512-4b8d-b620-3590e68d80b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677966ac-40f2-4ae3-8967-5fe1a7c451fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "986d892f-2e32-48f3-81fc-f5b7b292560e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8ce126-a0d8-4787-8f14-4e14d20f09ed",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46456b4b-fd96-40f3-95e8-be1d4a25d2eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cdf27ad-344f-44bd-aff3-bf62ac06317d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1022d9c6-69b9-415a-9991-1ab6dd1bcfdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b10d665c-f637-4337-9fe7-2cd3800cf090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59919604-3860-492c-91f5-50c52f12c073",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "408eded2-6dbf-415b-a10f-92c12811b5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d3ccfd8-1f54-4dcb-bffe-4237f17d85e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e20f84-e801-431d-821f-48fa6f344294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "937f204d-33d4-4953-ad56-1144e34154b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afd172c-cba4-437f-a291-750ee4b2eb46",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e074c4-c29b-48b6-abaa-a54b2d1a1fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80930935-6744-45e7-9298-cc536669e58f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372950e2-b214-4b29-8641-7a0cb1aef32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf518b2d-236b-4b50-b3e9-a8b1cf389df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c27338e-1216-415a-9c31-a838fca20913",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c33887e-0fd0-436f-8185-3fe167f07f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad69b38f-4971-49ba-8e1a-866b7b9a1345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e328d8a4-7b72-4e7c-b8a0-d20e08a99034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48f65e94-1811-468c-8ece-2976ed5d7281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa628b9-b931-4163-a9de-db11f0b09a37",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5026d9b1-c874-4a87-a780-a6beb8133f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc344b66-0594-4796-9285-3db91bcdf799"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c115cb3-837d-4665-9c21-5c6fbfa6e264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6833ffe3-4ef6-49b6-9987-1f1fb31be497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2320c2f-4192-45a0-b897-3d940436a3ab",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0340c3d4-802b-4fa9-990c-5fbd676a514e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2c55731-fe51-46e4-8b1d-02bfc1d559cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c17fce-66ed-4618-aad4-d1eea74f27c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81fd97dd-2a33-4789-9221-85d757f0a7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603ee3d4-7f0a-4168-9a95-1f65dae0fbd8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e2ee2c6-617b-404c-9c50-8c11708434c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed5e02d-05c1-472e-84dd-916ce197c1e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d244c2ef-09a1-45b2-b361-eda24f2d5cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d1d24e44-1fbc-4a0c-8bdd-dae0ebcc1cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83573dd4-ec45-482d-8a15-d0aafb4137b0",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded52ebe-0de4-4769-be4c-01c73844fc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb0e09d-b799-4903-8237-03abf1b96fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26f9b9c-4fcb-4897-9830-be48b7aab455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6a34777-0e58-4dad-a7dd-07db15532abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938df6fe-3206-400b-a43f-f60f648df3d7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e07fed7d-2d91-4aaf-8f48-a47f2c89f9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad44200-0d20-49ea-91fb-0aca9e8b18de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be128c5c-7eed-4575-9bae-169b0163d047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d39b32c9-48af-43db-af51-9b01c8c669c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0ce44f-5f0e-44e9-b47e-0eab974a0933",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710c4c16-4255-4998-9d6f-9e99ce80b4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42e25da-8261-46d3-90c8-93f7e595b495"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae256539-c1dd-4361-84ac-32e46ccdbf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "25ff0a88-67b3-4ad9-b6f4-77183ee6ef79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4023d88b-bdac-4ca0-b4ad-e488933eceeb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e664b722-1d9e-4749-bd0a-b5f37d7cc3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0c45bc5-61fa-4703-b45c-938b6273a551"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e0d7a9-8d54-40fe-975f-456e16b254bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac34fb05-f1aa-4f7d-ad5f-5d569e6794a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5073dcef-a9b7-466f-a9af-1a1e951a30d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e891388f-2240-4fc2-9c6d-ad28acf3bf97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff43941d-f4f7-476f-b8a3-2547f1509446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0ad20e-9aec-4f44-8d0c-511a5b8874ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1addde3-aa4a-401a-9abe-fe5294147352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a40606-25b0-44bd-965b-47a2adfc8563",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3060575c-43a5-435f-8161-04868760249d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd9a826b-4d9d-46a4-9342-79ac2b137cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2c003f-a336-4f3a-a631-40192f26e189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4a479bb-3914-4e3d-819c-b69db7f8ade0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92957a39-1c88-4220-943d-27d4a1efe317",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba206bab-f48e-4e7c-8a14-b27e467618ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc4b6ca-0871-40f1-950c-5e5160d4bad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270113a7-fe5a-4736-9102-077d43995a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "21531de1-4019-49e0-b917-45ae484d9191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b17d7c-ac47-49f0-9404-82fa3348ce5f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd386386-c534-46b3-ac9d-957b75bb17b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da6d1b83-3a37-4a22-adda-f0598625bfb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f3904b-13b2-4e1e-8314-6472d973fb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8de437-48b4-425c-80c0-a487bc6cd006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e13458c-4658-4c0c-8064-7903f471d469",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5685f8-170f-4493-92bd-a93fc17856c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b175657-4c72-44a6-9e89-e22fff9e9210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f935f05-0372-4ad1-aa6f-ed09469d5f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3139e19-2676-48ae-baa3-115e0369810d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2148957c-ffc1-4d1c-affb-3b8619d8c68d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7fdcf4c-447b-4fb8-abc0-0543fd6ccdbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c217e33-0b59-44ca-a00f-be549811fda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8070e89-d9d5-441e-87e8-5e77b83a5cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "14c65d76-6fed-47a3-bbda-59d9c93da68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50aead07-fef5-43d2-a5c3-2804a579450f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3c9b9c-c820-4bbb-86f3-33d8dcee121c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cc5684b-82a4-473d-b072-19bd56318ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579b13a8-c29d-4520-87aa-6c80c9c9fc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e592a6aa-a508-48d8-998b-ebaf368bc376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94a606f-604a-4ab1-bda1-de264d803190",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9417f670-e0e0-4a3d-b7b4-e0d9d6944071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac99e5fd-ac70-4fba-82b1-942f19f84e6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d8f183-b397-4acb-9152-e93469173284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fedf462-a21e-4b40-b107-c9d669f8082c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd25fd3-64d0-4717-9669-bc4f31c03198",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc48f737-d6a3-427a-93db-fd1a633d1e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec94678-f795-4894-aeb0-8df85894ac5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e03b33-b99a-4218-8f0a-23374d0d9395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9945986e-05a2-48c8-ad78-2d765050b27d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb448072-0b42-4e3e-b154-db65d5f5df0d",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a194da72-0042-4443-bb16-3aea99dfe313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54178d1-810b-4727-b005-9f1f4977b403"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81b6694-41f9-49af-84cb-3ba3ebf0baf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0c4f81b-dda3-4e8d-b014-eee7c81c388b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75c8207-dc50-4961-a928-9d97b55273cb",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37bd668-4d52-4c2f-8dcc-cd37aebeaa21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c339d8a-f077-4c5c-9009-345cde977286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bf08fdb-a79b-499a-915b-d9fd770e5eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ba20f4-2a80-4a24-8657-b4be7dea8158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db14ca85-dfb7-4f01-a216-12f906ae2930",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3c0879-28ab-454f-b3fb-ac93ba587ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64efa265-684c-46bc-a2fb-333ef1de44d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2802677-b2d5-4e0f-aa86-e819c3853afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a6ad55c-7d00-4be4-9aff-9545c7fc41a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279712e4-f70d-43e0-b5bb-f39a038e7fca",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8317b1e7-6c89-4028-984f-74047435977f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4722366-94ca-43f8-bf3f-3fcac92f6554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53192738-bad4-4cbd-9043-66ddd2f2c915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e86ea04c-8491-40f4-b470-c642e6063bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d90f7b15-d16e-4166-a7db-d50e69af010a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be31515-58c4-4d1e-9ea6-4bcdae8f15fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f2ea145-f999-4877-a74b-e6c33209902a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d63062-adc4-4df0-b5a0-e9e64ebe1b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c9f2c046-6de2-4bec-8c4d-de67f2e98cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4baafef4-a7f1-45e8-a25d-dd002c1808f3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd391d8b-e8b4-4a38-a5f8-43fe9772da3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058dc937-6bfb-4163-8cf1-d3f9ea68d03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134d9938-eef3-4b01-96ca-011c6e2ee559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c1e19c-1277-44e4-9da3-88da74920892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b788a7-dd13-45eb-bafa-6ba871d3c8bd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f596c81a-e96f-48d2-8fc3-604049ec770a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5262e8b6-6f64-4a42-ba74-ba520f7f912f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22f8d2a-cd16-416e-94a8-c5eb1c2ad9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "923c9939-e6d3-4987-9808-0981a53f823e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288f4de8-32f7-4d6e-a6a2-5f04eae6e400",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4034395a-b76e-46ee-8202-58b5037d381b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a56871-706a-4876-b196-2c5ecd27d4ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04071430-8d15-4d0f-bc85-3eebf245eedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f4d911-1233-4f34-b0f3-76d9db7fd567"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dc8ce9a-2337-4808-8f4c-4dcc66845789",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e86010-2939-4c98-a9be-781a9929d77e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27351592-fea7-4336-aef8-1fafedc809d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2a3edb-7402-41ae-92df-aa66d08a4658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b78b536e-138b-4130-b4f7-50992fe24b12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "233f706a-294a-4d38-b4a9-b7401317868e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e691e875-9e8b-468c-9450-33c01394ee05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac2dec51-3f16-423d-a2e6-88ed56e3edc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afe249e-e957-4ade-8cae-a29196e2c874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9157db7-4117-47dc-8e4c-71bf4b453745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445c0978-308c-476a-921b-17ecd679914f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3a0566-471e-4010-949b-067c5128eeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c0ebe2-4808-4252-b5c7-3a687f5403ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa87aeaa-556c-4b6a-99d7-25847a7824fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50e16db3-29dd-4f29-a780-f86c54e25c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fcb0f80-9eb9-41f6-b242-b63e0410da66",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef1fcab-5fbf-4d15-9257-5c5fa123f9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3fbe9d8-9639-492b-b684-7fefebbe8038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9e331a-9e1f-4979-ab74-2486ed28d0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "70ab1571-5160-4164-9dd1-d71ed5cb5eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85aefd5-cc6a-4dc5-82ed-d2fd409a8374",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d22c38-980d-411b-8360-7ba5de4d4030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88efd930-4562-4ef4-bb70-f7448d417eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2084f525-1496-4569-b8e7-fe9f702570d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cac138d5-44fc-48a1-bdf2-ad20525d0b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af9c969-210b-4a31-b713-70287e6908ed",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7963dd6-78bd-49a9-8253-ec4da1877ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc53131-76b9-482f-95a2-ab23b1725758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f09eff39-be5d-4e8f-a498-4af9f1fd22a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce94473-45af-44b5-bc59-8ab7f7777301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c207852-4086-49e7-a15a-0a1ef32756df",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7884e4-e14d-4d57-bead-3be4a2da5f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b798b63-8a44-4664-b172-82db22f52414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e5051e-6149-47ae-9f29-ef3a4471b2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc655fd-f989-47a3-87bb-9b09a0222a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8c7e5c0-1622-4643-8f49-03a288d80b7d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb8a77c-9e5a-41cc-9453-d5b84e98d09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3d905a5-bdbd-43cc-8b6d-60d5a3df9383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e74aa9-74a7-4950-bc8a-44746e752374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59e4867f-8dde-421d-b2df-9affd6aa474e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d2d3d1-f369-4b91-9525-8406baa261bf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba62faec-b919-4d75-b458-ce335ccd9e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efd3a203-c3f3-4f57-bdf0-f93e9f53e2f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8382e32-3ed1-4e3d-8941-0ae5b0717378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce1f6a38-741a-4bb6-83b1-8f520e73b501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d83fda6-373c-4226-b4d2-bf348cafce86",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8d8bb06-c87f-417f-abd4-46da46b12ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dfe4586-1b4c-4c34-b38c-09f0c797823c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b20961-62d3-4a68-80ac-5001b264f597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0299ca10-685c-4ef6-9ffd-b461dfaa54f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4ed532c-6354-4358-8cb9-2995d38a9291",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2d81d71-8909-4f4a-ae84-3ce96aeb5989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eafcbb2a-3e32-4d01-84eb-58a85c18b56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fc66ae-4657-49aa-ae30-39848fb0ee3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "561e4880-3850-42cb-8e57-4cd95829041f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d685dd0c-42a0-49bb-a73b-ab109f8c2401",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf78a51b-ccbd-42b6-897f-0f5c8edf865d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539c8a2b-8490-4eea-addb-f6322a6e0f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8787070-9927-4cfe-8924-e1cf92f04b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1411302d-1356-42a4-850a-a3ed96383352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65811002-d53b-4837-8d9d-98aba899ee59",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad59c95-e2c5-449a-9c9a-e32a5415e688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5a1d43-0fec-4e27-8db1-6b9dd10ca896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f0e4918-5421-4895-a1c0-64940d47eb2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b283cfa-9d98-443d-a1e8-1a22ea806e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637e11f2-d083-4e23-b0c4-8037c3807fd5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e689d72a-03a8-49ac-b36e-bace161bfe19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45b3ecc1-6cca-4b34-bd72-f0644d03d010"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff756f2-f31e-4ee7-804e-751f2b21d86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d69d44a1-9111-474a-8036-b8bccc4cfa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4259cc9-4625-49b7-a168-333cef9c6b63",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f4be0e-814e-47bd-8e8b-02e9ab05f550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5f818e56-e6c7-455a-88ff-57f132fa1b7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb6661b-1d8e-4304-85e4-5c4960f3739e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "24837c28-a9bb-40d5-bf26-b4ac4d3bb62b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cadb90a2-babc-4eda-a34a-a4627984f80f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "713be87c-d71f-4bc3-b99f-09c3233b9d93",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab51e28-7f15-4090-bb21-12a624de7c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94353e2c-53e3-467c-bd20-37a80279662c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c7dff0-17ce-43d5-ac2d-d26a8056dda1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d52a3751-9985-4831-9757-411091182775"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c57e84f-bdab-437c-83a3-86ae7b8318ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "74423679-5052-43cd-b1ef-a37116859f7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc56370c-c0e6-4b66-adb8-1c003883c86a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d077f454-13aa-4a82-871b-2ce2dd2990ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fc3f73b-399a-496b-b660-38dacc1f0b92",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8bf84b46-f7e4-4863-90e1-bb664e8cdec5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b8d183e6-ffa8-41d5-9386-7f607935e6f1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee3db53e-07a0-4a6e-b2d1-add0d4304c44"
                }
              }
            ]
          },
          {
            "id": "c2ff793a-8522-4f41-a8b4-bd45d3f41d2f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "78fde23a-d1e5-4b74-b4d1-674c34574513",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "86ecc353-4d5f-4adc-bb23-aecd84e41d52",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bd13da-4e15-48a6-afe2-d53e55d0981f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "61c89658-fa6b-447f-bf5f-75189e37fad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7d7ce3-3f0d-4047-b0e0-6e5c9539d113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df733916-2201-488b-ab5e-9ef1f899b093"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56047049-fa0f-4adc-96c1-56deb91aaf7c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3427cfd2-c681-4ec0-93a1-582c24749f5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "69788dc6-4264-4d02-9407-efd0bff55b21"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfced9dd-34fe-42b3-9a65-a2b5aeb4af2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e9bd4e1f-ce4f-4ff5-a878-34fcb123e849"
                    }
                  }
                ]
              },
              {
                "id": "4a2caa32-471f-49f5-af70-bb40c8168dd7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "461e9940-0d35-4598-950c-25d16ca4f5a7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7bed604f-46a0-4765-97a4-e0b9842975f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ba83e0a-b115-40b0-9f49-48e01a6e3201",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d72ac02d-4b8c-430a-8e6c-1f1ea1e0613e"
                    }
                  }
                ]
              },
              {
                "id": "f7a2d8fe-be8b-4c0e-ae45-b839a5a1024e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "778ddff6-8c3e-4fc8-a999-7ae87ab56720",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "01e96941-4ee8-454f-a0eb-20b813244e07"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64a4fb65-966a-40fe-aad9-7dfdbac5a166",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce263ee8-b482-4259-8f2a-d85df9e4899e"
                    }
                  }
                ]
              },
              {
                "id": "ebbabb4e-479e-44ad-89c0-a438e2cc3ecb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e47a9384-b380-4f1d-a155-504893e3e7ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "00790d74-c792-41f0-a802-ec81faba6d51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "836905f2-feec-4f60-bd3d-1160676b93a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8b8dded3-d345-4da3-8e17-bae08f453fd1"
                    }
                  }
                ]
              },
              {
                "id": "fd20ac54-7fb2-4013-a6ac-fe4a8f86ce03",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "78584776-f308-44de-9d27-8009a5c2fcb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30ebc891-c12d-4704-b3ef-2b6279015ddc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f920ccd-6154-4864-a2f3-ac05db8b6266",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fffc0a2d-d00b-4e1f-b8be-2afb66faf4ab"
                    }
                  }
                ]
              },
              {
                "id": "41cbbc20-f738-403a-82d7-c0a903e54201",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4735885b-42fa-4bd8-943e-40af361b0a4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dc71607-1b50-42f9-9cce-a5901793c16d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16452a62-5466-49e2-a37f-3ab06f588e73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c62e693a-94fa-4ba6-b9b3-1bfd4d7ae61a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b255bda0-1a62-4c7a-9193-d0d38d5bb03e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8e884dff-98a4-46dd-8a85-25ff9e84d29e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c7abed75-9345-4e52-a88b-4cb2db4f4fa6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9e355a7e-720a-4163-8862-24245c5b8359"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea960301-e94f-4d4a-afc5-3bc6392916b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0a8591b6-a603-4b15-b014-309f7dd23fdc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52aa383b-e3e3-43c7-8ad0-5af6246ab62d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c33f0a9f-2998-4f7c-9138-ca72404ceedc"
            }
          }
        ]
      },
      {
        "id": "589134f7-1ad0-41dd-9067-82bc2ef669f8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "97d8e333-e166-4fa3-be0b-699d231e8553",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40155a28-6b77-46e5-a38f-df1b88047617",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3aee09db-2775-4dd0-826a-3ab48f45590b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5428d8d-5f98-4bde-ad4f-56487e87871b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "323e1fa8-62e9-4a34-8578-d81124e992f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22c112a-13a6-4040-8bac-c2655b2084b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0cada97-23ca-4d36-b523-e803c8719492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61318382-81a6-400f-b776-3e0641532ab7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18245c29-286f-487e-885f-a0f95739f639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f09ba02-2757-40e3-9fe7-edf69972b4f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e6ad81d-d8af-4ada-bf96-8e10ca03eda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "42f566ab-3702-47e6-91b6-077a1a767802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "031f6b9c-152a-4081-836c-1ef8863e427c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c18bd6d-3084-4f83-b3ce-421d71f58137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4504368-c9ea-4f09-81f1-01db5d40c005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc27d35a-a705-4566-a9f8-13be4f9af8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba614983-12ca-4518-b254-6ffb3c7fd6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa39ef1a-c512-4c81-a02b-778c2fb9413a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb2be07-7c6a-4d92-ae7b-9a9860d560d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b9bfed6-de31-4edc-a591-c6c664e5600b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021ae26b-e173-441e-ae02-7f12ba10c0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b79722b-4b43-478e-994e-393284ec4af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b94f253-ea4e-4aac-9b20-55bf0d80d99d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b926dfb-e944-4ca8-81e8-e10950440f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14daa8d7-74a4-44ff-9d0e-d18ee4fd8b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2499a20c-d241-4ec0-b3f5-4b0599f24a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "93ccd300-fe89-4c0e-a56d-81a501a12a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96cfe7a8-5e54-4f3d-84c4-3174b869e076",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf2f44c-00ba-461e-ae9e-3eaaf4bd4976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c3afe3-752b-4d0d-8531-1f6ab04dbb63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ef1af9-6d31-4ef3-9e9d-4ed40f7a7f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "484b1d32-1d45-4985-9251-73e136362729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d2e3f7-ae15-4709-82d9-32f53347b1e5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fffba3-e525-480e-a80f-eca627a12231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb23971d-82b3-4d8f-806b-bdd47c42e1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd94f5c-062e-45e6-bfab-9a8816861c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "20563335-ff71-4f0d-a851-651a3193ce26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b06521-7100-429b-9e21-c45097cdb458",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f308f54-e602-4ef0-bb40-2385cad64a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ef0c66a-8879-407a-a08b-f12cb6a4d75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b441ba-414a-4408-9d67-31dbc5e0da55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73cea0ee-89a7-4864-b003-32efd878f131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f6ba42-2687-40fb-af1d-c7896b3270ee",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d4ad814-d2a2-4b94-b1ff-99bdbad8bd23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf8dd10-52e6-47c4-958c-7f9ca2302d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bdec86-abf9-4643-b40f-68f7b7ea3010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9504ef43-6356-4065-ac5a-092a401c2a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3204f69-6212-452f-8f1d-966ecff1a7a5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f63836-c44a-450b-a74f-57d9033ac05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f60d5f8-9fcb-45b7-8cfd-0d59bc572ae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1585dcdb-af69-4450-9447-e463eecf150b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17364165-c977-4909-b873-2eabf0a4d26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f418a8-5d35-472b-8350-c6bc02796eb5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dceec651-bce4-4119-be52-f8a135a2503b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5189269-14c3-4ae6-a2d0-5fe21a83e1c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f56208-9992-495d-a4c5-cc834fbefe33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0af22b48-18cc-4def-9d2f-203a73be489e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5991d7c-1414-4162-b132-62396e469bb4",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2809f22-b080-4102-b513-69a23d97018e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a3ae825-003b-4a9c-a62f-8b5680fc74d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bfaf8b-9828-4634-a6fc-340214bb0b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd3b967f-37fc-4f02-af69-ddad8b9bfc0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62c9d82-e4a3-4c90-9054-105c8837f092",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961ce8ac-95f0-4330-acd3-982a11219c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4623287d-33e4-44e1-a6ce-0b7261c58a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763c1de0-1f48-4c7d-85ee-e0fa460b456c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "421d2548-9cbc-4306-9e2f-ab2b21988fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4070b8-160f-4314-b291-a31341b71a50",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976353ad-cf19-4576-a589-bbae135147c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78bff2f6-ba07-451c-8351-a93cd2c7fce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4f2ccb-5c81-423e-843e-07b2a5ef1d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2765842-f0c6-48ac-9d7c-8590f8270fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f423ad50-8f52-4208-bbf9-0c0fcc9c7ec8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7fac7e-b459-4631-a2b4-4d7d2916a5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d390b04f-0eee-4e9a-bdd8-641a0c9950a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a5ab6e-dd3f-4636-8ea3-880f4c3c59f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e28b0b1-544a-45a8-8a46-7977ce3162ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eed2577-5f9a-416f-a034-2e0ec419aa8e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523277ab-3b09-4d0d-b014-a8a426983cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375269ab-1182-49aa-a968-5f8b0a888203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f33b67b-3c3a-4e7c-b3a2-5a5ea459961b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "b591916d-258d-4f48-9f3a-c70d70dcd3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6c5be8-95ea-47be-bcba-eb308b83961e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef1fee5-9241-4f87-9119-4c19fa6bbaac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d47afa-cf63-4857-9518-37f5fc8f3078"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df01c06c-3473-4f50-8b8e-f171838953b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1502287-a06b-483a-9860-e3d1f18d464a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28bac89-91a1-4a18-b01c-2656bb65ee94",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb13c17-2313-4c09-8f62-def3ffeb29f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1558e65-3aba-479e-b1a7-fd358d6f13a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f1a171-10ef-409f-a224-d13fc40d4e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce45b6c-034d-4572-9725-d6ff7577b186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c037fbf0-aa64-486b-98da-fbd464572f0e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fbdbf6-2c8f-4e6c-a733-5fd1d21b0673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6918b975-cbf6-4508-93ce-fc4f146323d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489c7721-1d05-4107-82da-df76cb3ff2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ae2fa1-6752-4c51-ab45-9a1572d2a600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82db1675-ab0c-46d8-ae32-0cf6eb6d76a9",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9763b5c-618f-40ad-9682-6684c93ce680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5937b7-70e5-4dc0-bc17-0a07797def0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b0d0ffd-63d9-4d85-92d1-42d1b123e9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34c3aa17-ea59-4b5b-9fb5-fbd49143f18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274c2a5d-6f37-4caa-91b5-4fe73c508264",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0936ed63-93ba-4a10-895b-f63959201296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfc1ebf-d76c-46c3-b88b-07863912451b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b7a5f1-e73a-4c07-a775-8407efc3e06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3fc504-4df6-4277-9559-17cbf73aec8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28db12e-05f7-40d8-9b7d-ca1d706a4342",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd87cef-72d5-40a2-8ce1-e74688ddc0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5182c5b-1d26-483f-a1c9-8b75267039ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6808b238-15fd-4190-abd4-ab4ccff15787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "287619cd-f0fb-4fa0-9852-d6f7e9acde0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b48af5-0627-4fdd-8236-da0e387bb5f5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f23c325-c513-46ce-9136-1d2880d67cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6df658b5-1b1a-4c07-be5f-a6df7486d2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48786f36-89aa-4643-8803-56b8c511c266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7aa3549-d508-485a-b573-84530a8a3848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d77753-7c08-4b36-94b1-53a61eba9ea6",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e99e94-f18a-4f39-8e81-9a928b920a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7299fa67-50ff-46ae-9ea8-0a9b1cd979b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c58259d-1daf-4712-bbc4-24eaa3a8845a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c06e7e4-7848-49fe-bc83-0d2820b18669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492e20f0-07aa-4d01-9b73-ca503ae95580",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910caef3-f47a-4dce-8713-7fc3805cffe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d938d2-2295-44fc-81e6-949c01f137a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8dad36-f6bf-4915-a337-13ca462e5d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f5e533-784f-4771-992c-a1eab726d54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21978c16-2860-47c8-bd3f-331508ad9d70",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047ee45a-43d8-4f2b-b427-cd1885a52289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5773f914-b89c-47dd-8f2d-24086311fb79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e2aaa7-33a7-4bff-9ed0-0b756a539b37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6128caf7-bfa4-4c1f-ba5c-3f76ce713690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f809d7d4-8308-470e-924e-249a9407674f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8390d059-ce47-45e4-84b5-763d9ff5d11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6035f59e-2435-4428-b153-eeb6c23a1705"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edbe41e-5979-4950-85cd-5fdeff58f513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abb4e356-d2bf-40f6-bee8-29c365fdc1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a7682a-80b1-4d00-b522-62b7b8697ce9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5bf44ad-7901-49c8-927c-dd01eb2f44bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc57775f-cf6e-408d-8158-089939da19a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660ad45c-116f-4bd9-b54f-8017cc8fc54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "666c9ee9-4064-4107-95b6-9cee54541e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e6653e-add0-408f-bd96-b3c1c8c7c3c1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f9757bc-02a0-4143-8438-303140166e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdef059-43ed-4400-9ff5-2065e61552ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c80c28-c5c0-43fe-ba7e-4348f2227734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2364d2e-5960-4940-b867-d70f645318cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c217a935-b09e-4873-ba11-f530276a83a3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb856979-c42c-4147-9337-8b26eb49b3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dde6f83a-eaf0-4c2e-b0bb-2c58f924fae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f22ab7ec-8d81-48c2-b49f-04525eed8f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42731a9d-36d0-4e8d-b7b3-971977455771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7c5bf0-3b80-409d-b27c-37717cd9b62f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c7fa84-7cac-43b0-8732-72c469f0299a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7680a2c4-9fb0-481f-ac03-599570a78dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46b0e01-9b6a-44ec-bfde-631316ef8f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06860569-367f-4d40-a9d8-ae5776148e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265be326-a4cb-4888-9296-ca31f386586c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50004171-e02b-4ced-b22d-b63a9c784faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61cfb0d9-6e70-4b07-a03d-5767062f6012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e702e67-e40f-4ede-bb84-953f39871981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17484bd4-a668-4004-94dc-2c9dd96fa379"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b138c60d-cdcd-4ea0-a252-a2dea8389441",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7f28c5c7-ad0b-4106-8137-a6e26a1bb974",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ea6be64-9237-4b4f-89ec-e498e0c4afd9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c3db0b62-ed3e-43dd-929f-3fc8ae65a74c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "109f9832-99c6-493f-a250-ec67e2c9cc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6b9e5c9-52ff-4b74-968d-dd74c97b4de7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c501ad1-3b30-4075-9a7e-736aad24a161",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "402e35de-b6d7-428b-a7c5-47adcb4cb1ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7920dbf9-f3f9-45aa-870c-cf7073481b3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "722f5658-24b4-4bc7-9f64-5ce76c02e64c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "306dfb61-c1bc-48f8-bfd1-e520c6b4e798",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bf4ed8c2-1c9c-499e-8fbf-60c20361fa2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ffcb527e-e007-4980-b0ab-c023851e0bee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd2122a4-d766-41c5-86bb-5b7c1365d5f8"
            }
          }
        ]
      },
      {
        "id": "4cc17730-0a49-48f2-ab6e-18f75ec7cdbe",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3e8d4236-de78-4e9f-bc9c-6529fe5db8d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d52bd9a-5224-42a5-aa9f-66290e464304",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f38292fd-5f33-4f35-89ed-90aca7801c1a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff1f3d8-4766-4af0-b470-e0e44c7a8307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37358a3-65b9-4df4-a621-9aff321f61fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b733e196-7002-43ee-9d11-5ff6717996b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfb671fd-069c-413a-ad9a-38716a94e33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49cf84f-439e-4dcb-be89-31bf7eff0d6e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c86e0f59-567a-461a-864d-08de4cba31a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3416fee9-6538-4a58-823d-ffe47800e1ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a061f21b-def5-4e79-94c0-286f852d5f79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2daeb6aa-ec6c-467f-927f-8837458a7c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc07c12-9b05-481b-acbf-21ce377466eb",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b09eaae-7040-4864-9c19-0f0163a65c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073a1e57-fac9-46ef-a79d-d27cd9d091ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c22312-5a23-46b5-a6c0-ff05b4be5f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f41dea1-7bba-4e97-b2f6-5f0c659f3b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ed886d-34e7-4078-82f6-56ff44a1fc08",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef10511-b30a-4e20-865d-353493844920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41343438-2d66-4041-9ab0-93271b6c2276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cdad29-55fc-4bbc-ade8-5ae0f428b27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72eaf8c8-3b4d-4010-8464-6291947029f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88141b9-a87f-443d-af37-e13465a0f01b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed16fac-d339-4d43-a7dc-4aad9328e767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f122997-a100-4fba-9fbd-ee663e3011a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be65dc8-0e85-4369-93d4-0345ed18475b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d762c5f-16be-44a9-914f-46cca2958273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ad573e-bf32-4a53-959b-43dfddedfd06",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1f8e71-2098-4b8c-b851-25cd7236915b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a47dd9f-5391-4047-b234-8654fb76c80c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a4a8cb-5e5d-4f91-b360-05b560e948e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff71f0c4-300a-4dc0-a907-31f6852cde70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c4091a-8be6-4e8c-915d-7a00eadbdf43",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18ecf7d-f0bb-4bec-a079-c1e14043b107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89be9685-e6fb-4ff2-87ab-90345a8c25b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b7220cc-0b5e-447c-b9f1-ffe4bc22a31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8467a3d-4a5c-487b-9f4b-52980ce252f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65305cd5-c583-4e1f-8f4a-c6b96ccb2b60",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc29b36-4c99-4727-89ef-5329a376ad4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c24072-a635-48fd-b612-9e5793829f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49235626-df23-4b15-b2c6-42b0187caf04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e78e7cb9-f788-46f6-a80a-0603f7523d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30087248-d86a-4a41-9496-99efc12ae0b8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd727ec0-ea30-4c5f-9537-8d4460f2f510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86b0f39a-37ee-4b9a-98c2-0bac70084c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd1c7ac-7ab9-4533-89a5-e38e96f5028c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "13619046-acb5-4f0c-a788-74b09ce9704a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dc3a48f-cfe1-4e6f-b850-36a683b976de",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7952b4-e2e2-4bdd-b439-5dbf466a0636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac91878-1551-4c62-95a2-2de4dec79bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d1b133-41ea-4b67-bac2-7dee4f71d31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e575681c-6865-4e61-a463-ea1f48eaf6d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "723f8d86-2a3f-4ff8-ada9-0f1daeeb9b85",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91148679-d659-46e8-9649-4f99634adf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e439a8-f77c-4a99-bf85-71b54c19f5a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ee380f-19a3-4f6c-9a7a-fa3c7501534e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "96053e6d-5959-45e5-af50-1111ee67334c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc5e8c0-1c3d-411d-96ff-ac7e91e2105a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff85a73c-75ef-405f-a24f-a9070254bf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe58bed-dd65-4541-9922-ede36e36f34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a2cb78-0fef-41b0-8077-fd17738a5738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "df4faaad-dc3d-46c4-b207-027d4327e09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efcfc36-51a5-45b1-9760-91f1c70d9601",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c665e4-edf8-4161-a26e-85b933c6cf08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b37906d-2480-4f76-8760-63e956b7cd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd15f10-b4dd-45c0-abb8-dc400b0acb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde467d7-6482-458f-9c84-46c619275be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96516d4-f086-4409-98e3-6efbb342848d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb61830c-d035-494a-9e89-df7e97cedb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaf6a317-997a-4af6-92e4-1c697cb6eaa0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0825e636-38b3-41ea-8764-68eba203cb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f836882-eeb3-462f-aa72-c4702f4afc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bd34073-8db7-4fce-a507-f11f9876ceb8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5845b4dd-ed24-419e-b5fb-ade87ebdd7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de411fa-3aff-4dbc-962d-1151cc81fd38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f8b57d-332a-4a18-a851-c573939c31ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "18cdfb69-2d30-4125-9466-50061490441a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754959b0-890e-4334-8e43-679f557152ea",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837ae80f-1c15-4984-af81-90c7e31979f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639b7d5e-7ee2-4ed1-9043-1200f285be01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9704fe70-8cfc-4bd8-aef7-132b13e6e1ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "769b590c-78c7-4893-83d7-d270fad1555e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e1e6dc-dda0-4a2f-8cdc-1a22c6661e4d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "780e917a-7e07-4291-a0c6-9c92d46a5644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba54b48b-54e3-4b37-828a-af5c08eb7c24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b92ddfe7-9113-40ee-9a4b-48da1b28f692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b780d5-09f4-4424-b16f-8340b96a5bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15831590-c612-4b0f-87d9-09fcf8c890d8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40615488-8ac5-4c2f-9e39-3fb95f10c6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b8abfa3-fa27-4e99-a8c9-bf20c3ed4cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6088a8eb-612c-47b2-8244-032a8bfa92bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "88d7902a-f569-46fd-82d6-fbd2d0cba7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8cb5714-09c0-4422-966b-94425de1610d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14aeae26-cc19-4c79-9a0b-eec611841abe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586e3078-6e47-43db-8f82-6db2671fd018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05114b60-b5b8-4af5-b94d-88cc76c71894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c58a9d7-ef05-4ead-8830-af0ce45832bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b1ec18-2a42-4ca6-bc63-2379619aee97",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ca0a17d-016b-4874-9475-c1edc2e595c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6aaae8e-ce61-4286-822d-45bad8a841b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063260a4-dd02-4d34-b832-3fe1e6bc22ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51cc4e17-bca6-4e47-b8d6-fa9c74507bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b6723f-1b74-4f8c-a989-f01a3f0a2ba2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2e6ead-1423-435f-9731-b5166009b595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf88312-7b41-4299-b860-1162b9d9ffe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4b7d6a-24f9-4c1f-9350-84db8e1855fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "96f66097-e454-4a11-98da-30375d74ff2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6b6c71-dd6f-42a3-aae3-733b55e83d1e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ff6dca-473c-483e-b2c3-617f3b6134a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d6dd150-50ef-4c20-988c-7289b547aa3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa1ae05-1aa4-4792-b788-bb482391931b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d50b442-708e-410e-a1cc-8080ff0d4976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f1e5ff-cc3b-4653-a319-300957eba0f9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfff7354-b364-4056-b6b3-fbbaaa37ae65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7bfe9d3-c278-4368-b727-fea26f1925c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7566a6-bf91-4b25-b73b-da61f6b19d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8427c821-3418-4b9f-a96d-078044ceaf28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f773c3bf-9e53-4364-8112-9172378631a4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f82b200-8bf7-4384-90c3-acef15202285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a3ba7b-9f6c-4206-acd7-1b996c5fe989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edc6557-ec2a-4d1c-8405-651b7a2abe59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a94f486-02d1-4e11-8921-68a2ceeb92f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569ae8ba-681e-46d1-bfa8-d8f6607e60aa",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76289799-11b8-4559-a52a-7c1ebd3046ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b20b94-fbed-48ad-94f1-88043a59b6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659a1711-9f55-4d84-a6da-4461a9df4414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9743c584-b695-414f-b22a-c6f8d1b81135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3c28c8-92a1-4338-a0f0-edfbcbe130d4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46627fa7-88f8-47b2-a20d-ac842553ee77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41c0bce-b04f-42ca-9c7e-905b8781f205"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a612b0fc-2199-479e-a68d-733719b8daf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "347f0060-a625-46de-9781-ec762400aed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1f7148-8bd6-43bc-8d4d-55927381f158",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e57bd6-9ccd-4729-a492-bf2dc38b6431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a00d43d5-8da8-4b0b-9b89-07faa4bafe33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9cb1c9-e86e-44d8-aa45-f87b1ea939ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5708939c-0d7a-4459-b145-e2abe865e8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8135968-a44c-4d4e-8a72-a326e359f9cf",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807bd46c-302f-4386-b69f-a4b2c440b033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33c3bc82-9988-492e-bbf4-0d5eccf5baf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad9c9e0e-0bba-49cb-9ed3-976f6336c7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c05ea2b-5fd7-46e0-bc4d-284f6de22fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0938bd-d825-46ad-bbdc-f6621d8dc547",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b987ae2a-e42d-420d-9d6f-dd49e2ea97c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebd6a7ec-eeef-4e7d-af0e-366fad9529d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a05108e0-4377-45e3-8e62-6f748699d310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81501dc5-bf8f-4903-a2b6-ebce7fec9ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3babda0-b8a8-4881-864c-cfe8f4204f18",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c97788ff-083d-4468-a9fc-612edfedd2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a58ec87-caca-458c-8051-a909ebe053b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ddba862-4245-460c-ba77-e9c3aa3e8e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "897a3852-080c-485d-9513-27e2fd546145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bd3144-b8e1-4514-bc17-3a6bafab9f32",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105bf60f-fe44-4145-a39f-be273f5e9cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf011b4-11b0-4396-a426-9cd5f775ea21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcecd10-d523-43d5-85bc-58ebc9e77802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b6b2f72-8315-4448-9b71-e0125ea367bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b9cdef-6f38-4ba4-b260-1a8dd89e480d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5423b64a-6c0e-4935-9cc2-956dbd5799eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72c7fd4-4440-4ad0-9a79-f3753b4b6e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077d0440-0a66-431c-88cd-03244aa41f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0094ed9-fe28-4bcf-9ff6-1a056079bc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6423e400-56c1-4c19-8495-2c0a2d75862e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c9649c-b2e4-4a42-b7db-e99b9329700d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80505e51-904c-4583-956d-d80e980a6385"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67aff836-0605-4dcc-a009-14f1594ce0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e72f6fc6-27cd-4344-9bb4-bb1bf35b6526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8c4dd2-69e2-4321-9495-2ec0367a3ee0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26438524-90f4-4171-9689-ed975918c76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4e352f-6a30-476c-8598-fb4555921ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b5a8ff-9161-4ba1-be72-e38a528cad39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "55839580-6e70-4b3b-88d2-03c2b1c14bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c3abde-d886-40b7-a233-4a86bfef0f43",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051f21c7-62c0-4f58-973c-409e6dc24e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a7324a-eb73-4a3d-88c0-27f5527c99a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4276da5-d343-43e9-a41c-e2c387986c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b714cc-b07b-4596-8622-dabc5267a483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89118712-3f98-4812-9cf5-96118624f476",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62e05c5-f25a-404b-926f-c1634316c637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3c5428-1950-4330-b3d4-599144f6017c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3985f64d-3529-4bd4-945f-ed5f1901aed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71ac2f31-c833-4234-bdc6-c2b859689a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6016061-5c42-4ca6-93a1-48b8d2611b75",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac03c6b-1cbe-4b34-be24-84717dde10a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4463735-e85e-48ce-9660-20be34e72fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfb0fb0-b6ac-42d9-8e23-1b68e3c5bf62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f30a5b33-39e9-4483-a8a6-9fab07d4b9ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe4e3786-aa25-486b-b17d-2c8647273936",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "92496254-71ba-4c59-9388-836d8819e140",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f55c3d-5eeb-4445-8ca4-b346189beca6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a3ae08-90da-44e6-ba9f-7e5fd0824580"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de6287a-b148-412c-b200-1a62e72ca314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e79b72d-91cc-448f-bf5f-9790ed2e9321"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17ae21db-5c56-432d-91ae-5a6e1b2fd194",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34790403-4eaf-482a-9579-094fb59353aa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7920aea0-ddc0-4dab-a55f-c040371e6fdf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d766414-80b9-415b-a2b2-ac748de29798"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5fa6c445-daff-41b8-92cf-caf069c9e0c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5f206e3c-0d02-42cc-b7d1-2b3dc634b0eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0917372-0b12-424f-bd4c-c566c63f31c1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e47b3660-aad2-4cac-890b-a7fb450cfd6d"
            }
          }
        ]
      },
      {
        "id": "5d1337ec-6dfe-4f2e-8036-a7c3980ec6b5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6edcec1f-9ed8-417a-af8a-edb71a5ef052",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1293667-975f-45ce-8570-08f716a38a13",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "59ad4b3d-4cfd-46f2-920d-2d848e187c70",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0bf56e4-3f35-4fb5-bf70-615ced59e202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dda978d-2e32-4a37-acee-a2408fa732be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6a570e-db00-4a4a-808e-1b432db8d8b7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a50eada-0010-470f-943f-90f739a859d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad996f5-1ee0-44cb-881b-6dbce079e66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b810dc8-311f-4e46-bd32-d329d4134c8b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff4a7e0d-a85f-487b-b1f9-d196c3ed9ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c192dd0-1ea7-4dc9-a6bd-5bd81eede70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d174b433-7fab-4dfe-8052-72bb8d463f76",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7052d4c7-4430-453a-b2b9-3518d88f09bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b44fa097-4568-4c7c-aee5-7345af385e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316f0453-0fdc-4863-be49-88bb0b259ae3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405ec118-d687-45b3-a9cf-7857b7724873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10526fd9-7cfe-40fe-8c68-314553b8f066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6b837d-4562-4ec4-9ef5-87e6bf470e3f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38221a46-c61d-4dcb-b999-0177defe4493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d00aa65-8eed-432b-bbe0-769885370f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fed8ada-94f3-4c6a-ba53-a149d30f2f7b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fe96e4-919d-414c-b6bc-49bdfa29e6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6f5dba9-35eb-4bdf-b21d-16966d85ab7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "882e4096-2e3a-4c2c-bfcc-662a3a349e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bff91fb0-6fae-4a64-ba40-6fd68f83a612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "495cd117-15e9-4a56-9a8d-98a15b91921f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e22759a-c530-4838-b7e2-cefb7460ef2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc039fd9-68fb-4d4d-8b59-28d1c2c3791d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a83cb4bc-8820-4322-9143-41985b68f127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20d5331f-8fdb-4d06-ac49-e753c67f3182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91993f34-8c5b-4510-b511-eccd3e35dc47",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd73d9f2-b8ef-4ac0-aa4d-589cebfcac40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "710fcff3-5f2f-4d79-adac-4045132054b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1651a3b2-c7ec-4962-8f7b-6806952b1f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480cbeb6-02a7-46b8-b754-56e1093da059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2137707-8cfd-4589-a83d-17177fe42167",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e43c0dd-f459-4370-925e-b4c7f0fdd9ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da95c7a7-e7af-47bc-8169-39b5fde9c842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b91990-e0dd-4e09-aa9e-160256b03555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef41a8ce-97bf-4250-b80e-eeb33e37d100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff7cbfe-466a-4a20-8916-317c56ff04d7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a3a748-c84b-47e1-b51a-8b055bb16968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9652ccd-6767-47ec-bc8b-76614587b99a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e2b346-7725-4b57-9dbe-5b140123e151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258e288c-725e-4b31-9a19-9b3a72b7a720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb28f30a-fd89-432b-b690-a40665e8e9ce",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b12b9522-54e1-4dd8-814a-24b4727e955b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a091c7c4-612d-4540-af78-95f96aaceb3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3edebf-baad-45c0-be0c-6b8dbb88171d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34720fef-67d1-438f-83b3-5a7db412c30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "235814d2-9a2f-4647-8302-2791b5bd8e41",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152e975c-efff-4e6d-9a35-ba236ae30626",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2512ca02-be86-4154-8fdf-a208fda5b6b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6e67a1-386b-4914-b50f-61cda89e1d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f47aa7f9-cb11-4d41-9984-1fdade6c6ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072d6b57-dcee-4767-b5ff-deee95e72838",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dabd78ac-6be7-4e24-be28-a5bf43fd4423",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3692a41-e934-4f4d-9bac-d66d195b1286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1786a236-8065-4571-bc48-9472e225baa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f30111-159f-47d5-b582-2a36d39892c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d876e7a-3350-48fb-bec7-1cb74d598106",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b8affb-2c4b-4d87-b547-71c6242273c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebda6dfe-c213-43b4-9613-3d4b980109a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eccb189-64a9-42e6-91b5-039e56804053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dbe4614-de71-4fce-ad3f-e5682a1fba58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e765dea-7d6c-4ac0-a98e-c44e1dec6b1b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297b8043-cf3d-46a3-81ae-f884132ef95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1834f9f-15c2-483b-952f-b82b613d49c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f3b943-9318-4949-812c-c54f3623de7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2aa02bdf-91f3-410a-be60-c60f5863083a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485223d3-7af9-4bc2-bdd7-672a5397b445",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50573ba-3dcd-44f8-9ef8-a6aea50971c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59c79602-b80f-4f42-8de0-282b0f7700cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec2385f-ba17-445b-87b9-4f5d423a11c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670f1a84-ead4-4b82-80a1-91ae8ca2fba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa069cb-dca4-4c3d-8b04-51546f0d68cd",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c79705-507d-48cc-94a6-9118f75a9ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ecf19f7-356d-4f20-a924-2cb827f2fd80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84ff060-ea38-4b2b-aec6-b41486861842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52659dbf-5957-48cc-9a09-41f43041234b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f68ad42-7a0e-43e2-bfdc-0ac5744b3432",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b446f77b-3a3e-4f8a-8778-6f597fb147c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ccd876-2744-4139-a898-5640e94417f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a667c1-6729-4cab-a2f2-57531451b560",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46fbcb53-8657-4956-bc12-309c68029e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7f39f3-63fd-4cbc-aa9b-e55d5f7ef7db",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8189512b-feea-4cef-a77c-c1f3feb25550",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4d181a-889b-40b4-b89d-4338ac1bd958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5571a3cd-2f26-4121-af62-22b603d0e7f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7a05731-d09d-4426-8552-cc78527e2911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1222483-da58-448f-b74c-518da3c77bc3",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7ea75b-563b-4141-bcfb-076880888601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a57762-95ab-43f5-a420-9a4976d77194"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfee8d1-0493-4770-9c8f-d66a4a0ae36f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1156ee7c-588b-4a80-8fca-16b4568f2ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c64a204-f7f6-4e09-a3f3-607c37dba0ff",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb7dbb3-cf12-4f66-8df6-7752f9273a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01f7c1da-f51a-4ffb-9379-015038626859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca45440-d0b0-4100-94f4-cd92c972ae90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa315b2d-a000-4c1e-a8be-5afcb5238e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627f21a6-b505-405f-b14e-45f5a253501f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dff92d-6e5e-4b98-8491-ed14733ac735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdceb846-d081-49b6-98d0-309c1a24049b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60425298-ff0d-46bf-92c1-a97dcf34e2d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a1a4ab3-6500-4675-afb2-6dccd8ffcbde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34d153ae-a8d0-4361-9b13-772b1151bf8d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2ac2e2-9dde-4f86-815d-8672a69378df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "760464a1-32ac-4381-854b-ee5c93b9ae3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04342d4-4f1a-40cf-a361-457c57c8226b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeae0a56-b07b-4e75-bb9b-b2e81368fc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34187856-6ef2-48ed-867e-2d8c56a9cf01",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c7a1a2-687c-445f-a529-cab65bcaa7cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a83e4267-4f0c-4d7d-ac0e-65b8f650ecf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "132bf28c-ffa8-46ad-b419-20c8ee9a94c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d1521c-3c9f-4019-b543-a64a8e84cbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc39a96c-7337-46ef-9944-f452817288f2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddbbb59-629a-4054-a209-54ee589a75eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d76a58a-9dce-4fa0-984d-3fa56ef8f7ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9117a2c-3095-4929-ab3e-bc9c7b040d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f4df860-a34a-4b74-a7d1-26eb06ab3d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "249cd8e1-5e32-49c7-97ea-52a8e23e884f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9cdde80-74f0-448e-a6ce-8686406eead2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "effff880-f0a0-4882-a1e3-e3ff669772f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6934d6a-98cc-4b1f-8c78-d9008660a971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f623f523-fe4b-45e7-8220-78faba8d5dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f364c4-93a1-483e-bb7e-51eb2eeb775e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e93cf29-7949-48ee-80cf-cada1e19afd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2504a25f-e036-4ceb-8ee9-e3dca6079bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cee6e37-e0d2-460f-ba4c-5855a47b03a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c71cada-e540-479e-8ac0-e4e8ba852f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547b5018-98b2-4922-b079-7ea0683f2d8f",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc7e21b-763c-4637-9655-b7aab821fd71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2349b8e7-00a4-4bc8-bd58-eb11348e0a5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af8e9309-84eb-48d6-be19-0b04a0c8589b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9214b3a4-2011-45f3-bb43-490d25ec2594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b7751d-abbf-4aa3-832b-65769b610130",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9686d1-03bd-4268-9701-2c1513e095f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31a6ba45-3f7c-4aba-87dc-b8b72b936a21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b552dd-d5df-4253-8fe5-f15c96fd87a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a064354c-5fae-496e-ba5c-d275d0cb6a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dc5151-8e46-4a80-9aaa-184299b80a4d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eae02d4-6d2b-43cd-8ba6-4fa3cceeb735",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eca2bed-5b33-4a39-8851-14bf61795bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ce1584-6d02-47c7-83b3-8967fe8a19d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e68c6c-5dc2-4698-9cef-4270f737facd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe98676-fba3-42c3-aee4-98e6226b15e4",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591929bc-de18-439a-95c3-3dc1ab81cb8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c02596f-ed39-4127-bfb5-8dc5feb53ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd66e1b-42a5-4db2-b1c5-0cb831257b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8a8750-287e-4280-8d60-d9ff131152a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c75ca5a-545b-48e1-b061-aecf04a82968",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7bc6fb4-1a27-448d-9fca-639a0355f138",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32f10542-fec3-4d44-be4f-b6239ce032ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c0c08c-6c54-40a1-9dda-898ab3b1e7f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be18ae2d-7bfb-42ac-be86-86216d3bdbc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b48025-1fea-45e9-a536-1db9c2888897",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee530bbf-fa6d-4978-a569-badae9ece961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0ff88ea-349e-4512-a443-722537dc5aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40ad9de-5532-48b0-bc83-4d61564f2e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca44fbff-c024-41bf-a576-b436a582318d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0204426-bfd2-4793-9ce9-c585c98891ca",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed3d7e3-4488-4bc0-b9dc-79c427cb0bc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fea889d-c774-4e60-9487-a5175476038d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7423d060-6e4c-4960-858c-786ce5f3b7e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975fc9e1-7d88-4f15-9565-847c8ed41744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e748704e-f9a7-46b7-ad48-7d99eedc7233",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c85323-f359-4196-8cb3-fc05d07e3472",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05458356-f6c6-493d-81de-03d2f98cc63f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2ea451-cb71-4028-98d6-4aa8f2b71c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30835419-b77a-4f00-9ad2-593462141e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d415acf6-e1bb-4e32-9995-4399866fe407",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9c1e324-f20f-439a-8cee-c224578a8791",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "932f947e-779d-4d63-a549-215d15c3f287"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6731b7-580b-4d92-944c-ff1be61e1bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01db090-109a-4e32-806e-b2e6749fc08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19430d71-87cd-4bb0-953c-4b480ad2b177",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7309897c-baee-4722-aaf0-02fc9ba6ce94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7edb553d-9233-46af-a29c-25d1f3364493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b5e993-b0c2-48f8-9b24-0ebec3861805",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075d6dfe-776e-4c77-ad82-51be4300efab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1943c3a4-9f7f-4046-aab7-09231e4ab276",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2ebdb8-d684-409e-b6b1-9b2635a78104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad67dc76-c5d0-4a1d-81d3-30ead92cf538"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360491c0-ab4b-45d2-a3fe-84c63a4077dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9fe9fc-aa76-43a4-8efd-c8ca4068d46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acbb8df-6e5e-4f66-91fb-8bfafee0c40c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667c6310-42af-4b44-b786-108cb4036264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "348b604b-e3e6-4c01-a223-e5c89ecb4081"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c55fb15-ae44-448c-800b-4cf740868f95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a9bb60c-d24e-49c6-9b57-caa40df1c1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa7a1bf-9ad3-4c87-8f3a-2f65714fc00e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "037e940f-0e81-4654-9993-fddf4d4e3769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8242109d-f0f5-4f08-a336-ac250b31a579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1e18a1-e454-4a7e-99fa-47d0b742a5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786b8f42-339e-4ca2-88f5-f5b2aa786ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd6b78c-fde6-4323-ab9c-351289f82f07",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cb0ab1-febc-43f5-9e00-7b10b869faf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13e4714a-feaa-4e80-9555-28ccbf3852c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5cb1695-4820-4605-884d-5607aa4ecbf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccdea3a-1d24-449f-acc5-278152becd2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0c87e5-f0c4-4725-955d-df9e2c8694f7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e93393-3d1f-489f-b884-8061793d1502",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2668a5c5-155e-486e-9676-92e940fa8d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1bd7911-17a6-4073-8792-30f179dcb8a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4cce92-6d45-453d-b0b0-312af53223f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1840f945-4ada-4427-9b40-9d209a853d07",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a7ec149-1231-49c1-8832-f2aa03731fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b8d4d5-98f5-4dcc-8748-2b55d3e57fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47cd43b-55d9-4ba7-8a30-cef29496ffcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5f2e1f-7291-4bc9-8227-1cc67b6bc40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba1ee94d-b0c1-43ce-8ac7-768950157fb0",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f115af-cd69-4986-8cb9-ef912f63eb02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21ed93ee-9729-4b3e-b0c2-04a1b7ec314f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af5bbed-1e02-4c5c-9c18-bd580e60e79c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29a97b7-62ca-44dc-8a5a-9e690e8372c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f666d97-1a86-4bd5-bad1-3d6ce7d81708",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0ca8cd-2733-456c-a52b-8a6059dc2973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ad1784e-adc2-409d-9d03-e4d8e2d1317f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82d7b41-1af5-4c35-884e-212ff97a86d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167c5fe9-b2f0-4157-8ff5-1ff25079072d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e65253-4eb5-41e3-9526-9bb824b9f801",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3479e203-2e4b-4fb3-85a1-028bd5e81343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c745eddb-62a9-4be8-aa8b-99896e704969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f220247-e78b-49e6-806e-b3978f1247cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd3ec91-8f8e-4a55-ab5b-96856c3d9885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dca0dce-3b8d-48fa-b1bf-8902b095471e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6dd1bb1-21be-4ae7-a4b0-d937b3dc48c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb25484-8ea7-4002-a56a-204fa4bbd97c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20eb2aa-8ff8-4c56-9e28-9a5594e88359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0759472-43e7-4ab8-8364-dd19ec5c4c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fe4481-4ee2-41a6-9210-a89f57ac4a67",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70102952-3228-436d-9c2b-20bf2f4c4e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b16a0e-d740-4119-9b66-ded922d00fb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20eec985-2254-424e-a0a7-3b79822e8fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f4b34e-6af3-49c9-822f-8ca67dbc6249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bf6e8b6-f982-4ff0-baf2-a6b8e347fa8b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ee96ec-7c9e-422d-8009-6892b8d3ab38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9241de7f-2c4b-45ca-a46a-76c3cfe2d322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb03e69d-2014-41fb-b320-139d9f40bc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4832b19-980a-4e04-98ef-95a10d50be3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd204c38-4aeb-4fbf-851a-d71c3222a685",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e17853-ce55-48dd-b4f8-87443c3addeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98be4697-8542-4158-89d7-f9c13c4e7f86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b05c788-5976-4092-80bb-542109b768f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "243a0649-879e-49e0-8c98-42568f6e6955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d809a8c-a64a-43e4-b433-59d1bec41ca1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857fe00c-4763-4045-a887-f23519720807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6abe92d8-7ca0-4428-aa2a-28a4184ea44d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd59a52-50a4-41ce-8620-6c0da5421bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acad6408-d0a8-4fd8-b8e7-c77dd34c40af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a8447d-d7f8-4d01-b9d0-7e9ba91a44fc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee25d39-86ea-4585-9f89-3183dad99101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b63d2a0-eadc-448a-8781-d059086aadb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33de5f8-6ead-4dc2-85e6-5a9a2878cab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8f4a18-66d7-43e6-adfb-0f1cc250553d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85ccd20-cb26-41bd-8a06-3b0a0e3da69a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ee5db6-1e3d-4af2-a646-8fcb890f8c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c479b1-c24d-4a3e-8763-29eb880789e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d20ed5ca-0186-4c77-a296-9be80429e29d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e4713a-c116-4be2-a2e6-5c0294986e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "007767d8-d197-4a25-aca0-0321c5f5f9ab",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed0c126f-ce6e-4366-9da9-4000969475ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "779cd767-ed03-40f8-91d1-8f457df420a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f351eb-9a9e-4905-a6f6-751a6dbf4c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b99a097c-79cc-4653-9f96-e57690dca226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ae1a19-ae9a-4fbf-9d27-d6888a5d95de",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3958839c-5c68-4024-a329-7f16ba6d5ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f71f34-c133-409c-a67b-7430f2d48e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a73ce6c-7c00-4f2c-a520-0fab3b66e893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb2e0940-b13f-4b94-a86c-a6045487d943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0ef53d-4230-4d92-85e2-3162a5273ac2",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417a77b8-6628-4a2d-b823-a77a1929c49e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b6bb1cb-35de-49d7-9866-777f5b6ecf9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c260cb1-0ae9-4c41-9f66-a8f741772da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe8a1c2-08b0-4863-bde9-d4572c3dd57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c0080c-0526-44cb-896d-62833dacf550",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab3a5ed8-fb8c-4ed6-9b62-ead8c802d5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841e634b-8719-4f21-9f67-9ed56c4094f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff6d86d9-5486-4093-9697-34fc4c0105b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d129e55-a118-422c-be80-55914397edc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d11917-ed26-4a2a-ad77-ca0ee4d3d7ef",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e345b0c-316a-42bf-ab00-8a97b872fba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5ece1b-2ce6-43fc-9473-1da271fd812d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc77d1fe-c4ec-4a72-8c47-ced132ed3e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a77a31-4474-40d4-9466-d87b7cdbf279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3499fd-6440-4475-9828-5d736e456cc0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22556410-bada-4bba-a724-f048cd345bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65a3913-5881-4c5f-bd50-715b01bef06e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6ccbdc-4e27-4036-a6db-3335250fe1f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0da959b1-42e8-42b7-8c8d-fd7f2a56f4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f92b31a-c222-4e8f-b24d-74ae4559cda5",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8bdf6b5-78b9-465a-ab76-7523f09841c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d85db4-f660-4197-8b84-d9fcd2b247c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f059a5-3072-4f76-87b8-05f1bd5de5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3526022c-4e45-473a-bd0d-722926729670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0399a2-ae30-4ed9-b582-6f1de84fdcbb",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8495d3-c7f4-4be3-af73-3c1a507fe2d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b046221f-6564-4349-baf1-2c54b479c066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e289e27a-c1fe-4042-b385-715417ec6d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae54ec9-f7b9-4f0a-9936-99e1fc3c8917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0244dab1-7032-4b61-b9d8-cc07e56f10c8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bec04c-5be4-4c80-aa6e-dfbb5e979972",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "327829aa-a8d6-4148-b409-8e599e52a5f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0700f1e7-9eda-4c1a-a52a-951caea2659c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44debde5-6994-445d-8557-52c83ac6b5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602bb720-1978-4890-a408-a662d94a81ec",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755f509f-f07e-4545-8589-1a80d28cd433",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5153fa4c-d634-4b1f-996b-33f1fcadf15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12be7ce6-bc69-46d0-8be5-e47c4f6d0591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2aa3048-1efb-47a7-b387-23cb7d4637a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9d09b0c-355d-4b39-a5d1-044db9db3e77",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33d4d7f-0176-4213-ad15-a8776ceb20d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49bb8f0e-9a19-4003-a4cf-a7cc7564c942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a68f3b2-39d4-453c-9ade-92b0967b31df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "815e1265-0be3-4e24-b029-e2d7349d7cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e94748-3c62-409b-ab58-6867e760c8ae",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad7a24c-0f7d-4944-8615-099a7189df2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d704269-2a81-4423-8bde-84834550c04f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c176801a-0662-4a48-bdd7-e6ad44d9b6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b2e2c65-1b9e-44da-a8ee-038e59671489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa04324a-e624-4f06-b1dc-84528a63e02a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "120505aa-7317-4408-a8ad-ddabcefbd4d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dcfe8e9-2d96-4afd-8aaa-044cc30e081e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ea43b1-28ab-41d9-8304-3f5601be679f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841ff1db-f37a-454c-9cbe-686e978e94d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c470ea-1765-4584-bc27-2212e77bece7",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e562a9d1-02c6-41ff-ae7d-62df95e73d03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2d89436-98ee-4167-8673-434d7079ab20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0012a8af-9602-49dc-b8b5-f657dc704374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90bb01be-4f99-405d-90d7-4a0f3a367393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfca3c2a-c18c-4740-850b-947f750fec81",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4876b22f-ba6c-4c48-9e0f-91b8dc0f45b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dc84d70-bfec-4125-8b1f-a5fa0f1b1918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0dde7bd-ca05-4409-94c9-4f32fd06b061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca882aef-6355-44d7-9e4f-31c99d58c0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c50cbf-aef4-45ba-9801-35d7e44a887c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f85507b8-0d81-4bdf-8303-a84ed9112c41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6e673d7-3a91-49a8-898c-c7bb6e6ad757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccc13d3-f07a-4b5a-9cc1-3bb064b5fa0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1649ac9-e80e-4e00-82ab-7216d0396723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7aa22f-c7b2-42a4-9440-ad96215e2755",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d40f5ae-ec55-4065-bc4c-910c49d12e7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b91a88cd-96b5-40e7-9cc2-5940bb238da6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b51fe89-807f-4bba-a866-ebb93f897c4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c836982-7c66-4a5d-a6f1-9ac5c58f97be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48657ef-3925-42d2-91cb-98099e0c7be2",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c8e124-8b7f-40a9-baad-5264994a8549",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62919294-ca69-446b-8d5f-f425a4ee1e88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52e790d-41a6-4aae-adf2-53ad80317170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fea5a3b-01e4-4af9-9c1e-e874cad4db46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a8d510-c741-4a00-b4f7-49478ee53aba",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085b37f8-3a67-4d11-b556-6c56129ddf01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3d54e6a-2032-4432-8afd-c83c29d2d763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e085a1b-021e-436b-8969-2803a16cb495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891b29ca-6db9-4c38-a4f6-d281517940d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d98da07-ce59-4655-9338-ef9c3a457d6c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ec703d-e420-4068-8afa-c7938287e3c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e4b9f4a-9177-4dc0-8a89-92bb4cee426a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6391dff-64a7-4305-8002-76f1b88ca1d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c330f93-d5a1-4656-b719-73771d26af28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afc76280-8931-4309-82d4-0dbd5917cd63",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73785ad5-974c-4d32-b412-22bf1152378c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f65b22e1-6793-4a77-a759-6965a551f079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52b0a83-312e-458b-898a-bdf705fb20eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626b3c55-d7cf-47e8-b8ca-337ef0c6b6f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2498ca9e-52c3-497b-b8eb-9e7e91fdc35c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a56570-e3ea-451a-a81b-53190b6a1cfc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d4c3453-1c99-48dd-8e14-01682a5e9f5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c230bfa-da51-4ecd-86af-0c1b81e0b5e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f025f6-733a-4d3b-b099-53f33646096b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e629398-7c03-4bc4-ae96-55a33a043ba1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2d8a89-5264-4175-b16e-11eeea1f9f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca957926-3cda-4463-b1eb-de7c9f1061fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58cd05e-cddc-452d-9f27-32f58eecb63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5699f5af-21d4-4f84-91be-db325c3b014e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4287f115-7c76-4ccb-b562-de63aec1bff0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae35b99-21a0-4a5e-b1e5-f31e8b0a9752",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66c1c2ac-e68d-4835-9335-59ba5b225c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d86f71a-fa0a-4847-8c13-5d9a577fb072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b2ae9a7-ce11-445d-80ab-844d98a3ddcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b6e997-8178-4682-a705-36d99b21bca6",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8cffe3-fe14-4ba2-84e1-e2d742326e18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ea5a0bb-045c-4022-bbd7-49716c4462f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a6cd169-4c17-41b6-8c43-dfdfc1d10770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9019fd8-2983-4f31-8b5b-a59ed0165339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b153ee-6a48-4e21-807d-2960add69c1f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c78bd0c-1661-4fff-9a72-1427fb69dc45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0981d0e3-c14a-4979-9904-2f485be6b799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e73b44e-7784-488f-848c-334cf777db7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5fab21f-0970-4810-94f7-536eec9240ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50bb9b0-360c-4995-a5ce-86ff3b0dc027",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b59ce90-6b55-4fd8-8909-bab066150a10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1acde7fe-e62d-464d-b816-84adf0978e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c391dbed-6e05-4293-b5d2-f033b5d5b923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63ad18b8-e0ee-47aa-ae32-ad62035926d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db05c24-281e-43ea-91ad-b720c535d131",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4784ed88-aab5-4e6c-ab03-1ed2b49cd886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf228aa1-737e-40a3-b115-e373719fc9ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d249612d-b7b3-4d41-ac73-1cb1a31a9163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1593d84-d81c-49db-b8d2-5d8f7abfb157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18696d2d-2cca-4a8c-a306-a8fb9775e75d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48f47ef-1dec-4761-ac6d-7914f7544ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f56c274d-fcec-4f95-a303-03346853e0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a00b57-010c-4fa6-883d-f15ee294fea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee3f6258-dc4b-4ee6-8763-9b99b00a4cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c621df66-bc21-4699-bcb0-8a7620f377f4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7f9756-97ea-4386-9e26-72b2f41359c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3f34e38-978f-4061-8ee5-87d45c7b693c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4111fe-b02e-4e27-9dde-08f3332df7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35073dc6-4847-4753-b4be-b4801b01e614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d1c2c7-52e2-437c-b530-1a84fcac4e87",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abf7e15-79e6-49dd-8c24-01b6d48bc0d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec059a9-40e3-4638-95ae-d15bc7984706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b5b6fc-b986-4789-95db-e7a282ea25f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cfb76c-7c22-4ca5-84c0-31088c5c2643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4daa000-d272-4230-a2d1-db67061aa165",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c152f3-e998-42b4-bb12-845fb443c83c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a66bf7b-0019-4ae5-9b4b-7b2028230eec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916c93b8-270b-4ba5-88bb-70f52cae07de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f0ca0c0-293f-443f-97f9-42564607ba14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974cd68f-ef03-45b9-b041-ec9e38a0070e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462e9b0e-2eb2-4ad9-84f4-2f760ff66066",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69c678b8-c3d7-44ed-8c1b-2161cfc65d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe3df1a-0212-4198-8290-45630da9d88a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d8403e-fd8e-4e1f-8b2e-8dc7f8063cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8bc3306-f467-48fa-bc38-c792279ce53b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9983ff-5c8b-4214-97f4-197fb8e757a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e8b97d8-3ba8-42fc-860a-f6b5b5821e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afc3fb4-eefb-4a85-8552-50a2e90f2d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af01c2d2-dc5d-42ba-b741-eaf87e1f475e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "349e8608-f738-44b7-9345-d19bb271fa25",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "882bfbff-278f-485d-9a5b-c15330e82f43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4de5bd28-59d3-4506-b1d2-406d20dc90ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7679c1-a9db-46b5-88ad-a88001777cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f63739f-aa17-4ef2-b184-685592df7cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e5c34d-56db-4f4f-a569-84a5d1d99651",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e143a9-ab9e-452a-9be2-f24ebaffb286",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44206d51-18df-469d-bfb8-a132de39ea72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb71b45-c7b8-4873-920e-7fc1c2992f82",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b228444c-8f84-478c-9b62-bc43012f47c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e49ce55-2579-4fb4-9ee4-5a0601a4bbde",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cab358e-46bb-403e-9e5a-d65985e57c2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b247b0e-0d23-463f-9506-f2761c225d13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36afa61-c984-4a22-8a07-85f489c50ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3cd0a2-5600-45e3-9ef8-d4bdbd956f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4c593f-346d-4a1b-9e6a-faa873451e01",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7746fbcd-6586-461e-bf31-136a157915b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04d4f9e-4ef1-49b0-9172-a4c3659f77b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6176a8-fdd7-49de-8ad3-ee28cd21cb3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1b8a4cb-0a88-454e-86d1-44b43f1e9bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b9d5c4-e20d-4ce1-90b7-dfd61514193d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5501e1fc-cbee-47b7-80e2-48a138e2dac5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "180630c5-d13a-41f0-935c-bc521e4d6484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8229e200-c69c-46b6-8719-df1b3ce4f64f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b5a9a5-ec33-4b51-9d49-f995c203fa7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b6c253-6532-446d-9de9-fe3f8af97dbb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde53eb4-3003-4262-b6e8-310a8e4ea973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50389649-12aa-4d3b-904b-bb3d67557831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86e31fd-4e88-449c-938e-6e2b4a8454cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb09c4cf-ffd3-42ce-a755-aa6be0158f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4259fc86-17c9-4b6b-bea2-8e1593a87df5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94073955-6071-4e07-a9af-c25c839ec3a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7131d1c-c896-40d7-b043-4aacb20d0d0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1795cb-30c9-419f-b164-6591a5b78e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab531ac8-0f83-428e-9f45-df3623027db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fcef695-ad88-4a93-8bbe-2f40d90897a9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae45cfc2-3fb1-4a62-9faf-2a7743eb4b74",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfe19818-fcbb-4720-a4d1-a03682330256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd47c5c-5b69-4da0-b6fe-de75e2272f10",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecfcc684-ee26-4d3b-9c18-99870c23819d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4a8c82-bd33-4f19-b4c7-59bb1fbb1555",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cefbeaf-e5a6-4087-9e23-cd4f395f4ec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "730b067a-309a-41f7-ae9d-3dcb42293088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ae502d-e2d7-49b1-ae8e-e73fe4d1b130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed85362-1064-4896-9b0e-1fda20ff4f2b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0508a4dc-fafc-45c0-bb6d-790c18c18e72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8259e0c8-a7d8-4c44-bfd4-69f144ff9f97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "188157d7-9a91-4721-a069-1ee59c0767e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "caccc184-ae23-4cbe-91c8-995bbfdfad9b"
                    }
                  }
                ]
              },
              {
                "id": "9e168b40-116f-48ed-b7d9-34434e050642",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "796f13ed-a9ca-47ee-a6e9-d022789e88c6",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641dbd87-3e4e-40c0-a428-01b36950329c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9188f88b-1ccb-4057-80ae-3094f5b0f6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08be60d3-9a05-4332-ac98-c9f85370e9a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0e3cb5e-bc43-44e8-9f05-9380acad24ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9625d706-33d4-45b1-9780-d3d902ab00b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28d03058-ba3a-4a1a-b19a-5a9e7eaa798d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97ff938a-80db-4f3a-b85d-ab7783b5f7a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68aca208-743c-4259-9e64-1baad189aa4c"
                    }
                  }
                ]
              },
              {
                "id": "320d4f5a-5ffa-4143-bc26-dcf1c34c4a3b",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e7dc46ad-e721-4a94-9d39-d581778db204",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df14cbd-6f63-467d-a49b-813bde4e88f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4d6bf2e4-f09c-4400-a8ac-bd881f065500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa4bd97-94a8-4c80-a66d-ae9c59e9ac21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04009dbd-652e-4455-8dc3-d7fd16d7c398"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "223e2c57-adcc-4c7a-8f61-9810141beb09",
            "name": "Positive Testing",
            "item": [
              {
                "id": "04b6f688-5412-4aeb-b9b9-4954100e2550",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ef73f794-d134-4648-9def-a4685e2944b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2a0d1046-f988-4f3b-acff-f437e8bf4e92"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40b3f770-67a3-4eb8-b03e-0809a5443c50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8dc7a22-e40d-4f00-a3ca-d657fdc75a1b"
                    }
                  }
                ]
              },
              {
                "id": "202b9b5c-3aef-49c5-aa0c-9db47acb823d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc85112e-cd18-4e54-8016-37547929fa14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c2afbb85-5329-432f-b6e1-451c27053fec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "add119c9-3051-47d6-b36b-32fccd08bf28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d47d1975-82cc-4489-bc45-5b5db34307d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "754b8a55-d888-4cf1-88d8-e1c935f36a87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5758ceec-d9a0-46a2-adaa-710fd2588b45"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5469f16-a846-4de8-8b86-197f4632aee1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98f3bb39-25ed-4bfb-80e0-3b6c67913af2"
            }
          }
        ]
      },
      {
        "id": "98fe716f-92e5-4b9b-9cd3-5610872f9717",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5580a902-6396-45a2-b8dd-5edcd8248740",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eafc45cd-4c62-40f8-aa05-f40521da813a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6c5d26a9-d716-48f4-8887-bfcfea4afa34",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a566ab-b991-4e08-b57a-f1ca7f9a1d5c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d89c879c-0b03-46a2-8c92-43a26ed5bb5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3d47b8-70f5-4f4a-a0a4-c1dfa7097ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdc99db3-6875-429f-a44c-3df8f7cda53d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f6c49a2-1f72-4586-9e2f-736c8fee1ee3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49d0ed0f-7704-44bb-abda-a4aa17eee2f5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38bba7a4-060e-4738-9939-90c29d580e79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e5f2169c-640a-41fc-a4d4-a3ab9b4010fd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d746d78-153c-4dfb-88b4-cf3000732c90",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "15242f0e-e525-48dc-befa-7535c9b47829"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6921d5c-0aa7-484b-8d39-02a825a74b93",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09991893-7775-4b16-8ca5-fd82660df88b"
            }
          }
        ]
      },
      {
        "id": "ff3bb1b0-ea2a-453f-96e0-f4d0113e8750",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d54edeb3-9360-4e43-9881-d191cd956fa5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e1324263-ce5e-46e0-9132-95f9b22a1a43",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "69119b32-3593-4314-9da9-4eec565404b6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f6b18a-5b96-46a6-8536-9e4e1f58a8f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d1dd5815-b52c-428c-9db2-7c3ed6579699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e69701-035f-4467-b4ec-1434c7688ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "538ebc84-b580-414b-9b88-ef4897c800c1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11c6b659-c421-4c4a-9a41-a1a2d041dd4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a10ca271-1460-4fdb-8db6-0f0c93fcb6e4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "14c3b0d9-082c-43ab-bc78-00974c0973a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ac7279e-04e1-4cd4-b0ea-98cc38a23f83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "79bbad8e-f24b-4542-bc47-073f77f95ad4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ce68c3b6-a229-4678-980c-dca87fc8aff4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8eb0fe1b-6f8c-420f-a3ff-83f7398bac54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ea7ea6d-ea6c-4a39-b1c3-c3500f2f37ab"
            }
          }
        ]
      },
      {
        "id": "e9f215b8-a3c3-4ba0-aa47-2680fdeed77c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c1a9bc75-907a-42ff-be4b-dfbd61f63898",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0fded5fe-ab64-4274-bf99-65b4ad3b3c89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "076f9970-6ed5-41d1-a129-cc344c8822ef",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2372af7-969a-4a48-a6fb-0923f829c6df",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71f7c3e2-11f5-484b-98fc-7abd658ccbc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb7cba2-094d-4985-bdf4-896ba8fa4efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "60d80cce-e33c-4002-803f-fa6bbacfc30f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d9c7d29-af0f-48de-bde2-c21e72f6a1c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c776d34f-e615-487d-ba60-94b53f65019c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98b3adde-0f51-44c8-b3a2-8963cab7e0eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fd1eb56-222a-4ca0-ae69-23170b101d53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3a4c00a-7fa8-42f2-8485-434c7c9da58d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2f12cc0c-939f-48d4-8650-53fa5bc570bd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "223fa087-1223-4293-80e4-8f368f67d041",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bbd5f8d5-b97b-44c0-a3aa-bbf4bdfa31b2"
            }
          }
        ]
      },
      {
        "id": "0b6cc172-9923-474f-a9dc-4b83829321b3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6ab1688-bb2c-458b-8ff0-74c75569c1d3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42a88ba0-4ff5-47ff-b32c-6ea98a04e726",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "24d6f6bb-346c-446f-8490-8ca61594e548",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25832754-f36f-4847-95e4-e8ddf1e36645",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a823d4d6-2e62-4531-bae6-a2c13015fbca",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.628070175438594,
      "responseMin": 6,
      "responseMax": 492,
      "responseSd": 62.89625474690883,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701736586389,
      "completed": 1701736613628
    },
    "executions": [
      {
        "id": "51fbf2d7-8bcc-4901-9377-963f27af3b10",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d5693f00-b2d0-4b9d-8243-0e5a53189a53",
          "httpRequestId": "c8b70ce6-34e4-415d-832d-db6acb04eb01"
        },
        "item": {
          "id": "51fbf2d7-8bcc-4901-9377-963f27af3b10",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "58baaadd-f450-43ec-9522-6f64bbc38c0c",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "c48ac420-50b2-4b1d-90f6-b860e2b441c6",
        "cursor": {
          "ref": "191eee76-afe8-4a71-b451-d5103495fd16",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "02266967-20c1-40a5-9af7-750723dffe1b"
        },
        "item": {
          "id": "c48ac420-50b2-4b1d-90f6-b860e2b441c6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1ebb5d07-34a5-48b8-9470-e8a978b56ed9",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "8097bbe0-e4e1-4c30-8d5b-2d73a7304241",
        "cursor": {
          "ref": "543d482f-b42e-4d0a-9313-02924eb12bfb",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "724eb230-ba3c-43bf-b739-32ee3fc40902"
        },
        "item": {
          "id": "8097bbe0-e4e1-4c30-8d5b-2d73a7304241",
          "name": "did_json"
        },
        "response": {
          "id": "b835b715-ad1e-4d6f-8ba7-834683ef099a",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcedc49-aaea-4649-bf00-f0e255f2dafb",
        "cursor": {
          "ref": "12a4e2a7-e039-42a8-8b8c-bc7be566904b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae168661-b50d-4179-a54e-c35f5f574891"
        },
        "item": {
          "id": "bdcedc49-aaea-4649-bf00-f0e255f2dafb",
          "name": "did:invalid"
        },
        "response": {
          "id": "a35f690b-6a99-42c7-a1ba-77e80b1987a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcedc49-aaea-4649-bf00-f0e255f2dafb",
        "cursor": {
          "ref": "12a4e2a7-e039-42a8-8b8c-bc7be566904b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae168661-b50d-4179-a54e-c35f5f574891"
        },
        "item": {
          "id": "bdcedc49-aaea-4649-bf00-f0e255f2dafb",
          "name": "did:invalid"
        },
        "response": {
          "id": "a35f690b-6a99-42c7-a1ba-77e80b1987a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a585e5b5-ed28-49c7-a2bf-ec2b5cd876d0",
        "cursor": {
          "ref": "43236dd1-d876-4177-ab42-e5b607235fa8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b4ca1657-a9cf-4573-96e0-9f50b24533cb"
        },
        "item": {
          "id": "a585e5b5-ed28-49c7-a2bf-ec2b5cd876d0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0a7aebf0-79b1-462b-b664-385fbb826fe2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff03cbf-8e36-46e8-9d61-974e3e96dd22",
        "cursor": {
          "ref": "fa997691-53c2-48aa-9bc6-70fe1b00612b",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "59b0a69c-1169-4c26-add6-cc4d79229b91"
        },
        "item": {
          "id": "0ff03cbf-8e36-46e8-9d61-974e3e96dd22",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "209b30d5-6b08-40a7-ba45-8040fe1076ba",
          "status": "Not Found",
          "code": 404,
          "responseTime": 59,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d4bd048-294f-407d-aef7-7e2c566668ff",
        "cursor": {
          "ref": "899c557c-17f9-4b26-896f-b8ce437e634f",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f432ba3f-29e5-42f4-a9ff-3ba89f80261a"
        },
        "item": {
          "id": "8d4bd048-294f-407d-aef7-7e2c566668ff",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e08f8624-ea2a-4843-97d1-ae702303ef5b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766b3787-7b19-4933-bb57-1bb414b42b87",
        "cursor": {
          "ref": "469958de-a7e0-4483-b450-d3a284c66d51",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "23a77210-9077-45ab-b8c2-e54362af6990"
        },
        "item": {
          "id": "766b3787-7b19-4933-bb57-1bb414b42b87",
          "name": "identifiers"
        },
        "response": {
          "id": "69f26399-cfce-403c-a588-0e2542a0dcc2",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c90f4e8-69f0-430c-99a3-e5a8751293e7",
        "cursor": {
          "ref": "3e793595-9c4e-40a7-a714-38fe828ee1c4",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "44d2a652-e191-4d0b-9550-414450f2a5b6"
        },
        "item": {
          "id": "6c90f4e8-69f0-430c-99a3-e5a8751293e7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d7a5f64c-c1d7-4595-82a7-35bb64869eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "950fc332-d2d5-439b-9542-e6330a705098",
        "cursor": {
          "ref": "007f8361-09a9-49f2-8ebb-15fc7094a40c",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9ae786a3-29df-45b4-b183-503624149fc5"
        },
        "item": {
          "id": "950fc332-d2d5-439b-9542-e6330a705098",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "cc29c2be-220e-455c-91a2-dcf5e356df37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ce94a8-6805-4fad-b0a1-5b912b98056c",
        "cursor": {
          "ref": "aeb645dc-f8fb-4488-9a81-c8c4ca3ebc61",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ea7d1f71-a9d1-48c5-b5af-a99f18380a57"
        },
        "item": {
          "id": "26ce94a8-6805-4fad-b0a1-5b912b98056c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "72ec9abc-1951-41ed-83ca-23c5c1a5e190",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18532182-90ad-41ab-a725-dd6431c7fe62",
        "cursor": {
          "ref": "60258b0b-be89-45ef-a344-93fcdab6488a",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "be934bde-0fce-44c6-87aa-c7b9bf463e1c"
        },
        "item": {
          "id": "18532182-90ad-41ab-a725-dd6431c7fe62",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "760784dd-d5f3-488a-b9fc-fd5b107efca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca74893-e51f-4f1a-9691-7b2632432482",
        "cursor": {
          "ref": "cd40443f-1f2d-4527-b271-5523f3e86ed8",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "49be5073-3c31-4f3a-837c-48cb2213645d"
        },
        "item": {
          "id": "1ca74893-e51f-4f1a-9691-7b2632432482",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d1e8f11a-5f93-4f57-b005-3b651d4a091f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd2260c6-e3c5-41d8-b66b-ef2675df158f",
        "cursor": {
          "ref": "5fa0eb66-8c2f-4c4f-ad70-e4cb4dfa1197",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c80c899e-af4e-4693-81f6-1b87ca36b585"
        },
        "item": {
          "id": "cd2260c6-e3c5-41d8-b66b-ef2675df158f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f30855de-768c-4545-86d0-81b31b273567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b08259e-9668-4902-b6b3-71361ac654ea",
        "cursor": {
          "ref": "66f3434b-86d1-471b-9853-bc7117be6d0a",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1b8c8f66-9266-45af-ab14-c454882925eb"
        },
        "item": {
          "id": "2b08259e-9668-4902-b6b3-71361ac654ea",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6ee699ec-3c25-4be5-88cb-638b5e8b8dda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95082afe-097d-4809-b0fe-35893dbf588e",
        "cursor": {
          "ref": "205dad3a-f42c-4d2c-8911-0e7a376dcc97",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ad66c0eb-41f0-4ca3-ad7e-cd6e8c20c157"
        },
        "item": {
          "id": "95082afe-097d-4809-b0fe-35893dbf588e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "36468cad-2149-409d-a8c3-2c7361371f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c242fd-4c3a-4fe4-8329-96a3445815b2",
        "cursor": {
          "ref": "fe55b7af-d737-4885-afdc-aeb10c18408e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bdeaafa2-ff79-452d-954e-46c53b58879d"
        },
        "item": {
          "id": "98c242fd-4c3a-4fe4-8329-96a3445815b2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7bb85dec-6917-4fab-9312-0a1f124d0ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274b33b8-fa4d-4581-b7f1-b126ff0a21f2",
        "cursor": {
          "ref": "e11eec66-884f-42f7-a2b4-1d87b897afab",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "ca5fa9ad-b245-4b3f-bee6-23a7cad51009"
        },
        "item": {
          "id": "274b33b8-fa4d-4581-b7f1-b126ff0a21f2",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "9965199f-9196-497b-9344-f7e94618e0ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37cfd414-c7de-4749-847d-a457636d76d1",
        "cursor": {
          "ref": "a48cd003-f0bc-41ca-bb2b-feed37f7bca9",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b732b3e9-6cbe-45d3-9911-c1e9173784be"
        },
        "item": {
          "id": "37cfd414-c7de-4749-847d-a457636d76d1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "84eacb03-120b-4a26-b515-87d90e476f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84338cd5-295c-4d03-a077-4cc43256480a",
        "cursor": {
          "ref": "86bb6a28-4e48-4232-94f2-6a3401b2c531",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "296dcbbf-ada3-4b03-866f-d3a3866d62bf"
        },
        "item": {
          "id": "84338cd5-295c-4d03-a077-4cc43256480a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d1112cd2-240b-40ed-a49e-d8aa00f17111",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3fbeb2a-99bf-4b67-a67c-fc9e5509be41",
        "cursor": {
          "ref": "29d072af-b2a6-4ef2-9808-be78fa08979d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "267d0085-c693-46ca-b369-84f0c16f539f"
        },
        "item": {
          "id": "a3fbeb2a-99bf-4b67-a67c-fc9e5509be41",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f17506a9-8725-4db3-8b6c-549e478302dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46854a86-86ea-4a80-b230-f79e2ad5b5c6",
        "cursor": {
          "ref": "dd12d2d6-d064-4f2b-b13d-f7ab07d2a3a2",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9ebd66a2-7799-4e8a-a9a7-7d41b4a40e79"
        },
        "item": {
          "id": "46854a86-86ea-4a80-b230-f79e2ad5b5c6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "c31614fd-b6a1-477f-98ea-2eb0dddf0cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f275a0b-fbe5-4547-94f3-a98d4ceeb97b",
        "cursor": {
          "ref": "6ec1377e-f54d-411f-bc00-e844156200f7",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "c5a5e1b5-7413-4d5d-8d74-71e7cc1f8cfe"
        },
        "item": {
          "id": "8f275a0b-fbe5-4547-94f3-a98d4ceeb97b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ffafbc1d-be13-4752-8194-17c8f1071c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78a8082-b77b-48a5-b4bc-268a24d57159",
        "cursor": {
          "ref": "d834ff65-6439-4254-ab23-f695f4aeebf0",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "af407e1c-400c-499b-8e36-c7f312a0ed0a"
        },
        "item": {
          "id": "b78a8082-b77b-48a5-b4bc-268a24d57159",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "0decb463-94ba-475a-90cc-316924d50e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc161c74-d57d-492d-a483-ec194dc73ee8",
        "cursor": {
          "ref": "74e50d3c-eead-4afa-ad4c-f845a2bd4ab1",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3d1d2af7-4dda-4e54-a8b7-6b4283053497"
        },
        "item": {
          "id": "fc161c74-d57d-492d-a483-ec194dc73ee8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4f7f5043-30b3-42d1-b2bd-6467c8427526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70177e31-9eb3-4296-a080-dc1c141599f1",
        "cursor": {
          "ref": "93cd022a-03b6-4025-a629-57a7c421d025",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c08dbad1-ca3e-44a2-8d38-1339cbd8eaf4"
        },
        "item": {
          "id": "70177e31-9eb3-4296-a080-dc1c141599f1",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "6a4426b4-dd7e-43bb-99ae-14f8ddf9f409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda1a612-0a04-4bd5-8c7c-1249222b01d0",
        "cursor": {
          "ref": "6d93e486-5ad8-4c86-8b70-fdac5b463b63",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a82e129e-9d5d-4c7a-8336-ff40b1e9cd4c"
        },
        "item": {
          "id": "dda1a612-0a04-4bd5-8c7c-1249222b01d0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ffb4cd4b-a59b-45c8-a463-c96defedf3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c515f6-4c49-49a5-8051-1426493dfec1",
        "cursor": {
          "ref": "8184cec3-efdb-4e90-99da-9bd4395403b0",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c954f99f-0237-4069-b1a1-3376f78e3110"
        },
        "item": {
          "id": "48c515f6-4c49-49a5-8051-1426493dfec1",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fc0a8f31-7983-4e8b-9157-09a70aabfedb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00aa1cb1-c790-40a9-b6b0-6c9c0bd87eb0",
        "cursor": {
          "ref": "c81d2230-0f02-44a1-934e-e9ebd2b24011",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "93a46d72-c541-4693-8a46-021f03f646a2"
        },
        "item": {
          "id": "00aa1cb1-c790-40a9-b6b0-6c9c0bd87eb0",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "6b68e8b5-889e-4f9b-850a-f5a8937d48e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ec1888-12b9-4646-88ab-358e05b28b70",
        "cursor": {
          "ref": "ff6cfadb-be9b-430f-a091-42c5e0dfbefc",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9bb735da-069b-4252-9e4c-100a835f0362"
        },
        "item": {
          "id": "47ec1888-12b9-4646-88ab-358e05b28b70",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "03c59a30-d757-4e2a-946b-a87e6c2da6ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1667590b-fd83-4702-9785-58960defdccd",
        "cursor": {
          "ref": "84a0ad81-0895-451f-a054-fea144ae6199",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7808602f-a194-4e36-b1fb-d9b04b249ce9"
        },
        "item": {
          "id": "1667590b-fd83-4702-9785-58960defdccd",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d29ceb8e-7986-4754-a41a-a7aaf655cff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af3a92e-3f7b-425a-b274-1e525f3440bf",
        "cursor": {
          "ref": "237d718c-00e9-45ae-96b1-1c0cd4fb31b9",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "74f28979-ce9f-4b29-8418-981db122063e"
        },
        "item": {
          "id": "7af3a92e-3f7b-425a-b274-1e525f3440bf",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "53a9c48c-7320-46d5-bc51-f6488d20ed1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3d560b-4b25-44b1-a737-0075e41ef85f",
        "cursor": {
          "ref": "a514a7f8-7723-4fd8-821e-de23e403a2e3",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "79ec535e-9680-468b-9a1c-b5686d4a9b0b"
        },
        "item": {
          "id": "6b3d560b-4b25-44b1-a737-0075e41ef85f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bfe7e352-6ae7-4dfc-af6d-e600f7cc021a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fba6ba4-3457-491d-bef2-215c0981e68f",
        "cursor": {
          "ref": "f452b502-3a20-42b1-ae40-867cd3075e15",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "58a3e5f2-7d99-4acf-8256-bb4652d83b20"
        },
        "item": {
          "id": "8fba6ba4-3457-491d-bef2-215c0981e68f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fb61c76b-3b69-4cd3-9cbb-c6ebb96b40b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5039a2-6df9-4c70-b130-5004e06e4d3e",
        "cursor": {
          "ref": "72ffaf30-445b-4580-9fc8-3d2ada47c512",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ea2618ca-b98d-44c9-bffa-cc47595512eb"
        },
        "item": {
          "id": "cf5039a2-6df9-4c70-b130-5004e06e4d3e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8933d523-0605-43f5-b465-8fc01ce65b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916a3e94-a6cb-4efe-8a53-10b6b1538725",
        "cursor": {
          "ref": "db605139-f77f-4a56-a55f-ee4f0642c50e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "298e495c-d0a1-4371-84b3-ec0ba2318fd8"
        },
        "item": {
          "id": "916a3e94-a6cb-4efe-8a53-10b6b1538725",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "132f5c7f-5b5a-4767-b15d-65ca0cd34c7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6bad138-7b77-4ed2-b9dd-91def2aae3e3",
        "cursor": {
          "ref": "a3705525-ff09-4400-a386-9d8799393d75",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b4c52851-05f1-4344-b195-6139d1f9be09"
        },
        "item": {
          "id": "e6bad138-7b77-4ed2-b9dd-91def2aae3e3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "92b205fc-f575-4a76-943b-b59ea45c7587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e387497-e832-4739-b625-ee2e138a04ea",
        "cursor": {
          "ref": "77ac3626-a716-4da3-9206-d318aab4342a",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9e82d2f7-3d1c-4a68-a242-52e9bd195eb6"
        },
        "item": {
          "id": "7e387497-e832-4739-b625-ee2e138a04ea",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d06170c4-a6f9-4f74-81a3-01d5a52b2360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275ef2ee-4821-40c8-88c8-c6834d01b813",
        "cursor": {
          "ref": "c5d312f7-7a84-47c5-bf1b-9f862a13d7c0",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ad17aeb7-6fe9-40ae-a045-aed7b09cd8fc"
        },
        "item": {
          "id": "275ef2ee-4821-40c8-88c8-c6834d01b813",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c49cccdb-ac9e-42a5-b4fe-843154c2961c",
          "status": "Created",
          "code": 201,
          "responseTime": 492,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "6e9a320a-8400-4ef1-b6d6-d908fafede10",
        "cursor": {
          "ref": "6e77450a-15fb-4b76-804d-3c24b11b57ea",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b5e628b3-7ec5-489e-9eca-be045c18ec35"
        },
        "item": {
          "id": "6e9a320a-8400-4ef1-b6d6-d908fafede10",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a5a80f3c-223f-4303-9cdb-07dd94ea1e29",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f6592580-98a0-416b-a576-d77eda3b2cdf",
        "cursor": {
          "ref": "b90dbcec-2159-4a05-a6c6-515832f76ee9",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "37677b61-14c4-48d2-ac9a-506852286667"
        },
        "item": {
          "id": "f6592580-98a0-416b-a576-d77eda3b2cdf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e0cae792-acdd-4472-957b-36fdc62e60ad",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "514e1759-3fb3-4d97-b61c-71f527ec37f0",
        "cursor": {
          "ref": "122feae5-3426-4449-ac24-18a28f2da613",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e871d706-5e25-4444-b187-21189d5bfde5"
        },
        "item": {
          "id": "514e1759-3fb3-4d97-b61c-71f527ec37f0",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "47e649f9-3273-4296-b1a2-44b48f02e497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9d089b6-4898-415b-aca1-65ac98eb0d94",
        "cursor": {
          "ref": "fd50192f-ceac-4821-9ae8-73481a1bfd8a",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c1b48979-e79e-4bb0-9c9f-989cbc411400"
        },
        "item": {
          "id": "c9d089b6-4898-415b-aca1-65ac98eb0d94",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "181c21e2-9eef-43a2-91e2-3dcd738e1233",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f094c6e0-9284-4cec-935c-3d1f5bb5a93a",
        "cursor": {
          "ref": "49091362-fa96-439e-9855-a66df2d375c3",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "de424371-c832-4077-937b-21ac1d3c8bba"
        },
        "item": {
          "id": "f094c6e0-9284-4cec-935c-3d1f5bb5a93a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a3ee0cb6-7df2-4e0c-aff5-4e1800a6007b",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4da13e30-268d-4682-8f48-e0ad22b378dd",
        "cursor": {
          "ref": "6dada174-ace5-46fc-a307-e990eb047a8d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1d9ac0a1-561a-4233-98f4-7da95ec12d3a"
        },
        "item": {
          "id": "4da13e30-268d-4682-8f48-e0ad22b378dd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2a8eb2a2-9576-461c-a4c3-89da53f71b46",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "184b270f-38e4-4661-9cba-9ddbda22852b",
        "cursor": {
          "ref": "b30d6cc9-a872-4a65-9c44-f04429e1e280",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "23907e1b-a46c-4c63-a277-bc8b54f0f351"
        },
        "item": {
          "id": "184b270f-38e4-4661-9cba-9ddbda22852b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a7fe889b-d1b2-473d-9169-105bd26791ac",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "fbe69952-626b-4a1f-9b46-77dd0dfa0642",
        "cursor": {
          "ref": "56eae0b5-4a31-43bb-9ccb-18ccea142f13",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "32598ba4-c844-4787-917a-36d87058ae69"
        },
        "item": {
          "id": "fbe69952-626b-4a1f-9b46-77dd0dfa0642",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3c4eb4f2-63c6-403e-a677-2c03c796a601",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c4e4742a-4d35-47aa-b595-b4d0f721b3c4",
        "cursor": {
          "ref": "dd50ca6e-9247-46b8-bdb9-119fc3b81781",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "df399aa3-0a37-4e35-9cb1-203682226790"
        },
        "item": {
          "id": "c4e4742a-4d35-47aa-b595-b4d0f721b3c4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5d920fcc-8a9d-42d4-854e-866c9aceeb94",
          "status": "Created",
          "code": 201,
          "responseTime": 397,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "63d9af6b-281d-4cc6-81a0-7e6432a2dbf6",
        "cursor": {
          "ref": "ddec3617-49a4-4431-8dba-0d0f0b445eb3",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "5d2a22d6-d6bf-4c08-a55f-bb5491be6a6c"
        },
        "item": {
          "id": "63d9af6b-281d-4cc6-81a0-7e6432a2dbf6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1a2d9fb3-e308-419f-a9d2-2f8bab9c576d",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6274b02d-a76a-4a0f-a5b4-18059db5c8c4",
        "cursor": {
          "ref": "d2aff7f6-7315-47e2-813d-699dd5dfa8ab",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e4041752-f7e7-4bf1-b041-54025ec2aded"
        },
        "item": {
          "id": "6274b02d-a76a-4a0f-a5b4-18059db5c8c4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a3a3c554-fadf-4456-b1fa-b9692a708dff",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f5f064d8-4bb8-4a2a-a135-a7ed6c65ecbb",
        "cursor": {
          "ref": "4feceefd-6574-4e81-9be6-644dd572617f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "317aa5af-0d27-4c7e-9ba4-52064aea9eb2"
        },
        "item": {
          "id": "f5f064d8-4bb8-4a2a-a135-a7ed6c65ecbb",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9f8c2b31-0204-4e04-a76f-0060486f2a71",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f002d3e0-140e-49b5-a82d-cf8afa96b41d",
        "cursor": {
          "ref": "ee68c851-74eb-41d3-ac65-71d3c3e33761",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c029943a-bd42-4a47-9630-f171179548d2"
        },
        "item": {
          "id": "f002d3e0-140e-49b5-a82d-cf8afa96b41d",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "22e5b905-947d-4a6d-ab09-dddc8f9c3a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1476262-d741-4df0-933c-dcf0692c0653",
        "cursor": {
          "ref": "5c981d89-cca8-475a-89c6-b3149b069665",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5fd0b37c-957d-4352-b0c9-585ca2aab9b9"
        },
        "item": {
          "id": "d1476262-d741-4df0-933c-dcf0692c0653",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "aa25504e-8072-4852-b8b3-20b7ebd173d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c968b7-4cb8-491b-9885-943fa9cdd2a6",
        "cursor": {
          "ref": "0cefd32d-f53b-4f01-913b-5d83c9f6db6a",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "442c8d9b-a612-452b-a0a0-c1e9daa3a9c9"
        },
        "item": {
          "id": "42c968b7-4cb8-491b-9885-943fa9cdd2a6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a6c7a3f5-6a92-430d-8829-b6409f896771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0c5368-d454-4955-8ca4-1945bd910a5d",
        "cursor": {
          "ref": "cf559c5e-9dad-4bc8-9be3-2e0f5fbf4661",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9460ebd6-c95b-4187-8a2d-2d327b78bc36"
        },
        "item": {
          "id": "cb0c5368-d454-4955-8ca4-1945bd910a5d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c1efa967-d122-4eba-8d3e-e2c254f55b0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "821ba713-2a85-4774-a04c-862a63b3c8a0",
        "cursor": {
          "ref": "1381eda9-7310-4878-b760-34563eda4b04",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8f0951f0-e928-4dc3-b97d-7f21ad21fa20"
        },
        "item": {
          "id": "821ba713-2a85-4774-a04c-862a63b3c8a0",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bac3bbb1-81df-47a8-9665-21961f6c76bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f595c109-f0be-4be5-84d6-aabca77c2840",
        "cursor": {
          "ref": "f5746d77-c491-4951-a86c-d5b75077fbd2",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e29325b9-642f-48ec-8595-9688069d301b"
        },
        "item": {
          "id": "f595c109-f0be-4be5-84d6-aabca77c2840",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e7019231-7d72-4e63-b6c6-72d314c08fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8ce126-a0d8-4787-8f14-4e14d20f09ed",
        "cursor": {
          "ref": "8fada531-9ff9-438f-b5f4-193f4836db9b",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c450cb5e-05a3-4024-86a8-a8857ef21334"
        },
        "item": {
          "id": "0b8ce126-a0d8-4787-8f14-4e14d20f09ed",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "04743f7a-da36-4ddb-885d-f2cd568e55e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59919604-3860-492c-91f5-50c52f12c073",
        "cursor": {
          "ref": "d7f08c3f-0684-4c18-86fe-dbb74ac3eb98",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7c21274c-5a96-42ed-ac50-f49f5b89f6e7"
        },
        "item": {
          "id": "59919604-3860-492c-91f5-50c52f12c073",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "530d5a23-5b95-481b-aedf-0a408604a106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2afd172c-cba4-437f-a291-750ee4b2eb46",
        "cursor": {
          "ref": "02cba944-0c21-45ab-850e-19480195dfd9",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9c82d828-eacf-46ab-8e88-239630a5d6bd"
        },
        "item": {
          "id": "2afd172c-cba4-437f-a291-750ee4b2eb46",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "eb5abaf5-0ada-4cbe-9ce4-e26c410b6d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c27338e-1216-415a-9c31-a838fca20913",
        "cursor": {
          "ref": "342b9d21-5f29-4183-987c-d41574c28e2c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "467d441e-9b4b-4916-b6f3-2125b9268d4a"
        },
        "item": {
          "id": "5c27338e-1216-415a-9c31-a838fca20913",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0068e012-fe87-4e09-9aa0-f8a6601a6398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa628b9-b931-4163-a9de-db11f0b09a37",
        "cursor": {
          "ref": "2405e979-3b80-4268-b188-f0d68575f3e8",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "13f2c02d-cfe1-40bd-809e-20efc7a23e2e"
        },
        "item": {
          "id": "2aa628b9-b931-4163-a9de-db11f0b09a37",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4551e07b-128c-4082-88cd-6003d71359e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2320c2f-4192-45a0-b897-3d940436a3ab",
        "cursor": {
          "ref": "25c327ca-9568-430e-b113-907fbcd90dde",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c88ef848-5ee1-458c-8327-40720663928d"
        },
        "item": {
          "id": "e2320c2f-4192-45a0-b897-3d940436a3ab",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "33b6d306-0de4-4fc5-9022-a48def6c80b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603ee3d4-7f0a-4168-9a95-1f65dae0fbd8",
        "cursor": {
          "ref": "00de5989-389a-4b37-b452-a6314571f422",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "abf47f65-384b-4792-a791-b12d705cb1e7"
        },
        "item": {
          "id": "603ee3d4-7f0a-4168-9a95-1f65dae0fbd8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3c9ce97f-8181-4eb4-a18e-1aa06ce8b2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83573dd4-ec45-482d-8a15-d0aafb4137b0",
        "cursor": {
          "ref": "f290e26c-cee7-4943-9eaf-b9d5f8ab44af",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5c8beda9-df2c-4ce0-8bab-23b19e3e57c2"
        },
        "item": {
          "id": "83573dd4-ec45-482d-8a15-d0aafb4137b0",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d2b2a2ab-75d8-43d3-a2a1-261ddafc2935",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "938df6fe-3206-400b-a43f-f60f648df3d7",
        "cursor": {
          "ref": "efda8676-3cd5-430b-a4e1-755419877669",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e1cc32a5-c2b2-4d8c-a6c8-0edc2005456a"
        },
        "item": {
          "id": "938df6fe-3206-400b-a43f-f60f648df3d7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9c54425e-a2fe-4ddb-a2c1-d15795b7a4ff",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5d0ce44f-5f0e-44e9-b47e-0eab974a0933",
        "cursor": {
          "ref": "f5b789b4-86bf-4ec8-9394-49e2e0850765",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "4d522b6f-3eec-4e7f-bfe1-fb432bbbf9d2"
        },
        "item": {
          "id": "5d0ce44f-5f0e-44e9-b47e-0eab974a0933",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "28e9d862-387f-496c-9e73-0ba2cb582926",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4023d88b-bdac-4ca0-b4ad-e488933eceeb",
        "cursor": {
          "ref": "38ab2953-006e-4c53-80a1-14a9e7a134de",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6e25cac8-56c2-42cc-ae9a-f3752ee7770b"
        },
        "item": {
          "id": "4023d88b-bdac-4ca0-b4ad-e488933eceeb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d460d055-65bb-4577-a5a3-da1745dbeef4",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5073dcef-a9b7-466f-a9af-1a1e951a30d5",
        "cursor": {
          "ref": "43507007-8a9d-4146-84dc-888379edb85f",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0841b058-9720-4616-b83c-ac960081399b"
        },
        "item": {
          "id": "5073dcef-a9b7-466f-a9af-1a1e951a30d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "68745830-7697-4128-953e-b3a6e4e94674",
          "status": "Created",
          "code": 201,
          "responseTime": 219,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "39a40606-25b0-44bd-965b-47a2adfc8563",
        "cursor": {
          "ref": "335a51bd-ff83-4345-84c4-2442e3d4b784",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d770f4f7-3d25-49b1-a690-80e850dff4ef"
        },
        "item": {
          "id": "39a40606-25b0-44bd-965b-47a2adfc8563",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "253404ff-33cd-4f82-a29f-50ab327f201a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92957a39-1c88-4220-943d-27d4a1efe317",
        "cursor": {
          "ref": "c92cc46b-7bcd-4d7b-a773-7c2e3256f8e5",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "479642f4-66b4-4ab4-adbc-73e16cf32b3f"
        },
        "item": {
          "id": "92957a39-1c88-4220-943d-27d4a1efe317",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fc1bf3bf-e732-4b29-bf4f-bded99ed79de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b17d7c-ac47-49f0-9404-82fa3348ce5f",
        "cursor": {
          "ref": "8cb6dbe6-81dc-429c-af66-077a00bf6764",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c6634aa4-f6b5-4ee1-a91c-5ccd0100522d"
        },
        "item": {
          "id": "48b17d7c-ac47-49f0-9404-82fa3348ce5f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "35af0880-e477-48fd-8387-32be14f47486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e13458c-4658-4c0c-8064-7903f471d469",
        "cursor": {
          "ref": "1317bfca-d554-4b1d-b3e2-18a8d5616c06",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9ffca239-fbcc-44ff-a701-25f77e8b6f09"
        },
        "item": {
          "id": "9e13458c-4658-4c0c-8064-7903f471d469",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "314d3673-9df4-4573-bdb7-f3c8ed092a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2148957c-ffc1-4d1c-affb-3b8619d8c68d",
        "cursor": {
          "ref": "cc352eda-5192-4527-b0df-efc6ad957d2b",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0ad5e127-5c5c-4fcf-b414-7246c91db136"
        },
        "item": {
          "id": "2148957c-ffc1-4d1c-affb-3b8619d8c68d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "2f4041b5-c697-426d-b0e3-3542e39779d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50aead07-fef5-43d2-a5c3-2804a579450f",
        "cursor": {
          "ref": "1f3733bb-3863-436a-afb2-4eeef1bd70c0",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "f2370bf9-2de6-4d93-9c3d-2948237ff01a"
        },
        "item": {
          "id": "50aead07-fef5-43d2-a5c3-2804a579450f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9e1ae22e-b965-4601-aa04-702767857cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94a606f-604a-4ab1-bda1-de264d803190",
        "cursor": {
          "ref": "5a570946-e66e-4e93-a938-0787108116ec",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "dee37dd6-4e59-4151-ad2b-f68df2d4c6dd"
        },
        "item": {
          "id": "d94a606f-604a-4ab1-bda1-de264d803190",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "428638ac-7c72-487e-ab4e-31c59ae3e20f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd25fd3-64d0-4717-9669-bc4f31c03198",
        "cursor": {
          "ref": "eb6bb22a-c8f7-40ca-8f50-000f5dc022ef",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bafd6df8-469b-42ab-bd01-a1dbacee20e9"
        },
        "item": {
          "id": "7cd25fd3-64d0-4717-9669-bc4f31c03198",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6f8014a0-a756-4da0-8d32-0a0656e799d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb448072-0b42-4e3e-b154-db65d5f5df0d",
        "cursor": {
          "ref": "52a113d1-a421-46ee-a095-11ae23396c2f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "b899cfe5-230e-4dd2-856d-21d12bcd66d4"
        },
        "item": {
          "id": "cb448072-0b42-4e3e-b154-db65d5f5df0d",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d24b900f-152f-406c-92cf-817559d5c925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75c8207-dc50-4961-a928-9d97b55273cb",
        "cursor": {
          "ref": "095cb368-878b-4ea3-90f9-f3edaaf5c7cb",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "62935dc5-bc52-4020-b99c-85b6fbf4607a"
        },
        "item": {
          "id": "b75c8207-dc50-4961-a928-9d97b55273cb",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cfa994f5-9b60-4620-aafa-b965ba549673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db14ca85-dfb7-4f01-a216-12f906ae2930",
        "cursor": {
          "ref": "d0d132b7-fa9b-4941-8184-0ae432378ca9",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fe9d70ef-0c9f-44bc-a0fb-fb175fefa574"
        },
        "item": {
          "id": "db14ca85-dfb7-4f01-a216-12f906ae2930",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "63595d8d-4d9e-4caa-a565-f68b8bd2a355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279712e4-f70d-43e0-b5bb-f39a038e7fca",
        "cursor": {
          "ref": "a50cf55a-0fec-445f-ae74-4d225e006ea2",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b2b30c2d-526b-4771-96a2-046d3e7eb324"
        },
        "item": {
          "id": "279712e4-f70d-43e0-b5bb-f39a038e7fca",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "aaa313ae-1d56-406c-a004-9daaa2a91e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d90f7b15-d16e-4166-a7db-d50e69af010a",
        "cursor": {
          "ref": "dc6135a6-16b5-4c6e-8b44-e575dd5a5575",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "7467ff40-f79a-40c1-a351-44fbf64c9669"
        },
        "item": {
          "id": "d90f7b15-d16e-4166-a7db-d50e69af010a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a1ad0c6b-4c83-4c5a-878b-9153dbd45f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4baafef4-a7f1-45e8-a25d-dd002c1808f3",
        "cursor": {
          "ref": "c994b94b-5279-4843-b845-d3baf9a0f6de",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2cd4d5b5-7867-49f2-b31f-9cc10d28d403"
        },
        "item": {
          "id": "4baafef4-a7f1-45e8-a25d-dd002c1808f3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "88694e9b-186f-4f07-bf65-6e2dc267a47c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b788a7-dd13-45eb-bafa-6ba871d3c8bd",
        "cursor": {
          "ref": "6144d090-635c-4a3b-854e-f066f926a093",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9f68e90a-063f-446a-a590-cbc3e341c4a8"
        },
        "item": {
          "id": "20b788a7-dd13-45eb-bafa-6ba871d3c8bd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "57842663-bc4d-4b17-ba6e-1bb6e9601369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288f4de8-32f7-4d6e-a6a2-5f04eae6e400",
        "cursor": {
          "ref": "ee845d7a-b686-41e3-a419-b6bd247593b6",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3e027e63-2fcb-4093-8b0c-fd2fa709de17"
        },
        "item": {
          "id": "288f4de8-32f7-4d6e-a6a2-5f04eae6e400",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "d144d0b2-d383-419b-91b2-015b2e90ae7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dc8ce9a-2337-4808-8f4c-4dcc66845789",
        "cursor": {
          "ref": "f0199970-8577-4615-8a03-3a926bd614e3",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3e0ae1fe-da4b-433d-bb0e-bdc121fd5a68"
        },
        "item": {
          "id": "0dc8ce9a-2337-4808-8f4c-4dcc66845789",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "74a53aa5-9fe4-4337-8ca4-9500a4ae3f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233f706a-294a-4d38-b4a9-b7401317868e",
        "cursor": {
          "ref": "0087ba93-37b7-4d72-be67-d9012ed07bae",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6c463fe4-fde5-42fb-8216-e7c3b83a8c41"
        },
        "item": {
          "id": "233f706a-294a-4d38-b4a9-b7401317868e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9a8bbf6c-193d-4518-bc93-cbbe18a5a356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445c0978-308c-476a-921b-17ecd679914f",
        "cursor": {
          "ref": "4025d004-1f51-453c-8373-b49327c97288",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8e71ff62-fbce-40e4-96ff-e4009ac5fbda"
        },
        "item": {
          "id": "445c0978-308c-476a-921b-17ecd679914f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5f47da6f-91cd-49db-8b77-65016f491c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fcb0f80-9eb9-41f6-b242-b63e0410da66",
        "cursor": {
          "ref": "206d0f12-7177-4ded-9ba9-b65584081ded",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f2f7912a-0c99-4614-9205-811db4d5435a"
        },
        "item": {
          "id": "5fcb0f80-9eb9-41f6-b242-b63e0410da66",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9afbb68c-a168-40a7-9e30-94e4cb15b3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85aefd5-cc6a-4dc5-82ed-d2fd409a8374",
        "cursor": {
          "ref": "9d15dcdb-dfd5-4b9b-8f2a-383364338b71",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "828f9590-ea20-4ce4-80d4-bbad18f9599d"
        },
        "item": {
          "id": "d85aefd5-cc6a-4dc5-82ed-d2fd409a8374",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "9c3cea81-aaf6-4eb7-a883-16593ebf2f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af9c969-210b-4a31-b713-70287e6908ed",
        "cursor": {
          "ref": "b05ea581-0e88-4143-b17e-f5d66cf3f19e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "77f7a406-d167-4741-a5b7-ec1f7c66ad75"
        },
        "item": {
          "id": "0af9c969-210b-4a31-b713-70287e6908ed",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c574ec33-1df3-4f3d-892e-737b6bef7d44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c207852-4086-49e7-a15a-0a1ef32756df",
        "cursor": {
          "ref": "aea907dc-f8d6-422e-a22a-740087744208",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ad692b5f-e3a7-4762-9cf2-2d04f1b2ee69"
        },
        "item": {
          "id": "9c207852-4086-49e7-a15a-0a1ef32756df",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cd03a263-1a9e-4df3-9c08-fa15832ffa1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8c7e5c0-1622-4643-8f49-03a288d80b7d",
        "cursor": {
          "ref": "0ba9741b-836b-461d-abc9-1cce6e5a8058",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "18b211de-5798-4fbc-8f96-1770131ebb70"
        },
        "item": {
          "id": "a8c7e5c0-1622-4643-8f49-03a288d80b7d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "82d73501-03cf-4308-9786-58730e9d2f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d2d3d1-f369-4b91-9525-8406baa261bf",
        "cursor": {
          "ref": "d9135b3e-125e-4244-9abc-e91248e3ffc3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "614bed5c-7857-491d-907c-116476c899d7"
        },
        "item": {
          "id": "f3d2d3d1-f369-4b91-9525-8406baa261bf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "557fd68e-dc67-450c-8470-820a89eb04ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d83fda6-373c-4226-b4d2-bf348cafce86",
        "cursor": {
          "ref": "7b96978d-5b26-4308-b26c-720586e8cae3",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6a34d20a-cdbe-4126-8e78-814fd3dacc7f"
        },
        "item": {
          "id": "1d83fda6-373c-4226-b4d2-bf348cafce86",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "11399bea-7eb8-4bce-a132-cc373b037662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4ed532c-6354-4358-8cb9-2995d38a9291",
        "cursor": {
          "ref": "822358c1-3aa8-4d61-b6df-f6b38df8d914",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "41290943-8b8e-433b-9a8b-0f0acd9b2e08"
        },
        "item": {
          "id": "a4ed532c-6354-4358-8cb9-2995d38a9291",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "860b2df7-a7b6-4155-a8a7-d31c161e788f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d685dd0c-42a0-49bb-a73b-ab109f8c2401",
        "cursor": {
          "ref": "21bf5848-cdd7-4477-ab34-b72e7a9b1d55",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b6429489-2452-4129-b522-32ab10bcb8ab"
        },
        "item": {
          "id": "d685dd0c-42a0-49bb-a73b-ab109f8c2401",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cad40710-3cb7-4b0a-854d-246b06e032ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65811002-d53b-4837-8d9d-98aba899ee59",
        "cursor": {
          "ref": "a0c65d70-f1da-4766-83fd-e6a4c69a93a0",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "803a16a5-23a3-4f14-80bc-70e48f368866"
        },
        "item": {
          "id": "65811002-d53b-4837-8d9d-98aba899ee59",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "022f74cb-3ebe-4439-92dd-8143996c2201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637e11f2-d083-4e23-b0c4-8037c3807fd5",
        "cursor": {
          "ref": "f5f3f66a-4e24-408c-8581-5adc6d528141",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4a8377d1-c211-4680-a8e7-59991af133f2"
        },
        "item": {
          "id": "637e11f2-d083-4e23-b0c4-8037c3807fd5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5df57bd1-a1a1-4873-8625-cdbd27ded4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4259cc9-4625-49b7-a168-333cef9c6b63",
        "cursor": {
          "ref": "da840e85-8e83-4666-9ec4-0f65d0155e13",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c4015315-7d53-44c1-8780-cabf9754f9ea"
        },
        "item": {
          "id": "d4259cc9-4625-49b7-a168-333cef9c6b63",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "05908dca-92bf-40d3-83fb-e368f2fae046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713be87c-d71f-4bc3-b99f-09c3233b9d93",
        "cursor": {
          "ref": "4914bbfd-238b-4a0f-831d-ca751ebb6ebf",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3f12c19e-899a-4215-92a0-33377ea9f7d3"
        },
        "item": {
          "id": "713be87c-d71f-4bc3-b99f-09c3233b9d93",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "24ccf21c-ce1b-4a84-abe7-3230768dcd99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86ecc353-4d5f-4adc-bb23-aecd84e41d52",
        "cursor": {
          "ref": "eba8ba0c-6831-46dc-8b4e-8a9e502a5d4e",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a0216013-37ef-40a3-98e1-8bc68b6431b1"
        },
        "item": {
          "id": "86ecc353-4d5f-4adc-bb23-aecd84e41d52",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "83bd8d27-858d-403e-924b-7988354106b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "56047049-fa0f-4adc-96c1-56deb91aaf7c",
        "cursor": {
          "ref": "7ca9ef97-7a71-4764-8d25-526798f0dc07",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "7309ae74-dae9-4251-b4c0-9dce7baa1906"
        },
        "item": {
          "id": "56047049-fa0f-4adc-96c1-56deb91aaf7c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "09838dce-d2f8-46e4-9d62-7ad62927fa7c",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2caa32-471f-49f5-af70-bb40c8168dd7",
        "cursor": {
          "ref": "39bdbb85-77d4-4786-b594-277bddadcc92",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0a4cce7e-e6bf-47fa-9fc8-107ea87d6fa4"
        },
        "item": {
          "id": "4a2caa32-471f-49f5-af70-bb40c8168dd7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d893069f-3ab3-4668-a328-67948f57ab49",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a2d8fe-be8b-4c0e-ae45-b839a5a1024e",
        "cursor": {
          "ref": "476e6302-1b69-4556-a76b-9d1427a6dcb8",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6ab3861c-e5ce-461c-ae63-8c27df0fd4f9"
        },
        "item": {
          "id": "f7a2d8fe-be8b-4c0e-ae45-b839a5a1024e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "94adf5dc-890d-4e5e-a66c-e768b5310af8",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebbabb4e-479e-44ad-89c0-a438e2cc3ecb",
        "cursor": {
          "ref": "89705eb4-fb93-445e-90b8-9487b5246cfd",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "88b774e0-ba0f-4721-b90f-a8846e68059a"
        },
        "item": {
          "id": "ebbabb4e-479e-44ad-89c0-a438e2cc3ecb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "44c47543-8138-4d51-8808-9494454a68b5",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd20ac54-7fb2-4013-a6ac-fe4a8f86ce03",
        "cursor": {
          "ref": "f9c9f1a1-bc6b-4cc9-a0f0-54fb77c65b67",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "31d381bf-c3a1-42c5-a28c-77a62e604330"
        },
        "item": {
          "id": "fd20ac54-7fb2-4013-a6ac-fe4a8f86ce03",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ed9defea-7a84-4f73-99c7-a244147b1e40",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-05T00:36:39.614Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-05T00:36:39.614Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "41cbbc20-f738-403a-82d7-c0a903e54201",
        "cursor": {
          "ref": "8ee73e47-1647-43ba-800a-17cc5f5cbe65",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0770f466-5b7b-462b-bd9a-81a40543476f"
        },
        "item": {
          "id": "41cbbc20-f738-403a-82d7-c0a903e54201",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fff5fd18-7c52-4a75-906d-de661408c111",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aee09db-2775-4dd0-826a-3ab48f45590b",
        "cursor": {
          "ref": "fb22a79e-6a57-4ace-ba5a-f21c1585a820",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c5a67805-8fde-4095-a8bc-5459a436031a"
        },
        "item": {
          "id": "3aee09db-2775-4dd0-826a-3ab48f45590b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "83af8650-4c4c-4370-8555-b32674e3efff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61318382-81a6-400f-b776-3e0641532ab7",
        "cursor": {
          "ref": "e8612d79-1cfb-4fae-aa43-764ea81de132",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "241b4d3f-f20b-49e8-bc50-7009a56567b3"
        },
        "item": {
          "id": "61318382-81a6-400f-b776-3e0641532ab7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "70f3ef59-d57b-44f4-b072-491101379f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "031f6b9c-152a-4081-836c-1ef8863e427c",
        "cursor": {
          "ref": "42ea9e89-db75-424a-b670-8eda4c7fa971",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ae26dd65-98b3-427b-ac31-2ddbd0a0742b"
        },
        "item": {
          "id": "031f6b9c-152a-4081-836c-1ef8863e427c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f0d92f05-0579-4381-8ce8-918490d542bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa39ef1a-c512-4c81-a02b-778c2fb9413a",
        "cursor": {
          "ref": "92b2e46f-fbae-4c5d-867c-e5da8ca3a68e",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9db43794-2e84-400a-b1bf-297e8143e095"
        },
        "item": {
          "id": "aa39ef1a-c512-4c81-a02b-778c2fb9413a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "536a2b5d-65e4-4ac8-a071-0b0fa93c97ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b94f253-ea4e-4aac-9b20-55bf0d80d99d",
        "cursor": {
          "ref": "46bdd906-3e36-452a-9b88-4b3c5b1616e5",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "76ef666d-c19a-48ca-8ca3-c9040c7c63ea"
        },
        "item": {
          "id": "1b94f253-ea4e-4aac-9b20-55bf0d80d99d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "44192d11-e9c8-4649-9ef9-d77f12ba267a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96cfe7a8-5e54-4f3d-84c4-3174b869e076",
        "cursor": {
          "ref": "582463d5-b903-423b-ab86-adf8cd0b2dc8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "381d3a73-3fca-4b36-927c-1b4a1ff5f986"
        },
        "item": {
          "id": "96cfe7a8-5e54-4f3d-84c4-3174b869e076",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "bc27b1d3-0ec2-427b-bb33-4bb0d8ae2bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d2e3f7-ae15-4709-82d9-32f53347b1e5",
        "cursor": {
          "ref": "ec8e221d-5650-400d-b065-4ff690bdeaf0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "823d23b8-20c1-412f-b134-f7e2fde0dcdb"
        },
        "item": {
          "id": "31d2e3f7-ae15-4709-82d9-32f53347b1e5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "dfd16da0-938b-48f2-936f-ff9d54be006c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b06521-7100-429b-9e21-c45097cdb458",
        "cursor": {
          "ref": "216648d2-73f1-4a2f-b537-07f6d4ddb0b7",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "cec1fd79-a908-4f3f-a4eb-2c13c2cc2943"
        },
        "item": {
          "id": "a0b06521-7100-429b-9e21-c45097cdb458",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5b7852d4-0030-432d-8b0e-3be78cb7abf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f6ba42-2687-40fb-af1d-c7896b3270ee",
        "cursor": {
          "ref": "34e54ff3-2108-427a-8d81-d31c17a5422c",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "287da121-d001-4dd4-8c3d-b5ec5e6fd2a4"
        },
        "item": {
          "id": "d5f6ba42-2687-40fb-af1d-c7896b3270ee",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c4b59d2c-4181-4c9a-a8e6-718b92e254fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3204f69-6212-452f-8f1d-966ecff1a7a5",
        "cursor": {
          "ref": "ec15c8d5-0be6-4242-a28a-5b715eff7c1b",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ed4584c7-7037-425d-815b-163f6b9cf494"
        },
        "item": {
          "id": "a3204f69-6212-452f-8f1d-966ecff1a7a5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "570b86dc-f9d3-48c1-a078-8ce18faf4919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f418a8-5d35-472b-8350-c6bc02796eb5",
        "cursor": {
          "ref": "fd691264-d799-4953-9238-2f6579a162b3",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "17885756-d2e9-45f6-ac39-4099d2ebf065"
        },
        "item": {
          "id": "82f418a8-5d35-472b-8350-c6bc02796eb5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b1fdc654-018a-4fb5-815e-440b013497f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5991d7c-1414-4162-b132-62396e469bb4",
        "cursor": {
          "ref": "1828bdf6-231d-4571-bfcf-08648d21393a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f51a4b5c-caf6-4404-b784-3c1cd753cce7"
        },
        "item": {
          "id": "d5991d7c-1414-4162-b132-62396e469bb4",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1a0d1f7f-d87a-4ea5-ad32-cfc7d0f989d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62c9d82-e4a3-4c90-9054-105c8837f092",
        "cursor": {
          "ref": "a4f7e83e-4e77-4bdd-9c82-1ae454c3322b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "221ccdcd-9778-4ade-9237-e34db89386fc"
        },
        "item": {
          "id": "f62c9d82-e4a3-4c90-9054-105c8837f092",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8d8f9dca-7987-4a39-bede-a06dd9b8e458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4070b8-160f-4314-b291-a31341b71a50",
        "cursor": {
          "ref": "56177007-a7ee-4663-9ecc-b704685cdc82",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f89aed2f-e44c-4ac7-9b0a-33527746fecf"
        },
        "item": {
          "id": "9c4070b8-160f-4314-b291-a31341b71a50",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f6003a61-670d-44d5-8ed3-2b51fa0d1c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f423ad50-8f52-4208-bbf9-0c0fcc9c7ec8",
        "cursor": {
          "ref": "2c53ed2c-5fe7-4df1-939d-64e6766059f0",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c701757c-05be-4bc3-aabc-e5f6924ea10d"
        },
        "item": {
          "id": "f423ad50-8f52-4208-bbf9-0c0fcc9c7ec8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "092ddf43-3001-4d0c-9ed5-a1fe66e109dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eed2577-5f9a-416f-a034-2e0ec419aa8e",
        "cursor": {
          "ref": "233d8be5-cb4b-4fb6-afe1-67faa125b9e5",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7d0ed80d-13d8-4c0d-bce2-a04137ae60f9"
        },
        "item": {
          "id": "4eed2577-5f9a-416f-a034-2e0ec419aa8e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "4ec4e372-ed31-4a2f-b422-354daf3c7a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6c5be8-95ea-47be-bcba-eb308b83961e",
        "cursor": {
          "ref": "aeba7f5d-a4d5-4166-ba81-948b27794272",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8f1c43b8-ba81-4678-b6a2-890266933a31"
        },
        "item": {
          "id": "9e6c5be8-95ea-47be-bcba-eb308b83961e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "54c4f4d1-0e60-4990-b761-fcd3b0e4852f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28bac89-91a1-4a18-b01c-2656bb65ee94",
        "cursor": {
          "ref": "5f1f5827-abf8-4144-8f21-18073f6018a2",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "08c1b5e9-4684-4aa7-8597-5a2308199a79"
        },
        "item": {
          "id": "b28bac89-91a1-4a18-b01c-2656bb65ee94",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "79ba846c-efd4-48d9-ad00-0d5ed584ac93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c037fbf0-aa64-486b-98da-fbd464572f0e",
        "cursor": {
          "ref": "54db48d4-ad7b-4e28-8535-f40c0eb4e814",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5dfdb169-3faa-4648-a7ae-dd003da4ed9b"
        },
        "item": {
          "id": "c037fbf0-aa64-486b-98da-fbd464572f0e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d440f593-e83b-4ffe-a5d1-ad289fcc144a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82db1675-ab0c-46d8-ae32-0cf6eb6d76a9",
        "cursor": {
          "ref": "c13b3ee3-8ffd-43c7-81de-e9ac18dcea8a",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0fa86f3f-f6bc-4dc0-bf6a-e6ddd41b1259"
        },
        "item": {
          "id": "82db1675-ab0c-46d8-ae32-0cf6eb6d76a9",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d2a8c02a-37dc-4cc0-93cf-0e84a9e2e1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274c2a5d-6f37-4caa-91b5-4fe73c508264",
        "cursor": {
          "ref": "0e27bb8e-c752-4871-89a2-965807bc8ea1",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2d925050-ab62-4934-863a-068b3038d3dc"
        },
        "item": {
          "id": "274c2a5d-6f37-4caa-91b5-4fe73c508264",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "57e353dc-ae12-4736-98da-731d0dc93200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28db12e-05f7-40d8-9b7d-ca1d706a4342",
        "cursor": {
          "ref": "bc48de86-017f-4c17-80c2-45e357832f18",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "86ef5254-25ca-468a-afe1-79c7e18dff12"
        },
        "item": {
          "id": "f28db12e-05f7-40d8-9b7d-ca1d706a4342",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "55362eeb-b7e2-4684-b87a-7e678beedea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b48af5-0627-4fdd-8236-da0e387bb5f5",
        "cursor": {
          "ref": "1c443c4c-0f73-4ee1-9069-e9a20691847a",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "641de684-693a-4e65-84dd-d5903123ee1c"
        },
        "item": {
          "id": "f8b48af5-0627-4fdd-8236-da0e387bb5f5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c046676d-0585-4307-9b34-d65bfcb68b67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d77753-7c08-4b36-94b1-53a61eba9ea6",
        "cursor": {
          "ref": "a91feefb-e503-434c-9000-ef0ade6c9ede",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8a641822-4e2b-41b5-b86e-bb5e8d5d0c6b"
        },
        "item": {
          "id": "e7d77753-7c08-4b36-94b1-53a61eba9ea6",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d6d8be97-226a-43cb-a499-0c22fc3ce0c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "492e20f0-07aa-4d01-9b73-ca503ae95580",
        "cursor": {
          "ref": "8bf9f9f9-d432-42c1-8a1a-3988d2cbd4e0",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9432330e-a789-46e2-85a7-b28a880bff93"
        },
        "item": {
          "id": "492e20f0-07aa-4d01-9b73-ca503ae95580",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "748d2eb8-672c-4879-a9c4-30dcc108b6d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21978c16-2860-47c8-bd3f-331508ad9d70",
        "cursor": {
          "ref": "ad9efd9a-8d55-44b8-ba68-740793ea9c9d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "00d9743f-6ade-4466-93e5-48825610e117"
        },
        "item": {
          "id": "21978c16-2860-47c8-bd3f-331508ad9d70",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5e40b5e4-dbb2-4cdf-a61b-5ba1fee9eb39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f809d7d4-8308-470e-924e-249a9407674f",
        "cursor": {
          "ref": "7275562b-9000-4c93-8c2c-2690bf3f477c",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0b5ab1a9-f863-473d-8805-ed143abdd082"
        },
        "item": {
          "id": "f809d7d4-8308-470e-924e-249a9407674f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0349cf50-6e89-4b04-850d-fc13e7534f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a7682a-80b1-4d00-b522-62b7b8697ce9",
        "cursor": {
          "ref": "c56e88c5-a2b1-4825-bbbb-5c144cdddf4c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7ead494f-e82d-4b37-b6b9-b238d9b7a69d"
        },
        "item": {
          "id": "54a7682a-80b1-4d00-b522-62b7b8697ce9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "89671ed8-56c3-4b96-8ca3-d0889cf9b8ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e6653e-add0-408f-bd96-b3c1c8c7c3c1",
        "cursor": {
          "ref": "be8a999e-79de-4be8-8004-f4c48b7684a2",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "d7c841af-2cd3-4e73-8e26-9120c568bb26"
        },
        "item": {
          "id": "e2e6653e-add0-408f-bd96-b3c1c8c7c3c1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7da829b2-24bf-4a42-84d7-2916bd59fff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c217a935-b09e-4873-ba11-f530276a83a3",
        "cursor": {
          "ref": "4f70905e-d66f-40be-9175-60b3b4853b8a",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1f4492cd-ac81-4d2b-b9f3-ec8367227e8b"
        },
        "item": {
          "id": "c217a935-b09e-4873-ba11-f530276a83a3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5cc1a8e3-d478-4dae-aed4-90fa2e750fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7c5bf0-3b80-409d-b27c-37717cd9b62f",
        "cursor": {
          "ref": "22e87b65-627e-4079-978d-ed0571940fca",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a181e4fd-2039-493c-b6ea-a9052d4a674d"
        },
        "item": {
          "id": "cb7c5bf0-3b80-409d-b27c-37717cd9b62f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "258a9cef-cbaa-4017-a8ff-572b73b57d49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265be326-a4cb-4888-9296-ca31f386586c",
        "cursor": {
          "ref": "529707ef-4a7b-419e-b404-411eebc52a25",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f535564e-c385-474e-a2fb-267c7aa5abc7"
        },
        "item": {
          "id": "265be326-a4cb-4888-9296-ca31f386586c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "126cce65-d95b-4938-92f5-3ebe027d5b88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f28c5c7-ad0b-4106-8137-a6e26a1bb974",
        "cursor": {
          "ref": "ee7e91b5-7356-4527-96b1-b32b8c91f57b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1f0197e5-efa9-4bd3-acd1-ceb5c10b98ce"
        },
        "item": {
          "id": "7f28c5c7-ad0b-4106-8137-a6e26a1bb974",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f83fb442-aecd-4e01-81ca-47cc55ed526c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f38292fd-5f33-4f35-89ed-90aca7801c1a",
        "cursor": {
          "ref": "ce59efba-9738-4bda-8b92-c7c7ce862b48",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d6bdc62c-84af-4555-b53a-de128a935d12"
        },
        "item": {
          "id": "f38292fd-5f33-4f35-89ed-90aca7801c1a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f9e194aa-6a0e-4896-9f7c-24644d2f86fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49cf84f-439e-4dcb-be89-31bf7eff0d6e",
        "cursor": {
          "ref": "69032154-41bc-41fb-b4f7-c97af0081f86",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "822ea514-7ead-4ebd-9338-546488e8793a"
        },
        "item": {
          "id": "f49cf84f-439e-4dcb-be89-31bf7eff0d6e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "75760040-c4cb-4197-81c4-42389ac6a99c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc07c12-9b05-481b-acbf-21ce377466eb",
        "cursor": {
          "ref": "dcce083d-6fdb-446f-ba33-4af2ae08cae3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0bcd7f9c-6431-49e1-a929-aaf464ec5f3d"
        },
        "item": {
          "id": "afc07c12-9b05-481b-acbf-21ce377466eb",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5d0d9895-ff4f-42d8-8140-dc9a8bd6b789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ed886d-34e7-4078-82f6-56ff44a1fc08",
        "cursor": {
          "ref": "d167adf4-0b76-4604-b287-f698f55695e5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "ee937bd1-f286-4974-a400-f39492bf3fe1"
        },
        "item": {
          "id": "63ed886d-34e7-4078-82f6-56ff44a1fc08",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "eeebef7c-7002-44df-a74d-fb4c38f0835e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88141b9-a87f-443d-af37-e13465a0f01b",
        "cursor": {
          "ref": "6197eb0d-f3e3-4a3c-adb5-48c1d75511e8",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fa944e0f-e32a-4ce7-b434-f171c5c18dd8"
        },
        "item": {
          "id": "e88141b9-a87f-443d-af37-e13465a0f01b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "34ae0987-8bfe-4a92-96a5-f3890d5d7e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ad573e-bf32-4a53-959b-43dfddedfd06",
        "cursor": {
          "ref": "a9a05136-bbf9-4b30-ad8d-a3b3add9f953",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e3457b75-e349-4d8f-a6eb-af382ff83874"
        },
        "item": {
          "id": "f5ad573e-bf32-4a53-959b-43dfddedfd06",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2870bd56-6ac9-44d2-a129-17e1de13246f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c4091a-8be6-4e8c-915d-7a00eadbdf43",
        "cursor": {
          "ref": "13cb6304-08cc-4ce5-9b0c-e352922a2c0c",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "52d77039-7f24-4c6a-b5fe-95900315299e"
        },
        "item": {
          "id": "10c4091a-8be6-4e8c-915d-7a00eadbdf43",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a4f8f55a-fc5e-4962-86a4-f62335f60f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65305cd5-c583-4e1f-8f4a-c6b96ccb2b60",
        "cursor": {
          "ref": "914f8623-7289-4905-976f-458aec17566d",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6666089c-be66-4f6c-a2ae-14b7924ed4d7"
        },
        "item": {
          "id": "65305cd5-c583-4e1f-8f4a-c6b96ccb2b60",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3636ef5d-932b-4553-a433-ab82ba5180ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30087248-d86a-4a41-9496-99efc12ae0b8",
        "cursor": {
          "ref": "b3399949-dc8a-4e6c-9cc1-73796101060c",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1be78727-7427-493c-b2ee-3a4bd274eeee"
        },
        "item": {
          "id": "30087248-d86a-4a41-9496-99efc12ae0b8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fb1a2090-977c-4dd2-bdc9-c6d23b517182",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dc3a48f-cfe1-4e6f-b850-36a683b976de",
        "cursor": {
          "ref": "e3557f9c-a561-45ca-8667-0e996f491db7",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f032f922-925d-47a3-8b82-d5b3940ba248"
        },
        "item": {
          "id": "2dc3a48f-cfe1-4e6f-b850-36a683b976de",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "604dbe9f-edc4-4751-8285-cbfa59a814ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "723f8d86-2a3f-4ff8-ada9-0f1daeeb9b85",
        "cursor": {
          "ref": "2eeae9e4-5eda-481d-a2c6-306bcfccb0ae",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7d4bb428-62d7-431a-9021-bf444959780a"
        },
        "item": {
          "id": "723f8d86-2a3f-4ff8-ada9-0f1daeeb9b85",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4b3daaf0-85c0-4c26-a2f3-9f460427fc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc5e8c0-1c3d-411d-96ff-ac7e91e2105a",
        "cursor": {
          "ref": "f8e9e2ac-301c-43b1-baaf-d3b12918d706",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "17a35cf2-16da-410c-b71c-388072e550bf"
        },
        "item": {
          "id": "cbc5e8c0-1c3d-411d-96ff-ac7e91e2105a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "057ce743-1cb5-4d24-8507-08c8ba74ecb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efcfc36-51a5-45b1-9760-91f1c70d9601",
        "cursor": {
          "ref": "061602dc-8fb5-4094-b252-1255a21aa3cb",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7e017ef5-3231-45da-9ca5-07ae4be20706"
        },
        "item": {
          "id": "1efcfc36-51a5-45b1-9760-91f1c70d9601",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "15b67efd-c163-4493-9fa9-ba67ebb64001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96516d4-f086-4409-98e3-6efbb342848d",
        "cursor": {
          "ref": "ab3ee21c-f96a-4414-90b9-1df170a1c4d6",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "986cac3a-14c4-405f-9562-c39b675316b5"
        },
        "item": {
          "id": "e96516d4-f086-4409-98e3-6efbb342848d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "206391b7-dc93-4cb3-8167-50b5d2863b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bd34073-8db7-4fce-a507-f11f9876ceb8",
        "cursor": {
          "ref": "719a2f2b-6444-4c3d-8665-1de7461cde82",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d63c5e93-3cbc-4592-bef3-fbd753b6020d"
        },
        "item": {
          "id": "2bd34073-8db7-4fce-a507-f11f9876ceb8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4375fbe8-ad4f-4c41-bf6b-dad94c9ae03a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754959b0-890e-4334-8e43-679f557152ea",
        "cursor": {
          "ref": "c277d678-5393-49f4-ba23-56e0267b41fe",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "f09895d7-cd3b-43b7-a0a1-3bde8bb60aec"
        },
        "item": {
          "id": "754959b0-890e-4334-8e43-679f557152ea",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c3213292-bd7d-4196-bf3f-922a57b94049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9e1e6dc-dda0-4a2f-8cdc-1a22c6661e4d",
        "cursor": {
          "ref": "672bd2cd-74d9-4e23-b074-c65ed833cef8",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "072ffc79-41bf-4d99-8568-c9829da5d554"
        },
        "item": {
          "id": "f9e1e6dc-dda0-4a2f-8cdc-1a22c6661e4d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9827f466-fe6a-4ea1-bc98-88e5d07ecd6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15831590-c612-4b0f-87d9-09fcf8c890d8",
        "cursor": {
          "ref": "f05efac0-047f-4389-8945-efa0ec15ceea",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "87cd132a-ec33-47b5-8c36-72af1bae5288"
        },
        "item": {
          "id": "15831590-c612-4b0f-87d9-09fcf8c890d8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "63f54439-c93f-4e83-b7bb-8a7eb4dfe745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cb5714-09c0-4422-966b-94425de1610d",
        "cursor": {
          "ref": "fba39b07-bdb6-4a40-b3a3-ca884d3e9d75",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ad5df3bf-c262-4e75-bb68-0fb18d73e1ea"
        },
        "item": {
          "id": "c8cb5714-09c0-4422-966b-94425de1610d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d893d55a-43f1-4d12-9d3b-2f76bef41078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b1ec18-2a42-4ca6-bc63-2379619aee97",
        "cursor": {
          "ref": "8d018896-6042-45fd-bc9e-e260195ec513",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "35ed4fda-f1ce-480c-aaf9-1607a9eb0f20"
        },
        "item": {
          "id": "a8b1ec18-2a42-4ca6-bc63-2379619aee97",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9e92bbf1-79d1-4fba-956f-385d9e23a209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b6723f-1b74-4f8c-a989-f01a3f0a2ba2",
        "cursor": {
          "ref": "42354040-a7a6-4c30-a701-4271f4d2d835",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8624a604-7290-4764-b91a-9ca8ed7f0347"
        },
        "item": {
          "id": "17b6723f-1b74-4f8c-a989-f01a3f0a2ba2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0aac34de-68d9-43f0-a1fd-4583ba6a1b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6b6c71-dd6f-42a3-aae3-733b55e83d1e",
        "cursor": {
          "ref": "9cf6278b-5bf1-431f-a174-da80667778a6",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dc35862e-b1e1-49b8-805f-ebf18a40cf80"
        },
        "item": {
          "id": "3f6b6c71-dd6f-42a3-aae3-733b55e83d1e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "1860397c-613f-4873-8b06-58fbfd90b425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f1e5ff-cc3b-4653-a319-300957eba0f9",
        "cursor": {
          "ref": "377639e4-b1b4-48b6-98f0-70b9e1dc5f62",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e4f45b14-eddb-40ee-826d-0d2e653c0c18"
        },
        "item": {
          "id": "62f1e5ff-cc3b-4653-a319-300957eba0f9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7999ebe3-960a-4274-ab75-101f91d8e4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f773c3bf-9e53-4364-8112-9172378631a4",
        "cursor": {
          "ref": "651ce144-7ccf-433d-b44a-0db0ba99370b",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "833f11fe-cf66-49d3-9747-735697ed4fc7"
        },
        "item": {
          "id": "f773c3bf-9e53-4364-8112-9172378631a4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "78f9fed9-c8c7-470e-a7d6-901d215250df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569ae8ba-681e-46d1-bfa8-d8f6607e60aa",
        "cursor": {
          "ref": "610671f7-2d7d-4fea-a21d-8e2283c84870",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "205c3f93-abb5-41f4-a3fd-dd0d03dccadb"
        },
        "item": {
          "id": "569ae8ba-681e-46d1-bfa8-d8f6607e60aa",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c5cc84bb-8f6b-48f2-8439-22c7d386ff7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3c28c8-92a1-4338-a0f0-edfbcbe130d4",
        "cursor": {
          "ref": "6a01db23-0217-44bf-a4a3-3c44511bcc80",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "14e2f1b9-b708-4bbb-9966-f7c76127f85f"
        },
        "item": {
          "id": "5b3c28c8-92a1-4338-a0f0-edfbcbe130d4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0c8b6a6b-f1e2-4694-911c-1ade994a77fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1f7148-8bd6-43bc-8d4d-55927381f158",
        "cursor": {
          "ref": "38f6dd99-a582-490c-8a54-578ed188bb56",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2340aaf5-8da9-4b09-aeb5-ec57f6372b8b"
        },
        "item": {
          "id": "8e1f7148-8bd6-43bc-8d4d-55927381f158",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "cdcc5dfc-279f-499a-9706-f0f75fa8b412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8135968-a44c-4d4e-8a72-a326e359f9cf",
        "cursor": {
          "ref": "f66ce6e6-4785-416d-b5d9-7e911142bb93",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "0b2fe229-e7dc-4560-9976-520810ea429c"
        },
        "item": {
          "id": "a8135968-a44c-4d4e-8a72-a326e359f9cf",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "0c5cc120-27b9-488a-9f87-20dd8c300fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0938bd-d825-46ad-bbdc-f6621d8dc547",
        "cursor": {
          "ref": "ef729936-279c-423b-9edc-99f1a6701c64",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d887e408-4721-4b6d-baa1-da6cd7524b6c"
        },
        "item": {
          "id": "3b0938bd-d825-46ad-bbdc-f6621d8dc547",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f71594a2-f18a-46b6-a8ae-c82c05f7afe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3babda0-b8a8-4881-864c-cfe8f4204f18",
        "cursor": {
          "ref": "c72856c1-5eab-41f2-8355-5597879a50c5",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "42334ae5-ca51-4f49-ae53-7d2f12cd2fd4"
        },
        "item": {
          "id": "d3babda0-b8a8-4881-864c-cfe8f4204f18",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "0dc7cbe7-5016-4300-94f3-33c825c59ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08bd3144-b8e1-4514-bc17-3a6bafab9f32",
        "cursor": {
          "ref": "40c7107b-4932-4ae8-ac9f-3edc594dc8ac",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9a72a4bf-dd00-4e3f-96d5-10559ea04b92"
        },
        "item": {
          "id": "08bd3144-b8e1-4514-bc17-3a6bafab9f32",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6bd4d67a-d269-45e6-877c-cd9be690f7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b9cdef-6f38-4ba4-b260-1a8dd89e480d",
        "cursor": {
          "ref": "f8a2ab40-a6c9-4ffd-a7a8-c3b04a58de65",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ada68ce0-a71b-4f1d-8f90-3c0c16dce9cb"
        },
        "item": {
          "id": "c2b9cdef-6f38-4ba4-b260-1a8dd89e480d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7220caa3-71eb-4696-9503-6d779966bba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6423e400-56c1-4c19-8495-2c0a2d75862e",
        "cursor": {
          "ref": "b2813db2-3d74-46fa-a8ea-abd23520773a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dfb09438-acd5-4bca-8108-9656d3c5ed95"
        },
        "item": {
          "id": "6423e400-56c1-4c19-8495-2c0a2d75862e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5c7c9598-a8ce-44a9-b528-1df0702086b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8c4dd2-69e2-4321-9495-2ec0367a3ee0",
        "cursor": {
          "ref": "95215f08-28d2-4d2d-b828-a5c138818722",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3422cb9c-c002-4a3f-bc18-4731ecb25c38"
        },
        "item": {
          "id": "8d8c4dd2-69e2-4321-9495-2ec0367a3ee0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3e41cfcb-e2e3-4be6-a4f0-eeed28ae96ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c3abde-d886-40b7-a233-4a86bfef0f43",
        "cursor": {
          "ref": "0434985e-10d5-487f-824e-c29878323547",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "aba41de5-c445-413c-a65a-a32a2e41231d"
        },
        "item": {
          "id": "49c3abde-d886-40b7-a233-4a86bfef0f43",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d87c4742-9466-4408-8405-32d381f2abf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89118712-3f98-4812-9cf5-96118624f476",
        "cursor": {
          "ref": "77c69699-f0bb-4904-b2bf-e3f1b7ea07f9",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7aa826f1-86b6-4560-8882-6110bca7854d"
        },
        "item": {
          "id": "89118712-3f98-4812-9cf5-96118624f476",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "0b8d084e-46e0-4ec9-9fdd-7ad086ff4c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6016061-5c42-4ca6-93a1-48b8d2611b75",
        "cursor": {
          "ref": "520a60f5-4135-4b4e-83fb-c2dd77ab1165",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "df060393-f74f-494b-8e96-e648747ea7bf"
        },
        "item": {
          "id": "a6016061-5c42-4ca6-93a1-48b8d2611b75",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6b404cff-c626-4c67-9686-f1f28608e4aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92496254-71ba-4c59-9388-836d8819e140",
        "cursor": {
          "ref": "471566d3-97da-49e7-b747-9327c3b5aed4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "37a97811-fbbb-4213-91ab-a5f09a08de06"
        },
        "item": {
          "id": "92496254-71ba-4c59-9388-836d8819e140",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f9b3027a-1f59-4837-8ba3-5d244882b04e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ad4b3d-4cfd-46f2-920d-2d848e187c70",
        "cursor": {
          "ref": "f4357e46-d739-4a4b-9c8b-c86b122fd512",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "db512620-93d0-4e56-bcab-319648ea2816"
        },
        "item": {
          "id": "59ad4b3d-4cfd-46f2-920d-2d848e187c70",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c106fee1-d806-4b70-94fb-cb108f5c962a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6a570e-db00-4a4a-808e-1b432db8d8b7",
        "cursor": {
          "ref": "0b4e6cb1-4e63-44e8-a883-48ea62308ac5",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "187d301e-2442-4bd7-957f-bf921c6d6876"
        },
        "item": {
          "id": "0a6a570e-db00-4a4a-808e-1b432db8d8b7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "56e872e8-650a-43ed-8685-ed3d39927829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b810dc8-311f-4e46-bd32-d329d4134c8b",
        "cursor": {
          "ref": "bff89c91-4cf5-472e-a0fe-e31511261875",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "7e4529a4-0a36-4796-baad-a82e2ac31676"
        },
        "item": {
          "id": "5b810dc8-311f-4e46-bd32-d329d4134c8b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3d6f76c6-57aa-442f-9e88-18816f5f98e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d174b433-7fab-4dfe-8052-72bb8d463f76",
        "cursor": {
          "ref": "dc17a099-e853-44f1-ae83-3ae342513887",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "605329c6-0690-45e1-beeb-62e814b598b4"
        },
        "item": {
          "id": "d174b433-7fab-4dfe-8052-72bb8d463f76",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "77d9dfd0-9c00-405a-90c9-42867db344df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316f0453-0fdc-4863-be49-88bb0b259ae3",
        "cursor": {
          "ref": "77ce3148-eb99-4da1-8384-762377dac399",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "84b71054-6303-4f19-ad4f-a267cd7e4a7f"
        },
        "item": {
          "id": "316f0453-0fdc-4863-be49-88bb0b259ae3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "92f9a669-df6b-4c44-98df-1cfad3008aa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b6b837d-4562-4ec4-9ef5-87e6bf470e3f",
        "cursor": {
          "ref": "22e2b8de-a47b-422e-baae-f845935e29bd",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5d721e01-f06f-4087-bd1d-d697e6e5aaf6"
        },
        "item": {
          "id": "2b6b837d-4562-4ec4-9ef5-87e6bf470e3f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "639d7bfc-cfef-4f0c-ac25-eca9e00420f8",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "8fed8ada-94f3-4c6a-ba53-a149d30f2f7b",
        "cursor": {
          "ref": "42f5779d-4df9-4eb6-b4fa-9f0cda1115f8",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f414e725-e1c3-4ca2-a873-63bf9786afc5"
        },
        "item": {
          "id": "8fed8ada-94f3-4c6a-ba53-a149d30f2f7b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7113af2f-7120-4e7c-9791-24404cdd9d1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "495cd117-15e9-4a56-9a8d-98a15b91921f",
        "cursor": {
          "ref": "240ced8b-1770-4db4-9496-cb42d232c6af",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "10d999d1-ff1c-4376-b24f-fa570bfcc1b9"
        },
        "item": {
          "id": "495cd117-15e9-4a56-9a8d-98a15b91921f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8e7a33df-4c0f-4135-bba9-ca68bb1491a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91993f34-8c5b-4510-b511-eccd3e35dc47",
        "cursor": {
          "ref": "6efe3d8b-71c1-4744-b688-3c7ac9b33796",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "04eaae21-0b88-4c8e-82a4-bcd0327c8a36"
        },
        "item": {
          "id": "91993f34-8c5b-4510-b511-eccd3e35dc47",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4b61eb34-f66a-4ab3-bb13-0c1be79d7a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2137707-8cfd-4589-a83d-17177fe42167",
        "cursor": {
          "ref": "311aba4b-28fe-4586-a290-cd68e83d35d0",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "aa0e8b0b-3a2d-41e4-abc1-f975df09dd4a"
        },
        "item": {
          "id": "e2137707-8cfd-4589-a83d-17177fe42167",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3718aeb5-652c-4949-bcfb-b6b88abddbd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff7cbfe-466a-4a20-8916-317c56ff04d7",
        "cursor": {
          "ref": "b4778b9c-0ac4-4bdf-b0d9-e73aa5e97e1f",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0ed387d2-b4f8-45be-a599-273e1a7c74ef"
        },
        "item": {
          "id": "0ff7cbfe-466a-4a20-8916-317c56ff04d7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "9bb6eac0-e96d-4355-93b4-ee2752c1948f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb28f30a-fd89-432b-b690-a40665e8e9ce",
        "cursor": {
          "ref": "97f016f1-27c5-4b3c-bcb2-68e4a37831ca",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "26a07a6c-ec59-4323-9924-f954d5b71ac4"
        },
        "item": {
          "id": "fb28f30a-fd89-432b-b690-a40665e8e9ce",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "dc1f3811-1c9e-4930-984f-a1c7bb24e6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "235814d2-9a2f-4647-8302-2791b5bd8e41",
        "cursor": {
          "ref": "d11a473b-ceca-4e80-a209-7074696f1727",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "74232a9f-24a1-429f-a827-8ca9641207ff"
        },
        "item": {
          "id": "235814d2-9a2f-4647-8302-2791b5bd8e41",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "12726595-53c2-4bdb-9961-4d3b7f4c5ca7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072d6b57-dcee-4767-b5ff-deee95e72838",
        "cursor": {
          "ref": "14810e89-ab39-4591-a564-1d4574f71dbf",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0e22d359-1674-41fd-b073-ce901c60b723"
        },
        "item": {
          "id": "072d6b57-dcee-4767-b5ff-deee95e72838",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7e3e4b13-96bb-4c99-83bc-742df7287656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d876e7a-3350-48fb-bec7-1cb74d598106",
        "cursor": {
          "ref": "40f466d3-4f4e-4c33-9c19-4956c0c73661",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "39a45f80-7e35-49dd-a0ea-ab2af75b08e5"
        },
        "item": {
          "id": "5d876e7a-3350-48fb-bec7-1cb74d598106",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "01bf2e28-842b-493d-8197-dfead833122b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e765dea-7d6c-4ac0-a98e-c44e1dec6b1b",
        "cursor": {
          "ref": "2d3562fe-8164-4a3b-82b9-873f3670073c",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "79116b6a-8310-4e7f-8b66-71ed804f656b"
        },
        "item": {
          "id": "9e765dea-7d6c-4ac0-a98e-c44e1dec6b1b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6308be59-7f92-4ffd-90d9-ff71441bab4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485223d3-7af9-4bc2-bdd7-672a5397b445",
        "cursor": {
          "ref": "9840b31a-2f09-4556-8c27-088b922b8cdd",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c2c4f8f2-5330-4cb3-919a-74c472e441ce"
        },
        "item": {
          "id": "485223d3-7af9-4bc2-bdd7-672a5397b445",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "00108753-ae53-4563-8be0-d75f828b9e88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa069cb-dca4-4c3d-8b04-51546f0d68cd",
        "cursor": {
          "ref": "3c2bee64-5151-401a-b408-f3a24642a297",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9e3620f4-70b3-4c42-8ddf-e6a5e243a8a3"
        },
        "item": {
          "id": "4fa069cb-dca4-4c3d-8b04-51546f0d68cd",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5df8d631-ca24-4c3f-b3cd-cfe955b0812c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f68ad42-7a0e-43e2-bfdc-0ac5744b3432",
        "cursor": {
          "ref": "b65d18da-ac17-4e95-b527-93698cdbf72f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "c832578a-9824-4938-aec4-e24a0a59dee8"
        },
        "item": {
          "id": "7f68ad42-7a0e-43e2-bfdc-0ac5744b3432",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2061e2e2-5e80-4635-a5aa-aa5210cab5f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7f39f3-63fd-4cbc-aa9b-e55d5f7ef7db",
        "cursor": {
          "ref": "dc78056e-bcd6-405a-ae85-60d4071799d5",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5e233d8b-1f8e-4a95-967f-649b4762ab9b"
        },
        "item": {
          "id": "4a7f39f3-63fd-4cbc-aa9b-e55d5f7ef7db",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "39baa1d5-d681-40ab-9c9f-6f6ef12ee9bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1222483-da58-448f-b74c-518da3c77bc3",
        "cursor": {
          "ref": "575088b7-91fa-4c31-a928-ceb9b07cce88",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8049cba0-7b30-4f13-a2b3-606d4fd55291"
        },
        "item": {
          "id": "d1222483-da58-448f-b74c-518da3c77bc3",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "974c11b2-9da0-47de-a02f-b9c251a05a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c64a204-f7f6-4e09-a3f3-607c37dba0ff",
        "cursor": {
          "ref": "914d2028-ba81-4c54-9164-41dbd8596a5f",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "948a1ba9-4077-4c94-b2dd-f78008630226"
        },
        "item": {
          "id": "4c64a204-f7f6-4e09-a3f3-607c37dba0ff",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c726537b-55b2-4022-8dbd-34d818bae6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627f21a6-b505-405f-b14e-45f5a253501f",
        "cursor": {
          "ref": "25f47029-0f39-413a-b2d5-9105a59c3198",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "3f6c0c17-70e4-4cfd-aec6-936fd4e89178"
        },
        "item": {
          "id": "627f21a6-b505-405f-b14e-45f5a253501f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cffe4ad2-3d52-409d-89f2-854651c443d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34d153ae-a8d0-4361-9b13-772b1151bf8d",
        "cursor": {
          "ref": "761aae0c-4d67-49c4-b1da-4ca10a9c358c",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d29b1fbd-28f2-4560-869d-aac0e8877516"
        },
        "item": {
          "id": "34d153ae-a8d0-4361-9b13-772b1151bf8d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fbf696e5-55c8-4c73-b17d-9284a0b35ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34187856-6ef2-48ed-867e-2d8c56a9cf01",
        "cursor": {
          "ref": "fdeb7ac9-2e0e-489b-af22-d95298da578e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fa6bd192-a331-4d8a-b29b-eaf2741773ad"
        },
        "item": {
          "id": "34187856-6ef2-48ed-867e-2d8c56a9cf01",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cd9085a4-83c6-4365-b27a-fba394a979a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc39a96c-7337-46ef-9944-f452817288f2",
        "cursor": {
          "ref": "2e06224d-ffac-488e-a7bb-ab1db1d80654",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9ff1af34-2109-47f8-92c4-5d096be29981"
        },
        "item": {
          "id": "fc39a96c-7337-46ef-9944-f452817288f2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "785c4a3b-679d-4f6e-a8ff-29235a459b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "249cd8e1-5e32-49c7-97ea-52a8e23e884f",
        "cursor": {
          "ref": "61911bc5-9b95-48c6-b877-f0bbe841d662",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1f409023-567d-4c87-b624-cf792e1c95b3"
        },
        "item": {
          "id": "249cd8e1-5e32-49c7-97ea-52a8e23e884f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "3414dbdc-b573-4244-be8a-2c459b1e9195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f364c4-93a1-483e-bb7e-51eb2eeb775e",
        "cursor": {
          "ref": "c893b2e0-1c0b-44f3-bf73-05cdaa6d5ed9",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "97184f3a-8922-4521-90df-ec6a7627604c"
        },
        "item": {
          "id": "f1f364c4-93a1-483e-bb7e-51eb2eeb775e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f8f2942a-6b28-4e08-b401-ef702154014b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547b5018-98b2-4922-b079-7ea0683f2d8f",
        "cursor": {
          "ref": "25d194eb-0730-4921-bea6-c1c7bbc3690e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0374de0d-db43-4182-8655-d10081bde60e"
        },
        "item": {
          "id": "547b5018-98b2-4922-b079-7ea0683f2d8f",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "334fcd48-b64c-4716-9df6-1a6170d203fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b7751d-abbf-4aa3-832b-65769b610130",
        "cursor": {
          "ref": "72e4abe7-d90e-4fe6-8c7b-c8ad578a8058",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9dba63f5-09fc-4372-bc01-8f36ac1340eb"
        },
        "item": {
          "id": "e9b7751d-abbf-4aa3-832b-65769b610130",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "66f15e18-64ad-48e6-8178-619ef3739d8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dc5151-8e46-4a80-9aaa-184299b80a4d",
        "cursor": {
          "ref": "877d03c1-d598-4639-83ac-b6cc805dd566",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "22751b58-ea3e-4e3e-86e4-a48a71b71ab2"
        },
        "item": {
          "id": "c3dc5151-8e46-4a80-9aaa-184299b80a4d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e3febd41-5013-4350-ad81-fff009dc94be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe98676-fba3-42c3-aee4-98e6226b15e4",
        "cursor": {
          "ref": "9c7c2be1-d017-49a0-83ee-8e7cc672b35c",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3c9ebf23-88dd-4278-b685-a3e67666d83a"
        },
        "item": {
          "id": "0fe98676-fba3-42c3-aee4-98e6226b15e4",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d9dd548a-c126-4d77-8b7b-7ff0e5e6bc81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c75ca5a-545b-48e1-b061-aecf04a82968",
        "cursor": {
          "ref": "28ccf8f2-34f5-4f12-abba-bc0a5177223c",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "7222a9a3-0900-4638-9963-08412723e7f8"
        },
        "item": {
          "id": "4c75ca5a-545b-48e1-b061-aecf04a82968",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "82a972cd-8b3f-4657-b0e3-25dbe9babf07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b48025-1fea-45e9-a536-1db9c2888897",
        "cursor": {
          "ref": "cc2864ca-ebae-43ee-a9e5-23f5b920cbbb",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "84cb1b1d-1769-4719-9f40-76cefd4ee413"
        },
        "item": {
          "id": "a5b48025-1fea-45e9-a536-1db9c2888897",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "44d8ba93-444a-4631-8b9b-50aac766b68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0204426-bfd2-4793-9ce9-c585c98891ca",
        "cursor": {
          "ref": "0f564bcc-d667-4fa0-8d1f-847ac67cd01d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "904b7200-9e93-49dc-b968-87ef20b46d48"
        },
        "item": {
          "id": "c0204426-bfd2-4793-9ce9-c585c98891ca",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1b91aa07-80b9-4c74-94d8-449cafbf9f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e748704e-f9a7-46b7-ad48-7d99eedc7233",
        "cursor": {
          "ref": "ecfed814-11de-4cc8-b7b6-88d48d290c93",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5ef0c56e-4c80-4522-b3bc-47b3461f3f41"
        },
        "item": {
          "id": "e748704e-f9a7-46b7-ad48-7d99eedc7233",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5a08a667-346b-4ff4-9f79-d69d10446435",
          "status": "OK",
          "code": 200,
          "responseTime": 228,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "d415acf6-e1bb-4e32-9995-4399866fe407",
        "cursor": {
          "ref": "41d0e45f-4732-4181-83ff-5666e04799b7",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5fa53471-c245-48ab-b20d-bf16b33186de"
        },
        "item": {
          "id": "d415acf6-e1bb-4e32-9995-4399866fe407",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1a0fcc2f-dd0b-48ef-9d4f-e7381b36fe89",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "19430d71-87cd-4bb0-953c-4b480ad2b177",
        "cursor": {
          "ref": "828af697-50ab-48cb-bb02-1151faf869ff",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8f352405-50c8-4a56-b5fe-211da7974f8d"
        },
        "item": {
          "id": "19430d71-87cd-4bb0-953c-4b480ad2b177",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "dc42f856-e09d-4e56-8861-ecbec1d26576",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1943c3a4-9f7f-4046-aab7-09231e4ab276",
        "cursor": {
          "ref": "d202e371-654d-4407-acdc-d6f7b147ea6b",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3ae6de28-a87c-4de7-bb76-dbd461149f6a"
        },
        "item": {
          "id": "1943c3a4-9f7f-4046-aab7-09231e4ab276",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3525f450-dbb6-4d89-b4d1-01e4b07a23c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acbb8df-6e5e-4f66-91fb-8bfafee0c40c",
        "cursor": {
          "ref": "4a2adcf9-e9de-4611-a888-a81df2e640c0",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e43d262e-b535-4c0f-88e5-dc92c8fae91c"
        },
        "item": {
          "id": "1acbb8df-6e5e-4f66-91fb-8bfafee0c40c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "54927142-784e-457c-adf1-72ff2d388ccf",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "0aa7a1bf-9ad3-4c87-8f3a-2f65714fc00e",
        "cursor": {
          "ref": "2e36723a-f558-432e-bdc2-5eb46b9ed03a",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b70d9f5b-10c0-4f69-936a-041491ce7d3d"
        },
        "item": {
          "id": "0aa7a1bf-9ad3-4c87-8f3a-2f65714fc00e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "69c466c6-15d7-4df1-b7be-481d1597ca9e",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "bdd6b78c-fde6-4323-ab9c-351289f82f07",
        "cursor": {
          "ref": "1ff483fc-92ea-4591-8c59-c0ce9a0cf0cf",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "70dead0e-c742-49a6-a042-a534f46f525d"
        },
        "item": {
          "id": "bdd6b78c-fde6-4323-ab9c-351289f82f07",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2e3ce788-5738-4bba-8ece-7cfddc9ae7ff",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "8e0c87e5-f0c4-4725-955d-df9e2c8694f7",
        "cursor": {
          "ref": "19f5e4e0-6a95-47d0-8944-974d649b9cf5",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4596c73e-7cc5-4a0e-a1a0-10e799ff6516"
        },
        "item": {
          "id": "8e0c87e5-f0c4-4725-955d-df9e2c8694f7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "820e5436-c434-4597-ac20-fb0e0a67df62",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "1840f945-4ada-4427-9b40-9d209a853d07",
        "cursor": {
          "ref": "8d53ec48-eba8-4e2a-b9bd-6c7053021cab",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1dbcb25d-4300-4cc2-9b85-9fa8542cafa8"
        },
        "item": {
          "id": "1840f945-4ada-4427-9b40-9d209a853d07",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1966f3ae-118f-41e5-bde1-e9f2d3833557",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ba1ee94d-b0c1-43ce-8ac7-768950157fb0",
        "cursor": {
          "ref": "3859513a-3132-45e1-9db5-ac9054cfe7a2",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8510dba8-0463-46f0-a0ce-f095ccaddd73"
        },
        "item": {
          "id": "ba1ee94d-b0c1-43ce-8ac7-768950157fb0",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d5923fca-0120-4682-9129-276d40a86adc",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "4f666d97-1a86-4bd5-bad1-3d6ce7d81708",
        "cursor": {
          "ref": "42d42b0d-c568-4870-ad1a-806144242e86",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "df554f96-7989-44bb-bbf8-a4316ec6ffab"
        },
        "item": {
          "id": "4f666d97-1a86-4bd5-bad1-3d6ce7d81708",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "57874b1f-0f10-4f43-9104-ed9b259cc8f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e65253-4eb5-41e3-9526-9bb824b9f801",
        "cursor": {
          "ref": "2beddfe4-19b1-44e0-afea-281b88572e0e",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ce176482-fc09-489f-aec6-d2b90ef00060"
        },
        "item": {
          "id": "09e65253-4eb5-41e3-9526-9bb824b9f801",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "708e2f8b-69bc-4fa4-9056-b5a539429612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dca0dce-3b8d-48fa-b1bf-8902b095471e",
        "cursor": {
          "ref": "f99f90b5-d0ac-4588-a287-cee49751851a",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "41089a54-238e-4edb-b826-d1a7b5e1bc9a"
        },
        "item": {
          "id": "3dca0dce-3b8d-48fa-b1bf-8902b095471e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "72b34c5d-7782-42c4-9210-694a8456e779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fe4481-4ee2-41a6-9210-a89f57ac4a67",
        "cursor": {
          "ref": "f0fecdd2-ea82-4397-8aa8-d5a91194087e",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7e5eb8b9-c416-440c-b842-8bc7d715fd49"
        },
        "item": {
          "id": "96fe4481-4ee2-41a6-9210-a89f57ac4a67",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "1607f5dc-b693-4588-9620-b2815e2c72c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bf6e8b6-f982-4ff0-baf2-a6b8e347fa8b",
        "cursor": {
          "ref": "60785a90-636a-4465-be66-0bfb163ddebe",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a529ddae-2c7c-4648-b2df-a4a984f60f1c"
        },
        "item": {
          "id": "3bf6e8b6-f982-4ff0-baf2-a6b8e347fa8b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8b884ed1-d90e-4ada-ae87-c009b1221a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd204c38-4aeb-4fbf-851a-d71c3222a685",
        "cursor": {
          "ref": "fbec4bcc-02c7-4116-91b6-49275951a3ec",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "79cc4992-7a71-41aa-8a02-bd3ee6537149"
        },
        "item": {
          "id": "bd204c38-4aeb-4fbf-851a-d71c3222a685",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5391a71d-b918-43b3-bc27-ef411531cff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d809a8c-a64a-43e4-b433-59d1bec41ca1",
        "cursor": {
          "ref": "42c77286-3f02-4c50-b2d9-d1a39cf86de9",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e43b14d8-8595-4415-8423-d6475ab0276a"
        },
        "item": {
          "id": "5d809a8c-a64a-43e4-b433-59d1bec41ca1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "e1843b80-374a-4bb1-abf9-d5c0848e00e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a8447d-d7f8-4d01-b9d0-7e9ba91a44fc",
        "cursor": {
          "ref": "d4781b3b-87f6-44a4-8df3-cee3e0883b40",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8f20d4d9-8b6c-4b03-96d5-8285d78fa736"
        },
        "item": {
          "id": "a8a8447d-d7f8-4d01-b9d0-7e9ba91a44fc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b722fa5e-a65d-4cf9-aae0-c078e1872467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85ccd20-cb26-41bd-8a06-3b0a0e3da69a",
        "cursor": {
          "ref": "4ea7e7c3-6aa3-4349-90cb-295ec0bbaa37",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1ab11e47-f588-498d-b511-6cf25a32e299"
        },
        "item": {
          "id": "f85ccd20-cb26-41bd-8a06-3b0a0e3da69a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5e9b9719-4864-4a2c-b9db-748e877557a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "007767d8-d197-4a25-aca0-0321c5f5f9ab",
        "cursor": {
          "ref": "b882a14f-f791-480f-9d79-50039a034cd9",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3aa0085b-0a95-45d2-898f-a92d0268bf58"
        },
        "item": {
          "id": "007767d8-d197-4a25-aca0-0321c5f5f9ab",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9b2d2d8c-ce55-4f36-beb5-8ce14af57f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ae1a19-ae9a-4fbf-9d27-d6888a5d95de",
        "cursor": {
          "ref": "8de4b5b6-42f0-4567-bf08-43e4a5ea24d3",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a3498dd1-a521-4909-a886-f545f7cea2a1"
        },
        "item": {
          "id": "85ae1a19-ae9a-4fbf-9d27-d6888a5d95de",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "13554be1-b2a6-48e9-8055-7ec5be26be0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0ef53d-4230-4d92-85e2-3162a5273ac2",
        "cursor": {
          "ref": "491c8812-99e9-4bc7-a055-534a1b8d6e30",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d05b1348-7efc-4429-a6f7-a5f7d216a01b"
        },
        "item": {
          "id": "ea0ef53d-4230-4d92-85e2-3162a5273ac2",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "9073e38b-0c56-43e0-9efa-0bbf5981ad78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c0080c-0526-44cb-896d-62833dacf550",
        "cursor": {
          "ref": "b68db44c-e046-4fec-9a37-6405ec8a8006",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "70d00992-36c3-4df1-b419-6847896eeac8"
        },
        "item": {
          "id": "52c0080c-0526-44cb-896d-62833dacf550",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d954eff2-6691-41cc-9ece-e1cb616a1fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d11917-ed26-4a2a-ad77-ca0ee4d3d7ef",
        "cursor": {
          "ref": "ab4f03d2-6b04-4854-95a8-d55b43e0655d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6ee0636e-9c2a-4296-894f-d5b5d56c63e0"
        },
        "item": {
          "id": "43d11917-ed26-4a2a-ad77-ca0ee4d3d7ef",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1da49348-b6e7-4fd7-9366-c5962e403c91",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "dc3499fd-6440-4475-9828-5d736e456cc0",
        "cursor": {
          "ref": "6487e3a0-6ca4-44ff-b8b7-40090272b301",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "570b93dd-bb1c-4b1a-af9c-4ad983fbad79"
        },
        "item": {
          "id": "dc3499fd-6440-4475-9828-5d736e456cc0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a8ac15b6-f52e-4220-82bc-75ea5606cec1",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "5f92b31a-c222-4e8f-b24d-74ae4559cda5",
        "cursor": {
          "ref": "21d75af0-8b0b-454e-9d04-2e7776d840b6",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "61472bc7-0983-4600-b753-e094a0e8f54c"
        },
        "item": {
          "id": "5f92b31a-c222-4e8f-b24d-74ae4559cda5",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2efda37e-4ead-4295-a632-a025396bd627",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8f0399a2-ae30-4ed9-b582-6f1de84fdcbb",
        "cursor": {
          "ref": "f2d25b4c-bb09-4d84-a35b-d6b5d57c73d1",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5ac3bee1-aeb2-4961-8684-fc013e0dd0ba"
        },
        "item": {
          "id": "8f0399a2-ae30-4ed9-b582-6f1de84fdcbb",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "cd40a439-710c-491d-afc0-22c1eef2f62e",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "0244dab1-7032-4b61-b9d8-cc07e56f10c8",
        "cursor": {
          "ref": "677997f0-2805-4e0e-a483-04a6996fe8e7",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "076e6222-d556-45a1-84b7-711dca39b5d6"
        },
        "item": {
          "id": "0244dab1-7032-4b61-b9d8-cc07e56f10c8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3168bcc5-a955-469d-98ae-f841be0c5de3",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "602bb720-1978-4890-a408-a662d94a81ec",
        "cursor": {
          "ref": "151783a8-a7c1-430c-b2eb-6b339c8104b9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "59096895-3536-4157-a147-2db9c56ef585"
        },
        "item": {
          "id": "602bb720-1978-4890-a408-a662d94a81ec",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9de9e6ec-c16a-4c78-a8db-0599c28161f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9d09b0c-355d-4b39-a5d1-044db9db3e77",
        "cursor": {
          "ref": "7fb91afb-d611-4c59-9e46-5df28b3028d5",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "07cece12-6d12-47e8-899c-f9236196f315"
        },
        "item": {
          "id": "a9d09b0c-355d-4b39-a5d1-044db9db3e77",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "40324f42-024d-4782-ab06-5b88e7a4c68f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e94748-3c62-409b-ab58-6867e760c8ae",
        "cursor": {
          "ref": "1ad2ec80-3b8c-42c2-a625-4d7aefb51016",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "08364ce1-a132-4cc8-9f80-d57942489f1d"
        },
        "item": {
          "id": "10e94748-3c62-409b-ab58-6867e760c8ae",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ccc9cd3c-fd92-4052-b8ca-983221174c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa04324a-e624-4f06-b1dc-84528a63e02a",
        "cursor": {
          "ref": "ee611f10-32ae-4125-8d35-534f2b1aa69e",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e490ea14-075a-4f4d-90db-b9c05d0d9fed"
        },
        "item": {
          "id": "fa04324a-e624-4f06-b1dc-84528a63e02a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "52a9f28d-80a3-4ac2-a410-2cdfb565c269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c470ea-1765-4584-bc27-2212e77bece7",
        "cursor": {
          "ref": "792cde05-b701-45e8-8843-bcc24e635365",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "737d9280-c572-4b8c-a1a9-b5533a665cbb"
        },
        "item": {
          "id": "06c470ea-1765-4584-bc27-2212e77bece7",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c57649f0-d0fb-4e42-8df8-612a0f4837ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfca3c2a-c18c-4740-850b-947f750fec81",
        "cursor": {
          "ref": "b971ab22-9a4e-410c-91ce-6e7991f4dffd",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "dabdec49-9c5d-494e-a12a-3bd5796be001"
        },
        "item": {
          "id": "cfca3c2a-c18c-4740-850b-947f750fec81",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b7a1e084-9146-464b-b9e9-4212d0baf7fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c50cbf-aef4-45ba-9801-35d7e44a887c",
        "cursor": {
          "ref": "9d917268-737e-488e-b272-c0e73e599fed",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "8bb2bf28-f0d3-49c0-b1b9-7cc141328b44"
        },
        "item": {
          "id": "a0c50cbf-aef4-45ba-9801-35d7e44a887c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0d0ff8d2-3921-4230-9262-c3fb3fdd17b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7aa22f-c7b2-42a4-9440-ad96215e2755",
        "cursor": {
          "ref": "da1e4a1b-0121-48c1-91ce-2cf0ebc3a30e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2be656a3-754d-4763-90dc-0075ac1941be"
        },
        "item": {
          "id": "7d7aa22f-c7b2-42a4-9440-ad96215e2755",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "32832434-b343-48df-8d72-7a68c5a56a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b48657ef-3925-42d2-91cb-98099e0c7be2",
        "cursor": {
          "ref": "fb6784f2-283a-4507-be57-610242467831",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "194d49b6-de74-4186-9d84-d44c08ace91c"
        },
        "item": {
          "id": "b48657ef-3925-42d2-91cb-98099e0c7be2",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8e008fb5-fc22-4731-a660-b0ec8fb08de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a8d510-c741-4a00-b4f7-49478ee53aba",
        "cursor": {
          "ref": "dc522bc8-612b-4d9d-a077-cec7ceb75505",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "207fe812-bd02-4786-a725-f0001ccd321f"
        },
        "item": {
          "id": "92a8d510-c741-4a00-b4f7-49478ee53aba",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "dee619c0-188a-4bae-8639-ba673c44c5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d98da07-ce59-4655-9338-ef9c3a457d6c",
        "cursor": {
          "ref": "3e8f0626-6054-4ae5-b5be-9da3ac94f300",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "819a728a-f987-4101-902e-bdb0e68c6fab"
        },
        "item": {
          "id": "6d98da07-ce59-4655-9338-ef9c3a457d6c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "910e8618-b354-4dbe-a418-898410127ae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afc76280-8931-4309-82d4-0dbd5917cd63",
        "cursor": {
          "ref": "d785c74c-8c8b-44c2-910a-8f01dc9af1d2",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "e812749e-d238-4f68-b5f5-e2f1fcddaa2d"
        },
        "item": {
          "id": "afc76280-8931-4309-82d4-0dbd5917cd63",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "41d98923-e1f8-496f-aaf7-b6fd5263d54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2498ca9e-52c3-497b-b8eb-9e7e91fdc35c",
        "cursor": {
          "ref": "2f43c4e0-2b66-4ca4-8dd0-80f77ec0a324",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "5842e4f7-2b83-434f-b495-e7ae000cc46e"
        },
        "item": {
          "id": "2498ca9e-52c3-497b-b8eb-9e7e91fdc35c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d9bdd3ea-4e1b-4e17-8b0c-9efe7418ec57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e629398-7c03-4bc4-ae96-55a33a043ba1",
        "cursor": {
          "ref": "1b7e1e83-268d-4c0a-878b-46255a312350",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "26c830b0-19b4-4e12-9df7-588e38a3d2ad"
        },
        "item": {
          "id": "1e629398-7c03-4bc4-ae96-55a33a043ba1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "7ec912a5-896a-4aad-babc-a260ddcffc23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4287f115-7c76-4ccb-b562-de63aec1bff0",
        "cursor": {
          "ref": "a943a7ab-21a6-416b-a383-6dde92801139",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "87141e59-1413-4bdc-9c33-c49741f82a94"
        },
        "item": {
          "id": "4287f115-7c76-4ccb-b562-de63aec1bff0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "16e6c3f7-1c4c-490d-aff9-9ff7b830ad70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b6e997-8178-4682-a705-36d99b21bca6",
        "cursor": {
          "ref": "7bde3b2b-64df-4aa3-bcf3-9f45c5403568",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b1aab028-ccd8-44eb-9e41-894ea2485bd8"
        },
        "item": {
          "id": "e7b6e997-8178-4682-a705-36d99b21bca6",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "355a1abf-135d-466e-8be6-4479af823178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b153ee-6a48-4e21-807d-2960add69c1f",
        "cursor": {
          "ref": "ed46e737-7414-4f22-9154-6d851782f20e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "a31eff03-1342-432c-8055-f67f8f8d292f"
        },
        "item": {
          "id": "17b153ee-6a48-4e21-807d-2960add69c1f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0f9a4be2-694a-4b68-b40b-a3ffae8ee679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d50bb9b0-360c-4995-a5ce-86ff3b0dc027",
        "cursor": {
          "ref": "c5e86430-8d7d-448e-9641-af53a9ca89d4",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "139b686c-63e1-471a-a1af-5949f5bbb5bd"
        },
        "item": {
          "id": "d50bb9b0-360c-4995-a5ce-86ff3b0dc027",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e66299e3-b230-4aa8-a439-3ace57460b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db05c24-281e-43ea-91ad-b720c535d131",
        "cursor": {
          "ref": "4099bb59-8d9a-4248-bfb2-43cf7048ee13",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "64069093-9105-4a5a-bf42-363d6381f1ea"
        },
        "item": {
          "id": "3db05c24-281e-43ea-91ad-b720c535d131",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "fb6c68c2-8082-4956-8a34-092f26782456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18696d2d-2cca-4a8c-a306-a8fb9775e75d",
        "cursor": {
          "ref": "4b84d94b-cf9d-4afd-8e1f-e6b719763fd7",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "6fb9b0bc-4ab5-47b4-84bf-2ebd8553b2d5"
        },
        "item": {
          "id": "18696d2d-2cca-4a8c-a306-a8fb9775e75d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c85bdb84-26e6-4a18-908f-69e6d50126df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c621df66-bc21-4699-bcb0-8a7620f377f4",
        "cursor": {
          "ref": "d27382a1-099e-45b9-8098-314fbf461b6c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c3700302-05ec-49a5-8691-32973d812dea"
        },
        "item": {
          "id": "c621df66-bc21-4699-bcb0-8a7620f377f4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "732ff607-4ded-4be4-aefb-fc627dcdba1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d1c2c7-52e2-437c-b530-1a84fcac4e87",
        "cursor": {
          "ref": "3d79a8c8-b8db-4e8e-9fc4-b58ee429a6a8",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "d40a1c30-be04-4616-b490-a53d97a5540a"
        },
        "item": {
          "id": "c1d1c2c7-52e2-437c-b530-1a84fcac4e87",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b4ba0b9b-a790-4ef4-a5ac-b63ae3d01a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4daa000-d272-4230-a2d1-db67061aa165",
        "cursor": {
          "ref": "5ca46632-3d6c-4489-951a-ce2f0bd0ac34",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1bc57627-6034-44f3-81ed-60e2e5e7c48c"
        },
        "item": {
          "id": "e4daa000-d272-4230-a2d1-db67061aa165",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "47e68e58-111b-4905-9bf3-829fe20ef47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974cd68f-ef03-45b9-b041-ec9e38a0070e",
        "cursor": {
          "ref": "0aad49f7-ca46-429a-8a0d-b943e7183306",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "7a316d53-4ad2-41b5-99eb-2b505534346e"
        },
        "item": {
          "id": "974cd68f-ef03-45b9-b041-ec9e38a0070e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3cd97235-b297-4f7c-841f-45be8135c1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8bc3306-f467-48fa-bc38-c792279ce53b",
        "cursor": {
          "ref": "5ba11911-f388-41e9-80c2-b47579fe3381",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e4a425de-e7b5-477d-afc7-68c85353a27a"
        },
        "item": {
          "id": "f8bc3306-f467-48fa-bc38-c792279ce53b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d0892058-cf87-48a3-b5a9-55a082b7ee20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "349e8608-f738-44b7-9345-d19bb271fa25",
        "cursor": {
          "ref": "e312fd4f-9f44-4c17-a144-f8e2ed74aaae",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "27c82148-a5ef-4e9c-b34b-ec4f8f7fa98e"
        },
        "item": {
          "id": "349e8608-f738-44b7-9345-d19bb271fa25",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "2325486e-7efb-463c-a444-2f7677c9693a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e5c34d-56db-4f4f-a569-84a5d1d99651",
        "cursor": {
          "ref": "52a657ea-6959-4bb4-ae85-33d62d6d8ff4",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "9d2772fe-6a7c-482e-8b2e-a171ab1aa480"
        },
        "item": {
          "id": "a0e5c34d-56db-4f4f-a569-84a5d1d99651",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "91e5bcf3-69d8-48d4-b37f-2b27854c3b8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e49ce55-2579-4fb4-9ee4-5a0601a4bbde",
        "cursor": {
          "ref": "d66e5a90-6523-4373-938e-d1a00ad217b9",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "09a67d7f-1250-4711-ae4b-77ba44b072aa"
        },
        "item": {
          "id": "4e49ce55-2579-4fb4-9ee4-5a0601a4bbde",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2c525ceb-dfb0-4457-b18b-bcc6a3a9ce76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4c593f-346d-4a1b-9e6a-faa873451e01",
        "cursor": {
          "ref": "820fada9-b726-42c0-9171-35106303d2a4",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "433dda3e-d185-4087-b1e0-6a57f7995698"
        },
        "item": {
          "id": "4d4c593f-346d-4a1b-9e6a-faa873451e01",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b3a63655-4596-447a-9bee-724b9c6b4ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b9d5c4-e20d-4ce1-90b7-dfd61514193d",
        "cursor": {
          "ref": "88ec1ada-f7ee-4459-83d9-c297d95c57b0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "e39cd2f7-cae1-441b-96e3-8748e403272b"
        },
        "item": {
          "id": "f6b9d5c4-e20d-4ce1-90b7-dfd61514193d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7009ab1d-e44c-441c-aa85-2f3f9723f2ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b6c253-6532-446d-9de9-fe3f8af97dbb",
        "cursor": {
          "ref": "1fd40304-d6bf-4d84-bc2e-78c2addab2e6",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d84fbc6f-e079-4fc7-a3d7-6bf95c8392ad"
        },
        "item": {
          "id": "89b6c253-6532-446d-9de9-fe3f8af97dbb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b57630b2-e3ac-4e46-a50d-e20b0b0115a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4259fc86-17c9-4b6b-bea2-8e1593a87df5",
        "cursor": {
          "ref": "4c78dd1a-bd36-4543-ab6e-2e8e8a5f81cd",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3b267212-cf26-4779-bfa8-5e901178c7a9"
        },
        "item": {
          "id": "4259fc86-17c9-4b6b-bea2-8e1593a87df5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "514a739b-9ed5-4e03-8332-8689b6c3810b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fcef695-ad88-4a93-8bbe-2f40d90897a9",
        "cursor": {
          "ref": "a4d93c82-89fe-4ace-8d7c-1c74eadfa604",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "43a7c835-a951-4ef7-8296-0cb06228cf7a"
        },
        "item": {
          "id": "1fcef695-ad88-4a93-8bbe-2f40d90897a9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f006eb64-3185-4066-a123-5b2281b87afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4a8c82-bd33-4f19-b4c7-59bb1fbb1555",
        "cursor": {
          "ref": "16d8be7d-c58c-4a9d-a3d9-c6110dcbaaf7",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "03e87adf-c7d1-492e-9448-c413d15c0ca5"
        },
        "item": {
          "id": "dd4a8c82-bd33-4f19-b4c7-59bb1fbb1555",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "d33f2f50-687d-4d36-8f60-a21263e0c687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796f13ed-a9ca-47ee-a6e9-d022789e88c6",
        "cursor": {
          "ref": "0d30e502-2ee6-4cd6-a78b-23e59fc6b910",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6fc51d95-9ac9-4877-bb4e-92fe31e7c5a3"
        },
        "item": {
          "id": "796f13ed-a9ca-47ee-a6e9-d022789e88c6",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "13a1afb4-346c-4435-9455-642440c77d03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7dc46ad-e721-4a94-9d39-d581778db204",
        "cursor": {
          "ref": "818e0e47-f404-44ad-bf53-f87ead40205f",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "92db0aa2-b44e-4e05-9eef-60164ac782d4"
        },
        "item": {
          "id": "e7dc46ad-e721-4a94-9d39-d581778db204",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5e89995f-875f-4e72-803d-3858985f6bc8",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "04b6f688-5412-4aeb-b9b9-4954100e2550",
        "cursor": {
          "ref": "23a2cd22-b4df-4fef-a588-1a24ed2bd83e",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "08f8da83-dab2-4b72-b449-7b112b8d52e0"
        },
        "item": {
          "id": "04b6f688-5412-4aeb-b9b9-4954100e2550",
          "name": "credentials_verify"
        },
        "response": {
          "id": "5565d35e-aeda-4786-ba26-7362d979a2c6",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "202b9b5c-3aef-49c5-aa0c-9db47acb823d",
        "cursor": {
          "ref": "447b2c41-5441-42fc-8199-c005a32cbb4f",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4c218e64-2305-4861-a86a-b5f31d422188"
        },
        "item": {
          "id": "202b9b5c-3aef-49c5-aa0c-9db47acb823d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9de03c7d-067c-4890-9d55-fa783778c4ad",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5d26a9-d716-48f4-8887-bfcfea4afa34",
        "cursor": {
          "ref": "16606b9e-72d2-4724-af6e-63a7779b93e7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "77069e38-b816-4b96-8976-7b5a6ac7b5a4"
        },
        "item": {
          "id": "6c5d26a9-d716-48f4-8887-bfcfea4afa34",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "536bc740-4e5c-406e-9bb9-040d839f7ca1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5d26a9-d716-48f4-8887-bfcfea4afa34",
        "cursor": {
          "ref": "16606b9e-72d2-4724-af6e-63a7779b93e7",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "77069e38-b816-4b96-8976-7b5a6ac7b5a4"
        },
        "item": {
          "id": "6c5d26a9-d716-48f4-8887-bfcfea4afa34",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "536bc740-4e5c-406e-9bb9-040d839f7ca1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69119b32-3593-4314-9da9-4eec565404b6",
        "cursor": {
          "ref": "22214a87-22e9-4030-ae58-92032f210f47",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "88e791e1-aa1e-4e08-98b8-c9442cde1a7b"
        },
        "item": {
          "id": "69119b32-3593-4314-9da9-4eec565404b6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e542293e-753d-4440-8b60-463622a572a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076f9970-6ed5-41d1-a129-cc344c8822ef",
        "cursor": {
          "ref": "69f48127-d2ed-4b46-8e6a-28602973a830",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "70ce8b79-90ed-48ad-910c-f223b20b7c30"
        },
        "item": {
          "id": "076f9970-6ed5-41d1-a129-cc344c8822ef",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "c51be979-59b4-4c62-8535-2decf1d8aec2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}